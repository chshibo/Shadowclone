	.text
	.file	"mbuffer.c"
	.globl	dump_dpb                # -- Begin function dump_dpb
	.p2align	4, 0x90
	.type	dump_dpb,@function
dump_dpb:                               # @dump_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	dump_dpb, .Lfunc_end0-dump_dpb
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize              # -- Begin function getDpbSize
	.p2align	4, 0x90
	.type	getDpbSize,@function
getDpbSize:                             # @getDpbSize
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_getDpbSize.22
	callq	getDpbSize.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_getDpbSize.35
	.cfi_def_cfa %rbp, 16
	callq	getDpbSize.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	getDpbSize, .Lfunc_end1-getDpbSize
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb                # -- Begin function init_dpb
	.p2align	4, 0x90
	.type	init_dpb,@function
init_dpb:                               # @init_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_init_dpb.15
	callq	init_dpb.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_init_dpb.27
	.cfi_def_cfa %rbp, 16
	callq	init_dpb.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	init_dpb, .Lfunc_end2-init_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_dpb                # -- Begin function free_dpb
	.p2align	4, 0x90
	.type	free_dpb,@function
free_dpb:                               # @free_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpq	$0, dpb
	je	.LBB3_6
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB3_2:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB3_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_2
.LBB3_5:                                # %for.end
	movq	dpb, %rdi
	callq	free
	movq	$0, dpb
.LBB3_6:                                # %if.end
	cmpq	$0, dpb+8
	je	.LBB3_8
# %bb.7:                                # %if.then2
	movq	dpb+8, %rdi
	callq	free
.LBB3_8:                                # %if.end3
	cmpq	$0, dpb+16
	je	.LBB3_10
# %bb.9:                                # %if.then5
	movq	dpb+16, %rdi
	callq	free
.LBB3_10:                               # %if.end6
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movl	$0, -4(%rbp)
.LBB3_11:                               # %for.cond7
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB3_16
# %bb.12:                               # %for.body9
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	cmpq	$0, listX(,%rax,8)
	je	.LBB3_14
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	movq	listX(,%rax,8), %rdi
	callq	free
	movl	-4(%rbp), %eax
	movq	$0, listX(,%rax,8)
.LBB3_14:                               # %if.end18
                                        #   in Loop: Header=BB3_11 Depth=1
	jmp	.LBB3_15
.LBB3_15:                               # %for.inc19
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_11
.LBB3_16:                               # %for.end21
	movl	$0, dpb+48
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	free_dpb, .Lfunc_end3-free_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_frame_store        # -- Begin function free_frame_store
	.p2align	4, 0x90
	.type	free_frame_store,@function
free_frame_store:                       # @free_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB4_8
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB4_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
.LBB4_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB4_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
.LBB4_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB4_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
.LBB4_7:                                # %if.end14
	movq	-8(%rbp), %rdi
	callq	free
.LBB4_8:                                # %if.end15
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	free_frame_store, .Lfunc_end4-free_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_frame_store       # -- Begin function alloc_frame_store
	.p2align	4, 0x90
	.type	alloc_frame_store,@function
alloc_frame_store:                      # @alloc_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %edi
	movl	$64, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -8(%rbp)
	cmpq	-8(%rbp), %rcx
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB5_2:                                # %if.end
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end5:
	.size	alloc_frame_store, .Lfunc_end5-alloc_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture  # -- Begin function alloc_storable_picture
	.p2align	4, 0x90
	.type	alloc_storable_picture,@function
alloc_storable_picture:                 # @alloc_storable_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_alloc_storable_picture.1
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_alloc_storable_picture.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_alloc_storable_picture.165
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.165
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_alloc_storable_picture.239
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.239
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_alloc_storable_picture.244
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.244
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_alloc_storable_picture.249
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.249
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_alloc_storable_picture.264
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.264
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_alloc_storable_picture.266
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.266
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	alloc_storable_picture, .Lfunc_end6-alloc_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	free_storable_picture   # -- Begin function free_storable_picture
	.p2align	4, 0x90
	.type	free_storable_picture,@function
free_storable_picture:                  # @free_storable_picture
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB7_32
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 6480(%rax)
	je	.LBB7_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	6480(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6480(%rax)
.LBB7_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 6488(%rax)
	je	.LBB7_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	6488(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6488(%rax)
.LBB7_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 6496(%rax)
	je	.LBB7_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	6496(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6496(%rax)
.LBB7_7:                                # %if.end14
	movq	-8(%rbp), %rax
	cmpq	$0, 6504(%rax)
	je	.LBB7_9
# %bb.8:                                # %if.then16
	movq	-8(%rbp), %rax
	movq	6504(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6504(%rax)
.LBB7_9:                                # %if.end19
	movq	-8(%rbp), %rax
	cmpq	$0, 6512(%rax)
	je	.LBB7_11
# %bb.10:                               # %if.then21
	movq	-8(%rbp), %rax
	movq	6512(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6512(%rax)
.LBB7_11:                               # %if.end24
	movq	-8(%rbp), %rax
	cmpq	$0, 6520(%rax)
	je	.LBB7_13
# %bb.12:                               # %if.then26
	movq	-8(%rbp), %rax
	movq	6520(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6520(%rax)
.LBB7_13:                               # %if.end29
	movq	-8(%rbp), %rax
	cmpq	$0, 6424(%rax)
	je	.LBB7_15
# %bb.14:                               # %if.then31
	movq	-8(%rbp), %rax
	movq	6424(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6424(%rax)
.LBB7_15:                               # %if.end34
	movq	-8(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB7_17
# %bb.16:                               # %if.then36
	movq	-8(%rbp), %rax
	movq	6432(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6432(%rax)
.LBB7_17:                               # %if.end39
	movq	-8(%rbp), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB7_19
# %bb.18:                               # %if.then41
	movq	-8(%rbp), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6448(%rax)
.LBB7_19:                               # %if.end44
	movq	-8(%rbp), %rax
	cmpq	$0, 6464(%rax)
	je	.LBB7_21
# %bb.20:                               # %if.then46
	movq	-8(%rbp), %rax
	movq	6464(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6464(%rax)
.LBB7_21:                               # %if.end49
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB7_24
# %bb.22:                               # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB7_24
# %bb.23:                               # %lor.lhs.false52
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB7_29
.LBB7_24:                               # %if.then54
	movq	-8(%rbp), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB7_26
# %bb.25:                               # %if.then56
	movq	-8(%rbp), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6440(%rax)
.LBB7_26:                               # %if.end59
	movq	-8(%rbp), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB7_28
# %bb.27:                               # %if.then61
	movq	-8(%rbp), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB7_28:                               # %if.end64
	jmp	.LBB7_29
.LBB7_29:                               # %if.end65
	movq	-8(%rbp), %rax
	cmpq	$0, 6472(%rax)
	je	.LBB7_31
# %bb.30:                               # %if.then67
	movq	-8(%rbp), %rax
	movq	6472(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6472(%rax)
.LBB7_31:                               # %if.end70
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB7_32:                               # %if.end71
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	free_storable_picture, .Lfunc_end7-free_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	is_short_ref            # -- Begin function is_short_ref
	.p2align	4, 0x90
	.type	is_short_ref,@function
is_short_ref:                           # @is_short_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB8_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
	xorb	$-1, %al
.LBB8_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	is_short_ref, .Lfunc_end8-is_short_ref
	.cfi_endproc
                                        # -- End function
	.globl	is_long_ref             # -- Begin function is_long_ref
	.p2align	4, 0x90
	.type	is_long_ref,@function
is_long_ref:                            # @is_long_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB9_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
.LBB9_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	is_long_ref, .Lfunc_end9-is_long_ref
	.cfi_endproc
                                        # -- End function
	.globl	init_lists              # -- Begin function init_lists
	.p2align	4, 0x90
	.type	init_lists,@function
init_lists:                             # @init_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_init_lists.41
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_init_lists.150
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.150
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_init_lists.171
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.171
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_init_lists.178
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.178
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_init_lists.202
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.202
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_init_lists.204
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.204
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_init_lists.221
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.221
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_init_lists.230
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.230
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	init_lists, .Lfunc_end10-init_lists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc
	.type	compare_pic_by_pic_num_desc,@function
compare_pic_by_pic_num_desc:            # @compare_pic_by_pic_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_7
# %bb.1:                                # %func_compare_pic_by_pic_num_desc.43
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_compare_pic_by_pic_num_desc.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_compare_pic_by_pic_num_desc.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.97
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_compare_pic_by_pic_num_desc.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.137
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_compare_pic_by_pic_num_desc.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.174
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_compare_pic_by_pic_num_desc.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
	jmp	.LBB11_6
.Lfunc_end11:
	.size	compare_pic_by_pic_num_desc, .Lfunc_end11-compare_pic_by_pic_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc
	.type	compare_pic_by_lt_pic_num_asc,@function
compare_pic_by_lt_pic_num_asc:          # @compare_pic_by_lt_pic_num_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_compare_pic_by_lt_pic_num_asc.145
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.145
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_compare_pic_by_lt_pic_num_asc.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.223
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_compare_pic_by_lt_pic_num_asc.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.227
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_compare_pic_by_lt_pic_num_asc.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.247
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_compare_pic_by_lt_pic_num_asc.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.253
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_compare_pic_by_lt_pic_num_asc.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.258
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	compare_pic_by_lt_pic_num_asc, .Lfunc_end12-compare_pic_by_lt_pic_num_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc
	.type	compare_fs_by_frame_num_desc,@function
compare_fs_by_frame_num_desc:           # @compare_fs_by_frame_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_7
# %bb.1:                                # %func_compare_fs_by_frame_num_desc.25
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_compare_fs_by_frame_num_desc.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_compare_fs_by_frame_num_desc.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_compare_fs_by_frame_num_desc.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.156
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_compare_fs_by_frame_num_desc.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.181
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_compare_fs_by_frame_num_desc.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.182
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
	jmp	.LBB13_6
.Lfunc_end13:
	.size	compare_fs_by_frame_num_desc, .Lfunc_end13-compare_fs_by_frame_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list
	.type	gen_pic_list_from_frame_list,@function
gen_pic_list_from_frame_list:           # @gen_pic_list_from_frame_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_gen_pic_list_from_frame_list.39
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	gen_pic_list_from_frame_list.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_gen_pic_list_from_frame_list.48
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_gen_pic_list_from_frame_list.183
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.183
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_gen_pic_list_from_frame_list.191
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.191
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_gen_pic_list_from_frame_list.252
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.252
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_gen_pic_list_from_frame_list.261
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.261
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_gen_pic_list_from_frame_list.262
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.262
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_gen_pic_list_from_frame_list.263
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.263
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	gen_pic_list_from_frame_list, .Lfunc_end14-gen_pic_list_from_frame_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc
	.type	compare_fs_by_lt_pic_idx_asc,@function
compare_fs_by_lt_pic_idx_asc:           # @compare_fs_by_lt_pic_idx_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_compare_fs_by_lt_pic_idx_asc.99
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.99
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_compare_fs_by_lt_pic_idx_asc.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.117
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_compare_fs_by_lt_pic_idx_asc.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_compare_fs_by_lt_pic_idx_asc.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_compare_fs_by_lt_pic_idx_asc.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_compare_fs_by_lt_pic_idx_asc.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.243
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	compare_fs_by_lt_pic_idx_asc, .Lfunc_end15-compare_fs_by_lt_pic_idx_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc
	.type	compare_pic_by_poc_desc,@function
compare_pic_by_poc_desc:                # @compare_pic_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_7
# %bb.1:                                # %func_compare_pic_by_poc_desc.44
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_compare_pic_by_poc_desc.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_compare_pic_by_poc_desc.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.187
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_compare_pic_by_poc_desc.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.192
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_compare_pic_by_poc_desc.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.214
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_compare_pic_by_poc_desc.242
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.242
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
	jmp	.LBB16_6
.Lfunc_end16:
	.size	compare_pic_by_poc_desc, .Lfunc_end16-compare_pic_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc
	.type	compare_pic_by_poc_asc,@function
compare_pic_by_poc_asc:                 # @compare_pic_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_7
# %bb.1:                                # %func_compare_pic_by_poc_asc.87
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_compare_pic_by_poc_asc.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.106
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_compare_pic_by_poc_asc.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.119
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_compare_pic_by_poc_asc.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.160
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_compare_pic_by_poc_asc.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.163
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_compare_pic_by_poc_asc.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.188
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
	jmp	.LBB17_6
.Lfunc_end17:
	.size	compare_pic_by_poc_asc, .Lfunc_end17-compare_pic_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc
	.type	compare_fs_by_poc_desc,@function
compare_fs_by_poc_desc:                 # @compare_fs_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_7
# %bb.1:                                # %func_compare_fs_by_poc_desc.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_compare_fs_by_poc_desc.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.135
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_compare_fs_by_poc_desc.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_compare_fs_by_poc_desc.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.195
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_compare_fs_by_poc_desc.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.196
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_compare_fs_by_poc_desc.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.208
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
	jmp	.LBB18_6
.Lfunc_end18:
	.size	compare_fs_by_poc_desc, .Lfunc_end18-compare_fs_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc
	.type	compare_fs_by_poc_asc,@function
compare_fs_by_poc_asc:                  # @compare_fs_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_compare_fs_by_poc_asc.2
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_compare_fs_by_poc_asc.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_compare_fs_by_poc_asc.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_compare_fs_by_poc_asc.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_compare_fs_by_poc_asc.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.157
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_compare_fs_by_poc_asc.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.168
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	compare_fs_by_poc_asc, .Lfunc_end19-compare_fs_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists        # -- Begin function init_mbaff_lists
	.p2align	4, 0x90
	.type	init_mbaff_lists,@function
init_mbaff_lists:                       # @init_mbaff_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_2
# %bb.1:                                # %func_init_mbaff_lists.34
	callq	init_mbaff_lists.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_init_mbaff_lists.93
	.cfi_def_cfa %rbp, 16
	callq	init_mbaff_lists.93
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end20:
	.size	init_mbaff_lists, .Lfunc_end20-init_mbaff_lists
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list    # -- Begin function reorder_ref_pic_list
	.p2align	4, 0x90
	.type	reorder_ref_pic_list,@function
reorder_ref_pic_list:                   # @reorder_ref_pic_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_reorder_ref_pic_list.5
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	reorder_ref_pic_list.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_reorder_ref_pic_list.57
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_reorder_ref_pic_list.83
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_reorder_ref_pic_list.128
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.128
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_reorder_ref_pic_list.241
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.241
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_reorder_ref_pic_list.248
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.248
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_reorder_ref_pic_list.250
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.250
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_reorder_ref_pic_list.256
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.256
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	reorder_ref_pic_list, .Lfunc_end21-reorder_ref_pic_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term
	.type	reorder_short_term,@function
reorder_short_term:                     # @reorder_short_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_reorder_short_term.89
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.89
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_reorder_short_term.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.116
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_reorder_short_term.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.130
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_reorder_short_term.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.143
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_reorder_short_term.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.147
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_reorder_short_term.151
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.151
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_reorder_short_term.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.189
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_reorder_short_term.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.199
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	reorder_short_term, .Lfunc_end22-reorder_short_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term
	.type	reorder_long_term,@function
reorder_long_term:                      # @reorder_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_reorder_long_term.65
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.65
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_reorder_long_term.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.120
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_reorder_long_term.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.134
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_reorder_long_term.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.154
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_reorder_long_term.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.155
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_reorder_long_term.159
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.159
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_reorder_long_term.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.186
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_reorder_long_term.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.225
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	reorder_long_term, .Lfunc_end23-reorder_long_term
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list         # -- Begin function update_ref_list
	.p2align	4, 0x90
	.type	update_ref_list,@function
update_ref_list:                        # @update_ref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_2
# %bb.1:                                # %func_update_ref_list.13
	callq	update_ref_list.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_update_ref_list.74
	.cfi_def_cfa %rbp, 16
	callq	update_ref_list.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end24:
	.size	update_ref_list, .Lfunc_end24-update_ref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference
	.type	is_short_term_reference,@function
is_short_term_reference:                # @is_short_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_2
# %bb.1:                                # %func_is_short_term_reference.80
	movq	%rbx, %rdi
	callq	is_short_term_reference.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_is_short_term_reference.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_short_term_reference.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end25:
	.size	is_short_term_reference, .Lfunc_end25-is_short_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list       # -- Begin function update_ltref_list
	.p2align	4, 0x90
	.type	update_ltref_list,@function
update_ltref_list:                      # @update_ltref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_update_ltref_list.9
	callq	update_ltref_list.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_update_ltref_list.32
	.cfi_def_cfa %rbp, 16
	callq	update_ltref_list.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	update_ltref_list, .Lfunc_end26-update_ltref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference
	.type	is_long_term_reference,@function
is_long_term_reference:                 # @is_long_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_is_long_term_reference.55
	movq	%rbx, %rdi
	callq	is_long_term_reference.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_is_long_term_reference.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_long_term_reference.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	is_long_term_reference, .Lfunc_end27-is_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx # -- Begin function mm_update_max_long_term_frame_idx
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx,@function
mm_update_max_long_term_frame_idx:      # @mm_update_max_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_2
# %bb.1:                                # %func_mm_update_max_long_term_frame_idx.38
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_mm_update_max_long_term_frame_idx.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.112
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	mm_update_max_long_term_frame_idx, .Lfunc_end28-mm_update_max_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_long_term_reference
	.type	unmark_for_long_term_reference,@function
unmark_for_long_term_reference:         # @unmark_for_long_term_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB29_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB29_5
# %bb.4:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_5:                               # %if.end11
	jmp	.LBB29_6
.LBB29_6:                               # %if.end12
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB29_10
# %bb.7:                                # %if.then14
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_9
# %bb.8:                                # %if.then17
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_9:                               # %if.end26
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_10:                              # %if.end30
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	unmark_for_long_term_reference, .Lfunc_end29-unmark_for_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb    # -- Begin function store_picture_in_dpb
	.p2align	4, 0x90
	.type	store_picture_in_dpb,@function
store_picture_in_dpb:                   # @store_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_store_picture_in_dpb.61
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_store_picture_in_dpb.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_store_picture_in_dpb.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.90
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_store_picture_in_dpb.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_store_picture_in_dpb.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.184
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_store_picture_in_dpb.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.210
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_store_picture_in_dpb.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.226
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_store_picture_in_dpb.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.245
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	store_picture_in_dpb, .Lfunc_end30-store_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management
	.type	idr_memory_management,@function
idr_memory_management:                  # @idr_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_2
# %bb.1:                                # %func_idr_memory_management.68
	movq	%rbx, %rdi
	callq	idr_memory_management.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_idr_memory_management.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	idr_memory_management.179
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end31:
	.size	idr_memory_management, .Lfunc_end31-idr_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management
	.type	adaptive_memory_management,@function
adaptive_memory_management:             # @adaptive_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_2
# %bb.1:                                # %func_adaptive_memory_management.8
	movq	%rbx, %rdi
	callq	adaptive_memory_management.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_adaptive_memory_management.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	adaptive_memory_management.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	adaptive_memory_management, .Lfunc_end32-adaptive_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb
	.type	insert_picture_in_dpb,@function
insert_picture_in_dpb:                  # @insert_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_2
# %bb.1:                                # %func_insert_picture_in_dpb.10
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_insert_picture_in_dpb.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	insert_picture_in_dpb, .Lfunc_end33-insert_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management
	.type	sliding_window_memory_management,@function
sliding_window_memory_management:       # @sliding_window_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_2
# %bb.1:                                # %func_sliding_window_memory_management.17
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_sliding_window_memory_management.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	sliding_window_memory_management, .Lfunc_end34-sliding_window_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc
	.type	get_smallest_poc,@function
get_smallest_poc:                       # @get_smallest_poc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_7
# %bb.1:                                # %func_get_smallest_poc.49
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_get_smallest_poc.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_get_smallest_poc.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_get_smallest_poc.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.101
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_get_smallest_poc.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_get_smallest_poc.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.198
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
	jmp	.LBB35_6
.Lfunc_end35:
	.size	get_smallest_poc, .Lfunc_end35-get_smallest_poc
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame # -- Begin function replace_top_pic_with_frame
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame,@function
replace_top_pic_with_frame:             # @replace_top_pic_with_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_replace_top_pic_with_frame.58
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_replace_top_pic_with_frame.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_replace_top_pic_with_frame.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_replace_top_pic_with_frame.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_replace_top_pic_with_frame.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.138
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_replace_top_pic_with_frame.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.161
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_replace_top_pic_with_frame.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.197
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_replace_top_pic_with_frame.217
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.217
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	replace_top_pic_with_frame, .Lfunc_end36-replace_top_pic_with_frame
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field         # -- Begin function dpb_split_field
	.p2align	4, 0x90
	.type	dpb_split_field,@function
dpb_split_field:                        # @dpb_split_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_dpb_split_field.71
	movq	%rbx, %rdi
	callq	dpb_split_field.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_dpb_split_field.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_dpb_split_field.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_dpb_split_field.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.193
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_dpb_split_field.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_dpb_split_field.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.259
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_dpb_split_field.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.260
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_dpb_split_field.265
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.265
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	dpb_split_field, .Lfunc_end37-dpb_split_field
	.cfi_endproc
                                        # -- End function
	.globl	flush_dpb               # -- Begin function flush_dpb
	.p2align	4, 0x90
	.type	flush_dpb,@function
flush_dpb:                              # @flush_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	jmp	.LBB38_5
.LBB38_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	callq	remove_unused_frame_from_dpb
	cmpl	$0, %eax
	je	.LBB38_7
# %bb.6:                                # %while.body
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_5
.LBB38_7:                               # %while.end
	jmp	.LBB38_8
.LBB38_8:                               # %while.cond1
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, dpb+28
	je	.LBB38_10
# %bb.9:                                # %while.body3
                                        #   in Loop: Header=BB38_8 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB38_8
.LBB38_10:                              # %while.end4
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end38:
	.size	flush_dpb, .Lfunc_end38-flush_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_reference
	.type	unmark_for_reference,@function
unmark_for_reference:                   # @unmark_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB39_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB39_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_5:                               # %if.end8
	jmp	.LBB39_6
.LBB39_6:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB39_10
# %bb.7:                                # %if.then11
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_9
# %bb.8:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_9:                               # %if.end19
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_10:                              # %if.end21
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB39_12
# %bb.11:                               # %if.then24
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6456(%rax)
.LBB39_12:                              # %if.end29
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB39_14
# %bb.13:                               # %if.then32
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6448(%rax)
.LBB39_14:                              # %if.end37
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB39_16
# %bb.15:                               # %if.then40
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6440(%rax)
.LBB39_16:                              # %if.end45
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end39:
	.size	unmark_for_reference, .Lfunc_end39-unmark_for_reference
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids       # -- Begin function gen_field_ref_ids
	.p2align	4, 0x90
	.type	gen_field_ref_ids,@function
gen_field_ref_ids:                      # @gen_field_ref_ids
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_gen_field_ref_ids.12
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_gen_field_ref_ids.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.40
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_gen_field_ref_ids.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_gen_field_ref_ids.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.177
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_gen_field_ref_ids.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.206
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_gen_field_ref_ids.235
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.235
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_gen_field_ref_ids.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.236
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_gen_field_ref_ids.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.240
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	gen_field_ref_ids, .Lfunc_end40-gen_field_ref_ids
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field       # -- Begin function dpb_combine_field
	.p2align	4, 0x90
	.type	dpb_combine_field,@function
dpb_combine_field:                      # @dpb_combine_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_dpb_combine_field.6
	movq	%rbx, %rdi
	callq	dpb_combine_field.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_dpb_combine_field.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_dpb_combine_field.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_dpb_combine_field.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.127
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_dpb_combine_field.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_dpb_combine_field.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.136
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_dpb_combine_field.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_dpb_combine_field.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.215
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	dpb_combine_field, .Lfunc_end41-dpb_combine_field
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer # -- Begin function alloc_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer,@function
alloc_ref_pic_list_reordering_buffer:   # @alloc_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB42_2
# %bb.1:                                # %func_alloc_ref_pic_list_reordering_buffer.16
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_alloc_ref_pic_list_reordering_buffer.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end42:
	.size	alloc_ref_pic_list_reordering_buffer, .Lfunc_end42-alloc_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	free_ref_pic_list_reordering_buffer # -- Begin function free_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	free_ref_pic_list_reordering_buffer,@function
free_ref_pic_list_reordering_buffer:    # @free_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB43_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB43_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB43_4
# %bb.3:                                # %if.then3
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB43_4:                               # %if.end5
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB43_6
# %bb.5:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	free
.LBB43_6:                               # %if.end9
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_8
# %bb.7:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	free
.LBB43_8:                               # %if.end16
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then18
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB43_10:                              # %if.end20
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB43_12
# %bb.11:                               # %if.then22
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
.LBB43_12:                              # %if.end24
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end43:
	.size	free_ref_pic_list_reordering_buffer, .Lfunc_end43-free_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap      # -- Begin function fill_frame_num_gap
	.p2align	4, 0x90
	.type	fill_frame_num_gap,@function
fill_frame_num_gap:                     # @fill_frame_num_gap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB44_9
# %bb.1:                                # %func_fill_frame_num_gap.4
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_fill_frame_num_gap.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_3:                               # %func_fill_frame_num_gap.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_fill_frame_num_gap.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_5:                               # %func_fill_frame_num_gap.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.152
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_6:                               # %func_fill_frame_num_gap.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_7:                               # %func_fill_frame_num_gap.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_8:                               # %func_fill_frame_num_gap.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.228
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB44_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB44_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB44_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB44_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB44_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB44_7
	jmp	.LBB44_8
.Lfunc_end44:
	.size	fill_frame_num_gap, .Lfunc_end44-fill_frame_num_gap
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated         # -- Begin function alloc_colocated
	.p2align	4, 0x90
	.type	alloc_colocated,@function
alloc_colocated:                        # @alloc_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB45_9
# %bb.1:                                # %func_alloc_colocated.29
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_alloc_colocated.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_3:                               # %func_alloc_colocated.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_4:                               # %func_alloc_colocated.172
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.172
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_alloc_colocated.203
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.203
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_6:                               # %func_alloc_colocated.211
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.211
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_7:                               # %func_alloc_colocated.219
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.219
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_8:                               # %func_alloc_colocated.231
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.231
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB45_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB45_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB45_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB45_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB45_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB45_7
	jmp	.LBB45_8
.Lfunc_end45:
	.size	alloc_colocated, .Lfunc_end45-alloc_colocated
	.cfi_endproc
                                        # -- End function
	.globl	free_colocated          # -- Begin function free_colocated
	.p2align	4, 0x90
	.type	free_colocated,@function
free_colocated:                         # @free_colocated
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB46_12
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	1600(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	1608(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	1616(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	.LBB46_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 1624(%rax)
.LBB46_3:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 4872(%rax)
	je	.LBB46_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	4872(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4872(%rax)
.LBB46_5:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB46_11
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	3216(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	3224(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	3232(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 3240(%rax)
	je	.LBB46_8
# %bb.7:                                # %if.then15
	movq	-8(%rbp), %rax
	movq	3240(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 3240(%rax)
.LBB46_8:                               # %if.end18
	movq	-8(%rbp), %rax
	movq	4832(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	4840(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	4848(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 4856(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then22
	movq	-8(%rbp), %rax
	movq	4856(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4856(%rax)
.LBB46_10:                              # %if.end25
	jmp	.LBB46_11
.LBB46_11:                              # %if.end26
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB46_12:                              # %if.end27
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end46:
	.size	free_colocated, .Lfunc_end46-free_colocated
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated       # -- Begin function compute_colocated
	.p2align	4, 0x90
	.type	compute_colocated,@function
compute_colocated:                      # @compute_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB47_9
# %bb.1:                                # %func_compute_colocated.33
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_2:                               # %func_compute_colocated.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_3:                               # %func_compute_colocated.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_4:                               # %func_compute_colocated.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_5:                               # %func_compute_colocated.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_compute_colocated.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.146
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_7:                               # %func_compute_colocated.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.162
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_compute_colocated.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.176
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB47_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB47_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB47_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB47_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB47_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB47_7
	jmp	.LBB47_8
.Lfunc_end47:
	.size	compute_colocated, .Lfunc_end47-compute_colocated
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic
	.type	get_short_term_pic,@function
get_short_term_pic:                     # @get_short_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB48_7
# %bb.1:                                # %func_get_short_term_pic.111
	movl	%ebx, %edi
	callq	get_short_term_pic.111
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_2:                               # %func_get_short_term_pic.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.115
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_3:                               # %func_get_short_term_pic.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.122
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_4:                               # %func_get_short_term_pic.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.132
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_get_short_term_pic.166
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.166
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_6:                               # %func_get_short_term_pic.173
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.173
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB48_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB48_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB48_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB48_5
	jmp	.LBB48_6
.Lfunc_end48:
	.size	get_short_term_pic, .Lfunc_end48-get_short_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic
	.type	get_long_term_pic,@function
get_long_term_pic:                      # @get_long_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB49_7
# %bb.1:                                # %func_get_long_term_pic.37
	movl	%ebx, %edi
	callq	get_long_term_pic.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_get_long_term_pic.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_3:                               # %func_get_long_term_pic.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_4:                               # %func_get_long_term_pic.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_get_long_term_pic.222
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.222
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_get_long_term_pic.234
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.234
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB49_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB49_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB49_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB49_5
	jmp	.LBB49_6
.Lfunc_end49:
	.size	get_long_term_pic, .Lfunc_end49-get_long_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference
	.type	mm_unmark_short_term_for_reference,@function
mm_unmark_short_term_for_reference:     # @mm_unmark_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB50_9
# %bb.1:                                # %func_mm_unmark_short_term_for_reference.85
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_mm_unmark_short_term_for_reference.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_3:                               # %func_mm_unmark_short_term_for_reference.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_4:                               # %func_mm_unmark_short_term_for_reference.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.141
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_mm_unmark_short_term_for_reference.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.169
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_mm_unmark_short_term_for_reference.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.213
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_7:                               # %func_mm_unmark_short_term_for_reference.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.218
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_8:                               # %func_mm_unmark_short_term_for_reference.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.229
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB50_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB50_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB50_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB50_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB50_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB50_7
	jmp	.LBB50_8
.Lfunc_end50:
	.size	mm_unmark_short_term_for_reference, .Lfunc_end50-mm_unmark_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference
	.type	mm_unmark_long_term_for_reference,@function
mm_unmark_long_term_for_reference:      # @mm_unmark_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB51_7
# %bb.1:                                # %func_mm_unmark_long_term_for_reference.21
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_2:                               # %func_mm_unmark_long_term_for_reference.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_3:                               # %func_mm_unmark_long_term_for_reference.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_4:                               # %func_mm_unmark_long_term_for_reference.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_5:                               # %func_mm_unmark_long_term_for_reference.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.164
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_mm_unmark_long_term_for_reference.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.167
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB51_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB51_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB51_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB51_5
	jmp	.LBB51_6
.Lfunc_end51:
	.size	mm_unmark_long_term_for_reference, .Lfunc_end51-mm_unmark_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx
	.type	mm_assign_long_term_frame_idx,@function
mm_assign_long_term_frame_idx:          # @mm_assign_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB52_9
# %bb.1:                                # %func_mm_assign_long_term_frame_idx.82
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_mm_assign_long_term_frame_idx.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.104
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_3:                               # %func_mm_assign_long_term_frame_idx.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_4:                               # %func_mm_assign_long_term_frame_idx.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.139
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_5:                               # %func_mm_assign_long_term_frame_idx.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.153
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_mm_assign_long_term_frame_idx.232
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.232
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_7:                               # %func_mm_assign_long_term_frame_idx.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.254
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_8:                               # %func_mm_assign_long_term_frame_idx.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.257
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB52_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB52_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB52_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB52_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB52_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB52_7
	jmp	.LBB52_8
.Lfunc_end52:
	.size	mm_assign_long_term_frame_idx, .Lfunc_end52-mm_assign_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term
	.type	mm_mark_current_picture_long_term,@function
mm_mark_current_picture_long_term:      # @mm_mark_current_picture_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB53_2
# %bb.1:                                # %func_mm_mark_current_picture_long_term.11
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_mm_mark_current_picture_long_term.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.207
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end53:
	.size	mm_mark_current_picture_long_term, .Lfunc_end53-mm_mark_current_picture_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x
	.type	get_pic_num_x,@function
get_pic_num_x:                          # @get_pic_num_x
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB54_7
# %bb.1:                                # %func_get_pic_num_x.95
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_get_pic_num_x.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.105
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_3:                               # %func_get_pic_num_x.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.209
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_4:                               # %func_get_pic_num_x.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.224
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_5:                               # %func_get_pic_num_x.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.237
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_get_pic_num_x.238
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.238
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB54_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB54_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB54_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB54_5
	jmp	.LBB54_6
.Lfunc_end54:
	.size	get_pic_num_x, .Lfunc_end54-get_pic_num_x
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx
	.type	unmark_long_term_frame_for_reference_by_frame_idx,@function
unmark_long_term_frame_for_reference_by_frame_idx: # @unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB55_2
# %bb.1:                                # %func_unmark_long_term_frame_for_reference_by_frame_idx.98
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_2:                               # %func_unmark_long_term_frame_for_reference_by_frame_idx.205
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.205
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end55:
	.size	unmark_long_term_frame_for_reference_by_frame_idx, .Lfunc_end55-unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx
	.type	unmark_long_term_field_for_reference_by_frame_idx,@function
unmark_long_term_field_for_reference_by_frame_idx: # @unmark_long_term_field_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB56_9
# %bb.1:                                # %func_unmark_long_term_field_for_reference_by_frame_idx.77
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.77
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_2:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.140
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_3:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.149
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.149
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_4:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.175
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.175
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.233
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.246
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.246
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_7:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.251
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.251
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_8:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.255
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.255
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB56_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB56_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB56_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB56_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB56_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB56_7
	jmp	.LBB56_8
.Lfunc_end56:
	.size	unmark_long_term_field_for_reference_by_frame_idx, .Lfunc_end56-unmark_long_term_field_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term
	.type	mark_pic_long_term,@function
mark_pic_long_term:                     # @mark_pic_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB57_9
# %bb.1:                                # %func_mark_pic_long_term.7
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_mark_pic_long_term.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_3:                               # %func_mark_pic_long_term.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_4:                               # %func_mark_pic_long_term.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_mark_pic_long_term.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.158
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_6:                               # %func_mark_pic_long_term.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.194
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_7:                               # %func_mark_pic_long_term.201
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.201
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_8:                               # %func_mark_pic_long_term.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.212
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB57_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB57_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB57_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB57_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB57_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB57_7
	jmp	.LBB57_8
.Lfunc_end57:
	.size	mark_pic_long_term, .Lfunc_end57-mark_pic_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_short_term_for_reference
	.type	mm_unmark_all_short_term_for_reference,@function
mm_unmark_all_short_term_for_reference: # @mm_unmark_all_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	callq	update_ref_list
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end58:
	.size	mm_unmark_all_short_term_for_reference, .Lfunc_end58-mm_unmark_all_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_long_term_for_reference
	.type	mm_unmark_all_long_term_for_reference,@function
mm_unmark_all_long_term_for_reference:  # @mm_unmark_all_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%edi, %edi
	callq	mm_update_max_long_term_frame_idx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end59:
	.size	mm_unmark_all_long_term_for_reference, .Lfunc_end59-mm_unmark_all_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb
	.type	remove_unused_frame_from_dpb,@function
remove_unused_frame_from_dpb:           # @remove_unused_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %func_remove_unused_frame_from_dpb.109
	callq	remove_unused_frame_from_dpb.109
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_2:                               # %func_remove_unused_frame_from_dpb.114
	.cfi_def_cfa %rbp, 16
	callq	remove_unused_frame_from_dpb.114
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end60:
	.size	remove_unused_frame_from_dpb, .Lfunc_end60-remove_unused_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference
	.type	is_used_for_reference,@function
is_used_for_reference:                  # @is_used_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %func_is_used_for_reference.24
	movq	%rbx, %rdi
	callq	is_used_for_reference.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_is_used_for_reference.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_used_for_reference.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end61:
	.size	is_used_for_reference, .Lfunc_end61-is_used_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb
	.type	remove_frame_from_dpb,@function
remove_frame_from_dpb:                  # @remove_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB62_9
# %bb.1:                                # %func_remove_frame_from_dpb.20
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_remove_frame_from_dpb.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_3:                               # %func_remove_frame_from_dpb.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_4:                               # %func_remove_frame_from_dpb.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_5:                               # %func_remove_frame_from_dpb.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_remove_frame_from_dpb.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_7:                               # %func_remove_frame_from_dpb.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_remove_frame_from_dpb.185
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.185
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB62_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB62_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB62_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB62_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB62_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB62_7
	jmp	.LBB62_8
.Lfunc_end62:
	.size	remove_frame_from_dpb, .Lfunc_end62-remove_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb
	.type	output_one_frame_from_dpb,@function
output_one_frame_from_dpb:              # @output_one_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB63_2
# %bb.1:                                # %func_output_one_frame_from_dpb.63
	callq	output_one_frame_from_dpb.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_2:                               # %func_output_one_frame_from_dpb.110
	.cfi_def_cfa %rbp, 16
	callq	output_one_frame_from_dpb.110
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end63:
	.size	output_one_frame_from_dpb, .Lfunc_end63-output_one_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.1 # -- Begin function alloc_storable_picture.1
	.p2align	4, 0x90
	.type	alloc_storable_picture.1,@function
alloc_storable_picture.1:               # @alloc_storable_picture.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$451016499, -40(%rbp)   # imm = 0x1AE1F733
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB64_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB64_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB64_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB64_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB64_6
.LBB64_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB64_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB64_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB64_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB64_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB64_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$451016499, -40(%rbp)   # imm = 0x1AE1F733
	jne	.LBB64_12
.LBB64_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_11
.Lfunc_end64:
	.size	alloc_storable_picture.1, .Lfunc_end64-alloc_storable_picture.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.2
	.type	compare_fs_by_poc_asc.2,@function
compare_fs_by_poc_asc.2:                # @compare_fs_by_poc_asc.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1902373639, -16(%rbp)  # imm = 0x7163EB07
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB65_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB65_5
.LBB65_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB65_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB65_5
.LBB65_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB65_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1902373639, -16(%rbp)  # imm = 0x7163EB07
	jne	.LBB65_7
.LBB65_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_6
.Lfunc_end65:
	.size	compare_fs_by_poc_asc.2, .Lfunc_end65-compare_fs_by_poc_asc.2
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.3
	.type	compare_fs_by_poc_desc.3,@function
compare_fs_by_poc_desc.3:               # @compare_fs_by_poc_desc.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2018629312, -16(%rbp)  # imm = 0x7851D6C0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB66_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB66_5
.LBB66_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB66_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB66_5
.LBB66_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB66_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2018629312, -16(%rbp)  # imm = 0x7851D6C0
	jne	.LBB66_7
.LBB66_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_6
.Lfunc_end66:
	.size	compare_fs_by_poc_desc.3, .Lfunc_end66-compare_fs_by_poc_desc.3
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.4    # -- Begin function fill_frame_num_gap.4
	.p2align	4, 0x90
	.type	fill_frame_num_gap.4,@function
fill_frame_num_gap.4:                   # @fill_frame_num_gap.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$622870324, -36(%rbp)   # imm = 0x25203F34
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB67_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB67_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB67_1
.LBB67_3:                               # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$622870324, -36(%rbp)   # imm = 0x25203F34
	jne	.LBB67_5
.LBB67_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_4
.Lfunc_end67:
	.size	fill_frame_num_gap.4, .Lfunc_end67-fill_frame_num_gap.4
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.5  # -- Begin function reorder_ref_pic_list.5
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.5,@function
reorder_ref_pic_list.5:                 # @reorder_ref_pic_list.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$671124209, -60(%rbp)   # imm = 0x28008AF1
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB68_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_3
.LBB68_2:                               # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB68_3:                               # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB68_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB68_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB68_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB68_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB68_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB68_7:                               # %if.end9
                                        #   in Loop: Header=BB68_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB68_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB68_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB68_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB68_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_12
.LBB68_11:                              # %if.else28
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB68_12:                              # %if.end33
                                        #   in Loop: Header=BB68_4 Depth=1
	jmp	.LBB68_17
.LBB68_13:                              # %if.else34
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB68_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_16
.LBB68_15:                              # %if.else46
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB68_16:                              # %if.end51
                                        #   in Loop: Header=BB68_4 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %if.end52
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB68_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB68_20
.LBB68_19:                              # %if.else56
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB68_20:                              # %if.end57
                                        #   in Loop: Header=BB68_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB68_22
.LBB68_21:                              # %if.else58
                                        #   in Loop: Header=BB68_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB68_22:                              # %if.end61
                                        #   in Loop: Header=BB68_4 Depth=1
	jmp	.LBB68_23
.LBB68_23:                              # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_24:                              # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$671124209, -60(%rbp)   # imm = 0x28008AF1
	jne	.LBB68_26
.LBB68_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_26:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_25
.Lfunc_end68:
	.size	reorder_ref_pic_list.5, .Lfunc_end68-reorder_ref_pic_list.5
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.6     # -- Begin function dpb_combine_field.6
	.p2align	4, 0x90
	.type	dpb_combine_field.6,@function
dpb_combine_field.6:                    # @dpb_combine_field.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2074846286, -32(%rbp)  # imm = 0x7BABA44E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB69_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_1
.LBB69_4:                               # %for.end
	movl	$0, -4(%rbp)
.LBB69_5:                               # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB69_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_8:                               # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB69_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB69_11
.LBB69_10:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB69_11:                              # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB69_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB69_13:                              # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB69_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB69_15:                              # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB69_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB69_17:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB69_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB69_19:                              # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB69_20:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB69_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB69_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB69_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB69_24
.LBB69_23:                              # %cond.false217
                                        #   in Loop: Header=BB69_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB69_24:                              # %cond.end226
                                        #   in Loop: Header=BB69_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB69_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_20
.LBB69_26:                              # %for.end235
	movl	$0, -4(%rbp)
.LBB69_27:                              # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB69_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB69_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB69_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB69_31
.LBB69_30:                              # %cond.false269
                                        #   in Loop: Header=BB69_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB69_31:                              # %cond.end278
                                        #   in Loop: Header=BB69_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_27
.LBB69_33:                              # %for.end287
	movl	$0, -4(%rbp)
.LBB69_34:                              # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	$0, -20(%rbp)
.LBB69_36:                              # %for.cond295
                                        #   Parent Loop BB69_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB69_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB69_40
.LBB69_39:                              # %cond.false445
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_40
.LBB69_40:                              # %cond.end446
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB69_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB69_43
.LBB69_42:                              # %cond.false462
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_43
.LBB69_43:                              # %cond.end463
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB69_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB69_46
.LBB69_45:                              # %cond.false479
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB69_46
.LBB69_46:                              # %cond.end480
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB69_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB69_49
.LBB69_48:                              # %cond.false501
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB69_49
.LBB69_49:                              # %cond.end502
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB69_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB69_52
.LBB69_51:                              # %cond.false647
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_52
.LBB69_52:                              # %cond.end648
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB69_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB69_55
.LBB69_54:                              # %cond.false665
                                        #   in Loop: Header=BB69_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_55
.LBB69_55:                              # %cond.end666
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB69_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB69_58
.LBB69_57:                              # %cond.false683
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB69_58
.LBB69_58:                              # %cond.end684
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB69_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB69_61
.LBB69_60:                              # %cond.false706
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB69_61
.LBB69_61:                              # %cond.end707
                                        #   in Loop: Header=BB69_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_36
.LBB69_63:                              # %for.end723
                                        #   in Loop: Header=BB69_34 Depth=1
	jmp	.LBB69_64
.LBB69_64:                              # %for.inc724
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_34
.LBB69_65:                              # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB69_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB69_76
.LBB69_67:                              # %if.then729
	movl	$0, -4(%rbp)
.LBB69_68:                              # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB69_68 Depth=1
	movl	$0, -20(%rbp)
.LBB69_70:                              # %for.cond737
                                        #   Parent Loop BB69_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB69_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB69_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_70
.LBB69_73:                              # %for.end758
                                        #   in Loop: Header=BB69_68 Depth=1
	jmp	.LBB69_74
.LBB69_74:                              # %for.inc759
                                        #   in Loop: Header=BB69_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_68
.LBB69_75:                              # %for.end761
	jmp	.LBB69_76
.LBB69_76:                              # %if.end762
	cmpl	$2074846286, -32(%rbp)  # imm = 0x7BABA44E
	jne	.LBB69_78
.LBB69_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_78:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_77
.Lfunc_end69:
	.size	dpb_combine_field.6, .Lfunc_end69-dpb_combine_field.6
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.7
	.type	mark_pic_long_term.7,@function
mark_pic_long_term.7:                   # @mark_pic_long_term.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1909446309, -24(%rbp)  # imm = 0x71CFD6A5
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB70_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB70_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB70_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB70_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB70_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB70_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB70_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB70_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB70_39
.LBB70_7:                               # %if.end
                                        #   in Loop: Header=BB70_2 Depth=1
	jmp	.LBB70_8
.LBB70_8:                               # %if.end50
                                        #   in Loop: Header=BB70_2 Depth=1
	jmp	.LBB70_9
.LBB70_9:                               # %for.inc
                                        #   in Loop: Header=BB70_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_2
.LBB70_10:                              # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB70_39
.LBB70_11:                              # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB70_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB70_14
.LBB70_13:                              # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB70_14:                              # %if.end55
	movl	$0, -4(%rbp)
.LBB70_15:                              # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB70_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB70_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB70_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB70_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB70_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB70_22:                              # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB70_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB70_24:                              # %if.end123
	jmp	.LBB70_39
.LBB70_25:                              # %if.end124
                                        #   in Loop: Header=BB70_15 Depth=1
	jmp	.LBB70_26
.LBB70_26:                              # %if.end125
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB70_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB70_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB70_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB70_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB70_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB70_32:                              # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB70_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB70_34:                              # %if.end194
	jmp	.LBB70_39
.LBB70_35:                              # %if.end195
                                        #   in Loop: Header=BB70_15 Depth=1
	jmp	.LBB70_36
.LBB70_36:                              # %if.end196
                                        #   in Loop: Header=BB70_15 Depth=1
	jmp	.LBB70_37
.LBB70_37:                              # %for.inc197
                                        #   in Loop: Header=BB70_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_15
.LBB70_38:                              # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB70_39:                              # %if.end201
	cmpl	$1909446309, -24(%rbp)  # imm = 0x71CFD6A5
	jne	.LBB70_41
.LBB70_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_40
.Lfunc_end70:
	.size	mark_pic_long_term.7, .Lfunc_end70-mark_pic_long_term.7
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.8
	.type	adaptive_memory_management.8,@function
adaptive_memory_management.8:           # @adaptive_memory_management.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1589788233, -20(%rbp)  # imm = 0x5EC23E49
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB71_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB71_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB71_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	.LJTI71_0(,%rax,8), %rax
	jmpq	*%rax
.LBB71_4:                               # %sw.bb
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB71_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB71_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB71_6:                               # %if.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_14
.LBB71_7:                               # %sw.bb2
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB71_14
.LBB71_8:                               # %sw.bb3
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB71_14
.LBB71_9:                               # %sw.bb4
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB71_14
.LBB71_10:                              # %sw.bb6
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB71_14
.LBB71_11:                              # %sw.bb7
                                        #   in Loop: Header=BB71_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB71_14
.LBB71_12:                              # %sw.bb9
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB71_14
.LBB71_13:                              # %sw.default
                                        #   in Loop: Header=BB71_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB71_14:                              # %sw.epilog
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB71_1
.LBB71_15:                              # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB71_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB71_21
	jmp	.LBB71_17
.LBB71_17:                              # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB71_19
	jmp	.LBB71_18
.LBB71_18:                              # %if.then15
	subl	$2, %eax
	je	.LBB71_20
	jmp	.LBB71_22
.LBB71_19:                              # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB71_22
.LBB71_20:                              # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB71_22
.LBB71_21:                              # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB71_22:                              # %sw.epilog19
	callq	flush_dpb
.LBB71_23:                              # %if.end20
	cmpl	$1589788233, -20(%rbp)  # imm = 0x5EC23E49
	jne	.LBB71_25
.LBB71_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_24
.Lfunc_end71:
	.size	adaptive_memory_management.8, .Lfunc_end71-adaptive_memory_management.8
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI71_0:
	.quad	.LBB71_4
	.quad	.LBB71_7
	.quad	.LBB71_8
	.quad	.LBB71_9
	.quad	.LBB71_10
	.quad	.LBB71_11
	.quad	.LBB71_12
                                        # -- End function
	.text
	.globl	update_ltref_list.9     # -- Begin function update_ltref_list.9
	.p2align	4, 0x90
	.type	update_ltref_list.9,@function
update_ltref_list.9:                    # @update_ltref_list.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$416856445, -12(%rbp)   # imm = 0x18D8B97D
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB72_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB72_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_4:                               # %if.end
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_5
.LBB72_5:                               # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_1
.LBB72_6:                               # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB72_7:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB72_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB72_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB72_7
.LBB72_9:                               # %while.end
	cmpl	$416856445, -12(%rbp)   # imm = 0x18D8B97D
	jne	.LBB72_11
.LBB72_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_10
.Lfunc_end72:
	.size	update_ltref_list.9, .Lfunc_end72-update_ltref_list.9
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.10
	.type	insert_picture_in_dpb.10,@function
insert_picture_in_dpb.10:               # @insert_picture_in_dpb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$69632380, -20(%rbp)    # imm = 0x426817C
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB73_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB73_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB73_5
	jmp	.LBB73_3
.LBB73_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB73_10
	jmp	.LBB73_4
.LBB73_4:                               # %if.end
	subl	$2, %eax
	je	.LBB73_18
	jmp	.LBB73_26
.LBB73_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB73_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB73_8:                               # %if.end7
	jmp	.LBB73_9
.LBB73_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB73_26
.LBB73_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB73_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB73_13:                              # %if.end24
	jmp	.LBB73_14
.LBB73_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB73_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB73_17
.LBB73_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB73_17:                              # %if.end29
	jmp	.LBB73_26
.LBB73_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB73_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB73_21:                              # %if.end47
	jmp	.LBB73_22
.LBB73_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB73_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB73_25
.LBB73_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB73_25:                              # %if.end55
	jmp	.LBB73_26
.LBB73_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$69632380, -20(%rbp)    # imm = 0x426817C
	jne	.LBB73_28
.LBB73_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_27
.Lfunc_end73:
	.size	insert_picture_in_dpb.10, .Lfunc_end73-insert_picture_in_dpb.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.11
	.type	mm_mark_current_picture_long_term.11,@function
mm_mark_current_picture_long_term.11:   # @mm_mark_current_picture_long_term.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$237160769, -20(%rbp)   # imm = 0xE22C941
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB74_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB74_3
.LBB74_2:                               # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB74_3:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$237160769, -20(%rbp)   # imm = 0xE22C941
	jne	.LBB74_5
.LBB74_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_4
.Lfunc_end74:
	.size	mm_mark_current_picture_long_term.11, .Lfunc_end74-mm_mark_current_picture_long_term.11
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.12    # -- Begin function gen_field_ref_ids.12
	.p2align	4, 0x90
	.type	gen_field_ref_ids.12,@function
gen_field_ref_ids.12:                   # @gen_field_ref_ids.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1272061023, -28(%rbp)  # imm = 0x4BD21C5F
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond1
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB75_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB75_7
.LBB75_6:                               # %cond.false
                                        #   in Loop: Header=BB75_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_7
.LBB75_7:                               # %cond.end
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB75_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB75_10
.LBB75_9:                               # %cond.false32
                                        #   in Loop: Header=BB75_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_10
.LBB75_10:                              # %cond.end33
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_12:                              # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_13
.LBB75_13:                              # %for.inc45
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_1
.LBB75_14:                              # %for.end47
	cmpl	$1272061023, -28(%rbp)  # imm = 0x4BD21C5F
	jne	.LBB75_16
.LBB75_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_15
.Lfunc_end75:
	.size	gen_field_ref_ids.12, .Lfunc_end75-gen_field_ref_ids.12
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.13      # -- Begin function update_ref_list.13
	.p2align	4, 0x90
	.type	update_ref_list.13,@function
update_ref_list.13:                     # @update_ref_list.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1427424575, -12(%rbp)  # imm = 0x5514C53F
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB76_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB76_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB76_4:                               # %if.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_5
.LBB76_5:                               # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_1
.LBB76_6:                               # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB76_7:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB76_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB76_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB76_7
.LBB76_9:                               # %while.end
	cmpl	$1427424575, -12(%rbp)  # imm = 0x5514C53F
	jne	.LBB76_11
.LBB76_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_10
.Lfunc_end76:
	.size	update_ref_list.13, .Lfunc_end76-update_ref_list.13
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.14 # -- Begin function alloc_storable_picture.14
	.p2align	4, 0x90
	.type	alloc_storable_picture.14,@function
alloc_storable_picture.14:              # @alloc_storable_picture.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$117660023, -40(%rbp)   # imm = 0x7035977
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB77_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB77_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB77_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB77_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB77_6
.LBB77_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB77_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB77_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB77_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB77_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB77_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$117660023, -40(%rbp)   # imm = 0x7035977
	jne	.LBB77_12
.LBB77_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_11
.Lfunc_end77:
	.size	alloc_storable_picture.14, .Lfunc_end77-alloc_storable_picture.14
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.15             # -- Begin function init_dpb.15
	.p2align	4, 0x90
	.type	init_dpb.15,@function
init_dpb.15:                            # @init_dpb.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$60984524, -12(%rbp)    # imm = 0x3A28CCC
	cmpl	$0, dpb+48
	je	.LBB78_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB78_2:                               # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB78_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB78_4:                               # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB78_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB78_6:                               # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB78_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB78_8:                               # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB78_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB78_10:                              # %if.end19
	movl	$0, -4(%rbp)
.LBB78_11:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB78_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB78_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB78_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_11
.LBB78_14:                              # %for.end
	movl	$0, -4(%rbp)
.LBB78_15:                              # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB78_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB78_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB78_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB78_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB78_18:                              # %if.end39
                                        #   in Loop: Header=BB78_15 Depth=1
	jmp	.LBB78_19
.LBB78_19:                              # %for.inc40
                                        #   in Loop: Header=BB78_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_15
.LBB78_20:                              # %for.end42
	movl	$0, -8(%rbp)
.LBB78_21:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB78_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB78_21 Depth=1
	movl	$0, -4(%rbp)
.LBB78_23:                              # %for.cond47
                                        #   Parent Loop BB78_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB78_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB78_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB78_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_23
.LBB78_26:                              # %for.end57
                                        #   in Loop: Header=BB78_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB78_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_21
.LBB78_28:                              # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$60984524, -12(%rbp)    # imm = 0x3A28CCC
	jne	.LBB78_30
.LBB78_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_29
.Lfunc_end78:
	.size	init_dpb.15, .Lfunc_end78-init_dpb.15
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.16 # -- Begin function alloc_ref_pic_list_reordering_buffer.16
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.16,@function
alloc_ref_pic_list_reordering_buffer.16: # @alloc_ref_pic_list_reordering_buffer.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$832795288, -20(%rbp)   # imm = 0x31A37298
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB79_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB79_4:                               # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB79_6:                               # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB79_8:                               # %if.end17
	jmp	.LBB79_10
.LBB79_9:                               # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB79_10:                              # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB79_13:                              # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB79_15:                              # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB79_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB79_17:                              # %if.end44
	jmp	.LBB79_19
.LBB79_18:                              # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB79_19:                              # %if.end49
	cmpl	$832795288, -20(%rbp)   # imm = 0x31A37298
	jne	.LBB79_21
.LBB79_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_20
.Lfunc_end79:
	.size	alloc_ref_pic_list_reordering_buffer.16, .Lfunc_end79-alloc_ref_pic_list_reordering_buffer.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.17
	.type	sliding_window_memory_management.17,@function
sliding_window_memory_management.17:    # @sliding_window_memory_management.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1420745701, -8(%rbp)   # imm = 0x54AEDBE5
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB80_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB80_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB80_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB80_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB80_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB80_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB80_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB80_9
.LBB80_6:                               # %if.end
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_7
.LBB80_7:                               # %for.inc
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_2
.LBB80_8:                               # %for.end.loopexit
	jmp	.LBB80_9
.LBB80_9:                               # %for.end
	jmp	.LBB80_10
.LBB80_10:                              # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$1420745701, -8(%rbp)   # imm = 0x54AEDBE5
	jne	.LBB80_12
.LBB80_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_11
.Lfunc_end80:
	.size	sliding_window_memory_management.17, .Lfunc_end80-sliding_window_memory_management.17
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.18    # -- Begin function dpb_combine_field.18
	.p2align	4, 0x90
	.type	dpb_combine_field.18,@function
dpb_combine_field.18:                   # @dpb_combine_field.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$657554689, -32(%rbp)   # imm = 0x27317D01
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB81_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_1
.LBB81_4:                               # %for.end
	movl	$0, -4(%rbp)
.LBB81_5:                               # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB81_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_5
.LBB81_8:                               # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB81_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB81_11
.LBB81_10:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB81_11:                              # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB81_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB81_13:                              # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB81_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB81_15:                              # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB81_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB81_17:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB81_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB81_19:                              # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB81_20:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB81_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB81_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB81_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB81_24
.LBB81_23:                              # %cond.false217
                                        #   in Loop: Header=BB81_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB81_24:                              # %cond.end226
                                        #   in Loop: Header=BB81_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB81_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_20
.LBB81_26:                              # %for.end235
	movl	$0, -4(%rbp)
.LBB81_27:                              # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB81_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB81_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB81_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB81_31
.LBB81_30:                              # %cond.false269
                                        #   in Loop: Header=BB81_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB81_31:                              # %cond.end278
                                        #   in Loop: Header=BB81_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB81_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_27
.LBB81_33:                              # %for.end287
	movl	$0, -4(%rbp)
.LBB81_34:                              # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	$0, -20(%rbp)
.LBB81_36:                              # %for.cond295
                                        #   Parent Loop BB81_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB81_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB81_40
.LBB81_39:                              # %cond.false445
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_40
.LBB81_40:                              # %cond.end446
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB81_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB81_43
.LBB81_42:                              # %cond.false462
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_43
.LBB81_43:                              # %cond.end463
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB81_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB81_46
.LBB81_45:                              # %cond.false479
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB81_46
.LBB81_46:                              # %cond.end480
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB81_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB81_49
.LBB81_48:                              # %cond.false501
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB81_49
.LBB81_49:                              # %cond.end502
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB81_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB81_52
.LBB81_51:                              # %cond.false647
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_52
.LBB81_52:                              # %cond.end648
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB81_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB81_55
.LBB81_54:                              # %cond.false665
                                        #   in Loop: Header=BB81_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_55
.LBB81_55:                              # %cond.end666
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB81_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB81_58
.LBB81_57:                              # %cond.false683
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB81_58
.LBB81_58:                              # %cond.end684
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB81_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB81_61
.LBB81_60:                              # %cond.false706
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB81_61
.LBB81_61:                              # %cond.end707
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_36
.LBB81_63:                              # %for.end723
                                        #   in Loop: Header=BB81_34 Depth=1
	jmp	.LBB81_64
.LBB81_64:                              # %for.inc724
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_34
.LBB81_65:                              # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB81_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB81_76
.LBB81_67:                              # %if.then729
	movl	$0, -4(%rbp)
.LBB81_68:                              # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB81_68 Depth=1
	movl	$0, -20(%rbp)
.LBB81_70:                              # %for.cond737
                                        #   Parent Loop BB81_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB81_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB81_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_70
.LBB81_73:                              # %for.end758
                                        #   in Loop: Header=BB81_68 Depth=1
	jmp	.LBB81_74
.LBB81_74:                              # %for.inc759
                                        #   in Loop: Header=BB81_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_68
.LBB81_75:                              # %for.end761
	jmp	.LBB81_76
.LBB81_76:                              # %if.end762
	cmpl	$657554689, -32(%rbp)   # imm = 0x27317D01
	jne	.LBB81_78
.LBB81_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_78:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_77
.Lfunc_end81:
	.size	dpb_combine_field.18, .Lfunc_end81-dpb_combine_field.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.19
	.type	insert_picture_in_dpb.19,@function
insert_picture_in_dpb.19:               # @insert_picture_in_dpb.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$61640669, -20(%rbp)    # imm = 0x3AC8FDD
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB82_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB82_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB82_5
	jmp	.LBB82_3
.LBB82_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB82_10
	jmp	.LBB82_4
.LBB82_4:                               # %if.end
	subl	$2, %eax
	je	.LBB82_18
	jmp	.LBB82_26
.LBB82_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB82_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB82_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB82_8:                               # %if.end7
	jmp	.LBB82_9
.LBB82_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB82_26
.LBB82_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB82_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB82_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB82_13:                              # %if.end24
	jmp	.LBB82_14
.LBB82_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB82_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB82_17
.LBB82_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB82_17:                              # %if.end29
	jmp	.LBB82_26
.LBB82_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB82_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB82_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB82_21:                              # %if.end47
	jmp	.LBB82_22
.LBB82_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB82_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB82_25
.LBB82_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB82_25:                              # %if.end55
	jmp	.LBB82_26
.LBB82_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$61640669, -20(%rbp)    # imm = 0x3AC8FDD
	jne	.LBB82_28
.LBB82_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_27
.Lfunc_end82:
	.size	insert_picture_in_dpb.19, .Lfunc_end82-insert_picture_in_dpb.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.20
	.type	remove_frame_from_dpb.20,@function
remove_frame_from_dpb.20:               # @remove_frame_from_dpb.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$50312743, -20(%rbp)    # imm = 0x2FFB627
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB83_6
# %bb.1:                                # %entry
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_2:                               # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB83_7
.LBB83_3:                               # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB83_7
.LBB83_4:                               # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB83_7
.LBB83_5:                               # %sw.bb10
	jmp	.LBB83_7
.LBB83_6:                               # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB83_7:                               # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB83_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB83_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB83_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_8
.LBB83_11:                              # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$50312743, -20(%rbp)    # imm = 0x2FFB627
	jne	.LBB83_13
.LBB83_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_12
.Lfunc_end83:
	.size	remove_frame_from_dpb.20, .Lfunc_end83-remove_frame_from_dpb.20
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_5
	.quad	.LBB83_4
	.quad	.LBB83_3
	.quad	.LBB83_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.21
	.type	mm_unmark_long_term_for_reference.21,@function
mm_unmark_long_term_for_reference.21:   # @mm_unmark_long_term_for_reference.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1950228930, -12(%rbp)  # imm = 0x743E21C2
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB84_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB84_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB84_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB84_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB84_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB84_7:                               # %if.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_8
.LBB84_8:                               # %if.end14
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_24
.LBB84_9:                               # %if.else
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB84_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB84_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB84_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB84_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB84_14:                              # %if.end57
	jmp	.LBB84_27
.LBB84_15:                              # %if.end58
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_16
.LBB84_16:                              # %if.end59
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB84_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB84_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB84_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB84_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB84_21:                              # %if.end106
	jmp	.LBB84_27
.LBB84_22:                              # %if.end107
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_23
.LBB84_23:                              # %if.end108
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_24
.LBB84_24:                              # %if.end109
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_25
.LBB84_25:                              # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_26:                              # %for.end.loopexit
	jmp	.LBB84_27
.LBB84_27:                              # %for.end
	cmpl	$1950228930, -12(%rbp)  # imm = 0x743E21C2
	jne	.LBB84_29
.LBB84_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_28
.Lfunc_end84:
	.size	mm_unmark_long_term_for_reference.21, .Lfunc_end84-mm_unmark_long_term_for_reference.21
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.22           # -- Begin function getDpbSize.22
	.p2align	4, 0x90
	.type	getDpbSize.22,@function
getDpbSize.22:                          # @getDpbSize.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1137931753, -20(%rbp)  # imm = 0x43D375E9
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB85_17
# %bb.1:                                # %entry
	movq	.LJTI85_0(,%rax,8), %rax
	jmpq	*%rax
.LBB85_2:                               # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB85_18
.LBB85_3:                               # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB85_18
.LBB85_4:                               # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB85_18
.LBB85_5:                               # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB85_18
.LBB85_6:                               # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB85_18
.LBB85_7:                               # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB85_18
.LBB85_8:                               # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB85_18
.LBB85_9:                               # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB85_18
.LBB85_10:                              # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB85_18
.LBB85_11:                              # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB85_18
.LBB85_12:                              # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB85_18
.LBB85_13:                              # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB85_18
.LBB85_14:                              # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB85_18
.LBB85_15:                              # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB85_18
.LBB85_16:                              # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB85_18
.LBB85_17:                              # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB85_18:                              # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB85_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB85_21
.LBB85_20:                              # %cond.false
	movl	$16, %ebx
	jmp	.LBB85_21
.LBB85_21:                              # %cond.end
	cmpl	$1137931753, -20(%rbp)  # imm = 0x43D375E9
	jne	.LBB85_23
.LBB85_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_22
.Lfunc_end85:
	.size	getDpbSize.22, .Lfunc_end85-getDpbSize.22
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI85_0:
	.quad	.LBB85_2
	.quad	.LBB85_3
	.quad	.LBB85_4
	.quad	.LBB85_5
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_6
	.quad	.LBB85_7
	.quad	.LBB85_8
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_9
	.quad	.LBB85_10
	.quad	.LBB85_11
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_12
	.quad	.LBB85_13
	.quad	.LBB85_14
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_17
	.quad	.LBB85_15
	.quad	.LBB85_16
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.23
	.type	adaptive_memory_management.23,@function
adaptive_memory_management.23:          # @adaptive_memory_management.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1361065451, -20(%rbp)  # imm = 0x512035EB
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB86_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB86_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB86_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	.LJTI86_0(,%rax,8), %rax
	jmpq	*%rax
.LBB86_4:                               # %sw.bb
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB86_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB86_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB86_6:                               # %if.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_14
.LBB86_7:                               # %sw.bb2
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB86_14
.LBB86_8:                               # %sw.bb3
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB86_14
.LBB86_9:                               # %sw.bb4
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB86_14
.LBB86_10:                              # %sw.bb6
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB86_14
.LBB86_11:                              # %sw.bb7
                                        #   in Loop: Header=BB86_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB86_14
.LBB86_12:                              # %sw.bb9
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB86_14
.LBB86_13:                              # %sw.default
                                        #   in Loop: Header=BB86_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB86_14:                              # %sw.epilog
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB86_1
.LBB86_15:                              # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB86_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB86_21
	jmp	.LBB86_17
.LBB86_17:                              # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB86_19
	jmp	.LBB86_18
.LBB86_18:                              # %if.then15
	subl	$2, %eax
	je	.LBB86_20
	jmp	.LBB86_22
.LBB86_19:                              # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB86_22
.LBB86_20:                              # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB86_22
.LBB86_21:                              # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB86_22:                              # %sw.epilog19
	callq	flush_dpb
.LBB86_23:                              # %if.end20
	cmpl	$1361065451, -20(%rbp)  # imm = 0x512035EB
	jne	.LBB86_25
.LBB86_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_24
.Lfunc_end86:
	.size	adaptive_memory_management.23, .Lfunc_end86-adaptive_memory_management.23
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI86_0:
	.quad	.LBB86_4
	.quad	.LBB86_7
	.quad	.LBB86_8
	.quad	.LBB86_9
	.quad	.LBB86_10
	.quad	.LBB86_11
	.quad	.LBB86_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.24
	.type	is_used_for_reference.24,@function
is_used_for_reference.24:               # @is_used_for_reference.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$504907607, -28(%rbp)   # imm = 0x1E184757
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB87_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB87_17
.LBB87_2:                               # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB87_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB87_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB87_17
.LBB87_5:                               # %if.end4
	jmp	.LBB87_6
.LBB87_6:                               # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB87_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB87_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB87_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB87_17
.LBB87_10:                              # %if.end14
	jmp	.LBB87_11
.LBB87_11:                              # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB87_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB87_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB87_17
.LBB87_14:                              # %if.end23
	jmp	.LBB87_15
.LBB87_15:                              # %if.end24
	jmp	.LBB87_16
.LBB87_16:                              # %if.end25
	movl	$0, -12(%rbp)
.LBB87_17:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$504907607, -28(%rbp)   # imm = 0x1E184757
	jne	.LBB87_19
.LBB87_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_18
.Lfunc_end87:
	.size	is_used_for_reference.24, .Lfunc_end87-is_used_for_reference.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.25
	.type	compare_fs_by_frame_num_desc.25,@function
compare_fs_by_frame_num_desc.25:        # @compare_fs_by_frame_num_desc.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$678574105, -16(%rbp)   # imm = 0x28723819
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB88_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB88_5
.LBB88_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB88_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB88_5
.LBB88_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB88_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$678574105, -16(%rbp)   # imm = 0x28723819
	jne	.LBB88_7
.LBB88_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_6
.Lfunc_end88:
	.size	compare_fs_by_frame_num_desc.25, .Lfunc_end88-compare_fs_by_frame_num_desc.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.26
	.type	remove_frame_from_dpb.26,@function
remove_frame_from_dpb.26:               # @remove_frame_from_dpb.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2135368003, -20(%rbp)  # imm = 0x7F472143
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB89_6
# %bb.1:                                # %entry
	movq	.LJTI89_0(,%rax,8), %rax
	jmpq	*%rax
.LBB89_2:                               # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB89_7
.LBB89_3:                               # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB89_7
.LBB89_4:                               # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB89_7
.LBB89_5:                               # %sw.bb10
	jmp	.LBB89_7
.LBB89_6:                               # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB89_7:                               # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB89_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_8
.LBB89_11:                              # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$2135368003, -20(%rbp)  # imm = 0x7F472143
	jne	.LBB89_13
.LBB89_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_12
.Lfunc_end89:
	.size	remove_frame_from_dpb.26, .Lfunc_end89-remove_frame_from_dpb.26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI89_0:
	.quad	.LBB89_5
	.quad	.LBB89_4
	.quad	.LBB89_3
	.quad	.LBB89_2
                                        # -- End function
	.text
	.globl	init_dpb.27             # -- Begin function init_dpb.27
	.p2align	4, 0x90
	.type	init_dpb.27,@function
init_dpb.27:                            # @init_dpb.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1158068791, -12(%rbp)  # imm = 0x4506BA37
	cmpl	$0, dpb+48
	je	.LBB90_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB90_2:                               # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB90_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB90_4:                               # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB90_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB90_6:                               # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB90_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB90_8:                               # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB90_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB90_10:                              # %if.end19
	movl	$0, -4(%rbp)
.LBB90_11:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB90_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB90_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_11
.LBB90_14:                              # %for.end
	movl	$0, -4(%rbp)
.LBB90_15:                              # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB90_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB90_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB90_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB90_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB90_18:                              # %if.end39
                                        #   in Loop: Header=BB90_15 Depth=1
	jmp	.LBB90_19
.LBB90_19:                              # %for.inc40
                                        #   in Loop: Header=BB90_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_15
.LBB90_20:                              # %for.end42
	movl	$0, -8(%rbp)
.LBB90_21:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB90_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	$0, -4(%rbp)
.LBB90_23:                              # %for.cond47
                                        #   Parent Loop BB90_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB90_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB90_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB90_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_23
.LBB90_26:                              # %for.end57
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_21
.LBB90_28:                              # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$1158068791, -12(%rbp)  # imm = 0x4506BA37
	jne	.LBB90_30
.LBB90_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_29
.Lfunc_end90:
	.size	init_dpb.27, .Lfunc_end90-init_dpb.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.28
	.type	is_used_for_reference.28,@function
is_used_for_reference.28:               # @is_used_for_reference.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$601038061, -28(%rbp)   # imm = 0x23D31CED
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB91_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB91_17
.LBB91_2:                               # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB91_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB91_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB91_17
.LBB91_5:                               # %if.end4
	jmp	.LBB91_6
.LBB91_6:                               # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB91_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB91_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB91_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB91_17
.LBB91_10:                              # %if.end14
	jmp	.LBB91_11
.LBB91_11:                              # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB91_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB91_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB91_17
.LBB91_14:                              # %if.end23
	jmp	.LBB91_15
.LBB91_15:                              # %if.end24
	jmp	.LBB91_16
.LBB91_16:                              # %if.end25
	movl	$0, -12(%rbp)
.LBB91_17:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$601038061, -28(%rbp)   # imm = 0x23D31CED
	jne	.LBB91_19
.LBB91_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_18
.Lfunc_end91:
	.size	is_used_for_reference.28, .Lfunc_end91-is_used_for_reference.28
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.29      # -- Begin function alloc_colocated.29
	.p2align	4, 0x90
	.type	alloc_colocated.29,@function
alloc_colocated.29:                     # @alloc_colocated.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1718080614, -32(%rbp)  # imm = 0x6667D466
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB92_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB92_2:                               # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB92_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB92_4:                               # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1718080614, -32(%rbp)  # imm = 0x6667D466
	jne	.LBB92_6
.LBB92_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_5
.Lfunc_end92:
	.size	alloc_colocated.29, .Lfunc_end92-alloc_colocated.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.30
	.type	compare_fs_by_frame_num_desc.30,@function
compare_fs_by_frame_num_desc.30:        # @compare_fs_by_frame_num_desc.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$382338489, -16(%rbp)   # imm = 0x16CA05B9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB93_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB93_5
.LBB93_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB93_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB93_5
.LBB93_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB93_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$382338489, -16(%rbp)   # imm = 0x16CA05B9
	jne	.LBB93_7
.LBB93_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_6
.Lfunc_end93:
	.size	compare_fs_by_frame_num_desc.30, .Lfunc_end93-compare_fs_by_frame_num_desc.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.31
	.type	remove_frame_from_dpb.31,@function
remove_frame_from_dpb.31:               # @remove_frame_from_dpb.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1989604214, -20(%rbp)  # imm = 0x7696F376
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB94_6
# %bb.1:                                # %entry
	movq	.LJTI94_0(,%rax,8), %rax
	jmpq	*%rax
.LBB94_2:                               # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB94_7
.LBB94_3:                               # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB94_7
.LBB94_4:                               # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB94_7
.LBB94_5:                               # %sw.bb10
	jmp	.LBB94_7
.LBB94_6:                               # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB94_7:                               # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB94_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB94_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB94_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB94_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_8
.LBB94_11:                              # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1989604214, -20(%rbp)  # imm = 0x7696F376
	jne	.LBB94_13
.LBB94_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_12
.Lfunc_end94:
	.size	remove_frame_from_dpb.31, .Lfunc_end94-remove_frame_from_dpb.31
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI94_0:
	.quad	.LBB94_5
	.quad	.LBB94_4
	.quad	.LBB94_3
	.quad	.LBB94_2
                                        # -- End function
	.text
	.globl	update_ltref_list.32    # -- Begin function update_ltref_list.32
	.p2align	4, 0x90
	.type	update_ltref_list.32,@function
update_ltref_list.32:                   # @update_ltref_list.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$959436793, -12(%rbp)   # imm = 0x392FD7F9
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB95_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB95_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB95_4:                               # %if.end
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_5
.LBB95_5:                               # %for.inc
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_1
.LBB95_6:                               # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB95_7:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB95_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB95_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB95_7
.LBB95_9:                               # %while.end
	cmpl	$959436793, -12(%rbp)   # imm = 0x392FD7F9
	jne	.LBB95_11
.LBB95_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_10
.Lfunc_end95:
	.size	update_ltref_list.32, .Lfunc_end95-update_ltref_list.32
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.33    # -- Begin function compute_colocated.33
	.p2align	4, 0x90
	.type	compute_colocated.33,@function
compute_colocated.33:                   # @compute_colocated.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$626674371, -72(%rbp)   # imm = 0x255A4AC3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB96_11
.LBB96_2:                               # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB96_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB96_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB96_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB96_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB96_8
.LBB96_7:                               # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -56(%rbp)
.LBB96_8:                               # %if.end
	jmp	.LBB96_9
.LBB96_9:                               # %if.end20
	jmp	.LBB96_10
.LBB96_10:                              # %if.end21
	jmp	.LBB96_11
.LBB96_11:                              # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB96_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB96_29
.LBB96_13:                              # %if.then25
	movl	$0, -12(%rbp)
.LBB96_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	$0, -16(%rbp)
.LBB96_16:                              # %for.cond27
                                        #   Parent Loop BB96_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB96_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB96_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB96_22
.LBB96_21:                              # %if.else160
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB96_22:                              # %if.end283
                                        #   in Loop: Header=BB96_16 Depth=2
	jmp	.LBB96_24
.LBB96_23:                              # %if.else284
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB96_24:                              # %if.end391
                                        #   in Loop: Header=BB96_16 Depth=2
	jmp	.LBB96_25
.LBB96_25:                              # %for.inc
                                        #   in Loop: Header=BB96_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_16
.LBB96_26:                              # %for.end
                                        #   in Loop: Header=BB96_14 Depth=1
	jmp	.LBB96_27
.LBB96_27:                              # %for.inc392
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_14
.LBB96_28:                              # %for.end394
	jmp	.LBB96_29
.LBB96_29:                              # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB96_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_241
.LBB96_31:                              # %if.then401
	movl	$0, -16(%rbp)
.LBB96_32:                              # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB96_32 Depth=1
	movl	$0, -12(%rbp)
.LBB96_34:                              # %for.cond408
                                        #   Parent Loop BB96_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB96_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_39
.LBB96_38:                              # %cond.false
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_39:                              # %cond.end
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_42
.LBB96_41:                              # %cond.false427
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_42:                              # %cond.end429
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_45
.LBB96_44:                              # %cond.false447
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_45:                              # %cond.end449
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_48
.LBB96_47:                              # %cond.false457
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_48:                              # %cond.end459
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_51
.LBB96_50:                              # %cond.false477
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_51:                              # %cond.end479
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_54
.LBB96_53:                              # %cond.false487
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_54:                              # %cond.end489
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_57
.LBB96_56:                              # %cond.false507
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_57:                              # %cond.end509
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_60
.LBB96_59:                              # %cond.false517
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_60:                              # %cond.end519
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_63
.LBB96_62:                              # %cond.false537
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_63:                              # %cond.end539
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_66
.LBB96_65:                              # %cond.false547
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_66:                              # %cond.end549
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB96_81
.LBB96_68:                              # %if.else569
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_71
.LBB96_70:                              # %cond.false576
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_71:                              # %cond.end578
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_74
.LBB96_73:                              # %cond.false586
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_74:                              # %cond.end588
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_77
.LBB96_76:                              # %cond.false604
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_77:                              # %cond.end606
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_80
.LBB96_79:                              # %cond.false614
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_80:                              # %cond.end616
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB96_81:                              # %if.end626
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_84
.LBB96_83:                              # %cond.false633
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_84:                              # %cond.end635
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_87
.LBB96_86:                              # %cond.false643
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_87:                              # %cond.end645
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB96_102
.LBB96_89:                              # %if.else665
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_92
.LBB96_91:                              # %cond.false672
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_92:                              # %cond.end674
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_95
.LBB96_94:                              # %cond.false682
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_95:                              # %cond.end684
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_98
.LBB96_97:                              # %cond.false700
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_98:                              # %cond.end702
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_101
.LBB96_100:                             # %cond.false710
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_101:                             # %cond.end712
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB96_102:                             # %if.end722
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB96_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB96_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB96_112
.LBB96_107:                             # %lor.rhs
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB96_111:                             # %land.end
                                        #   in Loop: Header=BB96_34 Depth=2
.LBB96_112:                             # %lor.end
                                        #   in Loop: Header=BB96_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB96_113:                             # %if.end814
                                        #   in Loop: Header=BB96_34 Depth=2
	jmp	.LBB96_236
.LBB96_114:                             # %if.else815
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_117
.LBB96_116:                             # %cond.false822
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_117:                             # %cond.end824
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_120
.LBB96_119:                             # %cond.false832
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_120:                             # %cond.end834
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_123
.LBB96_122:                             # %cond.false851
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_123:                             # %cond.end853
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_126
.LBB96_125:                             # %cond.false861
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_126:                             # %cond.end863
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_129
.LBB96_128:                             # %cond.false881
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_129:                             # %cond.end883
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_132
.LBB96_131:                             # %cond.false891
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_132:                             # %cond.end893
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_135
.LBB96_134:                             # %cond.false911
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_135:                             # %cond.end913
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_138
.LBB96_137:                             # %cond.false921
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_138:                             # %cond.end923
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_141
.LBB96_140:                             # %cond.false941
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_141:                             # %cond.end943
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_144
.LBB96_143:                             # %cond.false951
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_144:                             # %cond.end953
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_147
.LBB96_146:                             # %cond.false968
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_147:                             # %cond.end970
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_150
.LBB96_149:                             # %cond.false978
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_150:                             # %cond.end980
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_153
.LBB96_152:                             # %cond.false996
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_153:                             # %cond.end998
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_156
.LBB96_155:                             # %cond.false1006
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_156:                             # %cond.end1008
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_159
.LBB96_158:                             # %cond.false1023
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_159:                             # %cond.end1025
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_162
.LBB96_161:                             # %cond.false1033
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_162:                             # %cond.end1035
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB96_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB96_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB96_172
.LBB96_167:                             # %lor.rhs1087
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB96_171:                             # %land.end1133
                                        #   in Loop: Header=BB96_34 Depth=2
.LBB96_172:                             # %lor.end1134
                                        #   in Loop: Header=BB96_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB96_173:                             # %if.end1142
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_176
.LBB96_175:                             # %cond.false1149
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_176:                             # %cond.end1151
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_179
.LBB96_178:                             # %cond.false1159
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_179:                             # %cond.end1161
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_182
.LBB96_181:                             # %cond.false1178
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_182:                             # %cond.end1180
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_185
.LBB96_184:                             # %cond.false1188
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_185:                             # %cond.end1190
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_188
.LBB96_187:                             # %cond.false1208
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_188:                             # %cond.end1210
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_191
.LBB96_190:                             # %cond.false1218
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_191:                             # %cond.end1220
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_194
.LBB96_193:                             # %cond.false1238
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_194:                             # %cond.end1240
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_197
.LBB96_196:                             # %cond.false1248
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_197:                             # %cond.end1250
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_200
.LBB96_199:                             # %cond.false1268
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_200:                             # %cond.end1270
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_203
.LBB96_202:                             # %cond.false1278
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_203:                             # %cond.end1280
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_206
.LBB96_205:                             # %cond.false1295
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_206:                             # %cond.end1297
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_209
.LBB96_208:                             # %cond.false1305
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_209:                             # %cond.end1307
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_212
.LBB96_211:                             # %cond.false1323
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_212:                             # %cond.end1325
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_215
.LBB96_214:                             # %cond.false1333
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_215:                             # %cond.end1335
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_218
.LBB96_217:                             # %cond.false1350
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_218:                             # %cond.end1352
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_221
.LBB96_220:                             # %cond.false1360
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_221:                             # %cond.end1362
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB96_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB96_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB96_231
.LBB96_226:                             # %lor.rhs1414
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB96_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB96_230:                             # %land.end1460
                                        #   in Loop: Header=BB96_34 Depth=2
.LBB96_231:                             # %lor.end1461
                                        #   in Loop: Header=BB96_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB96_232:                             # %if.end1469
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB96_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB96_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB96_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB96_235:                             # %if.end1522
                                        #   in Loop: Header=BB96_34 Depth=2
	jmp	.LBB96_236
.LBB96_236:                             # %if.end1523
                                        #   in Loop: Header=BB96_34 Depth=2
	jmp	.LBB96_237
.LBB96_237:                             # %for.inc1524
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_34
.LBB96_238:                             # %for.end1526
                                        #   in Loop: Header=BB96_32 Depth=1
	jmp	.LBB96_239
.LBB96_239:                             # %for.inc1527
                                        #   in Loop: Header=BB96_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_32
.LBB96_240:                             # %for.end1529
	jmp	.LBB96_241
.LBB96_241:                             # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB96_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB96_259
.LBB96_243:                             # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB96_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB96_245:                             # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB96_245 Depth=1
	movl	$0, -16(%rbp)
.LBB96_247:                             # %for.cond1546
                                        #   Parent Loop BB96_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB96_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB96_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB96_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB96_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB96_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB96_252
.LBB96_251:                             # %if.else1699
                                        #   in Loop: Header=BB96_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB96_252:                             # %if.end1829
                                        #   in Loop: Header=BB96_247 Depth=2
	jmp	.LBB96_253
.LBB96_253:                             # %if.end1830
                                        #   in Loop: Header=BB96_247 Depth=2
	jmp	.LBB96_254
.LBB96_254:                             # %for.inc1831
                                        #   in Loop: Header=BB96_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_247
.LBB96_255:                             # %for.end1833
                                        #   in Loop: Header=BB96_245 Depth=1
	jmp	.LBB96_256
.LBB96_256:                             # %for.inc1834
                                        #   in Loop: Header=BB96_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_245
.LBB96_257:                             # %for.end1836
	jmp	.LBB96_258
.LBB96_258:                             # %if.end1837
	jmp	.LBB96_259
.LBB96_259:                             # %if.end1838
	movl	$0, -12(%rbp)
.LBB96_260:                             # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB96_260 Depth=1
	movl	$0, -16(%rbp)
.LBB96_262:                             # %for.cond1845
                                        #   Parent Loop BB96_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB96_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB96_314
.LBB96_265:                             # %if.then1856
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_268
.LBB96_267:                             # %cond.false1863
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_268:                             # %cond.end1865
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_271
.LBB96_270:                             # %cond.false1873
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_271:                             # %cond.end1875
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_274
.LBB96_273:                             # %cond.false1893
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_274:                             # %cond.end1895
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_277
.LBB96_276:                             # %cond.false1903
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_277:                             # %cond.end1905
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_280
.LBB96_279:                             # %cond.false1923
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_280:                             # %cond.end1925
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_283
.LBB96_282:                             # %cond.false1933
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_283:                             # %cond.end1935
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_286
.LBB96_285:                             # %cond.false1953
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_286:                             # %cond.end1955
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_289
.LBB96_288:                             # %cond.false1963
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_289:                             # %cond.end1965
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_292
.LBB96_291:                             # %cond.false1983
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_292:                             # %cond.end1985
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_295
.LBB96_294:                             # %cond.false1993
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_295:                             # %cond.end1995
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_298
.LBB96_297:                             # %cond.false2011
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_298:                             # %cond.end2013
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_301
.LBB96_300:                             # %cond.false2021
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_301:                             # %cond.end2023
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_304
.LBB96_303:                             # %cond.false2039
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_304:                             # %cond.end2041
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_307
.LBB96_306:                             # %cond.false2049
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_307:                             # %cond.end2051
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_310
.LBB96_309:                             # %cond.false2067
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_310:                             # %cond.end2069
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB96_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB96_313
.LBB96_312:                             # %cond.false2077
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB96_313:                             # %cond.end2079
                                        #   in Loop: Header=BB96_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB96_315
.LBB96_314:                             # %if.else2089
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB96_315:                             # %if.end2194
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB96_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB96_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB96_325
.LBB96_320:                             # %lor.rhs2239
                                        #   in Loop: Header=BB96_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB96_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB96_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB96_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB96_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB96_324:                             # %land.end2285
                                        #   in Loop: Header=BB96_262 Depth=2
.LBB96_325:                             # %lor.end2286
                                        #   in Loop: Header=BB96_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB96_326:                             # %if.end2295
                                        #   in Loop: Header=BB96_262 Depth=2
	jmp	.LBB96_327
.LBB96_327:                             # %for.inc2296
                                        #   in Loop: Header=BB96_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_262
.LBB96_328:                             # %for.end2298
                                        #   in Loop: Header=BB96_260 Depth=1
	jmp	.LBB96_329
.LBB96_329:                             # %for.inc2299
                                        #   in Loop: Header=BB96_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_260
.LBB96_330:                             # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB96_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB96_332:                             # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB96_332 Depth=1
	movl	$0, -16(%rbp)
.LBB96_334:                             # %for.cond2312
                                        #   Parent Loop BB96_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB96_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB96_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB96_340
.LBB96_338:                             # %lor.lhs.false2331
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB96_341
.LBB96_340:                             # %if.then2342
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB96_345
.LBB96_341:                             # %if.else2363
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB96_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB96_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB96_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB96_344:                             # %if.end2394
                                        #   in Loop: Header=BB96_334 Depth=2
	jmp	.LBB96_345
.LBB96_345:                             # %if.end2395
                                        #   in Loop: Header=BB96_334 Depth=2
	jmp	.LBB96_346
.LBB96_346:                             # %for.inc2396
                                        #   in Loop: Header=BB96_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_334
.LBB96_347:                             # %for.end2398
                                        #   in Loop: Header=BB96_332 Depth=1
	jmp	.LBB96_348
.LBB96_348:                             # %for.inc2399
                                        #   in Loop: Header=BB96_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_332
.LBB96_349:                             # %for.end2401
	movl	$0, -12(%rbp)
.LBB96_350:                             # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB96_350 Depth=1
	movl	$0, -16(%rbp)
.LBB96_352:                             # %for.cond2409
                                        #   Parent Loop BB96_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB96_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB96_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB96_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB96_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB96_360
.LBB96_356:                             # %cond.false2429
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB96_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$127, %eax
	jmp	.LBB96_359
.LBB96_358:                             # %cond.false2441
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB96_359:                             # %cond.end2450
                                        #   in Loop: Header=BB96_352 Depth=2
.LBB96_360:                             # %cond.end2452
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB96_377
.LBB96_361:                             # %if.else2454
                                        #   in Loop: Header=BB96_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB96_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB96_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB96_368
.LBB96_364:                             # %cond.false2468
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB96_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$127, %eax
	jmp	.LBB96_367
.LBB96_366:                             # %cond.false2480
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB96_367:                             # %cond.end2489
                                        #   in Loop: Header=BB96_352 Depth=2
.LBB96_368:                             # %cond.end2491
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB96_376
.LBB96_369:                             # %if.else2493
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB96_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB96_375
.LBB96_371:                             # %cond.false2504
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB96_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$127, %eax
	jmp	.LBB96_374
.LBB96_373:                             # %cond.false2516
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB96_374:                             # %cond.end2525
                                        #   in Loop: Header=BB96_352 Depth=2
.LBB96_375:                             # %cond.end2527
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB96_376:                             # %if.end2529
                                        #   in Loop: Header=BB96_352 Depth=2
	jmp	.LBB96_377
.LBB96_377:                             # %if.end2530
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB96_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB96_383
.LBB96_379:                             # %cond.false2546
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB96_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$127, %eax
	jmp	.LBB96_382
.LBB96_381:                             # %cond.false2562
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB96_382:                             # %cond.end2575
                                        #   in Loop: Header=BB96_352 Depth=2
.LBB96_383:                             # %cond.end2577
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB96_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB96_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB96_390
.LBB96_386:                             # %cond.false2592
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB96_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB96_389
.LBB96_388:                             # %cond.false2599
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB96_389:                             # %cond.end2603
                                        #   in Loop: Header=BB96_352 Depth=2
.LBB96_390:                             # %cond.end2605
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB96_392
.LBB96_391:                             # %if.else2611
                                        #   in Loop: Header=BB96_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB96_392:                             # %if.end2617
                                        #   in Loop: Header=BB96_352 Depth=2
	jmp	.LBB96_393
.LBB96_393:                             # %for.inc2618
                                        #   in Loop: Header=BB96_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_352
.LBB96_394:                             # %for.end2620
                                        #   in Loop: Header=BB96_350 Depth=1
	jmp	.LBB96_395
.LBB96_395:                             # %for.inc2621
                                        #   in Loop: Header=BB96_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_350
.LBB96_396:                             # %for.end2623
	jmp	.LBB96_397
.LBB96_397:                             # %if.end2624
	cmpl	$626674371, -72(%rbp)   # imm = 0x255A4AC3
	jne	.LBB96_399
.LBB96_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_399:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_398
.Lfunc_end96:
	.size	compute_colocated.33, .Lfunc_end96-compute_colocated.33
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.34     # -- Begin function init_mbaff_lists.34
	.p2align	4, 0x90
	.type	init_mbaff_lists.34,@function
init_mbaff_lists.34:                    # @init_mbaff_lists.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$932107832, -12(%rbp)   # imm = 0x378ED638
	movl	$2, -4(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB97_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	$0, -8(%rbp)
.LBB97_3:                               # %for.cond1
                                        #   Parent Loop BB97_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB97_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB97_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB97_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_3
.LBB97_6:                               # %for.end
                                        #   in Loop: Header=BB97_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_1
.LBB97_8:                               # %for.end10
	movl	$0, -4(%rbp)
.LBB97_9:                               # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB97_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB97_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB97_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_9
.LBB97_12:                              # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB97_13:                              # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB97_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB97_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB97_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_13
.LBB97_16:                              # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$932107832, -12(%rbp)   # imm = 0x378ED638
	jne	.LBB97_18
.LBB97_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_17
.Lfunc_end97:
	.size	init_mbaff_lists.34, .Lfunc_end97-init_mbaff_lists.34
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.35           # -- Begin function getDpbSize.35
	.p2align	4, 0x90
	.type	getDpbSize.35,@function
getDpbSize.35:                          # @getDpbSize.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$173487168, -20(%rbp)   # imm = 0xA573440
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB98_17
# %bb.1:                                # %entry
	movq	.LJTI98_0(,%rax,8), %rax
	jmpq	*%rax
.LBB98_2:                               # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB98_18
.LBB98_3:                               # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB98_18
.LBB98_4:                               # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB98_18
.LBB98_5:                               # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB98_18
.LBB98_6:                               # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB98_18
.LBB98_7:                               # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB98_18
.LBB98_8:                               # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB98_18
.LBB98_9:                               # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB98_18
.LBB98_10:                              # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB98_18
.LBB98_11:                              # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB98_18
.LBB98_12:                              # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB98_18
.LBB98_13:                              # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB98_18
.LBB98_14:                              # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB98_18
.LBB98_15:                              # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB98_18
.LBB98_16:                              # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB98_18
.LBB98_17:                              # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB98_18:                              # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB98_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB98_21
.LBB98_20:                              # %cond.false
	movl	$16, %ebx
	jmp	.LBB98_21
.LBB98_21:                              # %cond.end
	cmpl	$173487168, -20(%rbp)   # imm = 0xA573440
	jne	.LBB98_23
.LBB98_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_22
.Lfunc_end98:
	.size	getDpbSize.35, .Lfunc_end98-getDpbSize.35
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI98_0:
	.quad	.LBB98_2
	.quad	.LBB98_3
	.quad	.LBB98_4
	.quad	.LBB98_5
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_6
	.quad	.LBB98_7
	.quad	.LBB98_8
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_9
	.quad	.LBB98_10
	.quad	.LBB98_11
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_12
	.quad	.LBB98_13
	.quad	.LBB98_14
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_17
	.quad	.LBB98_15
	.quad	.LBB98_16
                                        # -- End function
	.text
	.globl	alloc_ref_pic_list_reordering_buffer.36 # -- Begin function alloc_ref_pic_list_reordering_buffer.36
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.36,@function
alloc_ref_pic_list_reordering_buffer.36: # @alloc_ref_pic_list_reordering_buffer.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$68074118, -20(%rbp)    # imm = 0x40EBA86
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB99_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB99_4:                               # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB99_6:                               # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB99_8:                               # %if.end17
	jmp	.LBB99_10
.LBB99_9:                               # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB99_10:                              # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB99_13:                              # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB99_15:                              # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB99_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB99_17:                              # %if.end44
	jmp	.LBB99_19
.LBB99_18:                              # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB99_19:                              # %if.end49
	cmpl	$68074118, -20(%rbp)    # imm = 0x40EBA86
	jne	.LBB99_21
.LBB99_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_20
.Lfunc_end99:
	.size	alloc_ref_pic_list_reordering_buffer.36, .Lfunc_end99-alloc_ref_pic_list_reordering_buffer.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.37
	.type	get_long_term_pic.37,@function
get_long_term_pic.37:                   # @get_long_term_pic.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1533897995, -28(%rbp)  # imm = 0x5B6D6D0B
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB100_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB100_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB100_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_7:                              # %if.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %if.end14
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_20
.LBB100_9:                              # %if.else
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB100_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_13:                             # %if.end34
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_14
.LBB100_14:                             # %if.end35
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB100_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_18:                             # %if.end56
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_19
.LBB100_19:                             # %if.end57
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_20
.LBB100_20:                             # %if.end58
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_21
.LBB100_21:                             # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_1
.LBB100_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB100_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1533897995, -28(%rbp)  # imm = 0x5B6D6D0B
	jne	.LBB100_25
.LBB100_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_24
.Lfunc_end100:
	.size	get_long_term_pic.37, .Lfunc_end100-get_long_term_pic.37
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.38 # -- Begin function mm_update_max_long_term_frame_idx.38
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.38,@function
mm_update_max_long_term_frame_idx.38:   # @mm_update_max_long_term_frame_idx.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$844523883, -8(%rbp)    # imm = 0x3256696B
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB101_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB101_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB101_4:                              # %if.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_5
.LBB101_5:                              # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_1
.LBB101_6:                              # %for.end
	cmpl	$844523883, -8(%rbp)    # imm = 0x3256696B
	jne	.LBB101_8
.LBB101_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_7
.Lfunc_end101:
	.size	mm_update_max_long_term_frame_idx.38, .Lfunc_end101-mm_update_max_long_term_frame_idx.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.39
	.type	gen_pic_list_from_frame_list.39,@function
gen_pic_list_from_frame_list.39:        # @gen_pic_list_from_frame_list.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$913980856, -64(%rbp)   # imm = 0x367A3DB8
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB102_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB102_3
.LBB102_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB102_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB102_28
# %bb.4:                                # %if.then1
	jmp	.LBB102_5
.LBB102_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_9 Depth 2
                                        #     Child Loop BB102_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB102_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB102_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB102_7:                              # %lor.end
                                        #   in Loop: Header=BB102_5 Depth=1
	testb	$1, %al
	jne	.LBB102_8
	jmp	.LBB102_27
.LBB102_8:                              # %while.body
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_9
.LBB102_9:                              # %for.cond
                                        #   Parent Loop BB102_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB102_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB102_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB102_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB102_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_17
.LBB102_13:                             # %if.end17
                                        #   in Loop: Header=BB102_9 Depth=2
	jmp	.LBB102_14
.LBB102_14:                             # %if.end18
                                        #   in Loop: Header=BB102_9 Depth=2
	jmp	.LBB102_15
.LBB102_15:                             # %for.inc
                                        #   in Loop: Header=BB102_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_9
.LBB102_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_17
.LBB102_17:                             # %for.end
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_18
.LBB102_18:                             # %for.cond20
                                        #   Parent Loop BB102_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB102_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB102_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB102_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB102_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_26
.LBB102_22:                             # %if.end41
                                        #   in Loop: Header=BB102_18 Depth=2
	jmp	.LBB102_23
.LBB102_23:                             # %if.end42
                                        #   in Loop: Header=BB102_18 Depth=2
	jmp	.LBB102_24
.LBB102_24:                             # %for.inc43
                                        #   in Loop: Header=BB102_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_18
.LBB102_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_26
.LBB102_26:                             # %for.end45
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_5
.LBB102_27:                             # %while.end
	jmp	.LBB102_28
.LBB102_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB102_53
# %bb.29:                               # %if.then48
	jmp	.LBB102_30
.LBB102_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_34 Depth 2
                                        #     Child Loop BB102_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB102_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB102_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB102_32:                             # %lor.end53
                                        #   in Loop: Header=BB102_30 Depth=1
	testb	$1, %al
	jne	.LBB102_33
	jmp	.LBB102_52
.LBB102_33:                             # %while.body54
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_34
.LBB102_34:                             # %for.cond55
                                        #   Parent Loop BB102_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB102_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB102_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB102_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB102_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB102_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_42
.LBB102_38:                             # %if.end77
                                        #   in Loop: Header=BB102_34 Depth=2
	jmp	.LBB102_39
.LBB102_39:                             # %if.end78
                                        #   in Loop: Header=BB102_34 Depth=2
	jmp	.LBB102_40
.LBB102_40:                             # %for.inc79
                                        #   in Loop: Header=BB102_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_34
.LBB102_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_42
.LBB102_42:                             # %for.end81
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_43
.LBB102_43:                             # %for.cond82
                                        #   Parent Loop BB102_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB102_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB102_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB102_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB102_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB102_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_51
.LBB102_47:                             # %if.end104
                                        #   in Loop: Header=BB102_43 Depth=2
	jmp	.LBB102_48
.LBB102_48:                             # %if.end105
                                        #   in Loop: Header=BB102_43 Depth=2
	jmp	.LBB102_49
.LBB102_49:                             # %for.inc106
                                        #   in Loop: Header=BB102_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_43
.LBB102_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_51
.LBB102_51:                             # %for.end108
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_30
.LBB102_52:                             # %while.end109
	jmp	.LBB102_53
.LBB102_53:                             # %if.end110
	cmpl	$913980856, -64(%rbp)   # imm = 0x367A3DB8
	jne	.LBB102_55
.LBB102_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_54
.Lfunc_end102:
	.size	gen_pic_list_from_frame_list.39, .Lfunc_end102-gen_pic_list_from_frame_list.39
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.40    # -- Begin function gen_field_ref_ids.40
	.p2align	4, 0x90
	.type	gen_field_ref_ids.40,@function
gen_field_ref_ids.40:                   # @gen_field_ref_ids.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$81781718, -28(%rbp)    # imm = 0x4DFE3D6
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	$0, -8(%rbp)
.LBB103_3:                              # %for.cond1
                                        #   Parent Loop BB103_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB103_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB103_7
.LBB103_6:                              # %cond.false
                                        #   in Loop: Header=BB103_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_7
.LBB103_7:                              # %cond.end
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB103_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB103_10
.LBB103_9:                              # %cond.false32
                                        #   in Loop: Header=BB103_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_10
.LBB103_10:                             # %cond.end33
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_3
.LBB103_12:                             # %for.end
                                        #   in Loop: Header=BB103_1 Depth=1
	jmp	.LBB103_13
.LBB103_13:                             # %for.inc45
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_1
.LBB103_14:                             # %for.end47
	cmpl	$81781718, -28(%rbp)    # imm = 0x4DFE3D6
	jne	.LBB103_16
.LBB103_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_15
.Lfunc_end103:
	.size	gen_field_ref_ids.40, .Lfunc_end103-gen_field_ref_ids.40
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.41           # -- Begin function init_lists.41
	.p2align	4, 0x90
	.type	init_lists.41,@function
init_lists.41:                          # @init_lists.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1274373970, -76(%rbp)  # imm = 0x4BF56752
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB104_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB104_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB104_9
.LBB104_8:                              # %if.else
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB104_9:                              # %if.end
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB104_10:                             # %if.end36
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_11
.LBB104_11:                             # %if.end37
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_12
.LBB104_12:                             # %for.inc
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_2
.LBB104_13:                             # %for.end
	jmp	.LBB104_31
.LBB104_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB104_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB104_17
.LBB104_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB104_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB104_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB104_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB104_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB104_23
.LBB104_22:                             # %if.else63
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB104_23:                             # %if.end70
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB104_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB104_25:                             # %if.end83
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB104_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB104_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB104_27:                             # %if.end98
                                        #   in Loop: Header=BB104_18 Depth=1
	jmp	.LBB104_28
.LBB104_28:                             # %if.end99
                                        #   in Loop: Header=BB104_18 Depth=1
	jmp	.LBB104_29
.LBB104_29:                             # %for.inc100
                                        #   in Loop: Header=BB104_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_18
.LBB104_30:                             # %for.end102
	jmp	.LBB104_31
.LBB104_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB104_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB104_34
.LBB104_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB104_181
.LBB104_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB104_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB104_75
.LBB104_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB104_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB104_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB104_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB104_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB104_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB104_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_43:                             # %if.end140
                                        #   in Loop: Header=BB104_38 Depth=1
	jmp	.LBB104_44
.LBB104_44:                             # %if.end141
                                        #   in Loop: Header=BB104_38 Depth=1
	jmp	.LBB104_45
.LBB104_45:                             # %for.inc142
                                        #   in Loop: Header=BB104_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_38
.LBB104_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB104_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB104_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB104_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB104_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB104_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB104_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_51:                             # %if.end177
                                        #   in Loop: Header=BB104_47 Depth=1
	jmp	.LBB104_52
.LBB104_52:                             # %if.end178
                                        #   in Loop: Header=BB104_47 Depth=1
	jmp	.LBB104_53
.LBB104_53:                             # %for.inc179
                                        #   in Loop: Header=BB104_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_47
.LBB104_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB104_74
.LBB104_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB104_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB104_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB104_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB104_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB104_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB104_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB104_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB104_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_63:                             # %if.end212
                                        #   in Loop: Header=BB104_60 Depth=1
	jmp	.LBB104_64
.LBB104_64:                             # %for.inc213
                                        #   in Loop: Header=BB104_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_60
.LBB104_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB104_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB104_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB104_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB104_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB104_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB104_69:                             # %if.end242
                                        #   in Loop: Header=BB104_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB104_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB104_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB104_71:                             # %if.end259
                                        #   in Loop: Header=BB104_66 Depth=1
	jmp	.LBB104_72
.LBB104_72:                             # %for.inc260
                                        #   in Loop: Header=BB104_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_66
.LBB104_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB104_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB104_155
.LBB104_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB104_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB104_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB104_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB104_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB104_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB104_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB104_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB104_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_83:                             # %if.end307
                                        #   in Loop: Header=BB104_77 Depth=1
	jmp	.LBB104_84
.LBB104_84:                             # %if.end308
                                        #   in Loop: Header=BB104_77 Depth=1
	jmp	.LBB104_85
.LBB104_85:                             # %if.end309
                                        #   in Loop: Header=BB104_77 Depth=1
	jmp	.LBB104_86
.LBB104_86:                             # %for.inc310
                                        #   in Loop: Header=BB104_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_77
.LBB104_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB104_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB104_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB104_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB104_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB104_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB104_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB104_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_94:                             # %if.end354
                                        #   in Loop: Header=BB104_88 Depth=1
	jmp	.LBB104_95
.LBB104_95:                             # %if.end355
                                        #   in Loop: Header=BB104_88 Depth=1
	jmp	.LBB104_96
.LBB104_96:                             # %if.end356
                                        #   in Loop: Header=BB104_88 Depth=1
	jmp	.LBB104_97
.LBB104_97:                             # %for.inc357
                                        #   in Loop: Header=BB104_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_88
.LBB104_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB104_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB104_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB104_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB104_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_99
.LBB104_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB104_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB104_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB104_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_103
.LBB104_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB104_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB104_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB104_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB104_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB104_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB104_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB104_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_111:                            # %if.end428
                                        #   in Loop: Header=BB104_107 Depth=1
	jmp	.LBB104_112
.LBB104_112:                            # %if.end429
                                        #   in Loop: Header=BB104_107 Depth=1
	jmp	.LBB104_113
.LBB104_113:                            # %for.inc430
                                        #   in Loop: Header=BB104_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_107
.LBB104_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB104_154
.LBB104_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB104_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB104_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB104_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB104_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB104_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB104_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB104_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB104_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB104_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB104_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB104_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB104_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_126:                            # %if.end480
                                        #   in Loop: Header=BB104_122 Depth=1
	jmp	.LBB104_127
.LBB104_127:                            # %if.end481
                                        #   in Loop: Header=BB104_122 Depth=1
	jmp	.LBB104_128
.LBB104_128:                            # %for.inc482
                                        #   in Loop: Header=BB104_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_122
.LBB104_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB104_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB104_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB104_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB104_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB104_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB104_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_134:                            # %if.end507
                                        #   in Loop: Header=BB104_130 Depth=1
	jmp	.LBB104_135
.LBB104_135:                            # %if.end508
                                        #   in Loop: Header=BB104_130 Depth=1
	jmp	.LBB104_136
.LBB104_136:                            # %for.inc509
                                        #   in Loop: Header=BB104_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_130
.LBB104_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB104_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB104_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB104_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB104_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_138
.LBB104_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB104_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB104_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB104_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_142
.LBB104_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB104_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB104_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB104_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB104_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB104_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB104_149:                            # %if.end566
                                        #   in Loop: Header=BB104_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB104_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB104_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB104_151:                            # %if.end583
                                        #   in Loop: Header=BB104_146 Depth=1
	jmp	.LBB104_152
.LBB104_152:                            # %for.inc584
                                        #   in Loop: Header=BB104_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_146
.LBB104_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB104_154:                            # %if.end588
	jmp	.LBB104_155
.LBB104_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB104_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB104_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB104_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB104_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB104_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB104_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB104_158 Depth=1
	movl	$1, -72(%rbp)
.LBB104_161:                            # %if.end607
                                        #   in Loop: Header=BB104_158 Depth=1
	jmp	.LBB104_162
.LBB104_162:                            # %for.inc608
                                        #   in Loop: Header=BB104_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_158
.LBB104_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB104_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB104_165:                            # %if.end617
	jmp	.LBB104_166
.LBB104_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB104_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB104_169
.LBB104_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB104_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB104_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB104_172
.LBB104_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB104_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB104_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB104_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB104_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB104_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_173
.LBB104_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB104_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB104_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB104_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB104_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_177
.LBB104_180:                            # %for.end646.loopexit
	jmp	.LBB104_181
.LBB104_181:                            # %for.end646
	cmpl	$1274373970, -76(%rbp)  # imm = 0x4BF56752
	jne	.LBB104_183
.LBB104_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_182
.Lfunc_end104:
	.size	init_lists.41, .Lfunc_end104-init_lists.41
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.42   # -- Begin function fill_frame_num_gap.42
	.p2align	4, 0x90
	.type	fill_frame_num_gap.42,@function
fill_frame_num_gap.42:                  # @fill_frame_num_gap.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1458644432, -36(%rbp)  # imm = 0x56F125D0
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB105_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB105_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB105_1
.LBB105_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1458644432, -36(%rbp)  # imm = 0x56F125D0
	jne	.LBB105_5
.LBB105_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_4
.Lfunc_end105:
	.size	fill_frame_num_gap.42, .Lfunc_end105-fill_frame_num_gap.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.43
	.type	compare_pic_by_pic_num_desc.43,@function
compare_pic_by_pic_num_desc.43:         # @compare_pic_by_pic_num_desc.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1131110862, -16(%rbp)  # imm = 0x436B61CE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB106_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB106_5
.LBB106_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB106_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB106_5
.LBB106_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB106_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1131110862, -16(%rbp)  # imm = 0x436B61CE
	jne	.LBB106_7
.LBB106_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_6
.Lfunc_end106:
	.size	compare_pic_by_pic_num_desc.43, .Lfunc_end106-compare_pic_by_pic_num_desc.43
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.44
	.type	compare_pic_by_poc_desc.44,@function
compare_pic_by_poc_desc.44:             # @compare_pic_by_poc_desc.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$726759297, -16(%rbp)   # imm = 0x2B517781
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB107_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB107_5
.LBB107_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB107_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB107_5
.LBB107_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB107_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$726759297, -16(%rbp)   # imm = 0x2B517781
	jne	.LBB107_7
.LBB107_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_6
.Lfunc_end107:
	.size	compare_pic_by_poc_desc.44, .Lfunc_end107-compare_pic_by_poc_desc.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.45
	.type	compare_pic_by_poc_desc.45,@function
compare_pic_by_poc_desc.45:             # @compare_pic_by_poc_desc.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$104173105, -16(%rbp)   # imm = 0x6358E31
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB108_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB108_5
.LBB108_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB108_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB108_5
.LBB108_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB108_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$104173105, -16(%rbp)   # imm = 0x6358E31
	jne	.LBB108_7
.LBB108_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_6
.Lfunc_end108:
	.size	compare_pic_by_poc_desc.45, .Lfunc_end108-compare_pic_by_poc_desc.45
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.46    # -- Begin function compute_colocated.46
	.p2align	4, 0x90
	.type	compute_colocated.46,@function
compute_colocated.46:                   # @compute_colocated.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1137689739, -72(%rbp)  # imm = 0x43CFC48B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB109_11
.LBB109_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB109_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB109_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB109_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB109_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB109_8
.LBB109_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB109_8:                              # %if.end
	jmp	.LBB109_9
.LBB109_9:                              # %if.end20
	jmp	.LBB109_10
.LBB109_10:                             # %if.end21
	jmp	.LBB109_11
.LBB109_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB109_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_29
.LBB109_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB109_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB109_14 Depth=1
	movl	$0, -16(%rbp)
.LBB109_16:                             # %for.cond27
                                        #   Parent Loop BB109_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB109_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB109_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB109_22
.LBB109_21:                             # %if.else160
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB109_22:                             # %if.end283
                                        #   in Loop: Header=BB109_16 Depth=2
	jmp	.LBB109_24
.LBB109_23:                             # %if.else284
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB109_24:                             # %if.end391
                                        #   in Loop: Header=BB109_16 Depth=2
	jmp	.LBB109_25
.LBB109_25:                             # %for.inc
                                        #   in Loop: Header=BB109_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_16
.LBB109_26:                             # %for.end
                                        #   in Loop: Header=BB109_14 Depth=1
	jmp	.LBB109_27
.LBB109_27:                             # %for.inc392
                                        #   in Loop: Header=BB109_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_14
.LBB109_28:                             # %for.end394
	jmp	.LBB109_29
.LBB109_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB109_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_241
.LBB109_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB109_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	$0, -12(%rbp)
.LBB109_34:                             # %for.cond408
                                        #   Parent Loop BB109_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB109_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_39
.LBB109_38:                             # %cond.false
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_39:                             # %cond.end
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_42
.LBB109_41:                             # %cond.false427
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_42:                             # %cond.end429
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_45
.LBB109_44:                             # %cond.false447
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_45:                             # %cond.end449
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_48
.LBB109_47:                             # %cond.false457
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_48:                             # %cond.end459
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_51
.LBB109_50:                             # %cond.false477
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_51:                             # %cond.end479
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_54
.LBB109_53:                             # %cond.false487
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_54:                             # %cond.end489
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_57
.LBB109_56:                             # %cond.false507
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_57:                             # %cond.end509
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_60
.LBB109_59:                             # %cond.false517
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_60:                             # %cond.end519
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_63
.LBB109_62:                             # %cond.false537
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_63:                             # %cond.end539
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_66
.LBB109_65:                             # %cond.false547
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_66:                             # %cond.end549
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB109_81
.LBB109_68:                             # %if.else569
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_71
.LBB109_70:                             # %cond.false576
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_71:                             # %cond.end578
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_74
.LBB109_73:                             # %cond.false586
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_74:                             # %cond.end588
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_77
.LBB109_76:                             # %cond.false604
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_77:                             # %cond.end606
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_80
.LBB109_79:                             # %cond.false614
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_80:                             # %cond.end616
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB109_81:                             # %if.end626
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_84
.LBB109_83:                             # %cond.false633
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_84:                             # %cond.end635
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_87
.LBB109_86:                             # %cond.false643
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_87:                             # %cond.end645
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB109_102
.LBB109_89:                             # %if.else665
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_92
.LBB109_91:                             # %cond.false672
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_92:                             # %cond.end674
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_95
.LBB109_94:                             # %cond.false682
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_95:                             # %cond.end684
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_98
.LBB109_97:                             # %cond.false700
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_98:                             # %cond.end702
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_101
.LBB109_100:                            # %cond.false710
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_101:                            # %cond.end712
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB109_102:                            # %if.end722
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB109_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB109_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB109_112
.LBB109_107:                            # %lor.rhs
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB109_111:                            # %land.end
                                        #   in Loop: Header=BB109_34 Depth=2
.LBB109_112:                            # %lor.end
                                        #   in Loop: Header=BB109_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB109_113:                            # %if.end814
                                        #   in Loop: Header=BB109_34 Depth=2
	jmp	.LBB109_236
.LBB109_114:                            # %if.else815
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_117
.LBB109_116:                            # %cond.false822
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_117:                            # %cond.end824
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_120
.LBB109_119:                            # %cond.false832
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_120:                            # %cond.end834
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_123
.LBB109_122:                            # %cond.false851
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_123:                            # %cond.end853
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_126
.LBB109_125:                            # %cond.false861
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_126:                            # %cond.end863
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_129
.LBB109_128:                            # %cond.false881
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_129:                            # %cond.end883
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_132
.LBB109_131:                            # %cond.false891
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_132:                            # %cond.end893
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_135
.LBB109_134:                            # %cond.false911
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_135:                            # %cond.end913
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_138
.LBB109_137:                            # %cond.false921
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_138:                            # %cond.end923
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_141
.LBB109_140:                            # %cond.false941
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_141:                            # %cond.end943
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_144
.LBB109_143:                            # %cond.false951
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_144:                            # %cond.end953
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_147
.LBB109_146:                            # %cond.false968
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_147:                            # %cond.end970
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_150
.LBB109_149:                            # %cond.false978
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_150:                            # %cond.end980
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_153
.LBB109_152:                            # %cond.false996
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_153:                            # %cond.end998
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_156
.LBB109_155:                            # %cond.false1006
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_156:                            # %cond.end1008
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_159
.LBB109_158:                            # %cond.false1023
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_159:                            # %cond.end1025
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_162
.LBB109_161:                            # %cond.false1033
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_162:                            # %cond.end1035
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB109_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB109_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB109_172
.LBB109_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB109_171:                            # %land.end1133
                                        #   in Loop: Header=BB109_34 Depth=2
.LBB109_172:                            # %lor.end1134
                                        #   in Loop: Header=BB109_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB109_173:                            # %if.end1142
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_176
.LBB109_175:                            # %cond.false1149
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_176:                            # %cond.end1151
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_179
.LBB109_178:                            # %cond.false1159
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_179:                            # %cond.end1161
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_182
.LBB109_181:                            # %cond.false1178
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_182:                            # %cond.end1180
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_185
.LBB109_184:                            # %cond.false1188
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_185:                            # %cond.end1190
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_188
.LBB109_187:                            # %cond.false1208
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_188:                            # %cond.end1210
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_191
.LBB109_190:                            # %cond.false1218
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_191:                            # %cond.end1220
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_194
.LBB109_193:                            # %cond.false1238
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_194:                            # %cond.end1240
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_197
.LBB109_196:                            # %cond.false1248
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_197:                            # %cond.end1250
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_200
.LBB109_199:                            # %cond.false1268
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_200:                            # %cond.end1270
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_203
.LBB109_202:                            # %cond.false1278
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_203:                            # %cond.end1280
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_206
.LBB109_205:                            # %cond.false1295
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_206:                            # %cond.end1297
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_209
.LBB109_208:                            # %cond.false1305
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_209:                            # %cond.end1307
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_212
.LBB109_211:                            # %cond.false1323
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_212:                            # %cond.end1325
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_215
.LBB109_214:                            # %cond.false1333
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_215:                            # %cond.end1335
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_218
.LBB109_217:                            # %cond.false1350
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_218:                            # %cond.end1352
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_221
.LBB109_220:                            # %cond.false1360
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_221:                            # %cond.end1362
                                        #   in Loop: Header=BB109_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB109_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB109_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB109_231
.LBB109_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB109_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB109_230:                            # %land.end1460
                                        #   in Loop: Header=BB109_34 Depth=2
.LBB109_231:                            # %lor.end1461
                                        #   in Loop: Header=BB109_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB109_232:                            # %if.end1469
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB109_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB109_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB109_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB109_235:                            # %if.end1522
                                        #   in Loop: Header=BB109_34 Depth=2
	jmp	.LBB109_236
.LBB109_236:                            # %if.end1523
                                        #   in Loop: Header=BB109_34 Depth=2
	jmp	.LBB109_237
.LBB109_237:                            # %for.inc1524
                                        #   in Loop: Header=BB109_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_34
.LBB109_238:                            # %for.end1526
                                        #   in Loop: Header=BB109_32 Depth=1
	jmp	.LBB109_239
.LBB109_239:                            # %for.inc1527
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_32
.LBB109_240:                            # %for.end1529
	jmp	.LBB109_241
.LBB109_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB109_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_259
.LBB109_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB109_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB109_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB109_245 Depth=1
	movl	$0, -16(%rbp)
.LBB109_247:                            # %for.cond1546
                                        #   Parent Loop BB109_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB109_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB109_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB109_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB109_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB109_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB109_252
.LBB109_251:                            # %if.else1699
                                        #   in Loop: Header=BB109_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB109_252:                            # %if.end1829
                                        #   in Loop: Header=BB109_247 Depth=2
	jmp	.LBB109_253
.LBB109_253:                            # %if.end1830
                                        #   in Loop: Header=BB109_247 Depth=2
	jmp	.LBB109_254
.LBB109_254:                            # %for.inc1831
                                        #   in Loop: Header=BB109_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_247
.LBB109_255:                            # %for.end1833
                                        #   in Loop: Header=BB109_245 Depth=1
	jmp	.LBB109_256
.LBB109_256:                            # %for.inc1834
                                        #   in Loop: Header=BB109_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_245
.LBB109_257:                            # %for.end1836
	jmp	.LBB109_258
.LBB109_258:                            # %if.end1837
	jmp	.LBB109_259
.LBB109_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB109_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB109_260 Depth=1
	movl	$0, -16(%rbp)
.LBB109_262:                            # %for.cond1845
                                        #   Parent Loop BB109_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB109_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_314
.LBB109_265:                            # %if.then1856
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_268
.LBB109_267:                            # %cond.false1863
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_268:                            # %cond.end1865
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_271
.LBB109_270:                            # %cond.false1873
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_271:                            # %cond.end1875
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_274
.LBB109_273:                            # %cond.false1893
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_274:                            # %cond.end1895
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_277
.LBB109_276:                            # %cond.false1903
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_277:                            # %cond.end1905
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_280
.LBB109_279:                            # %cond.false1923
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_280:                            # %cond.end1925
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_283
.LBB109_282:                            # %cond.false1933
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_283:                            # %cond.end1935
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_286
.LBB109_285:                            # %cond.false1953
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_286:                            # %cond.end1955
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_289
.LBB109_288:                            # %cond.false1963
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_289:                            # %cond.end1965
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_292
.LBB109_291:                            # %cond.false1983
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_292:                            # %cond.end1985
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_295
.LBB109_294:                            # %cond.false1993
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_295:                            # %cond.end1995
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_298
.LBB109_297:                            # %cond.false2011
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_298:                            # %cond.end2013
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_301
.LBB109_300:                            # %cond.false2021
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_301:                            # %cond.end2023
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_304
.LBB109_303:                            # %cond.false2039
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_304:                            # %cond.end2041
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_307
.LBB109_306:                            # %cond.false2049
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_307:                            # %cond.end2051
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_310
.LBB109_309:                            # %cond.false2067
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_310:                            # %cond.end2069
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB109_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB109_313
.LBB109_312:                            # %cond.false2077
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB109_313:                            # %cond.end2079
                                        #   in Loop: Header=BB109_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB109_315
.LBB109_314:                            # %if.else2089
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB109_315:                            # %if.end2194
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB109_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB109_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB109_325
.LBB109_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB109_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB109_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB109_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB109_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB109_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB109_324:                            # %land.end2285
                                        #   in Loop: Header=BB109_262 Depth=2
.LBB109_325:                            # %lor.end2286
                                        #   in Loop: Header=BB109_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB109_326:                            # %if.end2295
                                        #   in Loop: Header=BB109_262 Depth=2
	jmp	.LBB109_327
.LBB109_327:                            # %for.inc2296
                                        #   in Loop: Header=BB109_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_262
.LBB109_328:                            # %for.end2298
                                        #   in Loop: Header=BB109_260 Depth=1
	jmp	.LBB109_329
.LBB109_329:                            # %for.inc2299
                                        #   in Loop: Header=BB109_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_260
.LBB109_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB109_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB109_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB109_332 Depth=1
	movl	$0, -16(%rbp)
.LBB109_334:                            # %for.cond2312
                                        #   Parent Loop BB109_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB109_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB109_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB109_340
.LBB109_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB109_341
.LBB109_340:                            # %if.then2342
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB109_345
.LBB109_341:                            # %if.else2363
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB109_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB109_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB109_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB109_344:                            # %if.end2394
                                        #   in Loop: Header=BB109_334 Depth=2
	jmp	.LBB109_345
.LBB109_345:                            # %if.end2395
                                        #   in Loop: Header=BB109_334 Depth=2
	jmp	.LBB109_346
.LBB109_346:                            # %for.inc2396
                                        #   in Loop: Header=BB109_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_334
.LBB109_347:                            # %for.end2398
                                        #   in Loop: Header=BB109_332 Depth=1
	jmp	.LBB109_348
.LBB109_348:                            # %for.inc2399
                                        #   in Loop: Header=BB109_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_332
.LBB109_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB109_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB109_350 Depth=1
	movl	$0, -16(%rbp)
.LBB109_352:                            # %for.cond2409
                                        #   Parent Loop BB109_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB109_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB109_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB109_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB109_360
.LBB109_356:                            # %cond.false2429
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB109_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$127, %eax
	jmp	.LBB109_359
.LBB109_358:                            # %cond.false2441
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB109_359:                            # %cond.end2450
                                        #   in Loop: Header=BB109_352 Depth=2
.LBB109_360:                            # %cond.end2452
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB109_377
.LBB109_361:                            # %if.else2454
                                        #   in Loop: Header=BB109_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB109_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB109_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB109_368
.LBB109_364:                            # %cond.false2468
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB109_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$127, %eax
	jmp	.LBB109_367
.LBB109_366:                            # %cond.false2480
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB109_367:                            # %cond.end2489
                                        #   in Loop: Header=BB109_352 Depth=2
.LBB109_368:                            # %cond.end2491
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB109_376
.LBB109_369:                            # %if.else2493
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB109_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB109_375
.LBB109_371:                            # %cond.false2504
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB109_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$127, %eax
	jmp	.LBB109_374
.LBB109_373:                            # %cond.false2516
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB109_374:                            # %cond.end2525
                                        #   in Loop: Header=BB109_352 Depth=2
.LBB109_375:                            # %cond.end2527
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB109_376:                            # %if.end2529
                                        #   in Loop: Header=BB109_352 Depth=2
	jmp	.LBB109_377
.LBB109_377:                            # %if.end2530
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB109_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB109_383
.LBB109_379:                            # %cond.false2546
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB109_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$127, %eax
	jmp	.LBB109_382
.LBB109_381:                            # %cond.false2562
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB109_382:                            # %cond.end2575
                                        #   in Loop: Header=BB109_352 Depth=2
.LBB109_383:                            # %cond.end2577
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB109_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB109_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB109_390
.LBB109_386:                            # %cond.false2592
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB109_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB109_389
.LBB109_388:                            # %cond.false2599
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB109_389:                            # %cond.end2603
                                        #   in Loop: Header=BB109_352 Depth=2
.LBB109_390:                            # %cond.end2605
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB109_392
.LBB109_391:                            # %if.else2611
                                        #   in Loop: Header=BB109_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB109_392:                            # %if.end2617
                                        #   in Loop: Header=BB109_352 Depth=2
	jmp	.LBB109_393
.LBB109_393:                            # %for.inc2618
                                        #   in Loop: Header=BB109_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_352
.LBB109_394:                            # %for.end2620
                                        #   in Loop: Header=BB109_350 Depth=1
	jmp	.LBB109_395
.LBB109_395:                            # %for.inc2621
                                        #   in Loop: Header=BB109_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_350
.LBB109_396:                            # %for.end2623
	jmp	.LBB109_397
.LBB109_397:                            # %if.end2624
	cmpl	$1137689739, -72(%rbp)  # imm = 0x43CFC48B
	jne	.LBB109_399
.LBB109_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_398
.Lfunc_end109:
	.size	compute_colocated.46, .Lfunc_end109-compute_colocated.46
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.47    # -- Begin function compute_colocated.47
	.p2align	4, 0x90
	.type	compute_colocated.47,@function
compute_colocated.47:                   # @compute_colocated.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$957518300, -72(%rbp)   # imm = 0x391291DC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB110_11
.LBB110_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB110_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB110_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB110_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB110_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB110_8
.LBB110_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB110_8:                              # %if.end
	jmp	.LBB110_9
.LBB110_9:                              # %if.end20
	jmp	.LBB110_10
.LBB110_10:                             # %if.end21
	jmp	.LBB110_11
.LBB110_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB110_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB110_29
.LBB110_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB110_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB110_14 Depth=1
	movl	$0, -16(%rbp)
.LBB110_16:                             # %for.cond27
                                        #   Parent Loop BB110_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB110_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB110_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB110_22
.LBB110_21:                             # %if.else160
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB110_22:                             # %if.end283
                                        #   in Loop: Header=BB110_16 Depth=2
	jmp	.LBB110_24
.LBB110_23:                             # %if.else284
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB110_24:                             # %if.end391
                                        #   in Loop: Header=BB110_16 Depth=2
	jmp	.LBB110_25
.LBB110_25:                             # %for.inc
                                        #   in Loop: Header=BB110_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_16
.LBB110_26:                             # %for.end
                                        #   in Loop: Header=BB110_14 Depth=1
	jmp	.LBB110_27
.LBB110_27:                             # %for.inc392
                                        #   in Loop: Header=BB110_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_14
.LBB110_28:                             # %for.end394
	jmp	.LBB110_29
.LBB110_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB110_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_241
.LBB110_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB110_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB110_32 Depth=1
	movl	$0, -12(%rbp)
.LBB110_34:                             # %for.cond408
                                        #   Parent Loop BB110_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB110_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_39
.LBB110_38:                             # %cond.false
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_39:                             # %cond.end
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_42
.LBB110_41:                             # %cond.false427
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_42:                             # %cond.end429
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_45
.LBB110_44:                             # %cond.false447
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_45:                             # %cond.end449
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_48
.LBB110_47:                             # %cond.false457
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_48:                             # %cond.end459
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_51
.LBB110_50:                             # %cond.false477
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_51:                             # %cond.end479
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_54
.LBB110_53:                             # %cond.false487
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_54:                             # %cond.end489
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_57
.LBB110_56:                             # %cond.false507
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_57:                             # %cond.end509
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_60
.LBB110_59:                             # %cond.false517
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_60:                             # %cond.end519
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_63
.LBB110_62:                             # %cond.false537
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_63:                             # %cond.end539
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_66
.LBB110_65:                             # %cond.false547
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_66:                             # %cond.end549
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB110_81
.LBB110_68:                             # %if.else569
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_71
.LBB110_70:                             # %cond.false576
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_71:                             # %cond.end578
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_74
.LBB110_73:                             # %cond.false586
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_74:                             # %cond.end588
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_77
.LBB110_76:                             # %cond.false604
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_77:                             # %cond.end606
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_80
.LBB110_79:                             # %cond.false614
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_80:                             # %cond.end616
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_81:                             # %if.end626
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_84
.LBB110_83:                             # %cond.false633
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_84:                             # %cond.end635
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_87
.LBB110_86:                             # %cond.false643
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_87:                             # %cond.end645
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB110_102
.LBB110_89:                             # %if.else665
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_92
.LBB110_91:                             # %cond.false672
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_92:                             # %cond.end674
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_95
.LBB110_94:                             # %cond.false682
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_95:                             # %cond.end684
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_98
.LBB110_97:                             # %cond.false700
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_98:                             # %cond.end702
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_101
.LBB110_100:                            # %cond.false710
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_101:                            # %cond.end712
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_102:                            # %if.end722
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB110_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB110_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB110_112
.LBB110_107:                            # %lor.rhs
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB110_111:                            # %land.end
                                        #   in Loop: Header=BB110_34 Depth=2
.LBB110_112:                            # %lor.end
                                        #   in Loop: Header=BB110_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB110_113:                            # %if.end814
                                        #   in Loop: Header=BB110_34 Depth=2
	jmp	.LBB110_236
.LBB110_114:                            # %if.else815
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_117
.LBB110_116:                            # %cond.false822
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_117:                            # %cond.end824
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_120
.LBB110_119:                            # %cond.false832
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_120:                            # %cond.end834
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_123
.LBB110_122:                            # %cond.false851
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_123:                            # %cond.end853
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_126
.LBB110_125:                            # %cond.false861
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_126:                            # %cond.end863
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_129
.LBB110_128:                            # %cond.false881
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_129:                            # %cond.end883
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_132
.LBB110_131:                            # %cond.false891
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_132:                            # %cond.end893
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_135
.LBB110_134:                            # %cond.false911
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_135:                            # %cond.end913
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_138
.LBB110_137:                            # %cond.false921
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_138:                            # %cond.end923
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_141
.LBB110_140:                            # %cond.false941
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_141:                            # %cond.end943
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_144
.LBB110_143:                            # %cond.false951
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_144:                            # %cond.end953
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_147
.LBB110_146:                            # %cond.false968
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_147:                            # %cond.end970
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_150
.LBB110_149:                            # %cond.false978
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_150:                            # %cond.end980
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_153
.LBB110_152:                            # %cond.false996
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_153:                            # %cond.end998
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_156
.LBB110_155:                            # %cond.false1006
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_156:                            # %cond.end1008
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_159
.LBB110_158:                            # %cond.false1023
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_159:                            # %cond.end1025
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_162
.LBB110_161:                            # %cond.false1033
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_162:                            # %cond.end1035
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB110_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB110_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB110_172
.LBB110_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB110_171:                            # %land.end1133
                                        #   in Loop: Header=BB110_34 Depth=2
.LBB110_172:                            # %lor.end1134
                                        #   in Loop: Header=BB110_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB110_173:                            # %if.end1142
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_176
.LBB110_175:                            # %cond.false1149
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_176:                            # %cond.end1151
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_179
.LBB110_178:                            # %cond.false1159
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_179:                            # %cond.end1161
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_182
.LBB110_181:                            # %cond.false1178
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_182:                            # %cond.end1180
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_185
.LBB110_184:                            # %cond.false1188
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_185:                            # %cond.end1190
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_188
.LBB110_187:                            # %cond.false1208
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_188:                            # %cond.end1210
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_191
.LBB110_190:                            # %cond.false1218
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_191:                            # %cond.end1220
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_194
.LBB110_193:                            # %cond.false1238
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_194:                            # %cond.end1240
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_197
.LBB110_196:                            # %cond.false1248
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_197:                            # %cond.end1250
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_200
.LBB110_199:                            # %cond.false1268
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_200:                            # %cond.end1270
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_203
.LBB110_202:                            # %cond.false1278
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_203:                            # %cond.end1280
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_206
.LBB110_205:                            # %cond.false1295
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_206:                            # %cond.end1297
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_209
.LBB110_208:                            # %cond.false1305
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_209:                            # %cond.end1307
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_212
.LBB110_211:                            # %cond.false1323
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_212:                            # %cond.end1325
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_215
.LBB110_214:                            # %cond.false1333
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_215:                            # %cond.end1335
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_218
.LBB110_217:                            # %cond.false1350
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_218:                            # %cond.end1352
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_221
.LBB110_220:                            # %cond.false1360
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_221:                            # %cond.end1362
                                        #   in Loop: Header=BB110_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB110_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB110_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB110_231
.LBB110_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB110_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB110_230:                            # %land.end1460
                                        #   in Loop: Header=BB110_34 Depth=2
.LBB110_231:                            # %lor.end1461
                                        #   in Loop: Header=BB110_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB110_232:                            # %if.end1469
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB110_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB110_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB110_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB110_235:                            # %if.end1522
                                        #   in Loop: Header=BB110_34 Depth=2
	jmp	.LBB110_236
.LBB110_236:                            # %if.end1523
                                        #   in Loop: Header=BB110_34 Depth=2
	jmp	.LBB110_237
.LBB110_237:                            # %for.inc1524
                                        #   in Loop: Header=BB110_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_34
.LBB110_238:                            # %for.end1526
                                        #   in Loop: Header=BB110_32 Depth=1
	jmp	.LBB110_239
.LBB110_239:                            # %for.inc1527
                                        #   in Loop: Header=BB110_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_32
.LBB110_240:                            # %for.end1529
	jmp	.LBB110_241
.LBB110_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB110_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB110_259
.LBB110_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB110_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB110_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB110_245 Depth=1
	movl	$0, -16(%rbp)
.LBB110_247:                            # %for.cond1546
                                        #   Parent Loop BB110_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB110_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB110_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB110_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB110_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB110_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB110_252
.LBB110_251:                            # %if.else1699
                                        #   in Loop: Header=BB110_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB110_252:                            # %if.end1829
                                        #   in Loop: Header=BB110_247 Depth=2
	jmp	.LBB110_253
.LBB110_253:                            # %if.end1830
                                        #   in Loop: Header=BB110_247 Depth=2
	jmp	.LBB110_254
.LBB110_254:                            # %for.inc1831
                                        #   in Loop: Header=BB110_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_247
.LBB110_255:                            # %for.end1833
                                        #   in Loop: Header=BB110_245 Depth=1
	jmp	.LBB110_256
.LBB110_256:                            # %for.inc1834
                                        #   in Loop: Header=BB110_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_245
.LBB110_257:                            # %for.end1836
	jmp	.LBB110_258
.LBB110_258:                            # %if.end1837
	jmp	.LBB110_259
.LBB110_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB110_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB110_260 Depth=1
	movl	$0, -16(%rbp)
.LBB110_262:                            # %for.cond1845
                                        #   Parent Loop BB110_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB110_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB110_314
.LBB110_265:                            # %if.then1856
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_268
.LBB110_267:                            # %cond.false1863
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_268:                            # %cond.end1865
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_271
.LBB110_270:                            # %cond.false1873
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_271:                            # %cond.end1875
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_274
.LBB110_273:                            # %cond.false1893
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_274:                            # %cond.end1895
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_277
.LBB110_276:                            # %cond.false1903
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_277:                            # %cond.end1905
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_280
.LBB110_279:                            # %cond.false1923
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_280:                            # %cond.end1925
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_283
.LBB110_282:                            # %cond.false1933
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_283:                            # %cond.end1935
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_286
.LBB110_285:                            # %cond.false1953
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_286:                            # %cond.end1955
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_289
.LBB110_288:                            # %cond.false1963
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_289:                            # %cond.end1965
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_292
.LBB110_291:                            # %cond.false1983
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_292:                            # %cond.end1985
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_295
.LBB110_294:                            # %cond.false1993
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_295:                            # %cond.end1995
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_298
.LBB110_297:                            # %cond.false2011
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_298:                            # %cond.end2013
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_301
.LBB110_300:                            # %cond.false2021
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_301:                            # %cond.end2023
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_304
.LBB110_303:                            # %cond.false2039
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_304:                            # %cond.end2041
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_307
.LBB110_306:                            # %cond.false2049
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_307:                            # %cond.end2051
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_310
.LBB110_309:                            # %cond.false2067
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_310:                            # %cond.end2069
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_313
.LBB110_312:                            # %cond.false2077
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_313:                            # %cond.end2079
                                        #   in Loop: Header=BB110_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB110_315
.LBB110_314:                            # %if.else2089
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_315:                            # %if.end2194
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB110_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB110_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB110_325
.LBB110_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB110_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB110_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB110_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB110_324:                            # %land.end2285
                                        #   in Loop: Header=BB110_262 Depth=2
.LBB110_325:                            # %lor.end2286
                                        #   in Loop: Header=BB110_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB110_326:                            # %if.end2295
                                        #   in Loop: Header=BB110_262 Depth=2
	jmp	.LBB110_327
.LBB110_327:                            # %for.inc2296
                                        #   in Loop: Header=BB110_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_262
.LBB110_328:                            # %for.end2298
                                        #   in Loop: Header=BB110_260 Depth=1
	jmp	.LBB110_329
.LBB110_329:                            # %for.inc2299
                                        #   in Loop: Header=BB110_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_260
.LBB110_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB110_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB110_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB110_332 Depth=1
	movl	$0, -16(%rbp)
.LBB110_334:                            # %for.cond2312
                                        #   Parent Loop BB110_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB110_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB110_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB110_340
.LBB110_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB110_341
.LBB110_340:                            # %if.then2342
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB110_345
.LBB110_341:                            # %if.else2363
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB110_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB110_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB110_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB110_344:                            # %if.end2394
                                        #   in Loop: Header=BB110_334 Depth=2
	jmp	.LBB110_345
.LBB110_345:                            # %if.end2395
                                        #   in Loop: Header=BB110_334 Depth=2
	jmp	.LBB110_346
.LBB110_346:                            # %for.inc2396
                                        #   in Loop: Header=BB110_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_334
.LBB110_347:                            # %for.end2398
                                        #   in Loop: Header=BB110_332 Depth=1
	jmp	.LBB110_348
.LBB110_348:                            # %for.inc2399
                                        #   in Loop: Header=BB110_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_332
.LBB110_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB110_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB110_350 Depth=1
	movl	$0, -16(%rbp)
.LBB110_352:                            # %for.cond2409
                                        #   Parent Loop BB110_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB110_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB110_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB110_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB110_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB110_360
.LBB110_356:                            # %cond.false2429
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB110_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$127, %eax
	jmp	.LBB110_359
.LBB110_358:                            # %cond.false2441
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB110_359:                            # %cond.end2450
                                        #   in Loop: Header=BB110_352 Depth=2
.LBB110_360:                            # %cond.end2452
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB110_377
.LBB110_361:                            # %if.else2454
                                        #   in Loop: Header=BB110_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB110_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB110_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB110_368
.LBB110_364:                            # %cond.false2468
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB110_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$127, %eax
	jmp	.LBB110_367
.LBB110_366:                            # %cond.false2480
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB110_367:                            # %cond.end2489
                                        #   in Loop: Header=BB110_352 Depth=2
.LBB110_368:                            # %cond.end2491
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB110_376
.LBB110_369:                            # %if.else2493
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB110_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB110_375
.LBB110_371:                            # %cond.false2504
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB110_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$127, %eax
	jmp	.LBB110_374
.LBB110_373:                            # %cond.false2516
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB110_374:                            # %cond.end2525
                                        #   in Loop: Header=BB110_352 Depth=2
.LBB110_375:                            # %cond.end2527
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB110_376:                            # %if.end2529
                                        #   in Loop: Header=BB110_352 Depth=2
	jmp	.LBB110_377
.LBB110_377:                            # %if.end2530
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB110_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB110_383
.LBB110_379:                            # %cond.false2546
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB110_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$127, %eax
	jmp	.LBB110_382
.LBB110_381:                            # %cond.false2562
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB110_382:                            # %cond.end2575
                                        #   in Loop: Header=BB110_352 Depth=2
.LBB110_383:                            # %cond.end2577
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB110_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB110_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB110_390
.LBB110_386:                            # %cond.false2592
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB110_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB110_389
.LBB110_388:                            # %cond.false2599
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB110_389:                            # %cond.end2603
                                        #   in Loop: Header=BB110_352 Depth=2
.LBB110_390:                            # %cond.end2605
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB110_392
.LBB110_391:                            # %if.else2611
                                        #   in Loop: Header=BB110_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB110_392:                            # %if.end2617
                                        #   in Loop: Header=BB110_352 Depth=2
	jmp	.LBB110_393
.LBB110_393:                            # %for.inc2618
                                        #   in Loop: Header=BB110_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_352
.LBB110_394:                            # %for.end2620
                                        #   in Loop: Header=BB110_350 Depth=1
	jmp	.LBB110_395
.LBB110_395:                            # %for.inc2621
                                        #   in Loop: Header=BB110_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_350
.LBB110_396:                            # %for.end2623
	jmp	.LBB110_397
.LBB110_397:                            # %if.end2624
	cmpl	$957518300, -72(%rbp)   # imm = 0x391291DC
	jne	.LBB110_399
.LBB110_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_398
.Lfunc_end110:
	.size	compute_colocated.47, .Lfunc_end110-compute_colocated.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.48
	.type	gen_pic_list_from_frame_list.48,@function
gen_pic_list_from_frame_list.48:        # @gen_pic_list_from_frame_list.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1953214868, -64(%rbp)  # imm = 0x746BB194
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB111_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB111_3
.LBB111_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB111_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB111_28
# %bb.4:                                # %if.then1
	jmp	.LBB111_5
.LBB111_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_9 Depth 2
                                        #     Child Loop BB111_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB111_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB111_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB111_7:                              # %lor.end
                                        #   in Loop: Header=BB111_5 Depth=1
	testb	$1, %al
	jne	.LBB111_8
	jmp	.LBB111_27
.LBB111_8:                              # %while.body
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_9
.LBB111_9:                              # %for.cond
                                        #   Parent Loop BB111_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB111_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB111_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB111_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB111_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB111_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB111_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_17
.LBB111_13:                             # %if.end17
                                        #   in Loop: Header=BB111_9 Depth=2
	jmp	.LBB111_14
.LBB111_14:                             # %if.end18
                                        #   in Loop: Header=BB111_9 Depth=2
	jmp	.LBB111_15
.LBB111_15:                             # %for.inc
                                        #   in Loop: Header=BB111_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_9
.LBB111_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_17
.LBB111_17:                             # %for.end
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_18
.LBB111_18:                             # %for.cond20
                                        #   Parent Loop BB111_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB111_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB111_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB111_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB111_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB111_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB111_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_26
.LBB111_22:                             # %if.end41
                                        #   in Loop: Header=BB111_18 Depth=2
	jmp	.LBB111_23
.LBB111_23:                             # %if.end42
                                        #   in Loop: Header=BB111_18 Depth=2
	jmp	.LBB111_24
.LBB111_24:                             # %for.inc43
                                        #   in Loop: Header=BB111_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_18
.LBB111_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_26
.LBB111_26:                             # %for.end45
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_5
.LBB111_27:                             # %while.end
	jmp	.LBB111_28
.LBB111_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB111_53
# %bb.29:                               # %if.then48
	jmp	.LBB111_30
.LBB111_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_34 Depth 2
                                        #     Child Loop BB111_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB111_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB111_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB111_32:                             # %lor.end53
                                        #   in Loop: Header=BB111_30 Depth=1
	testb	$1, %al
	jne	.LBB111_33
	jmp	.LBB111_52
.LBB111_33:                             # %while.body54
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_34
.LBB111_34:                             # %for.cond55
                                        #   Parent Loop BB111_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB111_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB111_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB111_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB111_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB111_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB111_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_42
.LBB111_38:                             # %if.end77
                                        #   in Loop: Header=BB111_34 Depth=2
	jmp	.LBB111_39
.LBB111_39:                             # %if.end78
                                        #   in Loop: Header=BB111_34 Depth=2
	jmp	.LBB111_40
.LBB111_40:                             # %for.inc79
                                        #   in Loop: Header=BB111_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_34
.LBB111_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_42
.LBB111_42:                             # %for.end81
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_43
.LBB111_43:                             # %for.cond82
                                        #   Parent Loop BB111_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB111_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB111_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB111_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB111_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_51
.LBB111_47:                             # %if.end104
                                        #   in Loop: Header=BB111_43 Depth=2
	jmp	.LBB111_48
.LBB111_48:                             # %if.end105
                                        #   in Loop: Header=BB111_43 Depth=2
	jmp	.LBB111_49
.LBB111_49:                             # %for.inc106
                                        #   in Loop: Header=BB111_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_43
.LBB111_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_51
.LBB111_51:                             # %for.end108
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_30
.LBB111_52:                             # %while.end109
	jmp	.LBB111_53
.LBB111_53:                             # %if.end110
	cmpl	$1953214868, -64(%rbp)  # imm = 0x746BB194
	jne	.LBB111_55
.LBB111_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_54
.Lfunc_end111:
	.size	gen_pic_list_from_frame_list.48, .Lfunc_end111-gen_pic_list_from_frame_list.48
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.49
	.type	get_smallest_poc.49,@function
get_smallest_poc.49:                    # @get_smallest_poc.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1119583270, -20(%rbp)  # imm = 0x42BB7C26
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB112_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB112_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB112_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB112_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB112_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB112_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB112_7:                              # %if.end10
                                        #   in Loop: Header=BB112_3 Depth=1
	jmp	.LBB112_8
.LBB112_8:                              # %for.inc
                                        #   in Loop: Header=BB112_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_3
.LBB112_9:                              # %for.end
	cmpl	$1119583270, -20(%rbp)  # imm = 0x42BB7C26
	jne	.LBB112_11
.LBB112_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_10
.Lfunc_end112:
	.size	get_smallest_poc.49, .Lfunc_end112-get_smallest_poc.49
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.50
	.type	get_long_term_pic.50,@function
get_long_term_pic.50:                   # @get_long_term_pic.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1453021302, -28(%rbp)  # imm = 0x569B5876
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB113_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB113_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB113_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB113_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB113_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB113_23
.LBB113_7:                              # %if.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_8
.LBB113_8:                              # %if.end14
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_20
.LBB113_9:                              # %if.else
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB113_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB113_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB113_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB113_23
.LBB113_13:                             # %if.end34
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_14
.LBB113_14:                             # %if.end35
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB113_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB113_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB113_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB113_23
.LBB113_18:                             # %if.end56
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_19
.LBB113_19:                             # %if.end57
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_20
.LBB113_20:                             # %if.end58
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_21
.LBB113_21:                             # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_1
.LBB113_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB113_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1453021302, -28(%rbp)  # imm = 0x569B5876
	jne	.LBB113_25
.LBB113_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_24
.Lfunc_end113:
	.size	get_long_term_pic.50, .Lfunc_end113-get_long_term_pic.50
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.51   # -- Begin function fill_frame_num_gap.51
	.p2align	4, 0x90
	.type	fill_frame_num_gap.51,@function
fill_frame_num_gap.51:                  # @fill_frame_num_gap.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1783633927, -40(%rbp)  # imm = 0x6A501807
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB114_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB114_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB114_1
.LBB114_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1783633927, -40(%rbp)  # imm = 0x6A501807
	jne	.LBB114_5
.LBB114_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_4
.Lfunc_end114:
	.size	fill_frame_num_gap.51, .Lfunc_end114-fill_frame_num_gap.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.52
	.type	mark_pic_long_term.52,@function
mark_pic_long_term.52:                  # @mark_pic_long_term.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1994709777, -24(%rbp)  # imm = 0x76E4DB11
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB115_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB115_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB115_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB115_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB115_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB115_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB115_39
.LBB115_7:                              # %if.end
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_8
.LBB115_8:                              # %if.end50
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_9
.LBB115_9:                              # %for.inc
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_2
.LBB115_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB115_39
.LBB115_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB115_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB115_14
.LBB115_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB115_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB115_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB115_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB115_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB115_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB115_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB115_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB115_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB115_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB115_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB115_24:                             # %if.end123
	jmp	.LBB115_39
.LBB115_25:                             # %if.end124
                                        #   in Loop: Header=BB115_15 Depth=1
	jmp	.LBB115_26
.LBB115_26:                             # %if.end125
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB115_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB115_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB115_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB115_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB115_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB115_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB115_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB115_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB115_34:                             # %if.end194
	jmp	.LBB115_39
.LBB115_35:                             # %if.end195
                                        #   in Loop: Header=BB115_15 Depth=1
	jmp	.LBB115_36
.LBB115_36:                             # %if.end196
                                        #   in Loop: Header=BB115_15 Depth=1
	jmp	.LBB115_37
.LBB115_37:                             # %for.inc197
                                        #   in Loop: Header=BB115_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_15
.LBB115_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB115_39:                             # %if.end201
	cmpl	$1994709777, -24(%rbp)  # imm = 0x76E4DB11
	jne	.LBB115_41
.LBB115_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_40
.Lfunc_end115:
	.size	mark_pic_long_term.52, .Lfunc_end115-mark_pic_long_term.52
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.53      # -- Begin function alloc_colocated.53
	.p2align	4, 0x90
	.type	alloc_colocated.53,@function
alloc_colocated.53:                     # @alloc_colocated.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1228905898, -32(%rbp)  # imm = 0x493F9DAA
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB116_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB116_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB116_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB116_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1228905898, -32(%rbp)  # imm = 0x493F9DAA
	jne	.LBB116_6
.LBB116_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_5
.Lfunc_end116:
	.size	alloc_colocated.53, .Lfunc_end116-alloc_colocated.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.54
	.type	get_smallest_poc.54,@function
get_smallest_poc.54:                    # @get_smallest_poc.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1413379396, -20(%rbp)  # imm = 0x543E7544
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB117_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB117_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB117_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB117_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB117_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB117_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB117_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB117_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB117_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB117_7:                              # %if.end10
                                        #   in Loop: Header=BB117_3 Depth=1
	jmp	.LBB117_8
.LBB117_8:                              # %for.inc
                                        #   in Loop: Header=BB117_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_3
.LBB117_9:                              # %for.end
	cmpl	$1413379396, -20(%rbp)  # imm = 0x543E7544
	jne	.LBB117_11
.LBB117_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_10
.Lfunc_end117:
	.size	get_smallest_poc.54, .Lfunc_end117-get_smallest_poc.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.55
	.type	is_long_term_reference.55,@function
is_long_term_reference.55:              # @is_long_term_reference.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1681945390, -24(%rbp)  # imm = 0x6440732E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB118_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB118_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB118_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB118_18
.LBB118_4:                              # %if.end
	jmp	.LBB118_5
.LBB118_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB118_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB118_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB118_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB118_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB118_18
.LBB118_10:                             # %if.end17
	jmp	.LBB118_11
.LBB118_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB118_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB118_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB118_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB118_18
.LBB118_15:                             # %if.end30
	jmp	.LBB118_16
.LBB118_16:                             # %if.end31
	jmp	.LBB118_17
.LBB118_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB118_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1681945390, -24(%rbp)  # imm = 0x6440732E
	jne	.LBB118_20
.LBB118_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_19
.Lfunc_end118:
	.size	is_long_term_reference.55, .Lfunc_end118-is_long_term_reference.55
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.56    # -- Begin function dpb_combine_field.56
	.p2align	4, 0x90
	.type	dpb_combine_field.56,@function
dpb_combine_field.56:                   # @dpb_combine_field.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$643367863, -32(%rbp)   # imm = 0x265903B7
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB119_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB119_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB119_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB119_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_5
.LBB119_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB119_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB119_11
.LBB119_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB119_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB119_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB119_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB119_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB119_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB119_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB119_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB119_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB119_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB119_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB119_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB119_24
.LBB119_23:                             # %cond.false217
                                        #   in Loop: Header=BB119_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB119_24:                             # %cond.end226
                                        #   in Loop: Header=BB119_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB119_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_20
.LBB119_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB119_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB119_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB119_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB119_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB119_31
.LBB119_30:                             # %cond.false269
                                        #   in Loop: Header=BB119_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB119_31:                             # %cond.end278
                                        #   in Loop: Header=BB119_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB119_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_27
.LBB119_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB119_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB119_34 Depth=1
	movl	$0, -20(%rbp)
.LBB119_36:                             # %for.cond295
                                        #   Parent Loop BB119_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB119_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB119_40
.LBB119_39:                             # %cond.false445
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_40
.LBB119_40:                             # %cond.end446
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB119_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB119_43
.LBB119_42:                             # %cond.false462
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_43
.LBB119_43:                             # %cond.end463
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB119_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB119_46
.LBB119_45:                             # %cond.false479
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB119_46
.LBB119_46:                             # %cond.end480
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB119_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB119_49
.LBB119_48:                             # %cond.false501
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB119_49
.LBB119_49:                             # %cond.end502
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB119_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB119_52
.LBB119_51:                             # %cond.false647
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_52
.LBB119_52:                             # %cond.end648
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB119_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB119_55
.LBB119_54:                             # %cond.false665
                                        #   in Loop: Header=BB119_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_55
.LBB119_55:                             # %cond.end666
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB119_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB119_58
.LBB119_57:                             # %cond.false683
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB119_58
.LBB119_58:                             # %cond.end684
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB119_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB119_61
.LBB119_60:                             # %cond.false706
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB119_61
.LBB119_61:                             # %cond.end707
                                        #   in Loop: Header=BB119_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB119_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_36
.LBB119_63:                             # %for.end723
                                        #   in Loop: Header=BB119_34 Depth=1
	jmp	.LBB119_64
.LBB119_64:                             # %for.inc724
                                        #   in Loop: Header=BB119_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_34
.LBB119_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB119_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_76
.LBB119_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB119_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB119_68 Depth=1
	movl	$0, -20(%rbp)
.LBB119_70:                             # %for.cond737
                                        #   Parent Loop BB119_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB119_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB119_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_70
.LBB119_73:                             # %for.end758
                                        #   in Loop: Header=BB119_68 Depth=1
	jmp	.LBB119_74
.LBB119_74:                             # %for.inc759
                                        #   in Loop: Header=BB119_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_68
.LBB119_75:                             # %for.end761
	jmp	.LBB119_76
.LBB119_76:                             # %if.end762
	cmpl	$643367863, -32(%rbp)   # imm = 0x265903B7
	jne	.LBB119_78
.LBB119_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_77
.Lfunc_end119:
	.size	dpb_combine_field.56, .Lfunc_end119-dpb_combine_field.56
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.57 # -- Begin function reorder_ref_pic_list.57
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.57,@function
reorder_ref_pic_list.57:                # @reorder_ref_pic_list.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1631861476, -60(%rbp)  # imm = 0x61443AE4
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB120_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_3
.LBB120_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB120_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB120_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB120_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB120_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB120_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB120_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB120_7:                              # %if.end9
                                        #   in Loop: Header=BB120_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB120_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB120_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB120_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB120_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_12
.LBB120_11:                             # %if.else28
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB120_12:                             # %if.end33
                                        #   in Loop: Header=BB120_4 Depth=1
	jmp	.LBB120_17
.LBB120_13:                             # %if.else34
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB120_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_16
.LBB120_15:                             # %if.else46
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB120_16:                             # %if.end51
                                        #   in Loop: Header=BB120_4 Depth=1
	jmp	.LBB120_17
.LBB120_17:                             # %if.end52
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB120_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB120_20
.LBB120_19:                             # %if.else56
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB120_20:                             # %if.end57
                                        #   in Loop: Header=BB120_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB120_22
.LBB120_21:                             # %if.else58
                                        #   in Loop: Header=BB120_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB120_22:                             # %if.end61
                                        #   in Loop: Header=BB120_4 Depth=1
	jmp	.LBB120_23
.LBB120_23:                             # %for.inc
                                        #   in Loop: Header=BB120_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_4
.LBB120_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1631861476, -60(%rbp)  # imm = 0x61443AE4
	jne	.LBB120_26
.LBB120_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_25
.Lfunc_end120:
	.size	reorder_ref_pic_list.57, .Lfunc_end120-reorder_ref_pic_list.57
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.58 # -- Begin function replace_top_pic_with_frame.58
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.58,@function
replace_top_pic_with_frame.58:          # @replace_top_pic_with_frame.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$57362062, -32(%rbp)    # imm = 0x36B468E
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB121_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB121_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB121_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB121_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB121_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB121_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB121_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB121_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB121_10
.LBB121_7:                              # %if.end14
                                        #   in Loop: Header=BB121_3 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_9:                              # %for.end.loopexit
	jmp	.LBB121_10
.LBB121_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB121_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB121_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB121_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB121_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB121_15:                             # %if.end26
	jmp	.LBB121_16
.LBB121_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$57362062, -32(%rbp)    # imm = 0x36B468E
	jne	.LBB121_18
.LBB121_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_17
.Lfunc_end121:
	.size	replace_top_pic_with_frame.58, .Lfunc_end121-replace_top_pic_with_frame.58
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.59    # -- Begin function compute_colocated.59
	.p2align	4, 0x90
	.type	compute_colocated.59,@function
compute_colocated.59:                   # @compute_colocated.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1312364270, -72(%rbp)  # imm = 0x4E3916EE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB122_11
.LBB122_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB122_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB122_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB122_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB122_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB122_8
.LBB122_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
.LBB122_8:                              # %if.end
	jmp	.LBB122_9
.LBB122_9:                              # %if.end20
	jmp	.LBB122_10
.LBB122_10:                             # %if.end21
	jmp	.LBB122_11
.LBB122_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB122_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB122_29
.LBB122_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB122_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	$0, -16(%rbp)
.LBB122_16:                             # %for.cond27
                                        #   Parent Loop BB122_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB122_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB122_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB122_22
.LBB122_21:                             # %if.else160
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB122_22:                             # %if.end283
                                        #   in Loop: Header=BB122_16 Depth=2
	jmp	.LBB122_24
.LBB122_23:                             # %if.else284
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB122_24:                             # %if.end391
                                        #   in Loop: Header=BB122_16 Depth=2
	jmp	.LBB122_25
.LBB122_25:                             # %for.inc
                                        #   in Loop: Header=BB122_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_16
.LBB122_26:                             # %for.end
                                        #   in Loop: Header=BB122_14 Depth=1
	jmp	.LBB122_27
.LBB122_27:                             # %for.inc392
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_14
.LBB122_28:                             # %for.end394
	jmp	.LBB122_29
.LBB122_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB122_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_241
.LBB122_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB122_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB122_32 Depth=1
	movl	$0, -12(%rbp)
.LBB122_34:                             # %for.cond408
                                        #   Parent Loop BB122_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB122_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_39
.LBB122_38:                             # %cond.false
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_39:                             # %cond.end
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_42
.LBB122_41:                             # %cond.false427
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_42:                             # %cond.end429
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_45
.LBB122_44:                             # %cond.false447
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_45:                             # %cond.end449
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_48
.LBB122_47:                             # %cond.false457
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_48:                             # %cond.end459
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_51
.LBB122_50:                             # %cond.false477
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_51:                             # %cond.end479
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_54
.LBB122_53:                             # %cond.false487
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_54:                             # %cond.end489
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_57
.LBB122_56:                             # %cond.false507
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_57:                             # %cond.end509
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_60
.LBB122_59:                             # %cond.false517
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_60:                             # %cond.end519
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_63
.LBB122_62:                             # %cond.false537
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_63:                             # %cond.end539
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_66
.LBB122_65:                             # %cond.false547
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_66:                             # %cond.end549
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB122_81
.LBB122_68:                             # %if.else569
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_71
.LBB122_70:                             # %cond.false576
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_71:                             # %cond.end578
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_74
.LBB122_73:                             # %cond.false586
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_74:                             # %cond.end588
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_77
.LBB122_76:                             # %cond.false604
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_77:                             # %cond.end606
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_80
.LBB122_79:                             # %cond.false614
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_80:                             # %cond.end616
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB122_81:                             # %if.end626
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_84
.LBB122_83:                             # %cond.false633
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_84:                             # %cond.end635
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_87
.LBB122_86:                             # %cond.false643
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_87:                             # %cond.end645
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB122_102
.LBB122_89:                             # %if.else665
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_92
.LBB122_91:                             # %cond.false672
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_92:                             # %cond.end674
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_95
.LBB122_94:                             # %cond.false682
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_95:                             # %cond.end684
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_98
.LBB122_97:                             # %cond.false700
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_98:                             # %cond.end702
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_101
.LBB122_100:                            # %cond.false710
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_101:                            # %cond.end712
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB122_102:                            # %if.end722
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB122_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB122_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB122_112
.LBB122_107:                            # %lor.rhs
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB122_111:                            # %land.end
                                        #   in Loop: Header=BB122_34 Depth=2
.LBB122_112:                            # %lor.end
                                        #   in Loop: Header=BB122_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB122_113:                            # %if.end814
                                        #   in Loop: Header=BB122_34 Depth=2
	jmp	.LBB122_236
.LBB122_114:                            # %if.else815
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_117
.LBB122_116:                            # %cond.false822
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_117:                            # %cond.end824
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_120
.LBB122_119:                            # %cond.false832
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_120:                            # %cond.end834
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_123
.LBB122_122:                            # %cond.false851
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_123:                            # %cond.end853
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_126
.LBB122_125:                            # %cond.false861
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_126:                            # %cond.end863
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_129
.LBB122_128:                            # %cond.false881
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_129:                            # %cond.end883
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_132
.LBB122_131:                            # %cond.false891
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_132:                            # %cond.end893
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_135
.LBB122_134:                            # %cond.false911
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_135:                            # %cond.end913
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_138
.LBB122_137:                            # %cond.false921
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_138:                            # %cond.end923
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_141
.LBB122_140:                            # %cond.false941
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_141:                            # %cond.end943
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_144
.LBB122_143:                            # %cond.false951
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_144:                            # %cond.end953
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_147
.LBB122_146:                            # %cond.false968
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_147:                            # %cond.end970
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_150
.LBB122_149:                            # %cond.false978
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_150:                            # %cond.end980
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_153
.LBB122_152:                            # %cond.false996
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_153:                            # %cond.end998
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_156
.LBB122_155:                            # %cond.false1006
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_156:                            # %cond.end1008
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_159
.LBB122_158:                            # %cond.false1023
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_159:                            # %cond.end1025
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_162
.LBB122_161:                            # %cond.false1033
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_162:                            # %cond.end1035
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB122_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB122_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB122_172
.LBB122_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB122_171:                            # %land.end1133
                                        #   in Loop: Header=BB122_34 Depth=2
.LBB122_172:                            # %lor.end1134
                                        #   in Loop: Header=BB122_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB122_173:                            # %if.end1142
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_176
.LBB122_175:                            # %cond.false1149
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_176:                            # %cond.end1151
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_179
.LBB122_178:                            # %cond.false1159
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_179:                            # %cond.end1161
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_182
.LBB122_181:                            # %cond.false1178
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_182:                            # %cond.end1180
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_185
.LBB122_184:                            # %cond.false1188
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_185:                            # %cond.end1190
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_188
.LBB122_187:                            # %cond.false1208
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_188:                            # %cond.end1210
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_191
.LBB122_190:                            # %cond.false1218
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_191:                            # %cond.end1220
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_194
.LBB122_193:                            # %cond.false1238
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_194:                            # %cond.end1240
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_197
.LBB122_196:                            # %cond.false1248
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_197:                            # %cond.end1250
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_200
.LBB122_199:                            # %cond.false1268
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_200:                            # %cond.end1270
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_203
.LBB122_202:                            # %cond.false1278
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_203:                            # %cond.end1280
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_206
.LBB122_205:                            # %cond.false1295
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_206:                            # %cond.end1297
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_209
.LBB122_208:                            # %cond.false1305
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_209:                            # %cond.end1307
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_212
.LBB122_211:                            # %cond.false1323
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_212:                            # %cond.end1325
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_215
.LBB122_214:                            # %cond.false1333
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_215:                            # %cond.end1335
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_218
.LBB122_217:                            # %cond.false1350
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_218:                            # %cond.end1352
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_221
.LBB122_220:                            # %cond.false1360
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_221:                            # %cond.end1362
                                        #   in Loop: Header=BB122_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB122_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB122_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB122_231
.LBB122_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB122_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB122_230:                            # %land.end1460
                                        #   in Loop: Header=BB122_34 Depth=2
.LBB122_231:                            # %lor.end1461
                                        #   in Loop: Header=BB122_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB122_232:                            # %if.end1469
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB122_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB122_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB122_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB122_235:                            # %if.end1522
                                        #   in Loop: Header=BB122_34 Depth=2
	jmp	.LBB122_236
.LBB122_236:                            # %if.end1523
                                        #   in Loop: Header=BB122_34 Depth=2
	jmp	.LBB122_237
.LBB122_237:                            # %for.inc1524
                                        #   in Loop: Header=BB122_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_34
.LBB122_238:                            # %for.end1526
                                        #   in Loop: Header=BB122_32 Depth=1
	jmp	.LBB122_239
.LBB122_239:                            # %for.inc1527
                                        #   in Loop: Header=BB122_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_32
.LBB122_240:                            # %for.end1529
	jmp	.LBB122_241
.LBB122_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB122_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB122_259
.LBB122_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB122_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB122_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB122_245 Depth=1
	movl	$0, -16(%rbp)
.LBB122_247:                            # %for.cond1546
                                        #   Parent Loop BB122_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB122_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB122_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB122_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB122_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB122_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB122_252
.LBB122_251:                            # %if.else1699
                                        #   in Loop: Header=BB122_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB122_252:                            # %if.end1829
                                        #   in Loop: Header=BB122_247 Depth=2
	jmp	.LBB122_253
.LBB122_253:                            # %if.end1830
                                        #   in Loop: Header=BB122_247 Depth=2
	jmp	.LBB122_254
.LBB122_254:                            # %for.inc1831
                                        #   in Loop: Header=BB122_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_247
.LBB122_255:                            # %for.end1833
                                        #   in Loop: Header=BB122_245 Depth=1
	jmp	.LBB122_256
.LBB122_256:                            # %for.inc1834
                                        #   in Loop: Header=BB122_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_245
.LBB122_257:                            # %for.end1836
	jmp	.LBB122_258
.LBB122_258:                            # %if.end1837
	jmp	.LBB122_259
.LBB122_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB122_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB122_260 Depth=1
	movl	$0, -16(%rbp)
.LBB122_262:                            # %for.cond1845
                                        #   Parent Loop BB122_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB122_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB122_314
.LBB122_265:                            # %if.then1856
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_268
.LBB122_267:                            # %cond.false1863
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_268:                            # %cond.end1865
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_271
.LBB122_270:                            # %cond.false1873
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_271:                            # %cond.end1875
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_274
.LBB122_273:                            # %cond.false1893
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_274:                            # %cond.end1895
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_277
.LBB122_276:                            # %cond.false1903
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_277:                            # %cond.end1905
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_280
.LBB122_279:                            # %cond.false1923
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_280:                            # %cond.end1925
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_283
.LBB122_282:                            # %cond.false1933
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_283:                            # %cond.end1935
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_286
.LBB122_285:                            # %cond.false1953
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_286:                            # %cond.end1955
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_289
.LBB122_288:                            # %cond.false1963
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_289:                            # %cond.end1965
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_292
.LBB122_291:                            # %cond.false1983
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_292:                            # %cond.end1985
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_295
.LBB122_294:                            # %cond.false1993
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_295:                            # %cond.end1995
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_298
.LBB122_297:                            # %cond.false2011
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_298:                            # %cond.end2013
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_301
.LBB122_300:                            # %cond.false2021
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_301:                            # %cond.end2023
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_304
.LBB122_303:                            # %cond.false2039
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_304:                            # %cond.end2041
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_307
.LBB122_306:                            # %cond.false2049
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_307:                            # %cond.end2051
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_310
.LBB122_309:                            # %cond.false2067
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_310:                            # %cond.end2069
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB122_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB122_313
.LBB122_312:                            # %cond.false2077
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB122_313:                            # %cond.end2079
                                        #   in Loop: Header=BB122_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB122_315
.LBB122_314:                            # %if.else2089
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB122_315:                            # %if.end2194
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB122_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB122_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB122_325
.LBB122_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB122_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB122_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB122_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB122_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB122_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB122_324:                            # %land.end2285
                                        #   in Loop: Header=BB122_262 Depth=2
.LBB122_325:                            # %lor.end2286
                                        #   in Loop: Header=BB122_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB122_326:                            # %if.end2295
                                        #   in Loop: Header=BB122_262 Depth=2
	jmp	.LBB122_327
.LBB122_327:                            # %for.inc2296
                                        #   in Loop: Header=BB122_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_262
.LBB122_328:                            # %for.end2298
                                        #   in Loop: Header=BB122_260 Depth=1
	jmp	.LBB122_329
.LBB122_329:                            # %for.inc2299
                                        #   in Loop: Header=BB122_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_260
.LBB122_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB122_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB122_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB122_332 Depth=1
	movl	$0, -16(%rbp)
.LBB122_334:                            # %for.cond2312
                                        #   Parent Loop BB122_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB122_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB122_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB122_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB122_340
.LBB122_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB122_341
.LBB122_340:                            # %if.then2342
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB122_345
.LBB122_341:                            # %if.else2363
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB122_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB122_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB122_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB122_344:                            # %if.end2394
                                        #   in Loop: Header=BB122_334 Depth=2
	jmp	.LBB122_345
.LBB122_345:                            # %if.end2395
                                        #   in Loop: Header=BB122_334 Depth=2
	jmp	.LBB122_346
.LBB122_346:                            # %for.inc2396
                                        #   in Loop: Header=BB122_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_334
.LBB122_347:                            # %for.end2398
                                        #   in Loop: Header=BB122_332 Depth=1
	jmp	.LBB122_348
.LBB122_348:                            # %for.inc2399
                                        #   in Loop: Header=BB122_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_332
.LBB122_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB122_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB122_350 Depth=1
	movl	$0, -16(%rbp)
.LBB122_352:                            # %for.cond2409
                                        #   Parent Loop BB122_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB122_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB122_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB122_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB122_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB122_360
.LBB122_356:                            # %cond.false2429
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB122_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$127, %eax
	jmp	.LBB122_359
.LBB122_358:                            # %cond.false2441
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB122_359:                            # %cond.end2450
                                        #   in Loop: Header=BB122_352 Depth=2
.LBB122_360:                            # %cond.end2452
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB122_377
.LBB122_361:                            # %if.else2454
                                        #   in Loop: Header=BB122_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB122_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB122_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB122_368
.LBB122_364:                            # %cond.false2468
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB122_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$127, %eax
	jmp	.LBB122_367
.LBB122_366:                            # %cond.false2480
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB122_367:                            # %cond.end2489
                                        #   in Loop: Header=BB122_352 Depth=2
.LBB122_368:                            # %cond.end2491
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB122_376
.LBB122_369:                            # %if.else2493
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB122_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB122_375
.LBB122_371:                            # %cond.false2504
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB122_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$127, %eax
	jmp	.LBB122_374
.LBB122_373:                            # %cond.false2516
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB122_374:                            # %cond.end2525
                                        #   in Loop: Header=BB122_352 Depth=2
.LBB122_375:                            # %cond.end2527
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB122_376:                            # %if.end2529
                                        #   in Loop: Header=BB122_352 Depth=2
	jmp	.LBB122_377
.LBB122_377:                            # %if.end2530
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB122_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB122_383
.LBB122_379:                            # %cond.false2546
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB122_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$127, %eax
	jmp	.LBB122_382
.LBB122_381:                            # %cond.false2562
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB122_382:                            # %cond.end2575
                                        #   in Loop: Header=BB122_352 Depth=2
.LBB122_383:                            # %cond.end2577
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB122_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB122_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB122_390
.LBB122_386:                            # %cond.false2592
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB122_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB122_389
.LBB122_388:                            # %cond.false2599
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB122_389:                            # %cond.end2603
                                        #   in Loop: Header=BB122_352 Depth=2
.LBB122_390:                            # %cond.end2605
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB122_392
.LBB122_391:                            # %if.else2611
                                        #   in Loop: Header=BB122_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB122_392:                            # %if.end2617
                                        #   in Loop: Header=BB122_352 Depth=2
	jmp	.LBB122_393
.LBB122_393:                            # %for.inc2618
                                        #   in Loop: Header=BB122_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_352
.LBB122_394:                            # %for.end2620
                                        #   in Loop: Header=BB122_350 Depth=1
	jmp	.LBB122_395
.LBB122_395:                            # %for.inc2621
                                        #   in Loop: Header=BB122_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_350
.LBB122_396:                            # %for.end2623
	jmp	.LBB122_397
.LBB122_397:                            # %if.end2624
	cmpl	$1312364270, -72(%rbp)  # imm = 0x4E3916EE
	jne	.LBB122_399
.LBB122_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_398
.Lfunc_end122:
	.size	compute_colocated.59, .Lfunc_end122-compute_colocated.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.60
	.type	compare_fs_by_poc_asc.60,@function
compare_fs_by_poc_asc.60:               # @compare_fs_by_poc_asc.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1554548950, -16(%rbp)  # imm = 0x5CA888D6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB123_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB123_5
.LBB123_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB123_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB123_5
.LBB123_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB123_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1554548950, -16(%rbp)  # imm = 0x5CA888D6
	jne	.LBB123_7
.LBB123_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_6
.Lfunc_end123:
	.size	compare_fs_by_poc_asc.60, .Lfunc_end123-compare_fs_by_poc_asc.60
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.61 # -- Begin function store_picture_in_dpb.61
	.p2align	4, 0x90
	.type	store_picture_in_dpb.61,@function
store_picture_in_dpb.61:                # @store_picture_in_dpb.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$393896930, -20(%rbp)   # imm = 0x177A63E2
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB124_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB124_6
.LBB124_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB124_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB124_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB124_5:                              # %if.end
	jmp	.LBB124_6
.LBB124_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB124_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB124_23
.LBB124_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB124_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB124_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB124_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB124_14
.LBB124_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB124_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB124_20
.LBB124_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB124_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB124_18
.LBB124_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB124_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB124_19
.LBB124_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB124_50
.LBB124_19:                             # %if.end48
	jmp	.LBB124_20
.LBB124_20:                             # %if.end49
	jmp	.LBB124_21
.LBB124_21:                             # %if.end50
	jmp	.LBB124_22
.LBB124_22:                             # %if.end51
	jmp	.LBB124_23
.LBB124_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB124_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB124_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB124_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB124_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB124_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB124_29:                             # %if.end67
	jmp	.LBB124_30
.LBB124_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB124_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB124_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB124_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB124_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB124_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB124_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB124_35
.LBB124_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB124_50
.LBB124_35:                             # %if.end80
                                        #   in Loop: Header=BB124_30 Depth=1
	jmp	.LBB124_36
.LBB124_36:                             # %if.end81
                                        #   in Loop: Header=BB124_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB124_30
.LBB124_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB124_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB124_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB124_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB124_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB124_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB124_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB124_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB124_43:                             # %if.end94
                                        #   in Loop: Header=BB124_40 Depth=1
	jmp	.LBB124_44
.LBB124_44:                             # %for.inc
                                        #   in Loop: Header=BB124_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_40
.LBB124_45:                             # %for.end
	jmp	.LBB124_46
.LBB124_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB124_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB124_49
.LBB124_48:                             # %if.else104
	movq	$0, dpb+56
.LBB124_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB124_50:                             # %return
	cmpl	$393896930, -20(%rbp)   # imm = 0x177A63E2
	jne	.LBB124_52
.LBB124_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_51
.Lfunc_end124:
	.size	store_picture_in_dpb.61, .Lfunc_end124-store_picture_in_dpb.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.62
	.type	get_smallest_poc.62,@function
get_smallest_poc.62:                    # @get_smallest_poc.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2024777841, -20(%rbp)  # imm = 0x78AFA871
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB125_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB125_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB125_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB125_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB125_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB125_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB125_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB125_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB125_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB125_7:                              # %if.end10
                                        #   in Loop: Header=BB125_3 Depth=1
	jmp	.LBB125_8
.LBB125_8:                              # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_3
.LBB125_9:                              # %for.end
	cmpl	$2024777841, -20(%rbp)  # imm = 0x78AFA871
	jne	.LBB125_11
.LBB125_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_10
.Lfunc_end125:
	.size	get_smallest_poc.62, .Lfunc_end125-get_smallest_poc.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.63
	.type	output_one_frame_from_dpb.63,@function
output_one_frame_from_dpb.63:           # @output_one_frame_from_dpb.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1940609875, -12(%rbp)  # imm = 0x73AB5B53
	cmpl	$1, dpb+28
	jae	.LBB126_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB126_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB126_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB126_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB126_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB126_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB126_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB126_8:                              # %if.end10
	cmpl	$1940609875, -12(%rbp)  # imm = 0x73AB5B53
	jne	.LBB126_10
.LBB126_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_9
.Lfunc_end126:
	.size	output_one_frame_from_dpb.63, .Lfunc_end126-output_one_frame_from_dpb.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.64
	.type	compare_pic_by_pic_num_desc.64,@function
compare_pic_by_pic_num_desc.64:         # @compare_pic_by_pic_num_desc.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$154433628, -16(%rbp)   # imm = 0x934785C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB127_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB127_5
.LBB127_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB127_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB127_5
.LBB127_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB127_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$154433628, -16(%rbp)   # imm = 0x934785C
	jne	.LBB127_7
.LBB127_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_6
.Lfunc_end127:
	.size	compare_pic_by_pic_num_desc.64, .Lfunc_end127-compare_pic_by_pic_num_desc.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.65
	.type	reorder_long_term.65,@function
reorder_long_term.65:                   # @reorder_long_term.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1921432653, -44(%rbp)  # imm = 0x7286BC4D
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB128_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_1
.LBB128_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB128_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB128_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB128_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB128_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB128_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB128_9
.LBB128_8:                              # %if.then
                                        #   in Loop: Header=BB128_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB128_9:                              # %if.end
                                        #   in Loop: Header=BB128_5 Depth=1
	jmp	.LBB128_10
.LBB128_10:                             # %for.inc19
                                        #   in Loop: Header=BB128_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_5
.LBB128_11:                             # %for.end21
	cmpl	$1921432653, -44(%rbp)  # imm = 0x7286BC4D
	jne	.LBB128_13
.LBB128_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_12
.Lfunc_end128:
	.size	reorder_long_term.65, .Lfunc_end128-reorder_long_term.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.66
	.type	is_long_term_reference.66,@function
is_long_term_reference.66:              # @is_long_term_reference.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$170673686, -24(%rbp)   # imm = 0xA2C4616
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB129_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB129_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB129_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB129_18
.LBB129_4:                              # %if.end
	jmp	.LBB129_5
.LBB129_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB129_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB129_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB129_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB129_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB129_18
.LBB129_10:                             # %if.end17
	jmp	.LBB129_11
.LBB129_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB129_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB129_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB129_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB129_18
.LBB129_15:                             # %if.end30
	jmp	.LBB129_16
.LBB129_16:                             # %if.end31
	jmp	.LBB129_17
.LBB129_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB129_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$170673686, -24(%rbp)   # imm = 0xA2C4616
	jne	.LBB129_20
.LBB129_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_19
.Lfunc_end129:
	.size	is_long_term_reference.66, .Lfunc_end129-is_long_term_reference.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.67
	.type	compare_fs_by_poc_asc.67,@function
compare_fs_by_poc_asc.67:               # @compare_fs_by_poc_asc.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1143919660, -16(%rbp)  # imm = 0x442ED42C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB130_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB130_5
.LBB130_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB130_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB130_5
.LBB130_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB130_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1143919660, -16(%rbp)  # imm = 0x442ED42C
	jne	.LBB130_7
.LBB130_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_6
.Lfunc_end130:
	.size	compare_fs_by_poc_asc.67, .Lfunc_end130-compare_fs_by_poc_asc.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.68
	.type	idr_memory_management.68,@function
idr_memory_management.68:               # @idr_memory_management.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$494841571, -20(%rbp)   # imm = 0x1D7EAEE3
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB131_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB131_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB131_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB131_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB131_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_2
.LBB131_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB131_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB131_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB131_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB131_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_6
.LBB131_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB131_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB131_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB131_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB131_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_10
.LBB131_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB131_15
.LBB131_14:                             # %if.else
	callq	flush_dpb
.LBB131_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB131_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB131_18
.LBB131_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB131_18:                             # %if.end23
	cmpl	$494841571, -20(%rbp)   # imm = 0x1D7EAEE3
	jne	.LBB131_20
.LBB131_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_19
.Lfunc_end131:
	.size	idr_memory_management.68, .Lfunc_end131-idr_memory_management.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.69
	.type	mm_unmark_long_term_for_reference.69,@function
mm_unmark_long_term_for_reference.69:   # @mm_unmark_long_term_for_reference.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$400089142, -12(%rbp)   # imm = 0x17D8E036
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB132_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB132_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB132_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB132_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB132_7:                              # %if.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_8
.LBB132_8:                              # %if.end14
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_24
.LBB132_9:                              # %if.else
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB132_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB132_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB132_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB132_14:                             # %if.end57
	jmp	.LBB132_27
.LBB132_15:                             # %if.end58
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_16
.LBB132_16:                             # %if.end59
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB132_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB132_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB132_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB132_21:                             # %if.end106
	jmp	.LBB132_27
.LBB132_22:                             # %if.end107
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_23
.LBB132_23:                             # %if.end108
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_24
.LBB132_24:                             # %if.end109
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_25
.LBB132_25:                             # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_26:                             # %for.end.loopexit
	jmp	.LBB132_27
.LBB132_27:                             # %for.end
	cmpl	$400089142, -12(%rbp)   # imm = 0x17D8E036
	jne	.LBB132_29
.LBB132_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_28
.Lfunc_end132:
	.size	mm_unmark_long_term_for_reference.69, .Lfunc_end132-mm_unmark_long_term_for_reference.69
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.70    # -- Begin function gen_field_ref_ids.70
	.p2align	4, 0x90
	.type	gen_field_ref_ids.70,@function
gen_field_ref_ids.70:                   # @gen_field_ref_ids.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$369897688, -28(%rbp)   # imm = 0x160C30D8
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB133_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	$0, -4(%rbp)
.LBB133_3:                              # %for.cond1
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB133_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB133_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB133_7
.LBB133_6:                              # %cond.false
                                        #   in Loop: Header=BB133_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_7
.LBB133_7:                              # %cond.end
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB133_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB133_10
.LBB133_9:                              # %cond.false32
                                        #   in Loop: Header=BB133_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_10
.LBB133_10:                             # %cond.end33
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_3
.LBB133_12:                             # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_13
.LBB133_13:                             # %for.inc45
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_1
.LBB133_14:                             # %for.end47
	cmpl	$369897688, -28(%rbp)   # imm = 0x160C30D8
	jne	.LBB133_16
.LBB133_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_15
.Lfunc_end133:
	.size	gen_field_ref_ids.70, .Lfunc_end133-gen_field_ref_ids.70
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.71      # -- Begin function dpb_split_field.71
	.p2align	4, 0x90
	.type	dpb_split_field.71,@function
dpb_split_field.71:                     # @dpb_split_field.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$781365130, -56(%rbp)   # imm = 0x2E92AF8A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB134_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB134_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB134_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_2
.LBB134_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB134_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB134_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB134_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_6
.LBB134_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB134_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB134_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB134_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_10
.LBB134_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB134_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB134_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB134_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_14
.LBB134_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB134_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB134_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB134_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB134_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB134_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_19
.LBB134_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB134_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB134_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB134_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB134_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_23
.LBB134_26:                             # %for.end328
	jmp	.LBB134_27
.LBB134_27:                             # %if.end
	jmp	.LBB134_29
.LBB134_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB134_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB134_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB134_30 Depth=1
	movl	$0, -4(%rbp)
.LBB134_32:                             # %for.cond343
                                        #   Parent Loop BB134_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB134_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB134_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB134_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB134_32 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB134_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB134_38
.LBB134_37:                             # %cond.false
                                        #   in Loop: Header=BB134_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_38
.LBB134_38:                             # %cond.end
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB134_41
.LBB134_40:                             # %cond.false415
                                        #   in Loop: Header=BB134_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_41
.LBB134_41:                             # %cond.end416
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB134_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB134_44
.LBB134_43:                             # %cond.false436
                                        #   in Loop: Header=BB134_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_44
.LBB134_44:                             # %cond.end437
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB134_47
.LBB134_46:                             # %cond.false456
                                        #   in Loop: Header=BB134_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_47
.LBB134_47:                             # %cond.end457
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB134_55
.LBB134_48:                             # %if.else466
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB134_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB134_51
.LBB134_50:                             # %cond.false491
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB134_51
.LBB134_51:                             # %cond.end492
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB134_54
.LBB134_53:                             # %cond.false509
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB134_54
.LBB134_54:                             # %cond.end510
                                        #   in Loop: Header=BB134_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB134_55:                             # %if.end519
                                        #   in Loop: Header=BB134_32 Depth=2
	jmp	.LBB134_56
.LBB134_56:                             # %for.inc520
                                        #   in Loop: Header=BB134_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_32
.LBB134_57:                             # %for.end522
                                        #   in Loop: Header=BB134_30 Depth=1
	jmp	.LBB134_58
.LBB134_58:                             # %for.inc523
                                        #   in Loop: Header=BB134_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_30
.LBB134_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB134_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB134_73
.LBB134_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB134_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB134_62 Depth=1
	movl	$0, -8(%rbp)
.LBB134_64:                             # %for.cond538
                                        #   Parent Loop BB134_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB134_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB134_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB134_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB134_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB134_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB134_68:                             # %if.end908
                                        #   in Loop: Header=BB134_64 Depth=2
	jmp	.LBB134_69
.LBB134_69:                             # %for.inc909
                                        #   in Loop: Header=BB134_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_64
.LBB134_70:                             # %for.end911
                                        #   in Loop: Header=BB134_62 Depth=1
	jmp	.LBB134_71
.LBB134_71:                             # %for.inc912
                                        #   in Loop: Header=BB134_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_62
.LBB134_72:                             # %for.end914
	jmp	.LBB134_73
.LBB134_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB134_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB134_74 Depth=1
	movl	$0, -8(%rbp)
.LBB134_76:                             # %for.cond923
                                        #   Parent Loop BB134_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB134_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB134_148
.LBB134_79:                             # %if.then954
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB134_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_83
.LBB134_82:                             # %cond.false991
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_83:                             # %cond.end993
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_86
.LBB134_85:                             # %cond.false1001
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_86:                             # %cond.end1003
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_89
.LBB134_88:                             # %cond.false1032
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_89:                             # %cond.end1034
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_92
.LBB134_91:                             # %cond.false1042
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_92:                             # %cond.end1044
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_95
.LBB134_94:                             # %cond.false1073
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_95:                             # %cond.end1075
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_98
.LBB134_97:                             # %cond.false1083
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_98:                             # %cond.end1085
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_101
.LBB134_100:                            # %cond.false1114
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_101:                            # %cond.end1116
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_104
.LBB134_103:                            # %cond.false1124
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_104:                            # %cond.end1126
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_107
.LBB134_106:                            # %cond.false1155
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_107:                            # %cond.end1157
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_110
.LBB134_109:                            # %cond.false1165
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_110:                            # %cond.end1167
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB134_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB134_125
.LBB134_112:                            # %if.else1190
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_115
.LBB134_114:                            # %cond.false1198
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_115:                            # %cond.end1200
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_118
.LBB134_117:                            # %cond.false1208
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_118:                            # %cond.end1210
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB134_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB134_121
.LBB134_120:                            # %cond.false1237
                                        #   in Loop: Header=BB134_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_121
.LBB134_121:                            # %cond.end1238
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB134_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB134_124
.LBB134_123:                            # %cond.false1254
                                        #   in Loop: Header=BB134_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_124
.LBB134_124:                            # %cond.end1255
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB134_125:                            # %if.end1264
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_128
.LBB134_127:                            # %cond.false1272
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_128:                            # %cond.end1274
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_131
.LBB134_130:                            # %cond.false1282
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_131:                            # %cond.end1284
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB134_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB134_146
.LBB134_133:                            # %if.else1307
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_136
.LBB134_135:                            # %cond.false1315
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_136:                            # %cond.end1317
                                        #   in Loop: Header=BB134_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB134_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB134_139
.LBB134_138:                            # %cond.false1325
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB134_139:                            # %cond.end1327
                                        #   in Loop: Header=BB134_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB134_142
.LBB134_141:                            # %cond.false1355
                                        #   in Loop: Header=BB134_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_142
.LBB134_142:                            # %cond.end1356
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB134_145
.LBB134_144:                            # %cond.false1373
                                        #   in Loop: Header=BB134_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_145
.LBB134_145:                            # %cond.end1374
                                        #   in Loop: Header=BB134_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB134_146:                            # %if.end1383
                                        #   in Loop: Header=BB134_76 Depth=2
	jmp	.LBB134_147
.LBB134_147:                            # %if.end1384
                                        #   in Loop: Header=BB134_76 Depth=2
	jmp	.LBB134_148
.LBB134_148:                            # %if.end1385
                                        #   in Loop: Header=BB134_76 Depth=2
	jmp	.LBB134_149
.LBB134_149:                            # %for.inc1386
                                        #   in Loop: Header=BB134_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_76
.LBB134_150:                            # %for.end1388
                                        #   in Loop: Header=BB134_74 Depth=1
	jmp	.LBB134_151
.LBB134_151:                            # %for.inc1389
                                        #   in Loop: Header=BB134_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_74
.LBB134_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB134_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB134_153 Depth=1
	movl	$0, -4(%rbp)
.LBB134_155:                            # %for.cond1399
                                        #   Parent Loop BB134_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB134_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB134_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_155
.LBB134_158:                            # %for.end1414
                                        #   in Loop: Header=BB134_153 Depth=1
	jmp	.LBB134_159
.LBB134_159:                            # %for.inc1415
                                        #   in Loop: Header=BB134_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_153
.LBB134_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB134_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB134_174
.LBB134_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB134_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB134_163 Depth=1
	movl	$0, -4(%rbp)
.LBB134_165:                            # %for.cond1431
                                        #   Parent Loop BB134_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB134_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB134_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB134_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB134_169
.LBB134_168:                            # %cond.false1462
                                        #   in Loop: Header=BB134_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_169
.LBB134_169:                            # %cond.end1463
                                        #   in Loop: Header=BB134_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB134_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_165
.LBB134_171:                            # %for.end1474
                                        #   in Loop: Header=BB134_163 Depth=1
	jmp	.LBB134_172
.LBB134_172:                            # %for.inc1475
                                        #   in Loop: Header=BB134_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_163
.LBB134_173:                            # %for.end1477
	jmp	.LBB134_174
.LBB134_174:                            # %if.end1478
	cmpl	$781365130, -56(%rbp)   # imm = 0x2E92AF8A
	jne	.LBB134_176
.LBB134_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_175
.Lfunc_end134:
	.size	dpb_split_field.71, .Lfunc_end134-dpb_split_field.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.72
	.type	remove_frame_from_dpb.72,@function
remove_frame_from_dpb.72:               # @remove_frame_from_dpb.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1191650148, -20(%rbp)  # imm = 0x47072364
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB135_6
# %bb.1:                                # %entry
	movq	.LJTI135_0(,%rax,8), %rax
	jmpq	*%rax
.LBB135_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB135_7
.LBB135_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB135_7
.LBB135_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB135_7
.LBB135_5:                              # %sw.bb10
	jmp	.LBB135_7
.LBB135_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB135_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB135_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB135_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB135_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB135_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_8
.LBB135_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1191650148, -20(%rbp)  # imm = 0x47072364
	jne	.LBB135_13
.LBB135_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_12
.Lfunc_end135:
	.size	remove_frame_from_dpb.72, .Lfunc_end135-remove_frame_from_dpb.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI135_0:
	.quad	.LBB135_5
	.quad	.LBB135_4
	.quad	.LBB135_3
	.quad	.LBB135_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.73
	.type	mm_unmark_long_term_for_reference.73,@function
mm_unmark_long_term_for_reference.73:   # @mm_unmark_long_term_for_reference.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1929482258, -12(%rbp)  # imm = 0x73019012
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB136_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB136_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB136_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB136_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB136_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB136_7:                              # %if.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_8
.LBB136_8:                              # %if.end14
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_24
.LBB136_9:                              # %if.else
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB136_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB136_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB136_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB136_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB136_14:                             # %if.end57
	jmp	.LBB136_27
.LBB136_15:                             # %if.end58
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_16
.LBB136_16:                             # %if.end59
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB136_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB136_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB136_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB136_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB136_21:                             # %if.end106
	jmp	.LBB136_27
.LBB136_22:                             # %if.end107
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_23
.LBB136_23:                             # %if.end108
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_24
.LBB136_24:                             # %if.end109
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_25
.LBB136_25:                             # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_1
.LBB136_26:                             # %for.end.loopexit
	jmp	.LBB136_27
.LBB136_27:                             # %for.end
	cmpl	$1929482258, -12(%rbp)  # imm = 0x73019012
	jne	.LBB136_29
.LBB136_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_28
.Lfunc_end136:
	.size	mm_unmark_long_term_for_reference.73, .Lfunc_end136-mm_unmark_long_term_for_reference.73
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.74      # -- Begin function update_ref_list.74
	.p2align	4, 0x90
	.type	update_ref_list.74,@function
update_ref_list.74:                     # @update_ref_list.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1440282784, -12(%rbp)  # imm = 0x55D8F8A0
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB137_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB137_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB137_4:                              # %if.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_5
.LBB137_5:                              # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_1
.LBB137_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB137_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB137_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB137_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB137_7
.LBB137_9:                              # %while.end
	cmpl	$1440282784, -12(%rbp)  # imm = 0x55D8F8A0
	jne	.LBB137_11
.LBB137_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_10
.Lfunc_end137:
	.size	update_ref_list.74, .Lfunc_end137-update_ref_list.74
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.75    # -- Begin function compute_colocated.75
	.p2align	4, 0x90
	.type	compute_colocated.75,@function
compute_colocated.75:                   # @compute_colocated.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$408040028, -72(%rbp)   # imm = 0x1852325C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB138_11
.LBB138_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB138_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB138_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB138_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB138_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB138_8
.LBB138_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB138_8:                              # %if.end
	jmp	.LBB138_9
.LBB138_9:                              # %if.end20
	jmp	.LBB138_10
.LBB138_10:                             # %if.end21
	jmp	.LBB138_11
.LBB138_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_29
.LBB138_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB138_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB138_14 Depth=1
	movl	$0, -16(%rbp)
.LBB138_16:                             # %for.cond27
                                        #   Parent Loop BB138_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB138_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB138_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB138_22
.LBB138_21:                             # %if.else160
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_22:                             # %if.end283
                                        #   in Loop: Header=BB138_16 Depth=2
	jmp	.LBB138_24
.LBB138_23:                             # %if.else284
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_24:                             # %if.end391
                                        #   in Loop: Header=BB138_16 Depth=2
	jmp	.LBB138_25
.LBB138_25:                             # %for.inc
                                        #   in Loop: Header=BB138_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_16
.LBB138_26:                             # %for.end
                                        #   in Loop: Header=BB138_14 Depth=1
	jmp	.LBB138_27
.LBB138_27:                             # %for.inc392
                                        #   in Loop: Header=BB138_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_14
.LBB138_28:                             # %for.end394
	jmp	.LBB138_29
.LBB138_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_241
.LBB138_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB138_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	$0, -12(%rbp)
.LBB138_34:                             # %for.cond408
                                        #   Parent Loop BB138_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB138_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_39
.LBB138_38:                             # %cond.false
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_39:                             # %cond.end
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_42
.LBB138_41:                             # %cond.false427
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_42:                             # %cond.end429
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_45
.LBB138_44:                             # %cond.false447
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_45:                             # %cond.end449
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_48
.LBB138_47:                             # %cond.false457
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_48:                             # %cond.end459
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_51
.LBB138_50:                             # %cond.false477
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_51:                             # %cond.end479
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_54
.LBB138_53:                             # %cond.false487
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_54:                             # %cond.end489
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_57
.LBB138_56:                             # %cond.false507
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_57:                             # %cond.end509
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_60
.LBB138_59:                             # %cond.false517
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_60:                             # %cond.end519
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_63
.LBB138_62:                             # %cond.false537
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_63:                             # %cond.end539
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_66
.LBB138_65:                             # %cond.false547
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_66:                             # %cond.end549
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB138_81
.LBB138_68:                             # %if.else569
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_71
.LBB138_70:                             # %cond.false576
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_71:                             # %cond.end578
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_74
.LBB138_73:                             # %cond.false586
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_74:                             # %cond.end588
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_77
.LBB138_76:                             # %cond.false604
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_77:                             # %cond.end606
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_80
.LBB138_79:                             # %cond.false614
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_80:                             # %cond.end616
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_81:                             # %if.end626
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_84
.LBB138_83:                             # %cond.false633
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_84:                             # %cond.end635
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_87
.LBB138_86:                             # %cond.false643
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_87:                             # %cond.end645
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB138_102
.LBB138_89:                             # %if.else665
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_92
.LBB138_91:                             # %cond.false672
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_92:                             # %cond.end674
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_95
.LBB138_94:                             # %cond.false682
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_95:                             # %cond.end684
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_98
.LBB138_97:                             # %cond.false700
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_98:                             # %cond.end702
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_101
.LBB138_100:                            # %cond.false710
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_101:                            # %cond.end712
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_102:                            # %if.end722
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB138_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_112
.LBB138_107:                            # %lor.rhs
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_111:                            # %land.end
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_112:                            # %lor.end
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_113:                            # %if.end814
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_236
.LBB138_114:                            # %if.else815
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_117
.LBB138_116:                            # %cond.false822
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_117:                            # %cond.end824
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_120
.LBB138_119:                            # %cond.false832
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_120:                            # %cond.end834
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_123
.LBB138_122:                            # %cond.false851
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_123:                            # %cond.end853
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_126
.LBB138_125:                            # %cond.false861
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_126:                            # %cond.end863
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_129
.LBB138_128:                            # %cond.false881
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_129:                            # %cond.end883
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_132
.LBB138_131:                            # %cond.false891
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_132:                            # %cond.end893
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_135
.LBB138_134:                            # %cond.false911
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_135:                            # %cond.end913
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_138
.LBB138_137:                            # %cond.false921
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_138:                            # %cond.end923
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_141
.LBB138_140:                            # %cond.false941
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_141:                            # %cond.end943
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_144
.LBB138_143:                            # %cond.false951
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_144:                            # %cond.end953
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_147
.LBB138_146:                            # %cond.false968
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_147:                            # %cond.end970
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_150
.LBB138_149:                            # %cond.false978
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_150:                            # %cond.end980
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_153
.LBB138_152:                            # %cond.false996
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_153:                            # %cond.end998
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_156
.LBB138_155:                            # %cond.false1006
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_156:                            # %cond.end1008
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_159
.LBB138_158:                            # %cond.false1023
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_159:                            # %cond.end1025
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_162
.LBB138_161:                            # %cond.false1033
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_162:                            # %cond.end1035
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB138_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_172
.LBB138_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_171:                            # %land.end1133
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_172:                            # %lor.end1134
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_173:                            # %if.end1142
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_176
.LBB138_175:                            # %cond.false1149
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_176:                            # %cond.end1151
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_179
.LBB138_178:                            # %cond.false1159
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_179:                            # %cond.end1161
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_182
.LBB138_181:                            # %cond.false1178
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_182:                            # %cond.end1180
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_185
.LBB138_184:                            # %cond.false1188
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_185:                            # %cond.end1190
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_188
.LBB138_187:                            # %cond.false1208
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_188:                            # %cond.end1210
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_191
.LBB138_190:                            # %cond.false1218
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_191:                            # %cond.end1220
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_194
.LBB138_193:                            # %cond.false1238
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_194:                            # %cond.end1240
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_197
.LBB138_196:                            # %cond.false1248
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_197:                            # %cond.end1250
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_200
.LBB138_199:                            # %cond.false1268
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_200:                            # %cond.end1270
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_203
.LBB138_202:                            # %cond.false1278
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_203:                            # %cond.end1280
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_206
.LBB138_205:                            # %cond.false1295
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_206:                            # %cond.end1297
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_209
.LBB138_208:                            # %cond.false1305
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_209:                            # %cond.end1307
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_212
.LBB138_211:                            # %cond.false1323
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_212:                            # %cond.end1325
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_215
.LBB138_214:                            # %cond.false1333
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_215:                            # %cond.end1335
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_218
.LBB138_217:                            # %cond.false1350
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_218:                            # %cond.end1352
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_221
.LBB138_220:                            # %cond.false1360
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_221:                            # %cond.end1362
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB138_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_231
.LBB138_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_230:                            # %land.end1460
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_231:                            # %lor.end1461
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_232:                            # %if.end1469
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB138_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB138_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB138_235:                            # %if.end1522
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_236
.LBB138_236:                            # %if.end1523
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_237
.LBB138_237:                            # %for.inc1524
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_34
.LBB138_238:                            # %for.end1526
                                        #   in Loop: Header=BB138_32 Depth=1
	jmp	.LBB138_239
.LBB138_239:                            # %for.inc1527
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_32
.LBB138_240:                            # %for.end1529
	jmp	.LBB138_241
.LBB138_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_259
.LBB138_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB138_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB138_245 Depth=1
	movl	$0, -16(%rbp)
.LBB138_247:                            # %for.cond1546
                                        #   Parent Loop BB138_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB138_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB138_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB138_252
.LBB138_251:                            # %if.else1699
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_252:                            # %if.end1829
                                        #   in Loop: Header=BB138_247 Depth=2
	jmp	.LBB138_253
.LBB138_253:                            # %if.end1830
                                        #   in Loop: Header=BB138_247 Depth=2
	jmp	.LBB138_254
.LBB138_254:                            # %for.inc1831
                                        #   in Loop: Header=BB138_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_247
.LBB138_255:                            # %for.end1833
                                        #   in Loop: Header=BB138_245 Depth=1
	jmp	.LBB138_256
.LBB138_256:                            # %for.inc1834
                                        #   in Loop: Header=BB138_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_245
.LBB138_257:                            # %for.end1836
	jmp	.LBB138_258
.LBB138_258:                            # %if.end1837
	jmp	.LBB138_259
.LBB138_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB138_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB138_260 Depth=1
	movl	$0, -16(%rbp)
.LBB138_262:                            # %for.cond1845
                                        #   Parent Loop BB138_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_314
.LBB138_265:                            # %if.then1856
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_268
.LBB138_267:                            # %cond.false1863
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_268:                            # %cond.end1865
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_271
.LBB138_270:                            # %cond.false1873
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_271:                            # %cond.end1875
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_274
.LBB138_273:                            # %cond.false1893
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_274:                            # %cond.end1895
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_277
.LBB138_276:                            # %cond.false1903
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_277:                            # %cond.end1905
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_280
.LBB138_279:                            # %cond.false1923
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_280:                            # %cond.end1925
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_283
.LBB138_282:                            # %cond.false1933
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_283:                            # %cond.end1935
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_286
.LBB138_285:                            # %cond.false1953
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_286:                            # %cond.end1955
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_289
.LBB138_288:                            # %cond.false1963
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_289:                            # %cond.end1965
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_292
.LBB138_291:                            # %cond.false1983
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_292:                            # %cond.end1985
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_295
.LBB138_294:                            # %cond.false1993
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_295:                            # %cond.end1995
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_298
.LBB138_297:                            # %cond.false2011
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_298:                            # %cond.end2013
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_301
.LBB138_300:                            # %cond.false2021
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_301:                            # %cond.end2023
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_304
.LBB138_303:                            # %cond.false2039
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_304:                            # %cond.end2041
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_307
.LBB138_306:                            # %cond.false2049
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_307:                            # %cond.end2051
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_310
.LBB138_309:                            # %cond.false2067
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_310:                            # %cond.end2069
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_313
.LBB138_312:                            # %cond.false2077
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_313:                            # %cond.end2079
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB138_315
.LBB138_314:                            # %if.else2089
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_315:                            # %if.end2194
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB138_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_325
.LBB138_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB138_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB138_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_324:                            # %land.end2285
                                        #   in Loop: Header=BB138_262 Depth=2
.LBB138_325:                            # %lor.end2286
                                        #   in Loop: Header=BB138_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_326:                            # %if.end2295
                                        #   in Loop: Header=BB138_262 Depth=2
	jmp	.LBB138_327
.LBB138_327:                            # %for.inc2296
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_262
.LBB138_328:                            # %for.end2298
                                        #   in Loop: Header=BB138_260 Depth=1
	jmp	.LBB138_329
.LBB138_329:                            # %for.inc2299
                                        #   in Loop: Header=BB138_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_260
.LBB138_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB138_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB138_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB138_332 Depth=1
	movl	$0, -16(%rbp)
.LBB138_334:                            # %for.cond2312
                                        #   Parent Loop BB138_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB138_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB138_340
.LBB138_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB138_341
.LBB138_340:                            # %if.then2342
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB138_345
.LBB138_341:                            # %if.else2363
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB138_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB138_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB138_344:                            # %if.end2394
                                        #   in Loop: Header=BB138_334 Depth=2
	jmp	.LBB138_345
.LBB138_345:                            # %if.end2395
                                        #   in Loop: Header=BB138_334 Depth=2
	jmp	.LBB138_346
.LBB138_346:                            # %for.inc2396
                                        #   in Loop: Header=BB138_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_334
.LBB138_347:                            # %for.end2398
                                        #   in Loop: Header=BB138_332 Depth=1
	jmp	.LBB138_348
.LBB138_348:                            # %for.inc2399
                                        #   in Loop: Header=BB138_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_332
.LBB138_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB138_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB138_350 Depth=1
	movl	$0, -16(%rbp)
.LBB138_352:                            # %for.cond2409
                                        #   Parent Loop BB138_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB138_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB138_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB138_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_360
.LBB138_356:                            # %cond.false2429
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_359
.LBB138_358:                            # %cond.false2441
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_359:                            # %cond.end2450
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_360:                            # %cond.end2452
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB138_377
.LBB138_361:                            # %if.else2454
                                        #   in Loop: Header=BB138_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB138_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_368
.LBB138_364:                            # %cond.false2468
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_367
.LBB138_366:                            # %cond.false2480
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_367:                            # %cond.end2489
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_368:                            # %cond.end2491
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB138_376
.LBB138_369:                            # %if.else2493
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_375
.LBB138_371:                            # %cond.false2504
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_374
.LBB138_373:                            # %cond.false2516
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_374:                            # %cond.end2525
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_375:                            # %cond.end2527
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB138_376:                            # %if.end2529
                                        #   in Loop: Header=BB138_352 Depth=2
	jmp	.LBB138_377
.LBB138_377:                            # %if.end2530
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_383
.LBB138_379:                            # %cond.false2546
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_382
.LBB138_381:                            # %cond.false2562
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_382:                            # %cond.end2575
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_383:                            # %cond.end2577
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB138_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB138_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB138_390
.LBB138_386:                            # %cond.false2592
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB138_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB138_389
.LBB138_388:                            # %cond.false2599
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB138_389:                            # %cond.end2603
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_390:                            # %cond.end2605
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB138_392
.LBB138_391:                            # %if.else2611
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB138_392:                            # %if.end2617
                                        #   in Loop: Header=BB138_352 Depth=2
	jmp	.LBB138_393
.LBB138_393:                            # %for.inc2618
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_352
.LBB138_394:                            # %for.end2620
                                        #   in Loop: Header=BB138_350 Depth=1
	jmp	.LBB138_395
.LBB138_395:                            # %for.inc2621
                                        #   in Loop: Header=BB138_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_350
.LBB138_396:                            # %for.end2623
	jmp	.LBB138_397
.LBB138_397:                            # %if.end2624
	cmpl	$408040028, -72(%rbp)   # imm = 0x1852325C
	jne	.LBB138_399
.LBB138_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_398
.Lfunc_end138:
	.size	compute_colocated.75, .Lfunc_end138-compute_colocated.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.76
	.type	remove_frame_from_dpb.76,@function
remove_frame_from_dpb.76:               # @remove_frame_from_dpb.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1793804264, -20(%rbp)  # imm = 0x6AEB47E8
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB139_6
# %bb.1:                                # %entry
	movq	.LJTI139_0(,%rax,8), %rax
	jmpq	*%rax
.LBB139_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB139_7
.LBB139_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB139_7
.LBB139_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB139_7
.LBB139_5:                              # %sw.bb10
	jmp	.LBB139_7
.LBB139_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB139_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB139_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB139_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB139_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB139_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_8
.LBB139_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1793804264, -20(%rbp)  # imm = 0x6AEB47E8
	jne	.LBB139_13
.LBB139_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_12
.Lfunc_end139:
	.size	remove_frame_from_dpb.76, .Lfunc_end139-remove_frame_from_dpb.76
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI139_0:
	.quad	.LBB139_5
	.quad	.LBB139_4
	.quad	.LBB139_3
	.quad	.LBB139_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.77
	.type	unmark_long_term_field_for_reference_by_frame_idx.77,@function
unmark_long_term_field_for_reference_by_frame_idx.77: # @unmark_long_term_field_for_reference_by_frame_idx.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1158527063, -32(%rbp)  # imm = 0x450DB857
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB140_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB140_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB140_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB140_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB140_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB140_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB140_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB140_23
.LBB140_8:                              # %if.else
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB140_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB140_22
.LBB140_10:                             # %if.else21
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB140_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB140_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB140_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB140_15
.LBB140_14:                             # %if.then29
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_15:                             # %if.end32
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_17
.LBB140_16:                             # %if.else33
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_17:                             # %if.end36
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_21
.LBB140_18:                             # %if.else37
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB140_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_20:                             # %if.end45
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_21
.LBB140_21:                             # %if.end46
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_22
.LBB140_22:                             # %if.end47
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_23
.LBB140_23:                             # %if.end48
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_24
.LBB140_24:                             # %if.end49
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB140_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB140_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB140_42
.LBB140_27:                             # %if.else59
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB140_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB140_41
.LBB140_29:                             # %if.else67
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB140_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB140_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB140_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB140_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB140_34
.LBB140_33:                             # %if.then78
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_34:                             # %if.end81
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_36
.LBB140_35:                             # %if.else82
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_36:                             # %if.end85
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_40
.LBB140_37:                             # %if.else86
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB140_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB140_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB140_39:                             # %if.end95
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_40
.LBB140_40:                             # %if.end96
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_41
.LBB140_41:                             # %if.end97
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_42
.LBB140_42:                             # %if.end98
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_43
.LBB140_43:                             # %if.end99
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_44
.LBB140_44:                             # %if.end100
                                        #   in Loop: Header=BB140_3 Depth=1
	jmp	.LBB140_45
.LBB140_45:                             # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_3
.LBB140_46:                             # %for.end
	cmpl	$1158527063, -32(%rbp)  # imm = 0x450DB857
	jne	.LBB140_48
.LBB140_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_47
.Lfunc_end140:
	.size	unmark_long_term_field_for_reference_by_frame_idx.77, .Lfunc_end140-unmark_long_term_field_for_reference_by_frame_idx.77
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.78 # -- Begin function store_picture_in_dpb.78
	.p2align	4, 0x90
	.type	store_picture_in_dpb.78,@function
store_picture_in_dpb.78:                # @store_picture_in_dpb.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$331046102, -20(%rbp)   # imm = 0x13BB5CD6
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB141_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB141_6
.LBB141_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB141_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB141_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB141_5:                              # %if.end
	jmp	.LBB141_6
.LBB141_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB141_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB141_23
.LBB141_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB141_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB141_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB141_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB141_14
.LBB141_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB141_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB141_20
.LBB141_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB141_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB141_18
.LBB141_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB141_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB141_19
.LBB141_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB141_50
.LBB141_19:                             # %if.end48
	jmp	.LBB141_20
.LBB141_20:                             # %if.end49
	jmp	.LBB141_21
.LBB141_21:                             # %if.end50
	jmp	.LBB141_22
.LBB141_22:                             # %if.end51
	jmp	.LBB141_23
.LBB141_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB141_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB141_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB141_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB141_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB141_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB141_29:                             # %if.end67
	jmp	.LBB141_30
.LBB141_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB141_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB141_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB141_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB141_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB141_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB141_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB141_35
.LBB141_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB141_50
.LBB141_35:                             # %if.end80
                                        #   in Loop: Header=BB141_30 Depth=1
	jmp	.LBB141_36
.LBB141_36:                             # %if.end81
                                        #   in Loop: Header=BB141_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB141_30
.LBB141_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB141_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB141_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB141_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB141_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB141_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB141_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB141_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB141_43:                             # %if.end94
                                        #   in Loop: Header=BB141_40 Depth=1
	jmp	.LBB141_44
.LBB141_44:                             # %for.inc
                                        #   in Loop: Header=BB141_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_40
.LBB141_45:                             # %for.end
	jmp	.LBB141_46
.LBB141_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB141_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB141_49
.LBB141_48:                             # %if.else104
	movq	$0, dpb+56
.LBB141_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB141_50:                             # %return
	cmpl	$331046102, -20(%rbp)   # imm = 0x13BB5CD6
	jne	.LBB141_52
.LBB141_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_51
.Lfunc_end141:
	.size	store_picture_in_dpb.78, .Lfunc_end141-store_picture_in_dpb.78
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.79      # -- Begin function alloc_colocated.79
	.p2align	4, 0x90
	.type	alloc_colocated.79,@function
alloc_colocated.79:                     # @alloc_colocated.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1235406743, -32(%rbp)  # imm = 0x49A2CF97
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB142_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB142_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB142_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB142_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1235406743, -32(%rbp)  # imm = 0x49A2CF97
	jne	.LBB142_6
.LBB142_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_5
.Lfunc_end142:
	.size	alloc_colocated.79, .Lfunc_end142-alloc_colocated.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.80
	.type	is_short_term_reference.80,@function
is_short_term_reference.80:             # @is_short_term_reference.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1591594306, -24(%rbp)  # imm = 0x5EDDCD42
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB143_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_4:                              # %if.end
	jmp	.LBB143_5
.LBB143_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB143_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB143_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_10:                             # %if.end17
	jmp	.LBB143_11
.LBB143_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB143_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_15:                             # %if.end30
	jmp	.LBB143_16
.LBB143_16:                             # %if.end31
	jmp	.LBB143_17
.LBB143_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB143_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1591594306, -24(%rbp)  # imm = 0x5EDDCD42
	jne	.LBB143_20
.LBB143_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_19
.Lfunc_end143:
	.size	is_short_term_reference.80, .Lfunc_end143-is_short_term_reference.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.81
	.type	remove_frame_from_dpb.81,@function
remove_frame_from_dpb.81:               # @remove_frame_from_dpb.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$218442610, -20(%rbp)   # imm = 0xD052B72
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB144_6
# %bb.1:                                # %entry
	movq	.LJTI144_0(,%rax,8), %rax
	jmpq	*%rax
.LBB144_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB144_7
.LBB144_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB144_7
.LBB144_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB144_7
.LBB144_5:                              # %sw.bb10
	jmp	.LBB144_7
.LBB144_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB144_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB144_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB144_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB144_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB144_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_8
.LBB144_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$218442610, -20(%rbp)   # imm = 0xD052B72
	jne	.LBB144_13
.LBB144_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_12
.Lfunc_end144:
	.size	remove_frame_from_dpb.81, .Lfunc_end144-remove_frame_from_dpb.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI144_0:
	.quad	.LBB144_5
	.quad	.LBB144_4
	.quad	.LBB144_3
	.quad	.LBB144_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.82
	.type	mm_assign_long_term_frame_idx.82,@function
mm_assign_long_term_frame_idx.82:       # @mm_assign_long_term_frame_idx.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1675771728, -28(%rbp)  # imm = 0x63E23F50
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB145_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB145_18
.LBB145_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB145_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB145_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB145_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB145_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB145_15
.LBB145_7:                              # %if.end
                                        #   in Loop: Header=BB145_3 Depth=1
	jmp	.LBB145_8
.LBB145_8:                              # %if.end8
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB145_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB145_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB145_15
.LBB145_11:                             # %if.end20
                                        #   in Loop: Header=BB145_3 Depth=1
	jmp	.LBB145_12
.LBB145_12:                             # %if.end21
                                        #   in Loop: Header=BB145_3 Depth=1
	jmp	.LBB145_13
.LBB145_13:                             # %for.inc
                                        #   in Loop: Header=BB145_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_3
.LBB145_14:                             # %for.end.loopexit
	jmp	.LBB145_15
.LBB145_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB145_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB145_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB145_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1675771728, -28(%rbp)  # imm = 0x63E23F50
	jne	.LBB145_20
.LBB145_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_19
.Lfunc_end145:
	.size	mm_assign_long_term_frame_idx.82, .Lfunc_end145-mm_assign_long_term_frame_idx.82
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.83 # -- Begin function reorder_ref_pic_list.83
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.83,@function
reorder_ref_pic_list.83:                # @reorder_ref_pic_list.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$970688619, -60(%rbp)   # imm = 0x39DB886B
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB146_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_3
.LBB146_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB146_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB146_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB146_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB146_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB146_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB146_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB146_7:                              # %if.end9
                                        #   in Loop: Header=BB146_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB146_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB146_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB146_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB146_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_12
.LBB146_11:                             # %if.else28
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB146_12:                             # %if.end33
                                        #   in Loop: Header=BB146_4 Depth=1
	jmp	.LBB146_17
.LBB146_13:                             # %if.else34
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB146_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_16
.LBB146_15:                             # %if.else46
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB146_16:                             # %if.end51
                                        #   in Loop: Header=BB146_4 Depth=1
	jmp	.LBB146_17
.LBB146_17:                             # %if.end52
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB146_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB146_20
.LBB146_19:                             # %if.else56
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB146_20:                             # %if.end57
                                        #   in Loop: Header=BB146_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB146_22
.LBB146_21:                             # %if.else58
                                        #   in Loop: Header=BB146_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB146_22:                             # %if.end61
                                        #   in Loop: Header=BB146_4 Depth=1
	jmp	.LBB146_23
.LBB146_23:                             # %for.inc
                                        #   in Loop: Header=BB146_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_4
.LBB146_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$970688619, -60(%rbp)   # imm = 0x39DB886B
	jne	.LBB146_26
.LBB146_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_25
.Lfunc_end146:
	.size	reorder_ref_pic_list.83, .Lfunc_end146-reorder_ref_pic_list.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.84
	.type	is_short_term_reference.84,@function
is_short_term_reference.84:             # @is_short_term_reference.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$516735781, -24(%rbp)   # imm = 0x1ECCC325
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB147_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB147_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB147_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB147_18
.LBB147_4:                              # %if.end
	jmp	.LBB147_5
.LBB147_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB147_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB147_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB147_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB147_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB147_18
.LBB147_10:                             # %if.end17
	jmp	.LBB147_11
.LBB147_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB147_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB147_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB147_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB147_18
.LBB147_15:                             # %if.end30
	jmp	.LBB147_16
.LBB147_16:                             # %if.end31
	jmp	.LBB147_17
.LBB147_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB147_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$516735781, -24(%rbp)   # imm = 0x1ECCC325
	jne	.LBB147_20
.LBB147_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_19
.Lfunc_end147:
	.size	is_short_term_reference.84, .Lfunc_end147-is_short_term_reference.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.85
	.type	mm_unmark_short_term_for_reference.85,@function
mm_unmark_short_term_for_reference.85:  # @mm_unmark_short_term_for_reference.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1781718733, -16(%rbp)  # imm = 0x6A32DECD
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB148_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB148_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB148_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB148_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB148_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB148_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB148_27
.LBB148_7:                              # %if.end
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_8
.LBB148_8:                              # %if.end13
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_24
.LBB148_9:                              # %if.else
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB148_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB148_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB148_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB148_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB148_14:                             # %if.end44
	jmp	.LBB148_27
.LBB148_15:                             # %if.end45
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_16
.LBB148_16:                             # %if.end46
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB148_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB148_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB148_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB148_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB148_21:                             # %if.end81
	jmp	.LBB148_27
.LBB148_22:                             # %if.end82
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_23
.LBB148_23:                             # %if.end83
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_24
.LBB148_24:                             # %if.end84
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_25
.LBB148_25:                             # %for.inc
                                        #   in Loop: Header=BB148_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_1
.LBB148_26:                             # %for.end.loopexit
	jmp	.LBB148_27
.LBB148_27:                             # %for.end
	cmpl	$1781718733, -16(%rbp)  # imm = 0x6A32DECD
	jne	.LBB148_29
.LBB148_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_28
.Lfunc_end148:
	.size	mm_unmark_short_term_for_reference.85, .Lfunc_end148-mm_unmark_short_term_for_reference.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.86
	.type	sliding_window_memory_management.86,@function
sliding_window_memory_management.86:    # @sliding_window_memory_management.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1510895710, -8(%rbp)   # imm = 0x5A0E705E
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB149_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB149_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB149_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB149_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB149_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB149_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB149_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB149_9
.LBB149_6:                              # %if.end
                                        #   in Loop: Header=BB149_2 Depth=1
	jmp	.LBB149_7
.LBB149_7:                              # %for.inc
                                        #   in Loop: Header=BB149_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB149_2
.LBB149_8:                              # %for.end.loopexit
	jmp	.LBB149_9
.LBB149_9:                              # %for.end
	jmp	.LBB149_10
.LBB149_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$1510895710, -8(%rbp)   # imm = 0x5A0E705E
	jne	.LBB149_12
.LBB149_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_11
.Lfunc_end149:
	.size	sliding_window_memory_management.86, .Lfunc_end149-sliding_window_memory_management.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.87
	.type	compare_pic_by_poc_asc.87,@function
compare_pic_by_poc_asc.87:              # @compare_pic_by_poc_asc.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$16524042, -16(%rbp)    # imm = 0xFC230A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB150_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB150_5
.LBB150_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB150_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB150_5
.LBB150_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB150_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$16524042, -16(%rbp)    # imm = 0xFC230A
	jne	.LBB150_7
.LBB150_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_6
.Lfunc_end150:
	.size	compare_pic_by_poc_asc.87, .Lfunc_end150-compare_pic_by_poc_asc.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.88
	.type	compare_fs_by_frame_num_desc.88,@function
compare_fs_by_frame_num_desc.88:        # @compare_fs_by_frame_num_desc.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1347997005, -16(%rbp)  # imm = 0x5058CD4D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB151_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB151_5
.LBB151_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB151_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB151_5
.LBB151_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB151_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1347997005, -16(%rbp)  # imm = 0x5058CD4D
	jne	.LBB151_7
.LBB151_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_6
.Lfunc_end151:
	.size	compare_fs_by_frame_num_desc.88, .Lfunc_end151-compare_fs_by_frame_num_desc.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.89
	.type	reorder_short_term.89,@function
reorder_short_term.89:                  # @reorder_short_term.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$738875340, -44(%rbp)   # imm = 0x2C0A57CC
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB152_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB152_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB152_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB152_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_1
.LBB152_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB152_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB152_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB152_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB152_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB152_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB152_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB152_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB152_10
.LBB152_9:                              # %if.then17
                                        #   in Loop: Header=BB152_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB152_10:                             # %if.end
                                        #   in Loop: Header=BB152_5 Depth=1
	jmp	.LBB152_11
.LBB152_11:                             # %if.end23
                                        #   in Loop: Header=BB152_5 Depth=1
	jmp	.LBB152_12
.LBB152_12:                             # %for.inc24
                                        #   in Loop: Header=BB152_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_5
.LBB152_13:                             # %for.end26
	cmpl	$738875340, -44(%rbp)   # imm = 0x2C0A57CC
	jne	.LBB152_15
.LBB152_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_14
.Lfunc_end152:
	.size	reorder_short_term.89, .Lfunc_end152-reorder_short_term.89
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.90 # -- Begin function store_picture_in_dpb.90
	.p2align	4, 0x90
	.type	store_picture_in_dpb.90,@function
store_picture_in_dpb.90:                # @store_picture_in_dpb.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1779520631, -24(%rbp)  # imm = 0x6A115477
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB153_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB153_6
.LBB153_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB153_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB153_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB153_5:                              # %if.end
	jmp	.LBB153_6
.LBB153_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB153_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB153_23
.LBB153_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB153_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB153_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB153_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB153_14
.LBB153_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB153_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB153_20
.LBB153_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB153_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB153_18
.LBB153_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB153_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB153_19
.LBB153_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB153_50
.LBB153_19:                             # %if.end48
	jmp	.LBB153_20
.LBB153_20:                             # %if.end49
	jmp	.LBB153_21
.LBB153_21:                             # %if.end50
	jmp	.LBB153_22
.LBB153_22:                             # %if.end51
	jmp	.LBB153_23
.LBB153_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB153_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB153_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB153_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB153_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB153_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB153_29:                             # %if.end67
	jmp	.LBB153_30
.LBB153_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB153_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB153_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB153_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB153_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB153_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB153_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB153_35
.LBB153_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB153_50
.LBB153_35:                             # %if.end80
                                        #   in Loop: Header=BB153_30 Depth=1
	jmp	.LBB153_36
.LBB153_36:                             # %if.end81
                                        #   in Loop: Header=BB153_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB153_30
.LBB153_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB153_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB153_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB153_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB153_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB153_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB153_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB153_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB153_43:                             # %if.end94
                                        #   in Loop: Header=BB153_40 Depth=1
	jmp	.LBB153_44
.LBB153_44:                             # %for.inc
                                        #   in Loop: Header=BB153_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_40
.LBB153_45:                             # %for.end
	jmp	.LBB153_46
.LBB153_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB153_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB153_49
.LBB153_48:                             # %if.else104
	movq	$0, dpb+56
.LBB153_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB153_50:                             # %return
	cmpl	$1779520631, -24(%rbp)  # imm = 0x6A115477
	jne	.LBB153_52
.LBB153_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_51
.Lfunc_end153:
	.size	store_picture_in_dpb.90, .Lfunc_end153-store_picture_in_dpb.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.91
	.type	mm_unmark_short_term_for_reference.91,@function
mm_unmark_short_term_for_reference.91:  # @mm_unmark_short_term_for_reference.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$814087459, -16(%rbp)   # imm = 0x3085FD23
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB154_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB154_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB154_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB154_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB154_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB154_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB154_27
.LBB154_7:                              # %if.end
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_8
.LBB154_8:                              # %if.end13
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_24
.LBB154_9:                              # %if.else
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB154_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB154_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB154_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB154_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB154_14:                             # %if.end44
	jmp	.LBB154_27
.LBB154_15:                             # %if.end45
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_16
.LBB154_16:                             # %if.end46
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB154_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB154_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB154_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB154_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB154_21:                             # %if.end81
	jmp	.LBB154_27
.LBB154_22:                             # %if.end82
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_23
.LBB154_23:                             # %if.end83
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_24
.LBB154_24:                             # %if.end84
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_25
.LBB154_25:                             # %for.inc
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_1
.LBB154_26:                             # %for.end.loopexit
	jmp	.LBB154_27
.LBB154_27:                             # %for.end
	cmpl	$814087459, -16(%rbp)   # imm = 0x3085FD23
	jne	.LBB154_29
.LBB154_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_28
.Lfunc_end154:
	.size	mm_unmark_short_term_for_reference.91, .Lfunc_end154-mm_unmark_short_term_for_reference.91
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.92      # -- Begin function dpb_split_field.92
	.p2align	4, 0x90
	.type	dpb_split_field.92,@function
dpb_split_field.92:                     # @dpb_split_field.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$960751379, -56(%rbp)   # imm = 0x3943E713
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB155_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB155_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB155_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB155_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_2
.LBB155_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB155_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB155_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB155_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_6
.LBB155_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB155_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB155_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB155_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_10
.LBB155_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB155_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB155_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB155_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_14
.LBB155_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB155_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB155_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB155_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB155_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB155_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_19
.LBB155_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB155_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB155_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB155_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB155_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_23
.LBB155_26:                             # %for.end328
	jmp	.LBB155_27
.LBB155_27:                             # %if.end
	jmp	.LBB155_29
.LBB155_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB155_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB155_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB155_30 Depth=1
	movl	$0, -4(%rbp)
.LBB155_32:                             # %for.cond343
                                        #   Parent Loop BB155_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB155_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB155_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB155_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB155_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB155_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB155_38
.LBB155_37:                             # %cond.false
                                        #   in Loop: Header=BB155_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_38
.LBB155_38:                             # %cond.end
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB155_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB155_41
.LBB155_40:                             # %cond.false415
                                        #   in Loop: Header=BB155_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_41
.LBB155_41:                             # %cond.end416
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB155_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB155_44
.LBB155_43:                             # %cond.false436
                                        #   in Loop: Header=BB155_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_44
.LBB155_44:                             # %cond.end437
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB155_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB155_47
.LBB155_46:                             # %cond.false456
                                        #   in Loop: Header=BB155_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_47
.LBB155_47:                             # %cond.end457
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB155_55
.LBB155_48:                             # %if.else466
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB155_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB155_51
.LBB155_50:                             # %cond.false491
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB155_51
.LBB155_51:                             # %cond.end492
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB155_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB155_54
.LBB155_53:                             # %cond.false509
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB155_54
.LBB155_54:                             # %cond.end510
                                        #   in Loop: Header=BB155_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB155_55:                             # %if.end519
                                        #   in Loop: Header=BB155_32 Depth=2
	jmp	.LBB155_56
.LBB155_56:                             # %for.inc520
                                        #   in Loop: Header=BB155_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_32
.LBB155_57:                             # %for.end522
                                        #   in Loop: Header=BB155_30 Depth=1
	jmp	.LBB155_58
.LBB155_58:                             # %for.inc523
                                        #   in Loop: Header=BB155_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_30
.LBB155_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB155_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB155_73
.LBB155_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB155_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB155_62 Depth=1
	movl	$0, -8(%rbp)
.LBB155_64:                             # %for.cond538
                                        #   Parent Loop BB155_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB155_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB155_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB155_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB155_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB155_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB155_68:                             # %if.end908
                                        #   in Loop: Header=BB155_64 Depth=2
	jmp	.LBB155_69
.LBB155_69:                             # %for.inc909
                                        #   in Loop: Header=BB155_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_64
.LBB155_70:                             # %for.end911
                                        #   in Loop: Header=BB155_62 Depth=1
	jmp	.LBB155_71
.LBB155_71:                             # %for.inc912
                                        #   in Loop: Header=BB155_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_62
.LBB155_72:                             # %for.end914
	jmp	.LBB155_73
.LBB155_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB155_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB155_74 Depth=1
	movl	$0, -8(%rbp)
.LBB155_76:                             # %for.cond923
                                        #   Parent Loop BB155_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB155_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB155_148
.LBB155_79:                             # %if.then954
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB155_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_83
.LBB155_82:                             # %cond.false991
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_83:                             # %cond.end993
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_86
.LBB155_85:                             # %cond.false1001
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_86:                             # %cond.end1003
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_89
.LBB155_88:                             # %cond.false1032
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_89:                             # %cond.end1034
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_92
.LBB155_91:                             # %cond.false1042
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_92:                             # %cond.end1044
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_95
.LBB155_94:                             # %cond.false1073
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_95:                             # %cond.end1075
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_98
.LBB155_97:                             # %cond.false1083
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_98:                             # %cond.end1085
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_101
.LBB155_100:                            # %cond.false1114
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_101:                            # %cond.end1116
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_104
.LBB155_103:                            # %cond.false1124
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_104:                            # %cond.end1126
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_107
.LBB155_106:                            # %cond.false1155
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_107:                            # %cond.end1157
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_110
.LBB155_109:                            # %cond.false1165
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_110:                            # %cond.end1167
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB155_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB155_125
.LBB155_112:                            # %if.else1190
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_115
.LBB155_114:                            # %cond.false1198
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_115:                            # %cond.end1200
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_118
.LBB155_117:                            # %cond.false1208
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_118:                            # %cond.end1210
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB155_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB155_121
.LBB155_120:                            # %cond.false1237
                                        #   in Loop: Header=BB155_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_121
.LBB155_121:                            # %cond.end1238
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB155_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB155_124
.LBB155_123:                            # %cond.false1254
                                        #   in Loop: Header=BB155_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_124
.LBB155_124:                            # %cond.end1255
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB155_125:                            # %if.end1264
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_128
.LBB155_127:                            # %cond.false1272
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_128:                            # %cond.end1274
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_131
.LBB155_130:                            # %cond.false1282
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_131:                            # %cond.end1284
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB155_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB155_146
.LBB155_133:                            # %if.else1307
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_136
.LBB155_135:                            # %cond.false1315
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_136:                            # %cond.end1317
                                        #   in Loop: Header=BB155_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB155_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB155_139
.LBB155_138:                            # %cond.false1325
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB155_139:                            # %cond.end1327
                                        #   in Loop: Header=BB155_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB155_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB155_142
.LBB155_141:                            # %cond.false1355
                                        #   in Loop: Header=BB155_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_142
.LBB155_142:                            # %cond.end1356
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB155_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB155_145
.LBB155_144:                            # %cond.false1373
                                        #   in Loop: Header=BB155_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_145
.LBB155_145:                            # %cond.end1374
                                        #   in Loop: Header=BB155_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB155_146:                            # %if.end1383
                                        #   in Loop: Header=BB155_76 Depth=2
	jmp	.LBB155_147
.LBB155_147:                            # %if.end1384
                                        #   in Loop: Header=BB155_76 Depth=2
	jmp	.LBB155_148
.LBB155_148:                            # %if.end1385
                                        #   in Loop: Header=BB155_76 Depth=2
	jmp	.LBB155_149
.LBB155_149:                            # %for.inc1386
                                        #   in Loop: Header=BB155_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_76
.LBB155_150:                            # %for.end1388
                                        #   in Loop: Header=BB155_74 Depth=1
	jmp	.LBB155_151
.LBB155_151:                            # %for.inc1389
                                        #   in Loop: Header=BB155_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_74
.LBB155_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB155_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB155_153 Depth=1
	movl	$0, -4(%rbp)
.LBB155_155:                            # %for.cond1399
                                        #   Parent Loop BB155_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB155_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB155_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_155
.LBB155_158:                            # %for.end1414
                                        #   in Loop: Header=BB155_153 Depth=1
	jmp	.LBB155_159
.LBB155_159:                            # %for.inc1415
                                        #   in Loop: Header=BB155_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_153
.LBB155_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB155_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB155_174
.LBB155_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB155_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB155_163 Depth=1
	movl	$0, -4(%rbp)
.LBB155_165:                            # %for.cond1431
                                        #   Parent Loop BB155_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB155_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB155_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB155_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB155_169
.LBB155_168:                            # %cond.false1462
                                        #   in Loop: Header=BB155_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB155_169
.LBB155_169:                            # %cond.end1463
                                        #   in Loop: Header=BB155_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB155_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_165
.LBB155_171:                            # %for.end1474
                                        #   in Loop: Header=BB155_163 Depth=1
	jmp	.LBB155_172
.LBB155_172:                            # %for.inc1475
                                        #   in Loop: Header=BB155_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_163
.LBB155_173:                            # %for.end1477
	jmp	.LBB155_174
.LBB155_174:                            # %if.end1478
	cmpl	$960751379, -56(%rbp)   # imm = 0x3943E713
	jne	.LBB155_176
.LBB155_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_175
.Lfunc_end155:
	.size	dpb_split_field.92, .Lfunc_end155-dpb_split_field.92
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.93     # -- Begin function init_mbaff_lists.93
	.p2align	4, 0x90
	.type	init_mbaff_lists.93,@function
init_mbaff_lists.93:                    # @init_mbaff_lists.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$122989068, -12(%rbp)   # imm = 0x754AA0C
	movl	$2, -4(%rbp)
.LBB156_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB156_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB156_1 Depth=1
	movl	$0, -8(%rbp)
.LBB156_3:                              # %for.cond1
                                        #   Parent Loop BB156_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB156_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB156_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB156_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB156_3
.LBB156_6:                              # %for.end
                                        #   in Loop: Header=BB156_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB156_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_1
.LBB156_8:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB156_9:                              # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB156_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB156_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB156_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_9
.LBB156_12:                             # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB156_13:                             # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB156_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB156_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB156_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_13
.LBB156_16:                             # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$122989068, -12(%rbp)   # imm = 0x754AA0C
	jne	.LBB156_18
.LBB156_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_17
.Lfunc_end156:
	.size	init_mbaff_lists.93, .Lfunc_end156-init_mbaff_lists.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.94
	.type	mark_pic_long_term.94,@function
mark_pic_long_term.94:                  # @mark_pic_long_term.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1361586230, -20(%rbp)  # imm = 0x51282836
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB157_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB157_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB157_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB157_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB157_39
.LBB157_7:                              # %if.end
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_8
.LBB157_8:                              # %if.end50
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_9
.LBB157_9:                              # %for.inc
                                        #   in Loop: Header=BB157_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_2
.LBB157_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB157_39
.LBB157_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB157_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB157_14
.LBB157_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB157_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB157_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB157_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB157_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB157_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB157_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB157_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB157_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB157_24:                             # %if.end123
	jmp	.LBB157_39
.LBB157_25:                             # %if.end124
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_26
.LBB157_26:                             # %if.end125
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB157_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB157_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB157_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB157_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB157_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB157_34:                             # %if.end194
	jmp	.LBB157_39
.LBB157_35:                             # %if.end195
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_36
.LBB157_36:                             # %if.end196
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_37
.LBB157_37:                             # %for.inc197
                                        #   in Loop: Header=BB157_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_15
.LBB157_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB157_39:                             # %if.end201
	cmpl	$1361586230, -20(%rbp)  # imm = 0x51282836
	jne	.LBB157_41
.LBB157_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_40
.Lfunc_end157:
	.size	mark_pic_long_term.94, .Lfunc_end157-mark_pic_long_term.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.95
	.type	get_pic_num_x.95,@function
get_pic_num_x.95:                       # @get_pic_num_x.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$259653967, -28(%rbp)   # imm = 0xF7A014F
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB158_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_3
.LBB158_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB158_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$259653967, -28(%rbp)   # imm = 0xF7A014F
	jne	.LBB158_5
.LBB158_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_4
.Lfunc_end158:
	.size	get_pic_num_x.95, .Lfunc_end158-get_pic_num_x.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.96
	.type	compare_fs_by_poc_asc.96,@function
compare_fs_by_poc_asc.96:               # @compare_fs_by_poc_asc.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$866393769, -16(%rbp)   # imm = 0x33A41EA9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB159_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB159_5
.LBB159_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB159_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB159_5
.LBB159_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB159_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$866393769, -16(%rbp)   # imm = 0x33A41EA9
	jne	.LBB159_7
.LBB159_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_6
.Lfunc_end159:
	.size	compare_fs_by_poc_asc.96, .Lfunc_end159-compare_fs_by_poc_asc.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.97
	.type	compare_pic_by_pic_num_desc.97,@function
compare_pic_by_pic_num_desc.97:         # @compare_pic_by_pic_num_desc.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1918743751, -16(%rbp)  # imm = 0x725DB4C7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB160_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB160_5
.LBB160_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB160_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB160_5
.LBB160_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB160_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1918743751, -16(%rbp)  # imm = 0x725DB4C7
	jne	.LBB160_7
.LBB160_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_6
.Lfunc_end160:
	.size	compare_pic_by_pic_num_desc.97, .Lfunc_end160-compare_pic_by_pic_num_desc.97
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.98
	.type	unmark_long_term_frame_for_reference_by_frame_idx.98,@function
unmark_long_term_frame_for_reference_by_frame_idx.98: # @unmark_long_term_frame_for_reference_by_frame_idx.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1914719401, -12(%rbp)  # imm = 0x72204CA9
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB161_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB161_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB161_4:                              # %if.end
                                        #   in Loop: Header=BB161_1 Depth=1
	jmp	.LBB161_5
.LBB161_5:                              # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_1
.LBB161_6:                              # %for.end
	cmpl	$1914719401, -12(%rbp)  # imm = 0x72204CA9
	jne	.LBB161_8
.LBB161_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_7
.Lfunc_end161:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.98, .Lfunc_end161-unmark_long_term_frame_for_reference_by_frame_idx.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.99
	.type	compare_fs_by_lt_pic_idx_asc.99,@function
compare_fs_by_lt_pic_idx_asc.99:        # @compare_fs_by_lt_pic_idx_asc.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1697001982, -16(%rbp)  # imm = 0x652631FE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB162_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB162_5
.LBB162_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB162_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB162_5
.LBB162_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB162_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1697001982, -16(%rbp)  # imm = 0x652631FE
	jne	.LBB162_7
.LBB162_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_6
.Lfunc_end162:
	.size	compare_fs_by_lt_pic_idx_asc.99, .Lfunc_end162-compare_fs_by_lt_pic_idx_asc.99
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.100 # -- Begin function replace_top_pic_with_frame.100
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.100,@function
replace_top_pic_with_frame.100:         # @replace_top_pic_with_frame.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1351700697, -32(%rbp)  # imm = 0x509150D9
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB163_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB163_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB163_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB163_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB163_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB163_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB163_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB163_10
.LBB163_7:                              # %if.end14
                                        #   in Loop: Header=BB163_3 Depth=1
	jmp	.LBB163_8
.LBB163_8:                              # %for.inc
                                        #   in Loop: Header=BB163_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_3
.LBB163_9:                              # %for.end.loopexit
	jmp	.LBB163_10
.LBB163_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB163_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB163_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB163_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB163_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB163_15:                             # %if.end26
	jmp	.LBB163_16
.LBB163_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1351700697, -32(%rbp)  # imm = 0x509150D9
	jne	.LBB163_18
.LBB163_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_17
.Lfunc_end163:
	.size	replace_top_pic_with_frame.100, .Lfunc_end163-replace_top_pic_with_frame.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.101
	.type	get_smallest_poc.101,@function
get_smallest_poc.101:                   # @get_smallest_poc.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1458021112, -20(%rbp)  # imm = 0x56E7A2F8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB164_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB164_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB164_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB164_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB164_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB164_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB164_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB164_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB164_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB164_7:                              # %if.end10
                                        #   in Loop: Header=BB164_3 Depth=1
	jmp	.LBB164_8
.LBB164_8:                              # %for.inc
                                        #   in Loop: Header=BB164_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_3
.LBB164_9:                              # %for.end
	cmpl	$1458021112, -20(%rbp)  # imm = 0x56E7A2F8
	jne	.LBB164_11
.LBB164_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_10
.Lfunc_end164:
	.size	get_smallest_poc.101, .Lfunc_end164-get_smallest_poc.101
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.102 # -- Begin function replace_top_pic_with_frame.102
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.102,@function
replace_top_pic_with_frame.102:         # @replace_top_pic_with_frame.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$815011933, -32(%rbp)   # imm = 0x3094185D
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB165_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB165_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB165_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB165_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB165_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB165_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB165_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB165_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB165_10
.LBB165_7:                              # %if.end14
                                        #   in Loop: Header=BB165_3 Depth=1
	jmp	.LBB165_8
.LBB165_8:                              # %for.inc
                                        #   in Loop: Header=BB165_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_3
.LBB165_9:                              # %for.end.loopexit
	jmp	.LBB165_10
.LBB165_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB165_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB165_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB165_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB165_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB165_15:                             # %if.end26
	jmp	.LBB165_16
.LBB165_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$815011933, -32(%rbp)   # imm = 0x3094185D
	jne	.LBB165_18
.LBB165_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_17
.Lfunc_end165:
	.size	replace_top_pic_with_frame.102, .Lfunc_end165-replace_top_pic_with_frame.102
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.103
	.type	remove_frame_from_dpb.103,@function
remove_frame_from_dpb.103:              # @remove_frame_from_dpb.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$500984720, -20(%rbp)   # imm = 0x1DDC6B90
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB166_6
# %bb.1:                                # %entry
	movq	.LJTI166_0(,%rax,8), %rax
	jmpq	*%rax
.LBB166_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB166_7
.LBB166_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB166_7
.LBB166_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB166_7
.LBB166_5:                              # %sw.bb10
	jmp	.LBB166_7
.LBB166_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB166_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB166_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB166_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB166_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB166_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_8
.LBB166_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$500984720, -20(%rbp)   # imm = 0x1DDC6B90
	jne	.LBB166_13
.LBB166_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_12
.Lfunc_end166:
	.size	remove_frame_from_dpb.103, .Lfunc_end166-remove_frame_from_dpb.103
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI166_0:
	.quad	.LBB166_5
	.quad	.LBB166_4
	.quad	.LBB166_3
	.quad	.LBB166_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.104
	.type	mm_assign_long_term_frame_idx.104,@function
mm_assign_long_term_frame_idx.104:      # @mm_assign_long_term_frame_idx.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$646534324, -28(%rbp)   # imm = 0x268954B4
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB167_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB167_18
.LBB167_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB167_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB167_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB167_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB167_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB167_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB167_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB167_15
.LBB167_7:                              # %if.end
                                        #   in Loop: Header=BB167_3 Depth=1
	jmp	.LBB167_8
.LBB167_8:                              # %if.end8
                                        #   in Loop: Header=BB167_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB167_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB167_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB167_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB167_15
.LBB167_11:                             # %if.end20
                                        #   in Loop: Header=BB167_3 Depth=1
	jmp	.LBB167_12
.LBB167_12:                             # %if.end21
                                        #   in Loop: Header=BB167_3 Depth=1
	jmp	.LBB167_13
.LBB167_13:                             # %for.inc
                                        #   in Loop: Header=BB167_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_3
.LBB167_14:                             # %for.end.loopexit
	jmp	.LBB167_15
.LBB167_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB167_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB167_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB167_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$646534324, -28(%rbp)   # imm = 0x268954B4
	jne	.LBB167_20
.LBB167_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_19
.Lfunc_end167:
	.size	mm_assign_long_term_frame_idx.104, .Lfunc_end167-mm_assign_long_term_frame_idx.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.105
	.type	get_pic_num_x.105,@function
get_pic_num_x.105:                      # @get_pic_num_x.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1134154572, -32(%rbp)  # imm = 0x4399D34C
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB168_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB168_3
.LBB168_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB168_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1134154572, -32(%rbp)  # imm = 0x4399D34C
	jne	.LBB168_5
.LBB168_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_4
.Lfunc_end168:
	.size	get_pic_num_x.105, .Lfunc_end168-get_pic_num_x.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.106
	.type	compare_pic_by_poc_asc.106,@function
compare_pic_by_poc_asc.106:             # @compare_pic_by_poc_asc.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1938016923, -16(%rbp)  # imm = 0x7383CA9B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB169_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB169_5
.LBB169_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB169_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB169_5
.LBB169_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB169_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1938016923, -16(%rbp)  # imm = 0x7383CA9B
	jne	.LBB169_7
.LBB169_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_6
.Lfunc_end169:
	.size	compare_pic_by_poc_asc.106, .Lfunc_end169-compare_pic_by_poc_asc.106
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.107
	.type	mm_unmark_long_term_for_reference.107,@function
mm_unmark_long_term_for_reference.107:  # @mm_unmark_long_term_for_reference.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$361613247, -12(%rbp)   # imm = 0x158DC7BF
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB170_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB170_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB170_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB170_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB170_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB170_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB170_7:                              # %if.end
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_8
.LBB170_8:                              # %if.end14
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_24
.LBB170_9:                              # %if.else
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB170_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB170_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB170_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB170_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB170_14:                             # %if.end57
	jmp	.LBB170_27
.LBB170_15:                             # %if.end58
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_16
.LBB170_16:                             # %if.end59
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB170_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB170_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB170_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB170_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB170_21:                             # %if.end106
	jmp	.LBB170_27
.LBB170_22:                             # %if.end107
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_23
.LBB170_23:                             # %if.end108
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_24
.LBB170_24:                             # %if.end109
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_25
.LBB170_25:                             # %for.inc
                                        #   in Loop: Header=BB170_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_1
.LBB170_26:                             # %for.end.loopexit
	jmp	.LBB170_27
.LBB170_27:                             # %for.end
	cmpl	$361613247, -12(%rbp)   # imm = 0x158DC7BF
	jne	.LBB170_29
.LBB170_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_28
.Lfunc_end170:
	.size	mm_unmark_long_term_for_reference.107, .Lfunc_end170-mm_unmark_long_term_for_reference.107
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.108 # -- Begin function replace_top_pic_with_frame.108
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.108,@function
replace_top_pic_with_frame.108:         # @replace_top_pic_with_frame.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$379404708, -32(%rbp)   # imm = 0x169D41A4
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB171_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB171_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB171_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB171_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB171_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB171_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB171_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB171_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB171_10
.LBB171_7:                              # %if.end14
                                        #   in Loop: Header=BB171_3 Depth=1
	jmp	.LBB171_8
.LBB171_8:                              # %for.inc
                                        #   in Loop: Header=BB171_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_3
.LBB171_9:                              # %for.end.loopexit
	jmp	.LBB171_10
.LBB171_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB171_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB171_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB171_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB171_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB171_15:                             # %if.end26
	jmp	.LBB171_16
.LBB171_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$379404708, -32(%rbp)   # imm = 0x169D41A4
	jne	.LBB171_18
.LBB171_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_17
.Lfunc_end171:
	.size	replace_top_pic_with_frame.108, .Lfunc_end171-replace_top_pic_with_frame.108
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.109
	.type	remove_unused_frame_from_dpb.109,@function
remove_unused_frame_from_dpb.109:       # @remove_unused_frame_from_dpb.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1536704804, -20(%rbp)  # imm = 0x5B984124
	movl	$0, -12(%rbp)
.LBB172_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB172_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB172_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB172_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB172_8
.LBB172_5:                              # %if.end
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_6
.LBB172_6:                              # %for.inc
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_1
.LBB172_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB172_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1536704804, -20(%rbp)  # imm = 0x5B984124
	jne	.LBB172_10
.LBB172_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_9
.Lfunc_end172:
	.size	remove_unused_frame_from_dpb.109, .Lfunc_end172-remove_unused_frame_from_dpb.109
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.110
	.type	output_one_frame_from_dpb.110,@function
output_one_frame_from_dpb.110:          # @output_one_frame_from_dpb.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1911135861, -12(%rbp)  # imm = 0x71E99E75
	cmpl	$1, dpb+28
	jae	.LBB173_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB173_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB173_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB173_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB173_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB173_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB173_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB173_8:                              # %if.end10
	cmpl	$1911135861, -12(%rbp)  # imm = 0x71E99E75
	jne	.LBB173_10
.LBB173_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_9
.Lfunc_end173:
	.size	output_one_frame_from_dpb.110, .Lfunc_end173-output_one_frame_from_dpb.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.111
	.type	get_short_term_pic.111,@function
get_short_term_pic.111:                 # @get_short_term_pic.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1320274083, -28(%rbp)  # imm = 0x4EB1C8A3
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB174_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB174_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB174_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB174_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB174_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB174_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB174_23
.LBB174_7:                              # %if.end
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_8
.LBB174_8:                              # %if.end14
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_20
.LBB174_9:                              # %if.else
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB174_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB174_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB174_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB174_23
.LBB174_13:                             # %if.end34
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_14
.LBB174_14:                             # %if.end35
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB174_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB174_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB174_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB174_23
.LBB174_18:                             # %if.end56
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_19
.LBB174_19:                             # %if.end57
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_20
.LBB174_20:                             # %if.end58
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_21
.LBB174_21:                             # %for.inc
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_1
.LBB174_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB174_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1320274083, -28(%rbp)  # imm = 0x4EB1C8A3
	jne	.LBB174_25
.LBB174_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_24
.Lfunc_end174:
	.size	get_short_term_pic.111, .Lfunc_end174-get_short_term_pic.111
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.112 # -- Begin function mm_update_max_long_term_frame_idx.112
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.112,@function
mm_update_max_long_term_frame_idx.112:  # @mm_update_max_long_term_frame_idx.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$851534470, -12(%rbp)   # imm = 0x32C16286
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB175_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB175_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB175_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB175_4:                              # %if.end
                                        #   in Loop: Header=BB175_1 Depth=1
	jmp	.LBB175_5
.LBB175_5:                              # %for.inc
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_1
.LBB175_6:                              # %for.end
	cmpl	$851534470, -12(%rbp)   # imm = 0x32C16286
	jne	.LBB175_8
.LBB175_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_7
.Lfunc_end175:
	.size	mm_update_max_long_term_frame_idx.112, .Lfunc_end175-mm_update_max_long_term_frame_idx.112
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.113 # -- Begin function store_picture_in_dpb.113
	.p2align	4, 0x90
	.type	store_picture_in_dpb.113,@function
store_picture_in_dpb.113:               # @store_picture_in_dpb.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1494577340, -24(%rbp)  # imm = 0x591570BC
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB176_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB176_6
.LBB176_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB176_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB176_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB176_5:                              # %if.end
	jmp	.LBB176_6
.LBB176_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB176_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB176_23
.LBB176_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB176_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB176_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB176_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB176_14
.LBB176_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB176_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB176_20
.LBB176_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB176_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB176_18
.LBB176_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB176_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB176_19
.LBB176_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB176_50
.LBB176_19:                             # %if.end48
	jmp	.LBB176_20
.LBB176_20:                             # %if.end49
	jmp	.LBB176_21
.LBB176_21:                             # %if.end50
	jmp	.LBB176_22
.LBB176_22:                             # %if.end51
	jmp	.LBB176_23
.LBB176_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB176_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB176_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB176_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB176_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB176_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB176_29:                             # %if.end67
	jmp	.LBB176_30
.LBB176_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB176_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB176_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB176_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB176_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB176_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB176_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB176_35
.LBB176_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB176_50
.LBB176_35:                             # %if.end80
                                        #   in Loop: Header=BB176_30 Depth=1
	jmp	.LBB176_36
.LBB176_36:                             # %if.end81
                                        #   in Loop: Header=BB176_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB176_30
.LBB176_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB176_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB176_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB176_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB176_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB176_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB176_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB176_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB176_43:                             # %if.end94
                                        #   in Loop: Header=BB176_40 Depth=1
	jmp	.LBB176_44
.LBB176_44:                             # %for.inc
                                        #   in Loop: Header=BB176_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_40
.LBB176_45:                             # %for.end
	jmp	.LBB176_46
.LBB176_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB176_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB176_49
.LBB176_48:                             # %if.else104
	movq	$0, dpb+56
.LBB176_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB176_50:                             # %return
	cmpl	$1494577340, -24(%rbp)  # imm = 0x591570BC
	jne	.LBB176_52
.LBB176_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_51
.Lfunc_end176:
	.size	store_picture_in_dpb.113, .Lfunc_end176-store_picture_in_dpb.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.114
	.type	remove_unused_frame_from_dpb.114,@function
remove_unused_frame_from_dpb.114:       # @remove_unused_frame_from_dpb.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1186690742, -20(%rbp)  # imm = 0x46BB76B6
	movl	$0, -12(%rbp)
.LBB177_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB177_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB177_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB177_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB177_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB177_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB177_8
.LBB177_5:                              # %if.end
                                        #   in Loop: Header=BB177_1 Depth=1
	jmp	.LBB177_6
.LBB177_6:                              # %for.inc
                                        #   in Loop: Header=BB177_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_1
.LBB177_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB177_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1186690742, -20(%rbp)  # imm = 0x46BB76B6
	jne	.LBB177_10
.LBB177_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_9
.Lfunc_end177:
	.size	remove_unused_frame_from_dpb.114, .Lfunc_end177-remove_unused_frame_from_dpb.114
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.115
	.type	get_short_term_pic.115,@function
get_short_term_pic.115:                 # @get_short_term_pic.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1166610531, -28(%rbp)  # imm = 0x45891063
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB178_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB178_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB178_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB178_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB178_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB178_23
.LBB178_7:                              # %if.end
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_8
.LBB178_8:                              # %if.end14
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_20
.LBB178_9:                              # %if.else
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB178_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB178_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB178_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB178_23
.LBB178_13:                             # %if.end34
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_14
.LBB178_14:                             # %if.end35
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB178_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB178_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB178_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB178_23
.LBB178_18:                             # %if.end56
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_19
.LBB178_19:                             # %if.end57
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_20
.LBB178_20:                             # %if.end58
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_21
.LBB178_21:                             # %for.inc
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB178_1
.LBB178_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB178_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1166610531, -28(%rbp)  # imm = 0x45891063
	jne	.LBB178_25
.LBB178_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_24
.Lfunc_end178:
	.size	get_short_term_pic.115, .Lfunc_end178-get_short_term_pic.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.116
	.type	reorder_short_term.116,@function
reorder_short_term.116:                 # @reorder_short_term.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1787791506, -44(%rbp)  # imm = 0x6A8F8892
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB179_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB179_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB179_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_1
.LBB179_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB179_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB179_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB179_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB179_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB179_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB179_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB179_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB179_10
.LBB179_9:                              # %if.then17
                                        #   in Loop: Header=BB179_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB179_10:                             # %if.end
                                        #   in Loop: Header=BB179_5 Depth=1
	jmp	.LBB179_11
.LBB179_11:                             # %if.end23
                                        #   in Loop: Header=BB179_5 Depth=1
	jmp	.LBB179_12
.LBB179_12:                             # %for.inc24
                                        #   in Loop: Header=BB179_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_5
.LBB179_13:                             # %for.end26
	cmpl	$1787791506, -44(%rbp)  # imm = 0x6A8F8892
	jne	.LBB179_15
.LBB179_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_14
.Lfunc_end179:
	.size	reorder_short_term.116, .Lfunc_end179-reorder_short_term.116
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.117
	.type	compare_fs_by_lt_pic_idx_asc.117,@function
compare_fs_by_lt_pic_idx_asc.117:       # @compare_fs_by_lt_pic_idx_asc.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1818453318, -16(%rbp)  # imm = 0x6C636546
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB180_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB180_5
.LBB180_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB180_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB180_5
.LBB180_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB180_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1818453318, -16(%rbp)  # imm = 0x6C636546
	jne	.LBB180_7
.LBB180_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_6
.Lfunc_end180:
	.size	compare_fs_by_lt_pic_idx_asc.117, .Lfunc_end180-compare_fs_by_lt_pic_idx_asc.117
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.118
	.type	mm_assign_long_term_frame_idx.118,@function
mm_assign_long_term_frame_idx.118:      # @mm_assign_long_term_frame_idx.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1222726522, -32(%rbp)  # imm = 0x48E1537A
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB181_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB181_18
.LBB181_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB181_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB181_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB181_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB181_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB181_15
.LBB181_7:                              # %if.end
                                        #   in Loop: Header=BB181_3 Depth=1
	jmp	.LBB181_8
.LBB181_8:                              # %if.end8
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB181_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB181_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB181_15
.LBB181_11:                             # %if.end20
                                        #   in Loop: Header=BB181_3 Depth=1
	jmp	.LBB181_12
.LBB181_12:                             # %if.end21
                                        #   in Loop: Header=BB181_3 Depth=1
	jmp	.LBB181_13
.LBB181_13:                             # %for.inc
                                        #   in Loop: Header=BB181_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_3
.LBB181_14:                             # %for.end.loopexit
	jmp	.LBB181_15
.LBB181_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB181_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB181_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB181_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1222726522, -32(%rbp)  # imm = 0x48E1537A
	jne	.LBB181_20
.LBB181_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_19
.Lfunc_end181:
	.size	mm_assign_long_term_frame_idx.118, .Lfunc_end181-mm_assign_long_term_frame_idx.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.119
	.type	compare_pic_by_poc_asc.119,@function
compare_pic_by_poc_asc.119:             # @compare_pic_by_poc_asc.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$709265087, -16(%rbp)   # imm = 0x2A4686BF
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB182_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB182_5
.LBB182_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB182_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB182_5
.LBB182_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB182_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$709265087, -16(%rbp)   # imm = 0x2A4686BF
	jne	.LBB182_7
.LBB182_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_6
.Lfunc_end182:
	.size	compare_pic_by_poc_asc.119, .Lfunc_end182-compare_pic_by_poc_asc.119
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.120
	.type	reorder_long_term.120,@function
reorder_long_term.120:                  # @reorder_long_term.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$153682886, -44(%rbp)   # imm = 0x92903C6
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB183_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB183_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_1
.LBB183_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB183_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB183_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB183_9
.LBB183_8:                              # %if.then
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB183_9:                              # %if.end
                                        #   in Loop: Header=BB183_5 Depth=1
	jmp	.LBB183_10
.LBB183_10:                             # %for.inc19
                                        #   in Loop: Header=BB183_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_5
.LBB183_11:                             # %for.end21
	cmpl	$153682886, -44(%rbp)   # imm = 0x92903C6
	jne	.LBB183_13
.LBB183_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_12
.Lfunc_end183:
	.size	reorder_long_term.120, .Lfunc_end183-reorder_long_term.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.121
	.type	get_long_term_pic.121,@function
get_long_term_pic.121:                  # @get_long_term_pic.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1371051474, -28(%rbp)  # imm = 0x51B895D2
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB184_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB184_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB184_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB184_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB184_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_7:                              # %if.end
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_8
.LBB184_8:                              # %if.end14
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_20
.LBB184_9:                              # %if.else
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB184_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB184_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_13:                             # %if.end34
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_14
.LBB184_14:                             # %if.end35
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB184_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB184_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_18:                             # %if.end56
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_19
.LBB184_19:                             # %if.end57
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_20
.LBB184_20:                             # %if.end58
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_21
.LBB184_21:                             # %for.inc
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_1
.LBB184_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB184_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1371051474, -28(%rbp)  # imm = 0x51B895D2
	jne	.LBB184_25
.LBB184_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_24
.Lfunc_end184:
	.size	get_long_term_pic.121, .Lfunc_end184-get_long_term_pic.121
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.122
	.type	get_short_term_pic.122,@function
get_short_term_pic.122:                 # @get_short_term_pic.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2084531355, -28(%rbp)  # imm = 0x7C3F6C9B
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB185_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB185_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB185_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB185_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB185_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB185_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB185_23
.LBB185_7:                              # %if.end
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_8
.LBB185_8:                              # %if.end14
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_20
.LBB185_9:                              # %if.else
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB185_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB185_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB185_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB185_23
.LBB185_13:                             # %if.end34
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_14
.LBB185_14:                             # %if.end35
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB185_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB185_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB185_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB185_23
.LBB185_18:                             # %if.end56
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_19
.LBB185_19:                             # %if.end57
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_20
.LBB185_20:                             # %if.end58
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_21
.LBB185_21:                             # %for.inc
                                        #   in Loop: Header=BB185_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_1
.LBB185_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB185_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$2084531355, -28(%rbp)  # imm = 0x7C3F6C9B
	jne	.LBB185_25
.LBB185_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_24
.Lfunc_end185:
	.size	get_short_term_pic.122, .Lfunc_end185-get_short_term_pic.122
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.123
	.type	compare_fs_by_lt_pic_idx_asc.123,@function
compare_fs_by_lt_pic_idx_asc.123:       # @compare_fs_by_lt_pic_idx_asc.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1171135595, -16(%rbp)  # imm = 0x45CE1C6B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB186_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB186_5
.LBB186_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB186_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB186_5
.LBB186_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB186_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1171135595, -16(%rbp)  # imm = 0x45CE1C6B
	jne	.LBB186_7
.LBB186_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_6
.Lfunc_end186:
	.size	compare_fs_by_lt_pic_idx_asc.123, .Lfunc_end186-compare_fs_by_lt_pic_idx_asc.123
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.124
	.type	mm_unmark_short_term_for_reference.124,@function
mm_unmark_short_term_for_reference.124: # @mm_unmark_short_term_for_reference.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$48148119, -16(%rbp)    # imm = 0x2DEAE97
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB187_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB187_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB187_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB187_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB187_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB187_27
.LBB187_7:                              # %if.end
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_8
.LBB187_8:                              # %if.end13
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_24
.LBB187_9:                              # %if.else
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB187_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB187_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB187_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB187_14:                             # %if.end44
	jmp	.LBB187_27
.LBB187_15:                             # %if.end45
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_16
.LBB187_16:                             # %if.end46
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB187_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB187_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB187_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB187_21:                             # %if.end81
	jmp	.LBB187_27
.LBB187_22:                             # %if.end82
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_23
.LBB187_23:                             # %if.end83
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_24
.LBB187_24:                             # %if.end84
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_25
.LBB187_25:                             # %for.inc
                                        #   in Loop: Header=BB187_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_1
.LBB187_26:                             # %for.end.loopexit
	jmp	.LBB187_27
.LBB187_27:                             # %for.end
	cmpl	$48148119, -16(%rbp)    # imm = 0x2DEAE97
	jne	.LBB187_29
.LBB187_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_28
.Lfunc_end187:
	.size	mm_unmark_short_term_for_reference.124, .Lfunc_end187-mm_unmark_short_term_for_reference.124
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.125     # -- Begin function dpb_split_field.125
	.p2align	4, 0x90
	.type	dpb_split_field.125,@function
dpb_split_field.125:                    # @dpb_split_field.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1964860867, -68(%rbp)  # imm = 0x751D65C3
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB188_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB188_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB188_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_2
.LBB188_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB188_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB188_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB188_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_6
.LBB188_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB188_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB188_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB188_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_10
.LBB188_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB188_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB188_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB188_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_14
.LBB188_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB188_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB188_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB188_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB188_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB188_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_19
.LBB188_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB188_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB188_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB188_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB188_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_23
.LBB188_26:                             # %for.end328
	jmp	.LBB188_27
.LBB188_27:                             # %if.end
	jmp	.LBB188_29
.LBB188_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB188_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB188_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB188_30 Depth=1
	movl	$0, -4(%rbp)
.LBB188_32:                             # %for.cond343
                                        #   Parent Loop BB188_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB188_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB188_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB188_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB188_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB188_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB188_38
.LBB188_37:                             # %cond.false
                                        #   in Loop: Header=BB188_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_38
.LBB188_38:                             # %cond.end
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB188_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB188_41
.LBB188_40:                             # %cond.false415
                                        #   in Loop: Header=BB188_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_41
.LBB188_41:                             # %cond.end416
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB188_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB188_44
.LBB188_43:                             # %cond.false436
                                        #   in Loop: Header=BB188_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_44
.LBB188_44:                             # %cond.end437
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB188_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB188_47
.LBB188_46:                             # %cond.false456
                                        #   in Loop: Header=BB188_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_47
.LBB188_47:                             # %cond.end457
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB188_55
.LBB188_48:                             # %if.else466
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB188_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB188_51
.LBB188_50:                             # %cond.false491
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB188_51
.LBB188_51:                             # %cond.end492
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB188_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB188_54
.LBB188_53:                             # %cond.false509
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB188_54
.LBB188_54:                             # %cond.end510
                                        #   in Loop: Header=BB188_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB188_55:                             # %if.end519
                                        #   in Loop: Header=BB188_32 Depth=2
	jmp	.LBB188_56
.LBB188_56:                             # %for.inc520
                                        #   in Loop: Header=BB188_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_32
.LBB188_57:                             # %for.end522
                                        #   in Loop: Header=BB188_30 Depth=1
	jmp	.LBB188_58
.LBB188_58:                             # %for.inc523
                                        #   in Loop: Header=BB188_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_30
.LBB188_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB188_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB188_73
.LBB188_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB188_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB188_62 Depth=1
	movl	$0, -8(%rbp)
.LBB188_64:                             # %for.cond538
                                        #   Parent Loop BB188_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB188_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB188_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB188_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB188_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB188_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB188_68:                             # %if.end908
                                        #   in Loop: Header=BB188_64 Depth=2
	jmp	.LBB188_69
.LBB188_69:                             # %for.inc909
                                        #   in Loop: Header=BB188_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_64
.LBB188_70:                             # %for.end911
                                        #   in Loop: Header=BB188_62 Depth=1
	jmp	.LBB188_71
.LBB188_71:                             # %for.inc912
                                        #   in Loop: Header=BB188_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_62
.LBB188_72:                             # %for.end914
	jmp	.LBB188_73
.LBB188_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB188_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB188_74 Depth=1
	movl	$0, -8(%rbp)
.LBB188_76:                             # %for.cond923
                                        #   Parent Loop BB188_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB188_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB188_148
.LBB188_79:                             # %if.then954
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB188_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_83
.LBB188_82:                             # %cond.false991
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_83:                             # %cond.end993
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_86
.LBB188_85:                             # %cond.false1001
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_86:                             # %cond.end1003
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_89
.LBB188_88:                             # %cond.false1032
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_89:                             # %cond.end1034
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_92
.LBB188_91:                             # %cond.false1042
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_92:                             # %cond.end1044
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_95
.LBB188_94:                             # %cond.false1073
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_95:                             # %cond.end1075
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_98
.LBB188_97:                             # %cond.false1083
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_98:                             # %cond.end1085
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_101
.LBB188_100:                            # %cond.false1114
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_101:                            # %cond.end1116
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_104
.LBB188_103:                            # %cond.false1124
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_104:                            # %cond.end1126
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_107
.LBB188_106:                            # %cond.false1155
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_107:                            # %cond.end1157
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_110
.LBB188_109:                            # %cond.false1165
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_110:                            # %cond.end1167
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB188_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB188_125
.LBB188_112:                            # %if.else1190
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_115
.LBB188_114:                            # %cond.false1198
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_115:                            # %cond.end1200
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_118
.LBB188_117:                            # %cond.false1208
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_118:                            # %cond.end1210
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB188_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB188_121
.LBB188_120:                            # %cond.false1237
                                        #   in Loop: Header=BB188_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_121
.LBB188_121:                            # %cond.end1238
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB188_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB188_124
.LBB188_123:                            # %cond.false1254
                                        #   in Loop: Header=BB188_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_124
.LBB188_124:                            # %cond.end1255
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB188_125:                            # %if.end1264
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_128
.LBB188_127:                            # %cond.false1272
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_128:                            # %cond.end1274
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_131
.LBB188_130:                            # %cond.false1282
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_131:                            # %cond.end1284
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB188_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB188_146
.LBB188_133:                            # %if.else1307
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_136
.LBB188_135:                            # %cond.false1315
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_136:                            # %cond.end1317
                                        #   in Loop: Header=BB188_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB188_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB188_139
.LBB188_138:                            # %cond.false1325
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB188_139:                            # %cond.end1327
                                        #   in Loop: Header=BB188_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB188_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB188_142
.LBB188_141:                            # %cond.false1355
                                        #   in Loop: Header=BB188_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_142
.LBB188_142:                            # %cond.end1356
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB188_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB188_145
.LBB188_144:                            # %cond.false1373
                                        #   in Loop: Header=BB188_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_145
.LBB188_145:                            # %cond.end1374
                                        #   in Loop: Header=BB188_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB188_146:                            # %if.end1383
                                        #   in Loop: Header=BB188_76 Depth=2
	jmp	.LBB188_147
.LBB188_147:                            # %if.end1384
                                        #   in Loop: Header=BB188_76 Depth=2
	jmp	.LBB188_148
.LBB188_148:                            # %if.end1385
                                        #   in Loop: Header=BB188_76 Depth=2
	jmp	.LBB188_149
.LBB188_149:                            # %for.inc1386
                                        #   in Loop: Header=BB188_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_76
.LBB188_150:                            # %for.end1388
                                        #   in Loop: Header=BB188_74 Depth=1
	jmp	.LBB188_151
.LBB188_151:                            # %for.inc1389
                                        #   in Loop: Header=BB188_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_74
.LBB188_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB188_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB188_153 Depth=1
	movl	$0, -4(%rbp)
.LBB188_155:                            # %for.cond1399
                                        #   Parent Loop BB188_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB188_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB188_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_155
.LBB188_158:                            # %for.end1414
                                        #   in Loop: Header=BB188_153 Depth=1
	jmp	.LBB188_159
.LBB188_159:                            # %for.inc1415
                                        #   in Loop: Header=BB188_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_153
.LBB188_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB188_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB188_174
.LBB188_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB188_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB188_163 Depth=1
	movl	$0, -4(%rbp)
.LBB188_165:                            # %for.cond1431
                                        #   Parent Loop BB188_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB188_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB188_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB188_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB188_169
.LBB188_168:                            # %cond.false1462
                                        #   in Loop: Header=BB188_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_169
.LBB188_169:                            # %cond.end1463
                                        #   in Loop: Header=BB188_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB188_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_165
.LBB188_171:                            # %for.end1474
                                        #   in Loop: Header=BB188_163 Depth=1
	jmp	.LBB188_172
.LBB188_172:                            # %for.inc1475
                                        #   in Loop: Header=BB188_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_163
.LBB188_173:                            # %for.end1477
	jmp	.LBB188_174
.LBB188_174:                            # %if.end1478
	cmpl	$1964860867, -68(%rbp)  # imm = 0x751D65C3
	jne	.LBB188_176
.LBB188_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_175
.Lfunc_end188:
	.size	dpb_split_field.125, .Lfunc_end188-dpb_split_field.125
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.126
	.type	get_long_term_pic.126,@function
get_long_term_pic.126:                  # @get_long_term_pic.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1248497451, -28(%rbp)  # imm = 0x4A6A8F2B
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB189_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB189_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB189_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB189_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB189_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB189_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB189_23
.LBB189_7:                              # %if.end
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_8
.LBB189_8:                              # %if.end14
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_20
.LBB189_9:                              # %if.else
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB189_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB189_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB189_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB189_23
.LBB189_13:                             # %if.end34
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_14
.LBB189_14:                             # %if.end35
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB189_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB189_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB189_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB189_23
.LBB189_18:                             # %if.end56
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_19
.LBB189_19:                             # %if.end57
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_20
.LBB189_20:                             # %if.end58
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_21
.LBB189_21:                             # %for.inc
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_1
.LBB189_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB189_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1248497451, -28(%rbp)  # imm = 0x4A6A8F2B
	jne	.LBB189_25
.LBB189_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_24
.Lfunc_end189:
	.size	get_long_term_pic.126, .Lfunc_end189-get_long_term_pic.126
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.127   # -- Begin function dpb_combine_field.127
	.p2align	4, 0x90
	.type	dpb_combine_field.127,@function
dpb_combine_field.127:                  # @dpb_combine_field.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$284543912, -32(%rbp)   # imm = 0x10F5CBA8
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB190_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB190_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB190_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB190_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_1
.LBB190_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB190_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB190_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_5
.LBB190_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB190_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB190_11
.LBB190_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB190_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB190_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB190_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB190_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB190_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB190_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB190_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB190_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB190_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB190_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB190_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB190_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB190_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB190_24
.LBB190_23:                             # %cond.false217
                                        #   in Loop: Header=BB190_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB190_24:                             # %cond.end226
                                        #   in Loop: Header=BB190_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB190_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_20
.LBB190_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB190_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB190_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB190_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB190_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB190_31
.LBB190_30:                             # %cond.false269
                                        #   in Loop: Header=BB190_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB190_31:                             # %cond.end278
                                        #   in Loop: Header=BB190_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB190_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_27
.LBB190_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB190_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB190_34 Depth=1
	movl	$0, -20(%rbp)
.LBB190_36:                             # %for.cond295
                                        #   Parent Loop BB190_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB190_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB190_40
.LBB190_39:                             # %cond.false445
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB190_40
.LBB190_40:                             # %cond.end446
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB190_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB190_43
.LBB190_42:                             # %cond.false462
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB190_43
.LBB190_43:                             # %cond.end463
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB190_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB190_46
.LBB190_45:                             # %cond.false479
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB190_46
.LBB190_46:                             # %cond.end480
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB190_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB190_49
.LBB190_48:                             # %cond.false501
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB190_49
.LBB190_49:                             # %cond.end502
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB190_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB190_52
.LBB190_51:                             # %cond.false647
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB190_52
.LBB190_52:                             # %cond.end648
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB190_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB190_55
.LBB190_54:                             # %cond.false665
                                        #   in Loop: Header=BB190_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB190_55
.LBB190_55:                             # %cond.end666
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB190_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB190_58
.LBB190_57:                             # %cond.false683
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB190_58
.LBB190_58:                             # %cond.end684
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB190_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB190_61
.LBB190_60:                             # %cond.false706
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB190_61
.LBB190_61:                             # %cond.end707
                                        #   in Loop: Header=BB190_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB190_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB190_36
.LBB190_63:                             # %for.end723
                                        #   in Loop: Header=BB190_34 Depth=1
	jmp	.LBB190_64
.LBB190_64:                             # %for.inc724
                                        #   in Loop: Header=BB190_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_34
.LBB190_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB190_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB190_76
.LBB190_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB190_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB190_68 Depth=1
	movl	$0, -20(%rbp)
.LBB190_70:                             # %for.cond737
                                        #   Parent Loop BB190_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB190_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB190_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB190_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB190_70
.LBB190_73:                             # %for.end758
                                        #   in Loop: Header=BB190_68 Depth=1
	jmp	.LBB190_74
.LBB190_74:                             # %for.inc759
                                        #   in Loop: Header=BB190_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_68
.LBB190_75:                             # %for.end761
	jmp	.LBB190_76
.LBB190_76:                             # %if.end762
	cmpl	$284543912, -32(%rbp)   # imm = 0x10F5CBA8
	jne	.LBB190_78
.LBB190_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_77
.Lfunc_end190:
	.size	dpb_combine_field.127, .Lfunc_end190-dpb_combine_field.127
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.128 # -- Begin function reorder_ref_pic_list.128
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.128,@function
reorder_ref_pic_list.128:               # @reorder_ref_pic_list.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$222769417, -60(%rbp)   # imm = 0xD473109
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB191_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB191_3
.LBB191_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB191_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB191_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB191_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB191_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB191_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB191_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB191_7:                              # %if.end9
                                        #   in Loop: Header=BB191_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB191_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB191_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB191_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB191_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_12
.LBB191_11:                             # %if.else28
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB191_12:                             # %if.end33
                                        #   in Loop: Header=BB191_4 Depth=1
	jmp	.LBB191_17
.LBB191_13:                             # %if.else34
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB191_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_16
.LBB191_15:                             # %if.else46
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB191_16:                             # %if.end51
                                        #   in Loop: Header=BB191_4 Depth=1
	jmp	.LBB191_17
.LBB191_17:                             # %if.end52
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB191_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB191_20
.LBB191_19:                             # %if.else56
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB191_20:                             # %if.end57
                                        #   in Loop: Header=BB191_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB191_22
.LBB191_21:                             # %if.else58
                                        #   in Loop: Header=BB191_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB191_22:                             # %if.end61
                                        #   in Loop: Header=BB191_4 Depth=1
	jmp	.LBB191_23
.LBB191_23:                             # %for.inc
                                        #   in Loop: Header=BB191_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_4
.LBB191_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$222769417, -60(%rbp)   # imm = 0xD473109
	jne	.LBB191_26
.LBB191_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_25
.Lfunc_end191:
	.size	reorder_ref_pic_list.128, .Lfunc_end191-reorder_ref_pic_list.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.129
	.type	mark_pic_long_term.129,@function
mark_pic_long_term.129:                 # @mark_pic_long_term.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1029283149, -20(%rbp)  # imm = 0x3D599D4D
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB192_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB192_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB192_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB192_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB192_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB192_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB192_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB192_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB192_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB192_39
.LBB192_7:                              # %if.end
                                        #   in Loop: Header=BB192_2 Depth=1
	jmp	.LBB192_8
.LBB192_8:                              # %if.end50
                                        #   in Loop: Header=BB192_2 Depth=1
	jmp	.LBB192_9
.LBB192_9:                              # %for.inc
                                        #   in Loop: Header=BB192_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_2
.LBB192_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB192_39
.LBB192_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB192_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB192_14
.LBB192_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -24(%rbp)
.LBB192_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB192_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB192_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB192_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB192_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB192_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB192_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB192_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB192_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB192_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB192_24:                             # %if.end123
	jmp	.LBB192_39
.LBB192_25:                             # %if.end124
                                        #   in Loop: Header=BB192_15 Depth=1
	jmp	.LBB192_26
.LBB192_26:                             # %if.end125
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB192_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB192_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB192_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB192_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB192_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB192_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB192_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB192_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB192_34:                             # %if.end194
	jmp	.LBB192_39
.LBB192_35:                             # %if.end195
                                        #   in Loop: Header=BB192_15 Depth=1
	jmp	.LBB192_36
.LBB192_36:                             # %if.end196
                                        #   in Loop: Header=BB192_15 Depth=1
	jmp	.LBB192_37
.LBB192_37:                             # %for.inc197
                                        #   in Loop: Header=BB192_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_15
.LBB192_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB192_39:                             # %if.end201
	cmpl	$1029283149, -20(%rbp)  # imm = 0x3D599D4D
	jne	.LBB192_41
.LBB192_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_40
.Lfunc_end192:
	.size	mark_pic_long_term.129, .Lfunc_end192-mark_pic_long_term.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.130
	.type	reorder_short_term.130,@function
reorder_short_term.130:                 # @reorder_short_term.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1353597673, -44(%rbp)  # imm = 0x50AE42E9
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB193_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_1
.LBB193_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB193_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB193_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB193_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB193_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB193_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB193_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB193_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB193_10
.LBB193_9:                              # %if.then17
                                        #   in Loop: Header=BB193_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB193_10:                             # %if.end
                                        #   in Loop: Header=BB193_5 Depth=1
	jmp	.LBB193_11
.LBB193_11:                             # %if.end23
                                        #   in Loop: Header=BB193_5 Depth=1
	jmp	.LBB193_12
.LBB193_12:                             # %for.inc24
                                        #   in Loop: Header=BB193_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_5
.LBB193_13:                             # %for.end26
	cmpl	$1353597673, -44(%rbp)  # imm = 0x50AE42E9
	jne	.LBB193_15
.LBB193_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_14
.Lfunc_end193:
	.size	reorder_short_term.130, .Lfunc_end193-reorder_short_term.130
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.131   # -- Begin function dpb_combine_field.131
	.p2align	4, 0x90
	.type	dpb_combine_field.131,@function
dpb_combine_field.131:                  # @dpb_combine_field.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1428251651, -32(%rbp)  # imm = 0x55216403
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB194_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB194_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB194_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB194_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_1
.LBB194_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB194_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB194_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB194_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB194_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_5
.LBB194_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB194_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB194_11
.LBB194_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB194_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB194_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB194_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB194_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB194_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB194_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB194_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB194_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB194_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB194_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB194_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB194_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB194_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB194_24
.LBB194_23:                             # %cond.false217
                                        #   in Loop: Header=BB194_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB194_24:                             # %cond.end226
                                        #   in Loop: Header=BB194_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB194_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_20
.LBB194_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB194_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB194_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB194_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB194_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB194_31
.LBB194_30:                             # %cond.false269
                                        #   in Loop: Header=BB194_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB194_31:                             # %cond.end278
                                        #   in Loop: Header=BB194_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB194_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_27
.LBB194_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB194_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB194_34 Depth=1
	movl	$0, -20(%rbp)
.LBB194_36:                             # %for.cond295
                                        #   Parent Loop BB194_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB194_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB194_40
.LBB194_39:                             # %cond.false445
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB194_40
.LBB194_40:                             # %cond.end446
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB194_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB194_43
.LBB194_42:                             # %cond.false462
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB194_43
.LBB194_43:                             # %cond.end463
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB194_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB194_46
.LBB194_45:                             # %cond.false479
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB194_46
.LBB194_46:                             # %cond.end480
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB194_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB194_49
.LBB194_48:                             # %cond.false501
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB194_49
.LBB194_49:                             # %cond.end502
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB194_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB194_52
.LBB194_51:                             # %cond.false647
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB194_52
.LBB194_52:                             # %cond.end648
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB194_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB194_55
.LBB194_54:                             # %cond.false665
                                        #   in Loop: Header=BB194_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB194_55
.LBB194_55:                             # %cond.end666
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB194_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB194_58
.LBB194_57:                             # %cond.false683
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB194_58
.LBB194_58:                             # %cond.end684
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB194_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB194_61
.LBB194_60:                             # %cond.false706
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB194_61
.LBB194_61:                             # %cond.end707
                                        #   in Loop: Header=BB194_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB194_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB194_36
.LBB194_63:                             # %for.end723
                                        #   in Loop: Header=BB194_34 Depth=1
	jmp	.LBB194_64
.LBB194_64:                             # %for.inc724
                                        #   in Loop: Header=BB194_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_34
.LBB194_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB194_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB194_76
.LBB194_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB194_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB194_68 Depth=1
	movl	$0, -20(%rbp)
.LBB194_70:                             # %for.cond737
                                        #   Parent Loop BB194_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB194_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB194_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB194_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB194_70
.LBB194_73:                             # %for.end758
                                        #   in Loop: Header=BB194_68 Depth=1
	jmp	.LBB194_74
.LBB194_74:                             # %for.inc759
                                        #   in Loop: Header=BB194_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_68
.LBB194_75:                             # %for.end761
	jmp	.LBB194_76
.LBB194_76:                             # %if.end762
	cmpl	$1428251651, -32(%rbp)  # imm = 0x55216403
	jne	.LBB194_78
.LBB194_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_77
.Lfunc_end194:
	.size	dpb_combine_field.131, .Lfunc_end194-dpb_combine_field.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.132
	.type	get_short_term_pic.132,@function
get_short_term_pic.132:                 # @get_short_term_pic.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1029469152, -28(%rbp)  # imm = 0x3D5C73E0
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB195_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB195_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB195_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB195_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB195_23
.LBB195_7:                              # %if.end
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_8
.LBB195_8:                              # %if.end14
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_20
.LBB195_9:                              # %if.else
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB195_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB195_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB195_23
.LBB195_13:                             # %if.end34
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_14
.LBB195_14:                             # %if.end35
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB195_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB195_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB195_23
.LBB195_18:                             # %if.end56
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_19
.LBB195_19:                             # %if.end57
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_20
.LBB195_20:                             # %if.end58
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_21
.LBB195_21:                             # %for.inc
                                        #   in Loop: Header=BB195_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_1
.LBB195_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB195_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1029469152, -28(%rbp)  # imm = 0x3D5C73E0
	jne	.LBB195_25
.LBB195_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_24
.Lfunc_end195:
	.size	get_short_term_pic.132, .Lfunc_end195-get_short_term_pic.132
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.133  # -- Begin function fill_frame_num_gap.133
	.p2align	4, 0x90
	.type	fill_frame_num_gap.133,@function
fill_frame_num_gap.133:                 # @fill_frame_num_gap.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$84400207, -36(%rbp)    # imm = 0x507D84F
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB196_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB196_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB196_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB196_1
.LBB196_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$84400207, -36(%rbp)    # imm = 0x507D84F
	jne	.LBB196_5
.LBB196_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_4
.Lfunc_end196:
	.size	fill_frame_num_gap.133, .Lfunc_end196-fill_frame_num_gap.133
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.134
	.type	reorder_long_term.134,@function
reorder_long_term.134:                  # @reorder_long_term.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$973647307, -44(%rbp)   # imm = 0x3A08ADCB
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB197_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB197_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB197_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_1
.LBB197_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB197_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB197_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB197_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB197_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB197_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB197_9
.LBB197_8:                              # %if.then
                                        #   in Loop: Header=BB197_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_9:                              # %if.end
                                        #   in Loop: Header=BB197_5 Depth=1
	jmp	.LBB197_10
.LBB197_10:                             # %for.inc19
                                        #   in Loop: Header=BB197_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_5
.LBB197_11:                             # %for.end21
	cmpl	$973647307, -44(%rbp)   # imm = 0x3A08ADCB
	jne	.LBB197_13
.LBB197_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_12
.Lfunc_end197:
	.size	reorder_long_term.134, .Lfunc_end197-reorder_long_term.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.135
	.type	compare_fs_by_poc_desc.135,@function
compare_fs_by_poc_desc.135:             # @compare_fs_by_poc_desc.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$70883115, -16(%rbp)    # imm = 0x439972B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB198_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB198_5
.LBB198_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB198_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB198_5
.LBB198_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB198_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$70883115, -16(%rbp)    # imm = 0x439972B
	jne	.LBB198_7
.LBB198_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_6
.Lfunc_end198:
	.size	compare_fs_by_poc_desc.135, .Lfunc_end198-compare_fs_by_poc_desc.135
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.136   # -- Begin function dpb_combine_field.136
	.p2align	4, 0x90
	.type	dpb_combine_field.136,@function
dpb_combine_field.136:                  # @dpb_combine_field.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$749300276, -32(%rbp)   # imm = 0x2CA96A34
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB199_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB199_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_1
.LBB199_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB199_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB199_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB199_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB199_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_5
.LBB199_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB199_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB199_11
.LBB199_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB199_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB199_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB199_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB199_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB199_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB199_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB199_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB199_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB199_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB199_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB199_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB199_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB199_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB199_24
.LBB199_23:                             # %cond.false217
                                        #   in Loop: Header=BB199_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB199_24:                             # %cond.end226
                                        #   in Loop: Header=BB199_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB199_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_20
.LBB199_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB199_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB199_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB199_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB199_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB199_31
.LBB199_30:                             # %cond.false269
                                        #   in Loop: Header=BB199_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB199_31:                             # %cond.end278
                                        #   in Loop: Header=BB199_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB199_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_27
.LBB199_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB199_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB199_34 Depth=1
	movl	$0, -20(%rbp)
.LBB199_36:                             # %for.cond295
                                        #   Parent Loop BB199_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB199_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB199_40
.LBB199_39:                             # %cond.false445
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB199_40
.LBB199_40:                             # %cond.end446
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB199_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB199_43
.LBB199_42:                             # %cond.false462
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB199_43
.LBB199_43:                             # %cond.end463
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB199_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB199_46
.LBB199_45:                             # %cond.false479
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB199_46
.LBB199_46:                             # %cond.end480
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB199_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB199_49
.LBB199_48:                             # %cond.false501
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB199_49
.LBB199_49:                             # %cond.end502
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB199_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB199_52
.LBB199_51:                             # %cond.false647
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB199_52
.LBB199_52:                             # %cond.end648
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB199_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB199_55
.LBB199_54:                             # %cond.false665
                                        #   in Loop: Header=BB199_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB199_55
.LBB199_55:                             # %cond.end666
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB199_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB199_58
.LBB199_57:                             # %cond.false683
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB199_58
.LBB199_58:                             # %cond.end684
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB199_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB199_61
.LBB199_60:                             # %cond.false706
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB199_61
.LBB199_61:                             # %cond.end707
                                        #   in Loop: Header=BB199_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB199_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB199_36
.LBB199_63:                             # %for.end723
                                        #   in Loop: Header=BB199_34 Depth=1
	jmp	.LBB199_64
.LBB199_64:                             # %for.inc724
                                        #   in Loop: Header=BB199_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_34
.LBB199_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB199_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB199_76
.LBB199_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB199_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB199_68 Depth=1
	movl	$0, -20(%rbp)
.LBB199_70:                             # %for.cond737
                                        #   Parent Loop BB199_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB199_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB199_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB199_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB199_70
.LBB199_73:                             # %for.end758
                                        #   in Loop: Header=BB199_68 Depth=1
	jmp	.LBB199_74
.LBB199_74:                             # %for.inc759
                                        #   in Loop: Header=BB199_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_68
.LBB199_75:                             # %for.end761
	jmp	.LBB199_76
.LBB199_76:                             # %if.end762
	cmpl	$749300276, -32(%rbp)   # imm = 0x2CA96A34
	jne	.LBB199_78
.LBB199_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_77
.Lfunc_end199:
	.size	dpb_combine_field.136, .Lfunc_end199-dpb_combine_field.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.137
	.type	compare_pic_by_pic_num_desc.137,@function
compare_pic_by_pic_num_desc.137:        # @compare_pic_by_pic_num_desc.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$178211919, -16(%rbp)   # imm = 0xA9F4C4F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB200_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB200_5
.LBB200_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB200_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB200_5
.LBB200_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB200_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$178211919, -16(%rbp)   # imm = 0xA9F4C4F
	jne	.LBB200_7
.LBB200_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_6
.Lfunc_end200:
	.size	compare_pic_by_pic_num_desc.137, .Lfunc_end200-compare_pic_by_pic_num_desc.137
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.138 # -- Begin function replace_top_pic_with_frame.138
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.138,@function
replace_top_pic_with_frame.138:         # @replace_top_pic_with_frame.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$720142066, -32(%rbp)   # imm = 0x2AEC7EF2
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB201_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB201_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB201_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB201_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB201_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB201_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB201_10
.LBB201_7:                              # %if.end14
                                        #   in Loop: Header=BB201_3 Depth=1
	jmp	.LBB201_8
.LBB201_8:                              # %for.inc
                                        #   in Loop: Header=BB201_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_3
.LBB201_9:                              # %for.end.loopexit
	jmp	.LBB201_10
.LBB201_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB201_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB201_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB201_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB201_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB201_15:                             # %if.end26
	jmp	.LBB201_16
.LBB201_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$720142066, -32(%rbp)   # imm = 0x2AEC7EF2
	jne	.LBB201_18
.LBB201_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_17
.Lfunc_end201:
	.size	replace_top_pic_with_frame.138, .Lfunc_end201-replace_top_pic_with_frame.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.139
	.type	mm_assign_long_term_frame_idx.139,@function
mm_assign_long_term_frame_idx.139:      # @mm_assign_long_term_frame_idx.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1832522719, -32(%rbp)  # imm = 0x6D3A13DF
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB202_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB202_18
.LBB202_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB202_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB202_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB202_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB202_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB202_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB202_15
.LBB202_7:                              # %if.end
                                        #   in Loop: Header=BB202_3 Depth=1
	jmp	.LBB202_8
.LBB202_8:                              # %if.end8
                                        #   in Loop: Header=BB202_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB202_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB202_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB202_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB202_15
.LBB202_11:                             # %if.end20
                                        #   in Loop: Header=BB202_3 Depth=1
	jmp	.LBB202_12
.LBB202_12:                             # %if.end21
                                        #   in Loop: Header=BB202_3 Depth=1
	jmp	.LBB202_13
.LBB202_13:                             # %for.inc
                                        #   in Loop: Header=BB202_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_3
.LBB202_14:                             # %for.end.loopexit
	jmp	.LBB202_15
.LBB202_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB202_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB202_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB202_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1832522719, -32(%rbp)  # imm = 0x6D3A13DF
	jne	.LBB202_20
.LBB202_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_19
.Lfunc_end202:
	.size	mm_assign_long_term_frame_idx.139, .Lfunc_end202-mm_assign_long_term_frame_idx.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.140
	.type	unmark_long_term_field_for_reference_by_frame_idx.140,@function
unmark_long_term_field_for_reference_by_frame_idx.140: # @unmark_long_term_field_for_reference_by_frame_idx.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1332431884, -32(%rbp)  # imm = 0x4F6B4C0C
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB203_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB203_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB203_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB203_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB203_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB203_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB203_23
.LBB203_8:                              # %if.else
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB203_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB203_22
.LBB203_10:                             # %if.else21
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB203_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB203_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB203_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB203_15
.LBB203_14:                             # %if.then29
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_15:                             # %if.end32
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_17
.LBB203_16:                             # %if.else33
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_17:                             # %if.end36
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_21
.LBB203_18:                             # %if.else37
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB203_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_20:                             # %if.end45
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_21
.LBB203_21:                             # %if.end46
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_22
.LBB203_22:                             # %if.end47
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_23
.LBB203_23:                             # %if.end48
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_24
.LBB203_24:                             # %if.end49
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB203_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB203_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB203_42
.LBB203_27:                             # %if.else59
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB203_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB203_41
.LBB203_29:                             # %if.else67
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB203_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB203_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB203_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB203_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB203_34
.LBB203_33:                             # %if.then78
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_34:                             # %if.end81
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_36
.LBB203_35:                             # %if.else82
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_36:                             # %if.end85
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_40
.LBB203_37:                             # %if.else86
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB203_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB203_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB203_39:                             # %if.end95
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_40
.LBB203_40:                             # %if.end96
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_41
.LBB203_41:                             # %if.end97
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_42
.LBB203_42:                             # %if.end98
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_43
.LBB203_43:                             # %if.end99
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_44
.LBB203_44:                             # %if.end100
                                        #   in Loop: Header=BB203_3 Depth=1
	jmp	.LBB203_45
.LBB203_45:                             # %for.inc
                                        #   in Loop: Header=BB203_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_3
.LBB203_46:                             # %for.end
	cmpl	$1332431884, -32(%rbp)  # imm = 0x4F6B4C0C
	jne	.LBB203_48
.LBB203_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_47
.Lfunc_end203:
	.size	unmark_long_term_field_for_reference_by_frame_idx.140, .Lfunc_end203-unmark_long_term_field_for_reference_by_frame_idx.140
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.141
	.type	mm_unmark_short_term_for_reference.141,@function
mm_unmark_short_term_for_reference.141: # @mm_unmark_short_term_for_reference.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$911191491, -16(%rbp)   # imm = 0x364FADC3
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB204_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB204_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB204_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB204_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB204_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB204_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB204_27
.LBB204_7:                              # %if.end
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_8
.LBB204_8:                              # %if.end13
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_24
.LBB204_9:                              # %if.else
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB204_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB204_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB204_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB204_14:                             # %if.end44
	jmp	.LBB204_27
.LBB204_15:                             # %if.end45
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_16
.LBB204_16:                             # %if.end46
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB204_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB204_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB204_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB204_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB204_21:                             # %if.end81
	jmp	.LBB204_27
.LBB204_22:                             # %if.end82
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_23
.LBB204_23:                             # %if.end83
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_24
.LBB204_24:                             # %if.end84
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_25
.LBB204_25:                             # %for.inc
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_1
.LBB204_26:                             # %for.end.loopexit
	jmp	.LBB204_27
.LBB204_27:                             # %for.end
	cmpl	$911191491, -16(%rbp)   # imm = 0x364FADC3
	jne	.LBB204_29
.LBB204_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_28
.Lfunc_end204:
	.size	mm_unmark_short_term_for_reference.141, .Lfunc_end204-mm_unmark_short_term_for_reference.141
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.142
	.type	compare_fs_by_lt_pic_idx_asc.142,@function
compare_fs_by_lt_pic_idx_asc.142:       # @compare_fs_by_lt_pic_idx_asc.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1104603798, -16(%rbp)  # imm = 0x41D6EA96
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB205_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB205_5
.LBB205_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB205_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB205_5
.LBB205_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB205_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1104603798, -16(%rbp)  # imm = 0x41D6EA96
	jne	.LBB205_7
.LBB205_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_6
.Lfunc_end205:
	.size	compare_fs_by_lt_pic_idx_asc.142, .Lfunc_end205-compare_fs_by_lt_pic_idx_asc.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.143
	.type	reorder_short_term.143,@function
reorder_short_term.143:                 # @reorder_short_term.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$209337811, -44(%rbp)   # imm = 0xC7A3DD3
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB206_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_1
.LBB206_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB206_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB206_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB206_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB206_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB206_10
.LBB206_9:                              # %if.then17
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB206_10:                             # %if.end
                                        #   in Loop: Header=BB206_5 Depth=1
	jmp	.LBB206_11
.LBB206_11:                             # %if.end23
                                        #   in Loop: Header=BB206_5 Depth=1
	jmp	.LBB206_12
.LBB206_12:                             # %for.inc24
                                        #   in Loop: Header=BB206_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_5
.LBB206_13:                             # %for.end26
	cmpl	$209337811, -44(%rbp)   # imm = 0xC7A3DD3
	jne	.LBB206_15
.LBB206_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_14
.Lfunc_end206:
	.size	reorder_short_term.143, .Lfunc_end206-reorder_short_term.143
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.144
	.type	get_smallest_poc.144,@function
get_smallest_poc.144:                   # @get_smallest_poc.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1884184173, -20(%rbp)  # imm = 0x704E5E6D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB207_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB207_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB207_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB207_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB207_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB207_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_7:                              # %if.end10
                                        #   in Loop: Header=BB207_3 Depth=1
	jmp	.LBB207_8
.LBB207_8:                              # %for.inc
                                        #   in Loop: Header=BB207_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_3
.LBB207_9:                              # %for.end
	cmpl	$1884184173, -20(%rbp)  # imm = 0x704E5E6D
	jne	.LBB207_11
.LBB207_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_10
.Lfunc_end207:
	.size	get_smallest_poc.144, .Lfunc_end207-get_smallest_poc.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.145
	.type	compare_pic_by_lt_pic_num_asc.145,@function
compare_pic_by_lt_pic_num_asc.145:      # @compare_pic_by_lt_pic_num_asc.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1761524017, -16(%rbp)  # imm = 0x68FEB931
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB208_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB208_5
.LBB208_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB208_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB208_5
.LBB208_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB208_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1761524017, -16(%rbp)  # imm = 0x68FEB931
	jne	.LBB208_7
.LBB208_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_6
.Lfunc_end208:
	.size	compare_pic_by_lt_pic_num_asc.145, .Lfunc_end208-compare_pic_by_lt_pic_num_asc.145
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.146   # -- Begin function compute_colocated.146
	.p2align	4, 0x90
	.type	compute_colocated.146,@function
compute_colocated.146:                  # @compute_colocated.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$13199789, -72(%rbp)    # imm = 0xC969AD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB209_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB209_11
.LBB209_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB209_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB209_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB209_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB209_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB209_8
.LBB209_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB209_8:                              # %if.end
	jmp	.LBB209_9
.LBB209_9:                              # %if.end20
	jmp	.LBB209_10
.LBB209_10:                             # %if.end21
	jmp	.LBB209_11
.LBB209_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB209_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB209_29
.LBB209_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB209_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB209_14 Depth=1
	movl	$0, -16(%rbp)
.LBB209_16:                             # %for.cond27
                                        #   Parent Loop BB209_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB209_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB209_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB209_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB209_22
.LBB209_21:                             # %if.else160
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB209_22:                             # %if.end283
                                        #   in Loop: Header=BB209_16 Depth=2
	jmp	.LBB209_24
.LBB209_23:                             # %if.else284
                                        #   in Loop: Header=BB209_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB209_24:                             # %if.end391
                                        #   in Loop: Header=BB209_16 Depth=2
	jmp	.LBB209_25
.LBB209_25:                             # %for.inc
                                        #   in Loop: Header=BB209_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_16
.LBB209_26:                             # %for.end
                                        #   in Loop: Header=BB209_14 Depth=1
	jmp	.LBB209_27
.LBB209_27:                             # %for.inc392
                                        #   in Loop: Header=BB209_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_14
.LBB209_28:                             # %for.end394
	jmp	.LBB209_29
.LBB209_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB209_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB209_241
.LBB209_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB209_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB209_32 Depth=1
	movl	$0, -12(%rbp)
.LBB209_34:                             # %for.cond408
                                        #   Parent Loop BB209_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB209_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_39
.LBB209_38:                             # %cond.false
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_39:                             # %cond.end
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_42
.LBB209_41:                             # %cond.false427
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_42:                             # %cond.end429
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_45
.LBB209_44:                             # %cond.false447
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_45:                             # %cond.end449
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_48
.LBB209_47:                             # %cond.false457
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_48:                             # %cond.end459
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_51
.LBB209_50:                             # %cond.false477
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_51:                             # %cond.end479
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_54
.LBB209_53:                             # %cond.false487
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_54:                             # %cond.end489
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_57
.LBB209_56:                             # %cond.false507
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_57:                             # %cond.end509
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_60
.LBB209_59:                             # %cond.false517
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_60:                             # %cond.end519
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_63
.LBB209_62:                             # %cond.false537
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_63:                             # %cond.end539
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_66
.LBB209_65:                             # %cond.false547
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_66:                             # %cond.end549
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB209_81
.LBB209_68:                             # %if.else569
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_71
.LBB209_70:                             # %cond.false576
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_71:                             # %cond.end578
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_74
.LBB209_73:                             # %cond.false586
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_74:                             # %cond.end588
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_77
.LBB209_76:                             # %cond.false604
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_77:                             # %cond.end606
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_80
.LBB209_79:                             # %cond.false614
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_80:                             # %cond.end616
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB209_81:                             # %if.end626
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_84
.LBB209_83:                             # %cond.false633
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_84:                             # %cond.end635
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_87
.LBB209_86:                             # %cond.false643
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_87:                             # %cond.end645
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB209_102
.LBB209_89:                             # %if.else665
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_92
.LBB209_91:                             # %cond.false672
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_92:                             # %cond.end674
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_95
.LBB209_94:                             # %cond.false682
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_95:                             # %cond.end684
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_98
.LBB209_97:                             # %cond.false700
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_98:                             # %cond.end702
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_101
.LBB209_100:                            # %cond.false710
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_101:                            # %cond.end712
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB209_102:                            # %if.end722
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB209_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB209_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB209_112
.LBB209_107:                            # %lor.rhs
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB209_111:                            # %land.end
                                        #   in Loop: Header=BB209_34 Depth=2
.LBB209_112:                            # %lor.end
                                        #   in Loop: Header=BB209_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB209_113:                            # %if.end814
                                        #   in Loop: Header=BB209_34 Depth=2
	jmp	.LBB209_236
.LBB209_114:                            # %if.else815
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_117
.LBB209_116:                            # %cond.false822
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_117:                            # %cond.end824
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_120
.LBB209_119:                            # %cond.false832
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_120:                            # %cond.end834
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_123
.LBB209_122:                            # %cond.false851
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_123:                            # %cond.end853
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_126
.LBB209_125:                            # %cond.false861
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_126:                            # %cond.end863
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_129
.LBB209_128:                            # %cond.false881
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_129:                            # %cond.end883
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_132
.LBB209_131:                            # %cond.false891
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_132:                            # %cond.end893
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_135
.LBB209_134:                            # %cond.false911
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_135:                            # %cond.end913
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_138
.LBB209_137:                            # %cond.false921
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_138:                            # %cond.end923
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_141
.LBB209_140:                            # %cond.false941
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_141:                            # %cond.end943
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_144
.LBB209_143:                            # %cond.false951
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_144:                            # %cond.end953
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_147
.LBB209_146:                            # %cond.false968
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_147:                            # %cond.end970
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_150
.LBB209_149:                            # %cond.false978
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_150:                            # %cond.end980
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_153
.LBB209_152:                            # %cond.false996
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_153:                            # %cond.end998
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_156
.LBB209_155:                            # %cond.false1006
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_156:                            # %cond.end1008
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_159
.LBB209_158:                            # %cond.false1023
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_159:                            # %cond.end1025
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_162
.LBB209_161:                            # %cond.false1033
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_162:                            # %cond.end1035
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB209_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB209_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB209_172
.LBB209_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB209_171:                            # %land.end1133
                                        #   in Loop: Header=BB209_34 Depth=2
.LBB209_172:                            # %lor.end1134
                                        #   in Loop: Header=BB209_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB209_173:                            # %if.end1142
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_176
.LBB209_175:                            # %cond.false1149
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_176:                            # %cond.end1151
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_179
.LBB209_178:                            # %cond.false1159
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_179:                            # %cond.end1161
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_182
.LBB209_181:                            # %cond.false1178
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_182:                            # %cond.end1180
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_185
.LBB209_184:                            # %cond.false1188
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_185:                            # %cond.end1190
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_188
.LBB209_187:                            # %cond.false1208
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_188:                            # %cond.end1210
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_191
.LBB209_190:                            # %cond.false1218
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_191:                            # %cond.end1220
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_194
.LBB209_193:                            # %cond.false1238
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_194:                            # %cond.end1240
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_197
.LBB209_196:                            # %cond.false1248
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_197:                            # %cond.end1250
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_200
.LBB209_199:                            # %cond.false1268
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_200:                            # %cond.end1270
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_203
.LBB209_202:                            # %cond.false1278
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_203:                            # %cond.end1280
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_206
.LBB209_205:                            # %cond.false1295
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_206:                            # %cond.end1297
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_209
.LBB209_208:                            # %cond.false1305
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_209:                            # %cond.end1307
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_212
.LBB209_211:                            # %cond.false1323
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_212:                            # %cond.end1325
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_215
.LBB209_214:                            # %cond.false1333
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_215:                            # %cond.end1335
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_218
.LBB209_217:                            # %cond.false1350
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_218:                            # %cond.end1352
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_221
.LBB209_220:                            # %cond.false1360
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_221:                            # %cond.end1362
                                        #   in Loop: Header=BB209_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB209_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB209_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB209_231
.LBB209_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB209_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB209_230:                            # %land.end1460
                                        #   in Loop: Header=BB209_34 Depth=2
.LBB209_231:                            # %lor.end1461
                                        #   in Loop: Header=BB209_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB209_232:                            # %if.end1469
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB209_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB209_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB209_235:                            # %if.end1522
                                        #   in Loop: Header=BB209_34 Depth=2
	jmp	.LBB209_236
.LBB209_236:                            # %if.end1523
                                        #   in Loop: Header=BB209_34 Depth=2
	jmp	.LBB209_237
.LBB209_237:                            # %for.inc1524
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_34
.LBB209_238:                            # %for.end1526
                                        #   in Loop: Header=BB209_32 Depth=1
	jmp	.LBB209_239
.LBB209_239:                            # %for.inc1527
                                        #   in Loop: Header=BB209_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_32
.LBB209_240:                            # %for.end1529
	jmp	.LBB209_241
.LBB209_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB209_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB209_259
.LBB209_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB209_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB209_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB209_245 Depth=1
	movl	$0, -16(%rbp)
.LBB209_247:                            # %for.cond1546
                                        #   Parent Loop BB209_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB209_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB209_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB209_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB209_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB209_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB209_252
.LBB209_251:                            # %if.else1699
                                        #   in Loop: Header=BB209_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB209_252:                            # %if.end1829
                                        #   in Loop: Header=BB209_247 Depth=2
	jmp	.LBB209_253
.LBB209_253:                            # %if.end1830
                                        #   in Loop: Header=BB209_247 Depth=2
	jmp	.LBB209_254
.LBB209_254:                            # %for.inc1831
                                        #   in Loop: Header=BB209_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_247
.LBB209_255:                            # %for.end1833
                                        #   in Loop: Header=BB209_245 Depth=1
	jmp	.LBB209_256
.LBB209_256:                            # %for.inc1834
                                        #   in Loop: Header=BB209_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_245
.LBB209_257:                            # %for.end1836
	jmp	.LBB209_258
.LBB209_258:                            # %if.end1837
	jmp	.LBB209_259
.LBB209_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB209_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB209_260 Depth=1
	movl	$0, -16(%rbp)
.LBB209_262:                            # %for.cond1845
                                        #   Parent Loop BB209_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB209_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB209_314
.LBB209_265:                            # %if.then1856
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_268
.LBB209_267:                            # %cond.false1863
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_268:                            # %cond.end1865
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_271
.LBB209_270:                            # %cond.false1873
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_271:                            # %cond.end1875
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_274
.LBB209_273:                            # %cond.false1893
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_274:                            # %cond.end1895
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_277
.LBB209_276:                            # %cond.false1903
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_277:                            # %cond.end1905
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_280
.LBB209_279:                            # %cond.false1923
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_280:                            # %cond.end1925
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_283
.LBB209_282:                            # %cond.false1933
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_283:                            # %cond.end1935
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_286
.LBB209_285:                            # %cond.false1953
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_286:                            # %cond.end1955
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_289
.LBB209_288:                            # %cond.false1963
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_289:                            # %cond.end1965
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_292
.LBB209_291:                            # %cond.false1983
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_292:                            # %cond.end1985
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_295
.LBB209_294:                            # %cond.false1993
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_295:                            # %cond.end1995
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_298
.LBB209_297:                            # %cond.false2011
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_298:                            # %cond.end2013
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_301
.LBB209_300:                            # %cond.false2021
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_301:                            # %cond.end2023
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_304
.LBB209_303:                            # %cond.false2039
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_304:                            # %cond.end2041
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_307
.LBB209_306:                            # %cond.false2049
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_307:                            # %cond.end2051
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_310
.LBB209_309:                            # %cond.false2067
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_310:                            # %cond.end2069
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB209_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB209_313
.LBB209_312:                            # %cond.false2077
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB209_313:                            # %cond.end2079
                                        #   in Loop: Header=BB209_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB209_315
.LBB209_314:                            # %if.else2089
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB209_315:                            # %if.end2194
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB209_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB209_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB209_325
.LBB209_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB209_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB209_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB209_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB209_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB209_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB209_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB209_324:                            # %land.end2285
                                        #   in Loop: Header=BB209_262 Depth=2
.LBB209_325:                            # %lor.end2286
                                        #   in Loop: Header=BB209_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB209_326:                            # %if.end2295
                                        #   in Loop: Header=BB209_262 Depth=2
	jmp	.LBB209_327
.LBB209_327:                            # %for.inc2296
                                        #   in Loop: Header=BB209_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_262
.LBB209_328:                            # %for.end2298
                                        #   in Loop: Header=BB209_260 Depth=1
	jmp	.LBB209_329
.LBB209_329:                            # %for.inc2299
                                        #   in Loop: Header=BB209_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_260
.LBB209_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB209_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB209_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB209_332 Depth=1
	movl	$0, -16(%rbp)
.LBB209_334:                            # %for.cond2312
                                        #   Parent Loop BB209_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB209_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB209_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB209_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB209_340
.LBB209_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB209_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB209_341
.LBB209_340:                            # %if.then2342
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB209_345
.LBB209_341:                            # %if.else2363
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB209_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB209_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB209_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB209_344:                            # %if.end2394
                                        #   in Loop: Header=BB209_334 Depth=2
	jmp	.LBB209_345
.LBB209_345:                            # %if.end2395
                                        #   in Loop: Header=BB209_334 Depth=2
	jmp	.LBB209_346
.LBB209_346:                            # %for.inc2396
                                        #   in Loop: Header=BB209_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_334
.LBB209_347:                            # %for.end2398
                                        #   in Loop: Header=BB209_332 Depth=1
	jmp	.LBB209_348
.LBB209_348:                            # %for.inc2399
                                        #   in Loop: Header=BB209_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_332
.LBB209_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB209_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB209_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB209_350 Depth=1
	movl	$0, -16(%rbp)
.LBB209_352:                            # %for.cond2409
                                        #   Parent Loop BB209_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB209_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB209_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB209_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB209_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB209_360
.LBB209_356:                            # %cond.false2429
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB209_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$127, %eax
	jmp	.LBB209_359
.LBB209_358:                            # %cond.false2441
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB209_359:                            # %cond.end2450
                                        #   in Loop: Header=BB209_352 Depth=2
.LBB209_360:                            # %cond.end2452
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB209_377
.LBB209_361:                            # %if.else2454
                                        #   in Loop: Header=BB209_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB209_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB209_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB209_368
.LBB209_364:                            # %cond.false2468
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB209_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$127, %eax
	jmp	.LBB209_367
.LBB209_366:                            # %cond.false2480
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB209_367:                            # %cond.end2489
                                        #   in Loop: Header=BB209_352 Depth=2
.LBB209_368:                            # %cond.end2491
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB209_376
.LBB209_369:                            # %if.else2493
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB209_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB209_375
.LBB209_371:                            # %cond.false2504
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB209_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$127, %eax
	jmp	.LBB209_374
.LBB209_373:                            # %cond.false2516
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB209_374:                            # %cond.end2525
                                        #   in Loop: Header=BB209_352 Depth=2
.LBB209_375:                            # %cond.end2527
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB209_376:                            # %if.end2529
                                        #   in Loop: Header=BB209_352 Depth=2
	jmp	.LBB209_377
.LBB209_377:                            # %if.end2530
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB209_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB209_383
.LBB209_379:                            # %cond.false2546
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB209_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$127, %eax
	jmp	.LBB209_382
.LBB209_381:                            # %cond.false2562
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB209_382:                            # %cond.end2575
                                        #   in Loop: Header=BB209_352 Depth=2
.LBB209_383:                            # %cond.end2577
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB209_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB209_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB209_390
.LBB209_386:                            # %cond.false2592
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB209_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB209_389
.LBB209_388:                            # %cond.false2599
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB209_389:                            # %cond.end2603
                                        #   in Loop: Header=BB209_352 Depth=2
.LBB209_390:                            # %cond.end2605
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB209_392
.LBB209_391:                            # %if.else2611
                                        #   in Loop: Header=BB209_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB209_392:                            # %if.end2617
                                        #   in Loop: Header=BB209_352 Depth=2
	jmp	.LBB209_393
.LBB209_393:                            # %for.inc2618
                                        #   in Loop: Header=BB209_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_352
.LBB209_394:                            # %for.end2620
                                        #   in Loop: Header=BB209_350 Depth=1
	jmp	.LBB209_395
.LBB209_395:                            # %for.inc2621
                                        #   in Loop: Header=BB209_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_350
.LBB209_396:                            # %for.end2623
	jmp	.LBB209_397
.LBB209_397:                            # %if.end2624
	cmpl	$13199789, -72(%rbp)    # imm = 0xC969AD
	jne	.LBB209_399
.LBB209_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_398
.Lfunc_end209:
	.size	compute_colocated.146, .Lfunc_end209-compute_colocated.146
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.147
	.type	reorder_short_term.147,@function
reorder_short_term.147:                 # @reorder_short_term.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2074563759, -44(%rbp)  # imm = 0x7BA754AF
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB210_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB210_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB210_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB210_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_1
.LBB210_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB210_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB210_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB210_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB210_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB210_10
.LBB210_9:                              # %if.then17
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB210_10:                             # %if.end
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_11
.LBB210_11:                             # %if.end23
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_12
.LBB210_12:                             # %for.inc24
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_5
.LBB210_13:                             # %for.end26
	cmpl	$2074563759, -44(%rbp)  # imm = 0x7BA754AF
	jne	.LBB210_15
.LBB210_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_14
.Lfunc_end210:
	.size	reorder_short_term.147, .Lfunc_end210-reorder_short_term.147
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.148   # -- Begin function dpb_combine_field.148
	.p2align	4, 0x90
	.type	dpb_combine_field.148,@function
dpb_combine_field.148:                  # @dpb_combine_field.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1368948518, -32(%rbp)  # imm = 0x51987F26
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB211_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB211_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB211_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB211_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_1
.LBB211_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB211_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB211_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB211_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB211_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_5
.LBB211_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB211_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB211_11
.LBB211_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB211_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB211_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB211_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB211_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB211_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB211_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB211_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB211_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB211_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB211_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB211_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB211_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB211_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB211_24
.LBB211_23:                             # %cond.false217
                                        #   in Loop: Header=BB211_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB211_24:                             # %cond.end226
                                        #   in Loop: Header=BB211_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB211_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_20
.LBB211_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB211_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB211_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB211_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB211_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB211_31
.LBB211_30:                             # %cond.false269
                                        #   in Loop: Header=BB211_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB211_31:                             # %cond.end278
                                        #   in Loop: Header=BB211_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB211_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_27
.LBB211_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB211_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB211_34 Depth=1
	movl	$0, -20(%rbp)
.LBB211_36:                             # %for.cond295
                                        #   Parent Loop BB211_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB211_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB211_40
.LBB211_39:                             # %cond.false445
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB211_40
.LBB211_40:                             # %cond.end446
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB211_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB211_43
.LBB211_42:                             # %cond.false462
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB211_43
.LBB211_43:                             # %cond.end463
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB211_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB211_46
.LBB211_45:                             # %cond.false479
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB211_46
.LBB211_46:                             # %cond.end480
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB211_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB211_49
.LBB211_48:                             # %cond.false501
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB211_49
.LBB211_49:                             # %cond.end502
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB211_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB211_52
.LBB211_51:                             # %cond.false647
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB211_52
.LBB211_52:                             # %cond.end648
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB211_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB211_55
.LBB211_54:                             # %cond.false665
                                        #   in Loop: Header=BB211_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB211_55
.LBB211_55:                             # %cond.end666
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB211_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB211_58
.LBB211_57:                             # %cond.false683
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB211_58
.LBB211_58:                             # %cond.end684
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB211_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB211_61
.LBB211_60:                             # %cond.false706
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB211_61
.LBB211_61:                             # %cond.end707
                                        #   in Loop: Header=BB211_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB211_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_36
.LBB211_63:                             # %for.end723
                                        #   in Loop: Header=BB211_34 Depth=1
	jmp	.LBB211_64
.LBB211_64:                             # %for.inc724
                                        #   in Loop: Header=BB211_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_34
.LBB211_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB211_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB211_76
.LBB211_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB211_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB211_68 Depth=1
	movl	$0, -20(%rbp)
.LBB211_70:                             # %for.cond737
                                        #   Parent Loop BB211_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB211_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB211_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_70
.LBB211_73:                             # %for.end758
                                        #   in Loop: Header=BB211_68 Depth=1
	jmp	.LBB211_74
.LBB211_74:                             # %for.inc759
                                        #   in Loop: Header=BB211_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_68
.LBB211_75:                             # %for.end761
	jmp	.LBB211_76
.LBB211_76:                             # %if.end762
	cmpl	$1368948518, -32(%rbp)  # imm = 0x51987F26
	jne	.LBB211_78
.LBB211_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_77
.Lfunc_end211:
	.size	dpb_combine_field.148, .Lfunc_end211-dpb_combine_field.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.149
	.type	unmark_long_term_field_for_reference_by_frame_idx.149,@function
unmark_long_term_field_for_reference_by_frame_idx.149: # @unmark_long_term_field_for_reference_by_frame_idx.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1069957136, -28(%rbp)  # imm = 0x3FC64010
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB212_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB212_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB212_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB212_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB212_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB212_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB212_23
.LBB212_8:                              # %if.else
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB212_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB212_22
.LBB212_10:                             # %if.else21
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB212_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB212_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB212_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB212_15
.LBB212_14:                             # %if.then29
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_15:                             # %if.end32
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_17
.LBB212_16:                             # %if.else33
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_17:                             # %if.end36
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_21
.LBB212_18:                             # %if.else37
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB212_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_20:                             # %if.end45
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_21
.LBB212_21:                             # %if.end46
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_22
.LBB212_22:                             # %if.end47
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_23
.LBB212_23:                             # %if.end48
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_24
.LBB212_24:                             # %if.end49
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB212_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB212_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB212_42
.LBB212_27:                             # %if.else59
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB212_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB212_41
.LBB212_29:                             # %if.else67
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB212_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB212_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB212_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB212_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB212_34
.LBB212_33:                             # %if.then78
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_34:                             # %if.end81
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_36
.LBB212_35:                             # %if.else82
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_36:                             # %if.end85
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_40
.LBB212_37:                             # %if.else86
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB212_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB212_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB212_39:                             # %if.end95
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_40
.LBB212_40:                             # %if.end96
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_41
.LBB212_41:                             # %if.end97
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_42
.LBB212_42:                             # %if.end98
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_43
.LBB212_43:                             # %if.end99
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_44
.LBB212_44:                             # %if.end100
                                        #   in Loop: Header=BB212_3 Depth=1
	jmp	.LBB212_45
.LBB212_45:                             # %for.inc
                                        #   in Loop: Header=BB212_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_3
.LBB212_46:                             # %for.end
	cmpl	$1069957136, -28(%rbp)  # imm = 0x3FC64010
	jne	.LBB212_48
.LBB212_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_47
.Lfunc_end212:
	.size	unmark_long_term_field_for_reference_by_frame_idx.149, .Lfunc_end212-unmark_long_term_field_for_reference_by_frame_idx.149
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.150          # -- Begin function init_lists.150
	.p2align	4, 0x90
	.type	init_lists.150,@function
init_lists.150:                         # @init_lists.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$129658592, -76(%rbp)   # imm = 0x7BA6EE0
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB213_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB213_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB213_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB213_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB213_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB213_9
.LBB213_8:                              # %if.else
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB213_9:                              # %if.end
                                        #   in Loop: Header=BB213_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB213_10:                             # %if.end36
                                        #   in Loop: Header=BB213_2 Depth=1
	jmp	.LBB213_11
.LBB213_11:                             # %if.end37
                                        #   in Loop: Header=BB213_2 Depth=1
	jmp	.LBB213_12
.LBB213_12:                             # %for.inc
                                        #   in Loop: Header=BB213_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_2
.LBB213_13:                             # %for.end
	jmp	.LBB213_31
.LBB213_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB213_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB213_17
.LBB213_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB213_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB213_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB213_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB213_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB213_23
.LBB213_22:                             # %if.else63
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB213_23:                             # %if.end70
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB213_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB213_25:                             # %if.end83
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB213_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB213_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB213_27:                             # %if.end98
                                        #   in Loop: Header=BB213_18 Depth=1
	jmp	.LBB213_28
.LBB213_28:                             # %if.end99
                                        #   in Loop: Header=BB213_18 Depth=1
	jmp	.LBB213_29
.LBB213_29:                             # %for.inc100
                                        #   in Loop: Header=BB213_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_18
.LBB213_30:                             # %for.end102
	jmp	.LBB213_31
.LBB213_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB213_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB213_34
.LBB213_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB213_181
.LBB213_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB213_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB213_75
.LBB213_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB213_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB213_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB213_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB213_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB213_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB213_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB213_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB213_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_43:                             # %if.end140
                                        #   in Loop: Header=BB213_38 Depth=1
	jmp	.LBB213_44
.LBB213_44:                             # %if.end141
                                        #   in Loop: Header=BB213_38 Depth=1
	jmp	.LBB213_45
.LBB213_45:                             # %for.inc142
                                        #   in Loop: Header=BB213_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_38
.LBB213_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB213_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB213_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB213_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB213_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB213_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB213_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_51:                             # %if.end177
                                        #   in Loop: Header=BB213_47 Depth=1
	jmp	.LBB213_52
.LBB213_52:                             # %if.end178
                                        #   in Loop: Header=BB213_47 Depth=1
	jmp	.LBB213_53
.LBB213_53:                             # %for.inc179
                                        #   in Loop: Header=BB213_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_47
.LBB213_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB213_74
.LBB213_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB213_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB213_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB213_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB213_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB213_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB213_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_63:                             # %if.end212
                                        #   in Loop: Header=BB213_60 Depth=1
	jmp	.LBB213_64
.LBB213_64:                             # %for.inc213
                                        #   in Loop: Header=BB213_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_60
.LBB213_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB213_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB213_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB213_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB213_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB213_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB213_69:                             # %if.end242
                                        #   in Loop: Header=BB213_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB213_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB213_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB213_71:                             # %if.end259
                                        #   in Loop: Header=BB213_66 Depth=1
	jmp	.LBB213_72
.LBB213_72:                             # %for.inc260
                                        #   in Loop: Header=BB213_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_66
.LBB213_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB213_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB213_155
.LBB213_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB213_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB213_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB213_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB213_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB213_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB213_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB213_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB213_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB213_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB213_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_83:                             # %if.end307
                                        #   in Loop: Header=BB213_77 Depth=1
	jmp	.LBB213_84
.LBB213_84:                             # %if.end308
                                        #   in Loop: Header=BB213_77 Depth=1
	jmp	.LBB213_85
.LBB213_85:                             # %if.end309
                                        #   in Loop: Header=BB213_77 Depth=1
	jmp	.LBB213_86
.LBB213_86:                             # %for.inc310
                                        #   in Loop: Header=BB213_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_77
.LBB213_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB213_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB213_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB213_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB213_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB213_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB213_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB213_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB213_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB213_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_94:                             # %if.end354
                                        #   in Loop: Header=BB213_88 Depth=1
	jmp	.LBB213_95
.LBB213_95:                             # %if.end355
                                        #   in Loop: Header=BB213_88 Depth=1
	jmp	.LBB213_96
.LBB213_96:                             # %if.end356
                                        #   in Loop: Header=BB213_88 Depth=1
	jmp	.LBB213_97
.LBB213_97:                             # %for.inc357
                                        #   in Loop: Header=BB213_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_88
.LBB213_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB213_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB213_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB213_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB213_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_99
.LBB213_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB213_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB213_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB213_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB213_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_103
.LBB213_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB213_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB213_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB213_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB213_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB213_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB213_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB213_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_111:                            # %if.end428
                                        #   in Loop: Header=BB213_107 Depth=1
	jmp	.LBB213_112
.LBB213_112:                            # %if.end429
                                        #   in Loop: Header=BB213_107 Depth=1
	jmp	.LBB213_113
.LBB213_113:                            # %for.inc430
                                        #   in Loop: Header=BB213_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_107
.LBB213_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB213_154
.LBB213_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB213_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB213_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB213_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB213_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB213_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB213_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB213_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB213_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB213_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB213_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB213_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB213_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_126:                            # %if.end480
                                        #   in Loop: Header=BB213_122 Depth=1
	jmp	.LBB213_127
.LBB213_127:                            # %if.end481
                                        #   in Loop: Header=BB213_122 Depth=1
	jmp	.LBB213_128
.LBB213_128:                            # %for.inc482
                                        #   in Loop: Header=BB213_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_122
.LBB213_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB213_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB213_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB213_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB213_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB213_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB213_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB213_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB213_134:                            # %if.end507
                                        #   in Loop: Header=BB213_130 Depth=1
	jmp	.LBB213_135
.LBB213_135:                            # %if.end508
                                        #   in Loop: Header=BB213_130 Depth=1
	jmp	.LBB213_136
.LBB213_136:                            # %for.inc509
                                        #   in Loop: Header=BB213_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_130
.LBB213_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB213_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB213_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB213_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB213_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_138
.LBB213_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB213_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB213_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB213_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB213_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_142
.LBB213_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB213_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB213_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB213_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB213_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB213_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB213_149:                            # %if.end566
                                        #   in Loop: Header=BB213_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB213_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB213_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB213_151:                            # %if.end583
                                        #   in Loop: Header=BB213_146 Depth=1
	jmp	.LBB213_152
.LBB213_152:                            # %for.inc584
                                        #   in Loop: Header=BB213_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_146
.LBB213_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB213_154:                            # %if.end588
	jmp	.LBB213_155
.LBB213_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB213_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB213_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB213_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB213_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB213_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB213_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB213_158 Depth=1
	movl	$1, -68(%rbp)
.LBB213_161:                            # %if.end607
                                        #   in Loop: Header=BB213_158 Depth=1
	jmp	.LBB213_162
.LBB213_162:                            # %for.inc608
                                        #   in Loop: Header=BB213_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_158
.LBB213_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB213_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB213_165:                            # %if.end617
	jmp	.LBB213_166
.LBB213_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB213_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB213_169
.LBB213_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB213_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB213_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB213_172
.LBB213_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB213_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB213_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB213_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB213_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB213_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_173
.LBB213_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB213_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB213_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB213_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB213_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_177
.LBB213_180:                            # %for.end646.loopexit
	jmp	.LBB213_181
.LBB213_181:                            # %for.end646
	cmpl	$129658592, -76(%rbp)   # imm = 0x7BA6EE0
	jne	.LBB213_183
.LBB213_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_182
.Lfunc_end213:
	.size	init_lists.150, .Lfunc_end213-init_lists.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.151
	.type	reorder_short_term.151,@function
reorder_short_term.151:                 # @reorder_short_term.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2080678772, -44(%rbp)  # imm = 0x7C04A374
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB214_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB214_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB214_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_1
.LBB214_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB214_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB214_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB214_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB214_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB214_10
.LBB214_9:                              # %if.then17
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB214_10:                             # %if.end
                                        #   in Loop: Header=BB214_5 Depth=1
	jmp	.LBB214_11
.LBB214_11:                             # %if.end23
                                        #   in Loop: Header=BB214_5 Depth=1
	jmp	.LBB214_12
.LBB214_12:                             # %for.inc24
                                        #   in Loop: Header=BB214_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_5
.LBB214_13:                             # %for.end26
	cmpl	$2080678772, -44(%rbp)  # imm = 0x7C04A374
	jne	.LBB214_15
.LBB214_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_14
.Lfunc_end214:
	.size	reorder_short_term.151, .Lfunc_end214-reorder_short_term.151
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.152  # -- Begin function fill_frame_num_gap.152
	.p2align	4, 0x90
	.type	fill_frame_num_gap.152,@function
fill_frame_num_gap.152:                 # @fill_frame_num_gap.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$54209126, -40(%rbp)    # imm = 0x33B2A66
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB215_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB215_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB215_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB215_1
.LBB215_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$54209126, -40(%rbp)    # imm = 0x33B2A66
	jne	.LBB215_5
.LBB215_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_4
.Lfunc_end215:
	.size	fill_frame_num_gap.152, .Lfunc_end215-fill_frame_num_gap.152
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.153
	.type	mm_assign_long_term_frame_idx.153,@function
mm_assign_long_term_frame_idx.153:      # @mm_assign_long_term_frame_idx.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$264625813, -28(%rbp)   # imm = 0xFC5DE95
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB216_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB216_18
.LBB216_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB216_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB216_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB216_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB216_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB216_15
.LBB216_7:                              # %if.end
                                        #   in Loop: Header=BB216_3 Depth=1
	jmp	.LBB216_8
.LBB216_8:                              # %if.end8
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB216_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB216_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB216_15
.LBB216_11:                             # %if.end20
                                        #   in Loop: Header=BB216_3 Depth=1
	jmp	.LBB216_12
.LBB216_12:                             # %if.end21
                                        #   in Loop: Header=BB216_3 Depth=1
	jmp	.LBB216_13
.LBB216_13:                             # %for.inc
                                        #   in Loop: Header=BB216_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB216_3
.LBB216_14:                             # %for.end.loopexit
	jmp	.LBB216_15
.LBB216_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB216_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB216_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB216_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$264625813, -28(%rbp)   # imm = 0xFC5DE95
	jne	.LBB216_20
.LBB216_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_19
.Lfunc_end216:
	.size	mm_assign_long_term_frame_idx.153, .Lfunc_end216-mm_assign_long_term_frame_idx.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.154
	.type	reorder_long_term.154,@function
reorder_long_term.154:                  # @reorder_long_term.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1439815836, -44(%rbp)  # imm = 0x55D1D89C
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB217_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB217_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB217_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB217_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_1
.LBB217_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB217_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB217_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB217_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB217_9
.LBB217_8:                              # %if.then
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB217_9:                              # %if.end
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_10
.LBB217_10:                             # %for.inc19
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_5
.LBB217_11:                             # %for.end21
	cmpl	$1439815836, -44(%rbp)  # imm = 0x55D1D89C
	jne	.LBB217_13
.LBB217_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_12
.Lfunc_end217:
	.size	reorder_long_term.154, .Lfunc_end217-reorder_long_term.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.155
	.type	reorder_long_term.155,@function
reorder_long_term.155:                  # @reorder_long_term.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1031094243, -44(%rbp)  # imm = 0x3D753FE3
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB218_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB218_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB218_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_1
.LBB218_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB218_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB218_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB218_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB218_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB218_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB218_9
.LBB218_8:                              # %if.then
                                        #   in Loop: Header=BB218_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB218_9:                              # %if.end
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_10
.LBB218_10:                             # %for.inc19
                                        #   in Loop: Header=BB218_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_5
.LBB218_11:                             # %for.end21
	cmpl	$1031094243, -44(%rbp)  # imm = 0x3D753FE3
	jne	.LBB218_13
.LBB218_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_12
.Lfunc_end218:
	.size	reorder_long_term.155, .Lfunc_end218-reorder_long_term.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.156
	.type	compare_fs_by_frame_num_desc.156,@function
compare_fs_by_frame_num_desc.156:       # @compare_fs_by_frame_num_desc.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$791360640, -16(%rbp)   # imm = 0x2F2B3480
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB219_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB219_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB219_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$791360640, -16(%rbp)   # imm = 0x2F2B3480
	jne	.LBB219_7
.LBB219_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_6
.Lfunc_end219:
	.size	compare_fs_by_frame_num_desc.156, .Lfunc_end219-compare_fs_by_frame_num_desc.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.157
	.type	compare_fs_by_poc_asc.157,@function
compare_fs_by_poc_asc.157:              # @compare_fs_by_poc_asc.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$250102451, -16(%rbp)   # imm = 0xEE842B3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB220_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB220_5
.LBB220_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB220_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB220_5
.LBB220_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB220_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$250102451, -16(%rbp)   # imm = 0xEE842B3
	jne	.LBB220_7
.LBB220_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_6
.Lfunc_end220:
	.size	compare_fs_by_poc_asc.157, .Lfunc_end220-compare_fs_by_poc_asc.157
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.158
	.type	mark_pic_long_term.158,@function
mark_pic_long_term.158:                 # @mark_pic_long_term.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$418739460, -24(%rbp)   # imm = 0x18F57504
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB221_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB221_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB221_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB221_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB221_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB221_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB221_39
.LBB221_7:                              # %if.end
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_8
.LBB221_8:                              # %if.end50
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_9
.LBB221_9:                              # %for.inc
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_2
.LBB221_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB221_39
.LBB221_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB221_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB221_14
.LBB221_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB221_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB221_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB221_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB221_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB221_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB221_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB221_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB221_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB221_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB221_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB221_24:                             # %if.end123
	jmp	.LBB221_39
.LBB221_25:                             # %if.end124
                                        #   in Loop: Header=BB221_15 Depth=1
	jmp	.LBB221_26
.LBB221_26:                             # %if.end125
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB221_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB221_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB221_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB221_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB221_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB221_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB221_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB221_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB221_34:                             # %if.end194
	jmp	.LBB221_39
.LBB221_35:                             # %if.end195
                                        #   in Loop: Header=BB221_15 Depth=1
	jmp	.LBB221_36
.LBB221_36:                             # %if.end196
                                        #   in Loop: Header=BB221_15 Depth=1
	jmp	.LBB221_37
.LBB221_37:                             # %for.inc197
                                        #   in Loop: Header=BB221_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_15
.LBB221_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB221_39:                             # %if.end201
	cmpl	$418739460, -24(%rbp)   # imm = 0x18F57504
	jne	.LBB221_41
.LBB221_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_40
.Lfunc_end221:
	.size	mark_pic_long_term.158, .Lfunc_end221-mark_pic_long_term.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.159
	.type	reorder_long_term.159,@function
reorder_long_term.159:                  # @reorder_long_term.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1532847810, -44(%rbp)  # imm = 0x5B5D66C2
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB222_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB222_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB222_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB222_1
.LBB222_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB222_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB222_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB222_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB222_9
.LBB222_8:                              # %if.then
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB222_9:                              # %if.end
                                        #   in Loop: Header=BB222_5 Depth=1
	jmp	.LBB222_10
.LBB222_10:                             # %for.inc19
                                        #   in Loop: Header=BB222_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB222_5
.LBB222_11:                             # %for.end21
	cmpl	$1532847810, -44(%rbp)  # imm = 0x5B5D66C2
	jne	.LBB222_13
.LBB222_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_12
.Lfunc_end222:
	.size	reorder_long_term.159, .Lfunc_end222-reorder_long_term.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.160
	.type	compare_pic_by_poc_asc.160,@function
compare_pic_by_poc_asc.160:             # @compare_pic_by_poc_asc.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$219777750, -16(%rbp)   # imm = 0xD198AD6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB223_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB223_5
.LBB223_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB223_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB223_5
.LBB223_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB223_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$219777750, -16(%rbp)   # imm = 0xD198AD6
	jne	.LBB223_7
.LBB223_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_6
.Lfunc_end223:
	.size	compare_pic_by_poc_asc.160, .Lfunc_end223-compare_pic_by_poc_asc.160
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.161 # -- Begin function replace_top_pic_with_frame.161
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.161,@function
replace_top_pic_with_frame.161:         # @replace_top_pic_with_frame.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$725651763, -32(%rbp)   # imm = 0x2B409133
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB224_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB224_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB224_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB224_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB224_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB224_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB224_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB224_10
.LBB224_7:                              # %if.end14
                                        #   in Loop: Header=BB224_3 Depth=1
	jmp	.LBB224_8
.LBB224_8:                              # %for.inc
                                        #   in Loop: Header=BB224_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_3
.LBB224_9:                              # %for.end.loopexit
	jmp	.LBB224_10
.LBB224_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB224_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB224_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB224_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB224_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB224_15:                             # %if.end26
	jmp	.LBB224_16
.LBB224_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$725651763, -32(%rbp)   # imm = 0x2B409133
	jne	.LBB224_18
.LBB224_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_17
.Lfunc_end224:
	.size	replace_top_pic_with_frame.161, .Lfunc_end224-replace_top_pic_with_frame.161
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.162   # -- Begin function compute_colocated.162
	.p2align	4, 0x90
	.type	compute_colocated.162,@function
compute_colocated.162:                  # @compute_colocated.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1995775231, -72(%rbp)  # imm = 0x76F51CFF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB225_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB225_11
.LBB225_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB225_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB225_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB225_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB225_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB225_8
.LBB225_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
.LBB225_8:                              # %if.end
	jmp	.LBB225_9
.LBB225_9:                              # %if.end20
	jmp	.LBB225_10
.LBB225_10:                             # %if.end21
	jmp	.LBB225_11
.LBB225_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB225_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB225_29
.LBB225_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB225_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB225_14 Depth=1
	movl	$0, -16(%rbp)
.LBB225_16:                             # %for.cond27
                                        #   Parent Loop BB225_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB225_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB225_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB225_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB225_22
.LBB225_21:                             # %if.else160
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB225_22:                             # %if.end283
                                        #   in Loop: Header=BB225_16 Depth=2
	jmp	.LBB225_24
.LBB225_23:                             # %if.else284
                                        #   in Loop: Header=BB225_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB225_24:                             # %if.end391
                                        #   in Loop: Header=BB225_16 Depth=2
	jmp	.LBB225_25
.LBB225_25:                             # %for.inc
                                        #   in Loop: Header=BB225_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_16
.LBB225_26:                             # %for.end
                                        #   in Loop: Header=BB225_14 Depth=1
	jmp	.LBB225_27
.LBB225_27:                             # %for.inc392
                                        #   in Loop: Header=BB225_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_14
.LBB225_28:                             # %for.end394
	jmp	.LBB225_29
.LBB225_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB225_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB225_241
.LBB225_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB225_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB225_32 Depth=1
	movl	$0, -12(%rbp)
.LBB225_34:                             # %for.cond408
                                        #   Parent Loop BB225_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB225_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_39
.LBB225_38:                             # %cond.false
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_39:                             # %cond.end
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_42
.LBB225_41:                             # %cond.false427
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_42:                             # %cond.end429
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_45
.LBB225_44:                             # %cond.false447
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_45:                             # %cond.end449
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_48
.LBB225_47:                             # %cond.false457
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_48:                             # %cond.end459
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_51
.LBB225_50:                             # %cond.false477
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_51:                             # %cond.end479
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_54
.LBB225_53:                             # %cond.false487
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_54:                             # %cond.end489
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_57
.LBB225_56:                             # %cond.false507
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_57:                             # %cond.end509
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_60
.LBB225_59:                             # %cond.false517
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_60:                             # %cond.end519
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_63
.LBB225_62:                             # %cond.false537
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_63:                             # %cond.end539
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_66
.LBB225_65:                             # %cond.false547
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_66:                             # %cond.end549
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB225_81
.LBB225_68:                             # %if.else569
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_71
.LBB225_70:                             # %cond.false576
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_71:                             # %cond.end578
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_74
.LBB225_73:                             # %cond.false586
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_74:                             # %cond.end588
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_77
.LBB225_76:                             # %cond.false604
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_77:                             # %cond.end606
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_80
.LBB225_79:                             # %cond.false614
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_80:                             # %cond.end616
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB225_81:                             # %if.end626
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_84
.LBB225_83:                             # %cond.false633
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_84:                             # %cond.end635
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_87
.LBB225_86:                             # %cond.false643
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_87:                             # %cond.end645
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB225_102
.LBB225_89:                             # %if.else665
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_92
.LBB225_91:                             # %cond.false672
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_92:                             # %cond.end674
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_95
.LBB225_94:                             # %cond.false682
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_95:                             # %cond.end684
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_98
.LBB225_97:                             # %cond.false700
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_98:                             # %cond.end702
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_101
.LBB225_100:                            # %cond.false710
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_101:                            # %cond.end712
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB225_102:                            # %if.end722
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB225_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB225_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB225_112
.LBB225_107:                            # %lor.rhs
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB225_111:                            # %land.end
                                        #   in Loop: Header=BB225_34 Depth=2
.LBB225_112:                            # %lor.end
                                        #   in Loop: Header=BB225_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB225_113:                            # %if.end814
                                        #   in Loop: Header=BB225_34 Depth=2
	jmp	.LBB225_236
.LBB225_114:                            # %if.else815
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_117
.LBB225_116:                            # %cond.false822
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_117:                            # %cond.end824
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_120
.LBB225_119:                            # %cond.false832
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_120:                            # %cond.end834
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_123
.LBB225_122:                            # %cond.false851
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_123:                            # %cond.end853
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_126
.LBB225_125:                            # %cond.false861
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_126:                            # %cond.end863
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_129
.LBB225_128:                            # %cond.false881
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_129:                            # %cond.end883
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_132
.LBB225_131:                            # %cond.false891
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_132:                            # %cond.end893
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_135
.LBB225_134:                            # %cond.false911
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_135:                            # %cond.end913
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_138
.LBB225_137:                            # %cond.false921
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_138:                            # %cond.end923
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_141
.LBB225_140:                            # %cond.false941
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_141:                            # %cond.end943
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_144
.LBB225_143:                            # %cond.false951
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_144:                            # %cond.end953
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_147
.LBB225_146:                            # %cond.false968
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_147:                            # %cond.end970
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_150
.LBB225_149:                            # %cond.false978
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_150:                            # %cond.end980
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_153
.LBB225_152:                            # %cond.false996
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_153:                            # %cond.end998
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_156
.LBB225_155:                            # %cond.false1006
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_156:                            # %cond.end1008
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_159
.LBB225_158:                            # %cond.false1023
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_159:                            # %cond.end1025
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_162
.LBB225_161:                            # %cond.false1033
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_162:                            # %cond.end1035
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB225_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB225_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB225_172
.LBB225_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB225_171:                            # %land.end1133
                                        #   in Loop: Header=BB225_34 Depth=2
.LBB225_172:                            # %lor.end1134
                                        #   in Loop: Header=BB225_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB225_173:                            # %if.end1142
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_176
.LBB225_175:                            # %cond.false1149
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_176:                            # %cond.end1151
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_179
.LBB225_178:                            # %cond.false1159
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_179:                            # %cond.end1161
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_182
.LBB225_181:                            # %cond.false1178
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_182:                            # %cond.end1180
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_185
.LBB225_184:                            # %cond.false1188
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_185:                            # %cond.end1190
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_188
.LBB225_187:                            # %cond.false1208
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_188:                            # %cond.end1210
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_191
.LBB225_190:                            # %cond.false1218
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_191:                            # %cond.end1220
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_194
.LBB225_193:                            # %cond.false1238
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_194:                            # %cond.end1240
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_197
.LBB225_196:                            # %cond.false1248
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_197:                            # %cond.end1250
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_200
.LBB225_199:                            # %cond.false1268
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_200:                            # %cond.end1270
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_203
.LBB225_202:                            # %cond.false1278
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_203:                            # %cond.end1280
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_206
.LBB225_205:                            # %cond.false1295
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_206:                            # %cond.end1297
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_209
.LBB225_208:                            # %cond.false1305
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_209:                            # %cond.end1307
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_212
.LBB225_211:                            # %cond.false1323
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_212:                            # %cond.end1325
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_215
.LBB225_214:                            # %cond.false1333
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_215:                            # %cond.end1335
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_218
.LBB225_217:                            # %cond.false1350
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_218:                            # %cond.end1352
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_221
.LBB225_220:                            # %cond.false1360
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_221:                            # %cond.end1362
                                        #   in Loop: Header=BB225_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB225_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB225_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB225_231
.LBB225_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB225_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB225_230:                            # %land.end1460
                                        #   in Loop: Header=BB225_34 Depth=2
.LBB225_231:                            # %lor.end1461
                                        #   in Loop: Header=BB225_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB225_232:                            # %if.end1469
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB225_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB225_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB225_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB225_235:                            # %if.end1522
                                        #   in Loop: Header=BB225_34 Depth=2
	jmp	.LBB225_236
.LBB225_236:                            # %if.end1523
                                        #   in Loop: Header=BB225_34 Depth=2
	jmp	.LBB225_237
.LBB225_237:                            # %for.inc1524
                                        #   in Loop: Header=BB225_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_34
.LBB225_238:                            # %for.end1526
                                        #   in Loop: Header=BB225_32 Depth=1
	jmp	.LBB225_239
.LBB225_239:                            # %for.inc1527
                                        #   in Loop: Header=BB225_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_32
.LBB225_240:                            # %for.end1529
	jmp	.LBB225_241
.LBB225_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB225_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB225_259
.LBB225_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB225_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB225_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB225_245 Depth=1
	movl	$0, -16(%rbp)
.LBB225_247:                            # %for.cond1546
                                        #   Parent Loop BB225_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB225_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB225_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB225_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB225_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB225_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB225_252
.LBB225_251:                            # %if.else1699
                                        #   in Loop: Header=BB225_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB225_252:                            # %if.end1829
                                        #   in Loop: Header=BB225_247 Depth=2
	jmp	.LBB225_253
.LBB225_253:                            # %if.end1830
                                        #   in Loop: Header=BB225_247 Depth=2
	jmp	.LBB225_254
.LBB225_254:                            # %for.inc1831
                                        #   in Loop: Header=BB225_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_247
.LBB225_255:                            # %for.end1833
                                        #   in Loop: Header=BB225_245 Depth=1
	jmp	.LBB225_256
.LBB225_256:                            # %for.inc1834
                                        #   in Loop: Header=BB225_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_245
.LBB225_257:                            # %for.end1836
	jmp	.LBB225_258
.LBB225_258:                            # %if.end1837
	jmp	.LBB225_259
.LBB225_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB225_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB225_260 Depth=1
	movl	$0, -16(%rbp)
.LBB225_262:                            # %for.cond1845
                                        #   Parent Loop BB225_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB225_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB225_314
.LBB225_265:                            # %if.then1856
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_268
.LBB225_267:                            # %cond.false1863
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_268:                            # %cond.end1865
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_271
.LBB225_270:                            # %cond.false1873
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_271:                            # %cond.end1875
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_274
.LBB225_273:                            # %cond.false1893
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_274:                            # %cond.end1895
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_277
.LBB225_276:                            # %cond.false1903
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_277:                            # %cond.end1905
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_280
.LBB225_279:                            # %cond.false1923
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_280:                            # %cond.end1925
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_283
.LBB225_282:                            # %cond.false1933
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_283:                            # %cond.end1935
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_286
.LBB225_285:                            # %cond.false1953
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_286:                            # %cond.end1955
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_289
.LBB225_288:                            # %cond.false1963
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_289:                            # %cond.end1965
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_292
.LBB225_291:                            # %cond.false1983
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_292:                            # %cond.end1985
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_295
.LBB225_294:                            # %cond.false1993
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_295:                            # %cond.end1995
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_298
.LBB225_297:                            # %cond.false2011
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_298:                            # %cond.end2013
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_301
.LBB225_300:                            # %cond.false2021
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_301:                            # %cond.end2023
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_304
.LBB225_303:                            # %cond.false2039
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_304:                            # %cond.end2041
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_307
.LBB225_306:                            # %cond.false2049
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_307:                            # %cond.end2051
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_310
.LBB225_309:                            # %cond.false2067
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_310:                            # %cond.end2069
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB225_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB225_313
.LBB225_312:                            # %cond.false2077
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB225_313:                            # %cond.end2079
                                        #   in Loop: Header=BB225_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB225_315
.LBB225_314:                            # %if.else2089
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB225_315:                            # %if.end2194
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB225_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB225_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB225_325
.LBB225_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB225_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB225_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB225_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB225_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB225_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB225_324:                            # %land.end2285
                                        #   in Loop: Header=BB225_262 Depth=2
.LBB225_325:                            # %lor.end2286
                                        #   in Loop: Header=BB225_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB225_326:                            # %if.end2295
                                        #   in Loop: Header=BB225_262 Depth=2
	jmp	.LBB225_327
.LBB225_327:                            # %for.inc2296
                                        #   in Loop: Header=BB225_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_262
.LBB225_328:                            # %for.end2298
                                        #   in Loop: Header=BB225_260 Depth=1
	jmp	.LBB225_329
.LBB225_329:                            # %for.inc2299
                                        #   in Loop: Header=BB225_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_260
.LBB225_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB225_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB225_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB225_332 Depth=1
	movl	$0, -16(%rbp)
.LBB225_334:                            # %for.cond2312
                                        #   Parent Loop BB225_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB225_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB225_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB225_340
.LBB225_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB225_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB225_341
.LBB225_340:                            # %if.then2342
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB225_345
.LBB225_341:                            # %if.else2363
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB225_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB225_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB225_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB225_344:                            # %if.end2394
                                        #   in Loop: Header=BB225_334 Depth=2
	jmp	.LBB225_345
.LBB225_345:                            # %if.end2395
                                        #   in Loop: Header=BB225_334 Depth=2
	jmp	.LBB225_346
.LBB225_346:                            # %for.inc2396
                                        #   in Loop: Header=BB225_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_334
.LBB225_347:                            # %for.end2398
                                        #   in Loop: Header=BB225_332 Depth=1
	jmp	.LBB225_348
.LBB225_348:                            # %for.inc2399
                                        #   in Loop: Header=BB225_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_332
.LBB225_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB225_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB225_350 Depth=1
	movl	$0, -16(%rbp)
.LBB225_352:                            # %for.cond2409
                                        #   Parent Loop BB225_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB225_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB225_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB225_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB225_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB225_360
.LBB225_356:                            # %cond.false2429
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB225_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$127, %eax
	jmp	.LBB225_359
.LBB225_358:                            # %cond.false2441
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB225_359:                            # %cond.end2450
                                        #   in Loop: Header=BB225_352 Depth=2
.LBB225_360:                            # %cond.end2452
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB225_377
.LBB225_361:                            # %if.else2454
                                        #   in Loop: Header=BB225_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB225_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB225_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB225_368
.LBB225_364:                            # %cond.false2468
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB225_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$127, %eax
	jmp	.LBB225_367
.LBB225_366:                            # %cond.false2480
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB225_367:                            # %cond.end2489
                                        #   in Loop: Header=BB225_352 Depth=2
.LBB225_368:                            # %cond.end2491
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB225_376
.LBB225_369:                            # %if.else2493
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB225_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB225_375
.LBB225_371:                            # %cond.false2504
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB225_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$127, %eax
	jmp	.LBB225_374
.LBB225_373:                            # %cond.false2516
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB225_374:                            # %cond.end2525
                                        #   in Loop: Header=BB225_352 Depth=2
.LBB225_375:                            # %cond.end2527
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB225_376:                            # %if.end2529
                                        #   in Loop: Header=BB225_352 Depth=2
	jmp	.LBB225_377
.LBB225_377:                            # %if.end2530
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB225_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB225_383
.LBB225_379:                            # %cond.false2546
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB225_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$127, %eax
	jmp	.LBB225_382
.LBB225_381:                            # %cond.false2562
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB225_382:                            # %cond.end2575
                                        #   in Loop: Header=BB225_352 Depth=2
.LBB225_383:                            # %cond.end2577
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB225_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB225_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB225_390
.LBB225_386:                            # %cond.false2592
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB225_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB225_389
.LBB225_388:                            # %cond.false2599
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB225_389:                            # %cond.end2603
                                        #   in Loop: Header=BB225_352 Depth=2
.LBB225_390:                            # %cond.end2605
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB225_392
.LBB225_391:                            # %if.else2611
                                        #   in Loop: Header=BB225_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB225_392:                            # %if.end2617
                                        #   in Loop: Header=BB225_352 Depth=2
	jmp	.LBB225_393
.LBB225_393:                            # %for.inc2618
                                        #   in Loop: Header=BB225_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_352
.LBB225_394:                            # %for.end2620
                                        #   in Loop: Header=BB225_350 Depth=1
	jmp	.LBB225_395
.LBB225_395:                            # %for.inc2621
                                        #   in Loop: Header=BB225_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_350
.LBB225_396:                            # %for.end2623
	jmp	.LBB225_397
.LBB225_397:                            # %if.end2624
	cmpl	$1995775231, -72(%rbp)  # imm = 0x76F51CFF
	jne	.LBB225_399
.LBB225_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_398
.Lfunc_end225:
	.size	compute_colocated.162, .Lfunc_end225-compute_colocated.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.163
	.type	compare_pic_by_poc_asc.163,@function
compare_pic_by_poc_asc.163:             # @compare_pic_by_poc_asc.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1852892691, -16(%rbp)  # imm = 0x6E70E613
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB226_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB226_5
.LBB226_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB226_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB226_5
.LBB226_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB226_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1852892691, -16(%rbp)  # imm = 0x6E70E613
	jne	.LBB226_7
.LBB226_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_6
.Lfunc_end226:
	.size	compare_pic_by_poc_asc.163, .Lfunc_end226-compare_pic_by_poc_asc.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.164
	.type	mm_unmark_long_term_for_reference.164,@function
mm_unmark_long_term_for_reference.164:  # @mm_unmark_long_term_for_reference.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$214718053, -12(%rbp)   # imm = 0xCCC5665
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB227_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB227_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB227_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB227_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB227_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB227_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB227_7:                              # %if.end
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_8
.LBB227_8:                              # %if.end14
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_24
.LBB227_9:                              # %if.else
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB227_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB227_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB227_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB227_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB227_14:                             # %if.end57
	jmp	.LBB227_27
.LBB227_15:                             # %if.end58
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_16
.LBB227_16:                             # %if.end59
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB227_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB227_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB227_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB227_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB227_21:                             # %if.end106
	jmp	.LBB227_27
.LBB227_22:                             # %if.end107
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_23
.LBB227_23:                             # %if.end108
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_24
.LBB227_24:                             # %if.end109
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_25
.LBB227_25:                             # %for.inc
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_1
.LBB227_26:                             # %for.end.loopexit
	jmp	.LBB227_27
.LBB227_27:                             # %for.end
	cmpl	$214718053, -12(%rbp)   # imm = 0xCCC5665
	jne	.LBB227_29
.LBB227_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_28
.Lfunc_end227:
	.size	mm_unmark_long_term_for_reference.164, .Lfunc_end227-mm_unmark_long_term_for_reference.164
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.165 # -- Begin function alloc_storable_picture.165
	.p2align	4, 0x90
	.type	alloc_storable_picture.165,@function
alloc_storable_picture.165:             # @alloc_storable_picture.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1892014552, -36(%rbp)  # imm = 0x70C5D9D8
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB228_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB228_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB228_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB228_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB228_6
.LBB228_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB228_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB228_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB228_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB228_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB228_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1892014552, -36(%rbp)  # imm = 0x70C5D9D8
	jne	.LBB228_12
.LBB228_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_11
.Lfunc_end228:
	.size	alloc_storable_picture.165, .Lfunc_end228-alloc_storable_picture.165
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.166
	.type	get_short_term_pic.166,@function
get_short_term_pic.166:                 # @get_short_term_pic.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$498309868, -28(%rbp)   # imm = 0x1DB39AEC
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB229_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB229_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB229_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB229_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB229_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB229_23
.LBB229_7:                              # %if.end
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_8
.LBB229_8:                              # %if.end14
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_20
.LBB229_9:                              # %if.else
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB229_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB229_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB229_23
.LBB229_13:                             # %if.end34
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_14
.LBB229_14:                             # %if.end35
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB229_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB229_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB229_23
.LBB229_18:                             # %if.end56
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_19
.LBB229_19:                             # %if.end57
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_20
.LBB229_20:                             # %if.end58
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_21
.LBB229_21:                             # %for.inc
                                        #   in Loop: Header=BB229_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_1
.LBB229_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB229_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$498309868, -28(%rbp)   # imm = 0x1DB39AEC
	jne	.LBB229_25
.LBB229_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_24
.Lfunc_end229:
	.size	get_short_term_pic.166, .Lfunc_end229-get_short_term_pic.166
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.167
	.type	mm_unmark_long_term_for_reference.167,@function
mm_unmark_long_term_for_reference.167:  # @mm_unmark_long_term_for_reference.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1144831536, -12(%rbp)  # imm = 0x443CBE30
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB230_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB230_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB230_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB230_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB230_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB230_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB230_7:                              # %if.end
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_8
.LBB230_8:                              # %if.end14
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_24
.LBB230_9:                              # %if.else
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB230_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB230_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB230_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB230_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB230_14:                             # %if.end57
	jmp	.LBB230_27
.LBB230_15:                             # %if.end58
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_16
.LBB230_16:                             # %if.end59
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB230_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB230_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB230_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB230_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB230_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB230_21:                             # %if.end106
	jmp	.LBB230_27
.LBB230_22:                             # %if.end107
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_23
.LBB230_23:                             # %if.end108
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_24
.LBB230_24:                             # %if.end109
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_25
.LBB230_25:                             # %for.inc
                                        #   in Loop: Header=BB230_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_1
.LBB230_26:                             # %for.end.loopexit
	jmp	.LBB230_27
.LBB230_27:                             # %for.end
	cmpl	$1144831536, -12(%rbp)  # imm = 0x443CBE30
	jne	.LBB230_29
.LBB230_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_28
.Lfunc_end230:
	.size	mm_unmark_long_term_for_reference.167, .Lfunc_end230-mm_unmark_long_term_for_reference.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.168
	.type	compare_fs_by_poc_asc.168,@function
compare_fs_by_poc_asc.168:              # @compare_fs_by_poc_asc.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$631524498, -16(%rbp)   # imm = 0x25A44C92
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB231_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB231_5
.LBB231_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB231_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB231_5
.LBB231_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB231_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$631524498, -16(%rbp)   # imm = 0x25A44C92
	jne	.LBB231_7
.LBB231_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_6
.Lfunc_end231:
	.size	compare_fs_by_poc_asc.168, .Lfunc_end231-compare_fs_by_poc_asc.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.169
	.type	mm_unmark_short_term_for_reference.169,@function
mm_unmark_short_term_for_reference.169: # @mm_unmark_short_term_for_reference.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1087388051, -16(%rbp)  # imm = 0x40D03993
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB232_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB232_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB232_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB232_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB232_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB232_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB232_27
.LBB232_7:                              # %if.end
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_8
.LBB232_8:                              # %if.end13
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_24
.LBB232_9:                              # %if.else
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB232_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB232_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB232_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB232_14:                             # %if.end44
	jmp	.LBB232_27
.LBB232_15:                             # %if.end45
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_16
.LBB232_16:                             # %if.end46
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB232_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB232_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB232_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB232_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB232_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB232_21:                             # %if.end81
	jmp	.LBB232_27
.LBB232_22:                             # %if.end82
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_23
.LBB232_23:                             # %if.end83
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_24
.LBB232_24:                             # %if.end84
                                        #   in Loop: Header=BB232_1 Depth=1
	jmp	.LBB232_25
.LBB232_25:                             # %for.inc
                                        #   in Loop: Header=BB232_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_1
.LBB232_26:                             # %for.end.loopexit
	jmp	.LBB232_27
.LBB232_27:                             # %for.end
	cmpl	$1087388051, -16(%rbp)  # imm = 0x40D03993
	jne	.LBB232_29
.LBB232_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_28
.Lfunc_end232:
	.size	mm_unmark_short_term_for_reference.169, .Lfunc_end232-mm_unmark_short_term_for_reference.169
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.170  # -- Begin function fill_frame_num_gap.170
	.p2align	4, 0x90
	.type	fill_frame_num_gap.170,@function
fill_frame_num_gap.170:                 # @fill_frame_num_gap.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1533227096, -40(%rbp)  # imm = 0x5B633058
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB233_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB233_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB233_1
.LBB233_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1533227096, -40(%rbp)  # imm = 0x5B633058
	jne	.LBB233_5
.LBB233_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_4
.Lfunc_end233:
	.size	fill_frame_num_gap.170, .Lfunc_end233-fill_frame_num_gap.170
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.171          # -- Begin function init_lists.171
	.p2align	4, 0x90
	.type	init_lists.171,@function
init_lists.171:                         # @init_lists.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1067223956, -76(%rbp)  # imm = 0x3F9C8B94
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB234_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB234_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB234_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB234_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB234_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB234_9
.LBB234_8:                              # %if.else
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB234_9:                              # %if.end
                                        #   in Loop: Header=BB234_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB234_10:                             # %if.end36
                                        #   in Loop: Header=BB234_2 Depth=1
	jmp	.LBB234_11
.LBB234_11:                             # %if.end37
                                        #   in Loop: Header=BB234_2 Depth=1
	jmp	.LBB234_12
.LBB234_12:                             # %for.inc
                                        #   in Loop: Header=BB234_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_2
.LBB234_13:                             # %for.end
	jmp	.LBB234_31
.LBB234_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB234_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB234_17
.LBB234_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB234_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB234_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB234_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB234_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB234_23
.LBB234_22:                             # %if.else63
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB234_23:                             # %if.end70
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB234_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB234_25:                             # %if.end83
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB234_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB234_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB234_27:                             # %if.end98
                                        #   in Loop: Header=BB234_18 Depth=1
	jmp	.LBB234_28
.LBB234_28:                             # %if.end99
                                        #   in Loop: Header=BB234_18 Depth=1
	jmp	.LBB234_29
.LBB234_29:                             # %for.inc100
                                        #   in Loop: Header=BB234_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_18
.LBB234_30:                             # %for.end102
	jmp	.LBB234_31
.LBB234_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB234_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB234_34
.LBB234_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB234_181
.LBB234_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB234_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB234_75
.LBB234_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB234_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB234_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB234_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB234_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB234_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB234_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB234_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB234_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_43:                             # %if.end140
                                        #   in Loop: Header=BB234_38 Depth=1
	jmp	.LBB234_44
.LBB234_44:                             # %if.end141
                                        #   in Loop: Header=BB234_38 Depth=1
	jmp	.LBB234_45
.LBB234_45:                             # %for.inc142
                                        #   in Loop: Header=BB234_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_38
.LBB234_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB234_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB234_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB234_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB234_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB234_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB234_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_51:                             # %if.end177
                                        #   in Loop: Header=BB234_47 Depth=1
	jmp	.LBB234_52
.LBB234_52:                             # %if.end178
                                        #   in Loop: Header=BB234_47 Depth=1
	jmp	.LBB234_53
.LBB234_53:                             # %for.inc179
                                        #   in Loop: Header=BB234_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_47
.LBB234_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB234_74
.LBB234_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB234_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB234_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB234_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB234_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB234_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB234_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB234_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB234_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_63:                             # %if.end212
                                        #   in Loop: Header=BB234_60 Depth=1
	jmp	.LBB234_64
.LBB234_64:                             # %for.inc213
                                        #   in Loop: Header=BB234_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_60
.LBB234_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB234_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB234_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB234_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB234_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB234_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB234_69:                             # %if.end242
                                        #   in Loop: Header=BB234_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB234_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB234_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB234_71:                             # %if.end259
                                        #   in Loop: Header=BB234_66 Depth=1
	jmp	.LBB234_72
.LBB234_72:                             # %for.inc260
                                        #   in Loop: Header=BB234_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_66
.LBB234_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB234_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB234_155
.LBB234_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB234_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB234_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB234_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB234_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB234_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB234_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB234_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB234_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB234_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB234_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_83:                             # %if.end307
                                        #   in Loop: Header=BB234_77 Depth=1
	jmp	.LBB234_84
.LBB234_84:                             # %if.end308
                                        #   in Loop: Header=BB234_77 Depth=1
	jmp	.LBB234_85
.LBB234_85:                             # %if.end309
                                        #   in Loop: Header=BB234_77 Depth=1
	jmp	.LBB234_86
.LBB234_86:                             # %for.inc310
                                        #   in Loop: Header=BB234_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_77
.LBB234_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB234_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB234_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB234_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB234_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB234_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB234_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB234_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB234_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB234_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_94:                             # %if.end354
                                        #   in Loop: Header=BB234_88 Depth=1
	jmp	.LBB234_95
.LBB234_95:                             # %if.end355
                                        #   in Loop: Header=BB234_88 Depth=1
	jmp	.LBB234_96
.LBB234_96:                             # %if.end356
                                        #   in Loop: Header=BB234_88 Depth=1
	jmp	.LBB234_97
.LBB234_97:                             # %for.inc357
                                        #   in Loop: Header=BB234_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_88
.LBB234_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB234_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB234_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB234_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB234_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_99
.LBB234_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB234_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB234_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB234_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB234_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_103
.LBB234_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB234_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB234_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB234_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB234_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB234_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB234_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB234_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_111:                            # %if.end428
                                        #   in Loop: Header=BB234_107 Depth=1
	jmp	.LBB234_112
.LBB234_112:                            # %if.end429
                                        #   in Loop: Header=BB234_107 Depth=1
	jmp	.LBB234_113
.LBB234_113:                            # %for.inc430
                                        #   in Loop: Header=BB234_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_107
.LBB234_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB234_154
.LBB234_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB234_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB234_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB234_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB234_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB234_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB234_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB234_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB234_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB234_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB234_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB234_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB234_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_126:                            # %if.end480
                                        #   in Loop: Header=BB234_122 Depth=1
	jmp	.LBB234_127
.LBB234_127:                            # %if.end481
                                        #   in Loop: Header=BB234_122 Depth=1
	jmp	.LBB234_128
.LBB234_128:                            # %for.inc482
                                        #   in Loop: Header=BB234_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_122
.LBB234_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB234_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB234_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB234_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB234_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB234_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB234_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB234_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB234_134:                            # %if.end507
                                        #   in Loop: Header=BB234_130 Depth=1
	jmp	.LBB234_135
.LBB234_135:                            # %if.end508
                                        #   in Loop: Header=BB234_130 Depth=1
	jmp	.LBB234_136
.LBB234_136:                            # %for.inc509
                                        #   in Loop: Header=BB234_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_130
.LBB234_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB234_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB234_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB234_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB234_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_138
.LBB234_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB234_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB234_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB234_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB234_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_142
.LBB234_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB234_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB234_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB234_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB234_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB234_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB234_149:                            # %if.end566
                                        #   in Loop: Header=BB234_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB234_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB234_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB234_151:                            # %if.end583
                                        #   in Loop: Header=BB234_146 Depth=1
	jmp	.LBB234_152
.LBB234_152:                            # %for.inc584
                                        #   in Loop: Header=BB234_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_146
.LBB234_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB234_154:                            # %if.end588
	jmp	.LBB234_155
.LBB234_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB234_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB234_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB234_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB234_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB234_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB234_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB234_158 Depth=1
	movl	$1, -72(%rbp)
.LBB234_161:                            # %if.end607
                                        #   in Loop: Header=BB234_158 Depth=1
	jmp	.LBB234_162
.LBB234_162:                            # %for.inc608
                                        #   in Loop: Header=BB234_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_158
.LBB234_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB234_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB234_165:                            # %if.end617
	jmp	.LBB234_166
.LBB234_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB234_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB234_169
.LBB234_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB234_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB234_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB234_172
.LBB234_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB234_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB234_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB234_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB234_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB234_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_173
.LBB234_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB234_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB234_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB234_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB234_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB234_177
.LBB234_180:                            # %for.end646.loopexit
	jmp	.LBB234_181
.LBB234_181:                            # %for.end646
	cmpl	$1067223956, -76(%rbp)  # imm = 0x3F9C8B94
	jne	.LBB234_183
.LBB234_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_182
.Lfunc_end234:
	.size	init_lists.171, .Lfunc_end234-init_lists.171
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.172     # -- Begin function alloc_colocated.172
	.p2align	4, 0x90
	.type	alloc_colocated.172,@function
alloc_colocated.172:                    # @alloc_colocated.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1212466783, -32(%rbp)  # imm = 0x4844C65F
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB235_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB235_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB235_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB235_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1212466783, -32(%rbp)  # imm = 0x4844C65F
	jne	.LBB235_6
.LBB235_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_5
.Lfunc_end235:
	.size	alloc_colocated.172, .Lfunc_end235-alloc_colocated.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.173
	.type	get_short_term_pic.173,@function
get_short_term_pic.173:                 # @get_short_term_pic.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1908884927, -28(%rbp)  # imm = 0x71C745BF
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB236_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB236_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB236_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB236_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB236_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB236_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB236_23
.LBB236_7:                              # %if.end
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_8
.LBB236_8:                              # %if.end14
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_20
.LBB236_9:                              # %if.else
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB236_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB236_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB236_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB236_23
.LBB236_13:                             # %if.end34
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_14
.LBB236_14:                             # %if.end35
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB236_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB236_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB236_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB236_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB236_23
.LBB236_18:                             # %if.end56
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_19
.LBB236_19:                             # %if.end57
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_20
.LBB236_20:                             # %if.end58
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_21
.LBB236_21:                             # %for.inc
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB236_1
.LBB236_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB236_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1908884927, -28(%rbp)  # imm = 0x71C745BF
	jne	.LBB236_25
.LBB236_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_24
.Lfunc_end236:
	.size	get_short_term_pic.173, .Lfunc_end236-get_short_term_pic.173
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.174
	.type	compare_pic_by_pic_num_desc.174,@function
compare_pic_by_pic_num_desc.174:        # @compare_pic_by_pic_num_desc.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1351939136, -16(%rbp)  # imm = 0x5094F440
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB237_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB237_5
.LBB237_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB237_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB237_5
.LBB237_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB237_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1351939136, -16(%rbp)  # imm = 0x5094F440
	jne	.LBB237_7
.LBB237_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_6
.Lfunc_end237:
	.size	compare_pic_by_pic_num_desc.174, .Lfunc_end237-compare_pic_by_pic_num_desc.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.175
	.type	unmark_long_term_field_for_reference_by_frame_idx.175,@function
unmark_long_term_field_for_reference_by_frame_idx.175: # @unmark_long_term_field_for_reference_by_frame_idx.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$562056749, -28(%rbp)   # imm = 0x21804E2D
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB238_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB238_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB238_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB238_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB238_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB238_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB238_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB238_23
.LBB238_8:                              # %if.else
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB238_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB238_22
.LBB238_10:                             # %if.else21
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB238_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB238_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB238_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB238_15
.LBB238_14:                             # %if.then29
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_15:                             # %if.end32
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_17
.LBB238_16:                             # %if.else33
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_17:                             # %if.end36
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_21
.LBB238_18:                             # %if.else37
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB238_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_20:                             # %if.end45
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_21
.LBB238_21:                             # %if.end46
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_22
.LBB238_22:                             # %if.end47
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_23
.LBB238_23:                             # %if.end48
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_24
.LBB238_24:                             # %if.end49
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB238_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB238_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB238_42
.LBB238_27:                             # %if.else59
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB238_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB238_41
.LBB238_29:                             # %if.else67
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB238_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB238_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB238_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB238_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB238_34
.LBB238_33:                             # %if.then78
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_34:                             # %if.end81
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_36
.LBB238_35:                             # %if.else82
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_36:                             # %if.end85
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_40
.LBB238_37:                             # %if.else86
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB238_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB238_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB238_39:                             # %if.end95
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_40
.LBB238_40:                             # %if.end96
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_41
.LBB238_41:                             # %if.end97
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_42
.LBB238_42:                             # %if.end98
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_43
.LBB238_43:                             # %if.end99
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_44
.LBB238_44:                             # %if.end100
                                        #   in Loop: Header=BB238_3 Depth=1
	jmp	.LBB238_45
.LBB238_45:                             # %for.inc
                                        #   in Loop: Header=BB238_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB238_3
.LBB238_46:                             # %for.end
	cmpl	$562056749, -28(%rbp)   # imm = 0x21804E2D
	jne	.LBB238_48
.LBB238_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_47
.Lfunc_end238:
	.size	unmark_long_term_field_for_reference_by_frame_idx.175, .Lfunc_end238-unmark_long_term_field_for_reference_by_frame_idx.175
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.176   # -- Begin function compute_colocated.176
	.p2align	4, 0x90
	.type	compute_colocated.176,@function
compute_colocated.176:                  # @compute_colocated.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1965175202, -72(%rbp)  # imm = 0x752231A2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB239_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB239_11
.LBB239_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB239_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB239_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB239_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB239_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB239_8
.LBB239_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB239_8:                              # %if.end
	jmp	.LBB239_9
.LBB239_9:                              # %if.end20
	jmp	.LBB239_10
.LBB239_10:                             # %if.end21
	jmp	.LBB239_11
.LBB239_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB239_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB239_29
.LBB239_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB239_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB239_14 Depth=1
	movl	$0, -16(%rbp)
.LBB239_16:                             # %for.cond27
                                        #   Parent Loop BB239_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB239_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB239_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB239_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB239_22
.LBB239_21:                             # %if.else160
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB239_22:                             # %if.end283
                                        #   in Loop: Header=BB239_16 Depth=2
	jmp	.LBB239_24
.LBB239_23:                             # %if.else284
                                        #   in Loop: Header=BB239_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB239_24:                             # %if.end391
                                        #   in Loop: Header=BB239_16 Depth=2
	jmp	.LBB239_25
.LBB239_25:                             # %for.inc
                                        #   in Loop: Header=BB239_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_16
.LBB239_26:                             # %for.end
                                        #   in Loop: Header=BB239_14 Depth=1
	jmp	.LBB239_27
.LBB239_27:                             # %for.inc392
                                        #   in Loop: Header=BB239_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_14
.LBB239_28:                             # %for.end394
	jmp	.LBB239_29
.LBB239_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB239_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB239_241
.LBB239_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB239_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB239_32 Depth=1
	movl	$0, -12(%rbp)
.LBB239_34:                             # %for.cond408
                                        #   Parent Loop BB239_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB239_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_39
.LBB239_38:                             # %cond.false
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_39:                             # %cond.end
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_42
.LBB239_41:                             # %cond.false427
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_42:                             # %cond.end429
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_45
.LBB239_44:                             # %cond.false447
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_45:                             # %cond.end449
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_48
.LBB239_47:                             # %cond.false457
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_48:                             # %cond.end459
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_51
.LBB239_50:                             # %cond.false477
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_51:                             # %cond.end479
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_54
.LBB239_53:                             # %cond.false487
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_54:                             # %cond.end489
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_57
.LBB239_56:                             # %cond.false507
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_57:                             # %cond.end509
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_60
.LBB239_59:                             # %cond.false517
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_60:                             # %cond.end519
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_63
.LBB239_62:                             # %cond.false537
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_63:                             # %cond.end539
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_66
.LBB239_65:                             # %cond.false547
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_66:                             # %cond.end549
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB239_81
.LBB239_68:                             # %if.else569
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_71
.LBB239_70:                             # %cond.false576
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_71:                             # %cond.end578
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_74
.LBB239_73:                             # %cond.false586
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_74:                             # %cond.end588
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_77
.LBB239_76:                             # %cond.false604
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_77:                             # %cond.end606
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_80
.LBB239_79:                             # %cond.false614
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_80:                             # %cond.end616
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB239_81:                             # %if.end626
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_84
.LBB239_83:                             # %cond.false633
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_84:                             # %cond.end635
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_87
.LBB239_86:                             # %cond.false643
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_87:                             # %cond.end645
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB239_102
.LBB239_89:                             # %if.else665
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_92
.LBB239_91:                             # %cond.false672
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_92:                             # %cond.end674
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_95
.LBB239_94:                             # %cond.false682
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_95:                             # %cond.end684
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_98
.LBB239_97:                             # %cond.false700
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_98:                             # %cond.end702
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_101
.LBB239_100:                            # %cond.false710
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_101:                            # %cond.end712
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB239_102:                            # %if.end722
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB239_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB239_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB239_112
.LBB239_107:                            # %lor.rhs
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB239_111:                            # %land.end
                                        #   in Loop: Header=BB239_34 Depth=2
.LBB239_112:                            # %lor.end
                                        #   in Loop: Header=BB239_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB239_113:                            # %if.end814
                                        #   in Loop: Header=BB239_34 Depth=2
	jmp	.LBB239_236
.LBB239_114:                            # %if.else815
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_117
.LBB239_116:                            # %cond.false822
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_117:                            # %cond.end824
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_120
.LBB239_119:                            # %cond.false832
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_120:                            # %cond.end834
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_123
.LBB239_122:                            # %cond.false851
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_123:                            # %cond.end853
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_126
.LBB239_125:                            # %cond.false861
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_126:                            # %cond.end863
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_129
.LBB239_128:                            # %cond.false881
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_129:                            # %cond.end883
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_132
.LBB239_131:                            # %cond.false891
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_132:                            # %cond.end893
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_135
.LBB239_134:                            # %cond.false911
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_135:                            # %cond.end913
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_138
.LBB239_137:                            # %cond.false921
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_138:                            # %cond.end923
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_141
.LBB239_140:                            # %cond.false941
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_141:                            # %cond.end943
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_144
.LBB239_143:                            # %cond.false951
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_144:                            # %cond.end953
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_147
.LBB239_146:                            # %cond.false968
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_147:                            # %cond.end970
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_150
.LBB239_149:                            # %cond.false978
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_150:                            # %cond.end980
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_153
.LBB239_152:                            # %cond.false996
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_153:                            # %cond.end998
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_156
.LBB239_155:                            # %cond.false1006
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_156:                            # %cond.end1008
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_159
.LBB239_158:                            # %cond.false1023
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_159:                            # %cond.end1025
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_162
.LBB239_161:                            # %cond.false1033
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_162:                            # %cond.end1035
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB239_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB239_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB239_172
.LBB239_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB239_171:                            # %land.end1133
                                        #   in Loop: Header=BB239_34 Depth=2
.LBB239_172:                            # %lor.end1134
                                        #   in Loop: Header=BB239_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB239_173:                            # %if.end1142
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_176
.LBB239_175:                            # %cond.false1149
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_176:                            # %cond.end1151
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_179
.LBB239_178:                            # %cond.false1159
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_179:                            # %cond.end1161
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_182
.LBB239_181:                            # %cond.false1178
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_182:                            # %cond.end1180
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_185
.LBB239_184:                            # %cond.false1188
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_185:                            # %cond.end1190
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_188
.LBB239_187:                            # %cond.false1208
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_188:                            # %cond.end1210
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_191
.LBB239_190:                            # %cond.false1218
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_191:                            # %cond.end1220
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_194
.LBB239_193:                            # %cond.false1238
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_194:                            # %cond.end1240
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_197
.LBB239_196:                            # %cond.false1248
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_197:                            # %cond.end1250
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_200
.LBB239_199:                            # %cond.false1268
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_200:                            # %cond.end1270
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_203
.LBB239_202:                            # %cond.false1278
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_203:                            # %cond.end1280
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_206
.LBB239_205:                            # %cond.false1295
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_206:                            # %cond.end1297
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_209
.LBB239_208:                            # %cond.false1305
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_209:                            # %cond.end1307
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_212
.LBB239_211:                            # %cond.false1323
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_212:                            # %cond.end1325
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_215
.LBB239_214:                            # %cond.false1333
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_215:                            # %cond.end1335
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_218
.LBB239_217:                            # %cond.false1350
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_218:                            # %cond.end1352
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_221
.LBB239_220:                            # %cond.false1360
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_221:                            # %cond.end1362
                                        #   in Loop: Header=BB239_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB239_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB239_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB239_231
.LBB239_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB239_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB239_230:                            # %land.end1460
                                        #   in Loop: Header=BB239_34 Depth=2
.LBB239_231:                            # %lor.end1461
                                        #   in Loop: Header=BB239_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB239_232:                            # %if.end1469
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB239_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB239_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB239_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB239_235:                            # %if.end1522
                                        #   in Loop: Header=BB239_34 Depth=2
	jmp	.LBB239_236
.LBB239_236:                            # %if.end1523
                                        #   in Loop: Header=BB239_34 Depth=2
	jmp	.LBB239_237
.LBB239_237:                            # %for.inc1524
                                        #   in Loop: Header=BB239_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_34
.LBB239_238:                            # %for.end1526
                                        #   in Loop: Header=BB239_32 Depth=1
	jmp	.LBB239_239
.LBB239_239:                            # %for.inc1527
                                        #   in Loop: Header=BB239_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_32
.LBB239_240:                            # %for.end1529
	jmp	.LBB239_241
.LBB239_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB239_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB239_259
.LBB239_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB239_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB239_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB239_245 Depth=1
	movl	$0, -16(%rbp)
.LBB239_247:                            # %for.cond1546
                                        #   Parent Loop BB239_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB239_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB239_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB239_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB239_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB239_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB239_252
.LBB239_251:                            # %if.else1699
                                        #   in Loop: Header=BB239_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB239_252:                            # %if.end1829
                                        #   in Loop: Header=BB239_247 Depth=2
	jmp	.LBB239_253
.LBB239_253:                            # %if.end1830
                                        #   in Loop: Header=BB239_247 Depth=2
	jmp	.LBB239_254
.LBB239_254:                            # %for.inc1831
                                        #   in Loop: Header=BB239_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_247
.LBB239_255:                            # %for.end1833
                                        #   in Loop: Header=BB239_245 Depth=1
	jmp	.LBB239_256
.LBB239_256:                            # %for.inc1834
                                        #   in Loop: Header=BB239_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_245
.LBB239_257:                            # %for.end1836
	jmp	.LBB239_258
.LBB239_258:                            # %if.end1837
	jmp	.LBB239_259
.LBB239_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB239_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB239_260 Depth=1
	movl	$0, -16(%rbp)
.LBB239_262:                            # %for.cond1845
                                        #   Parent Loop BB239_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB239_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB239_314
.LBB239_265:                            # %if.then1856
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_268
.LBB239_267:                            # %cond.false1863
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_268:                            # %cond.end1865
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_271
.LBB239_270:                            # %cond.false1873
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_271:                            # %cond.end1875
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_274
.LBB239_273:                            # %cond.false1893
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_274:                            # %cond.end1895
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_277
.LBB239_276:                            # %cond.false1903
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_277:                            # %cond.end1905
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_280
.LBB239_279:                            # %cond.false1923
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_280:                            # %cond.end1925
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_283
.LBB239_282:                            # %cond.false1933
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_283:                            # %cond.end1935
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_286
.LBB239_285:                            # %cond.false1953
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_286:                            # %cond.end1955
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_289
.LBB239_288:                            # %cond.false1963
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_289:                            # %cond.end1965
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_292
.LBB239_291:                            # %cond.false1983
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_292:                            # %cond.end1985
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_295
.LBB239_294:                            # %cond.false1993
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_295:                            # %cond.end1995
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_298
.LBB239_297:                            # %cond.false2011
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_298:                            # %cond.end2013
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_301
.LBB239_300:                            # %cond.false2021
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_301:                            # %cond.end2023
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_304
.LBB239_303:                            # %cond.false2039
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_304:                            # %cond.end2041
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_307
.LBB239_306:                            # %cond.false2049
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_307:                            # %cond.end2051
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_310
.LBB239_309:                            # %cond.false2067
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_310:                            # %cond.end2069
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB239_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB239_313
.LBB239_312:                            # %cond.false2077
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB239_313:                            # %cond.end2079
                                        #   in Loop: Header=BB239_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB239_315
.LBB239_314:                            # %if.else2089
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB239_315:                            # %if.end2194
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB239_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB239_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB239_325
.LBB239_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB239_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB239_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB239_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB239_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB239_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB239_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB239_324:                            # %land.end2285
                                        #   in Loop: Header=BB239_262 Depth=2
.LBB239_325:                            # %lor.end2286
                                        #   in Loop: Header=BB239_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB239_326:                            # %if.end2295
                                        #   in Loop: Header=BB239_262 Depth=2
	jmp	.LBB239_327
.LBB239_327:                            # %for.inc2296
                                        #   in Loop: Header=BB239_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_262
.LBB239_328:                            # %for.end2298
                                        #   in Loop: Header=BB239_260 Depth=1
	jmp	.LBB239_329
.LBB239_329:                            # %for.inc2299
                                        #   in Loop: Header=BB239_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_260
.LBB239_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB239_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB239_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB239_332 Depth=1
	movl	$0, -16(%rbp)
.LBB239_334:                            # %for.cond2312
                                        #   Parent Loop BB239_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB239_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB239_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB239_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB239_340
.LBB239_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB239_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB239_341
.LBB239_340:                            # %if.then2342
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB239_345
.LBB239_341:                            # %if.else2363
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB239_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB239_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB239_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB239_344:                            # %if.end2394
                                        #   in Loop: Header=BB239_334 Depth=2
	jmp	.LBB239_345
.LBB239_345:                            # %if.end2395
                                        #   in Loop: Header=BB239_334 Depth=2
	jmp	.LBB239_346
.LBB239_346:                            # %for.inc2396
                                        #   in Loop: Header=BB239_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_334
.LBB239_347:                            # %for.end2398
                                        #   in Loop: Header=BB239_332 Depth=1
	jmp	.LBB239_348
.LBB239_348:                            # %for.inc2399
                                        #   in Loop: Header=BB239_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_332
.LBB239_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB239_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB239_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB239_350 Depth=1
	movl	$0, -16(%rbp)
.LBB239_352:                            # %for.cond2409
                                        #   Parent Loop BB239_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB239_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB239_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB239_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB239_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB239_360
.LBB239_356:                            # %cond.false2429
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB239_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$127, %eax
	jmp	.LBB239_359
.LBB239_358:                            # %cond.false2441
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB239_359:                            # %cond.end2450
                                        #   in Loop: Header=BB239_352 Depth=2
.LBB239_360:                            # %cond.end2452
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB239_377
.LBB239_361:                            # %if.else2454
                                        #   in Loop: Header=BB239_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB239_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB239_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB239_368
.LBB239_364:                            # %cond.false2468
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB239_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$127, %eax
	jmp	.LBB239_367
.LBB239_366:                            # %cond.false2480
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB239_367:                            # %cond.end2489
                                        #   in Loop: Header=BB239_352 Depth=2
.LBB239_368:                            # %cond.end2491
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB239_376
.LBB239_369:                            # %if.else2493
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB239_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB239_375
.LBB239_371:                            # %cond.false2504
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB239_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$127, %eax
	jmp	.LBB239_374
.LBB239_373:                            # %cond.false2516
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB239_374:                            # %cond.end2525
                                        #   in Loop: Header=BB239_352 Depth=2
.LBB239_375:                            # %cond.end2527
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB239_376:                            # %if.end2529
                                        #   in Loop: Header=BB239_352 Depth=2
	jmp	.LBB239_377
.LBB239_377:                            # %if.end2530
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB239_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB239_383
.LBB239_379:                            # %cond.false2546
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB239_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$127, %eax
	jmp	.LBB239_382
.LBB239_381:                            # %cond.false2562
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB239_382:                            # %cond.end2575
                                        #   in Loop: Header=BB239_352 Depth=2
.LBB239_383:                            # %cond.end2577
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB239_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB239_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB239_390
.LBB239_386:                            # %cond.false2592
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB239_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB239_389
.LBB239_388:                            # %cond.false2599
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB239_389:                            # %cond.end2603
                                        #   in Loop: Header=BB239_352 Depth=2
.LBB239_390:                            # %cond.end2605
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB239_392
.LBB239_391:                            # %if.else2611
                                        #   in Loop: Header=BB239_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB239_392:                            # %if.end2617
                                        #   in Loop: Header=BB239_352 Depth=2
	jmp	.LBB239_393
.LBB239_393:                            # %for.inc2618
                                        #   in Loop: Header=BB239_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_352
.LBB239_394:                            # %for.end2620
                                        #   in Loop: Header=BB239_350 Depth=1
	jmp	.LBB239_395
.LBB239_395:                            # %for.inc2621
                                        #   in Loop: Header=BB239_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_350
.LBB239_396:                            # %for.end2623
	jmp	.LBB239_397
.LBB239_397:                            # %if.end2624
	cmpl	$1965175202, -72(%rbp)  # imm = 0x752231A2
	jne	.LBB239_399
.LBB239_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_398
.Lfunc_end239:
	.size	compute_colocated.176, .Lfunc_end239-compute_colocated.176
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.177   # -- Begin function gen_field_ref_ids.177
	.p2align	4, 0x90
	.type	gen_field_ref_ids.177,@function
gen_field_ref_ids.177:                  # @gen_field_ref_ids.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$555975032, -28(%rbp)   # imm = 0x21238178
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB240_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB240_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB240_1 Depth=1
	movl	$0, -8(%rbp)
.LBB240_3:                              # %for.cond1
                                        #   Parent Loop BB240_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB240_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB240_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB240_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB240_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB240_7
.LBB240_6:                              # %cond.false
                                        #   in Loop: Header=BB240_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB240_7
.LBB240_7:                              # %cond.end
                                        #   in Loop: Header=BB240_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB240_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB240_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB240_10
.LBB240_9:                              # %cond.false32
                                        #   in Loop: Header=BB240_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB240_10
.LBB240_10:                             # %cond.end33
                                        #   in Loop: Header=BB240_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB240_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB240_3
.LBB240_12:                             # %for.end
                                        #   in Loop: Header=BB240_1 Depth=1
	jmp	.LBB240_13
.LBB240_13:                             # %for.inc45
                                        #   in Loop: Header=BB240_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB240_1
.LBB240_14:                             # %for.end47
	cmpl	$555975032, -28(%rbp)   # imm = 0x21238178
	jne	.LBB240_16
.LBB240_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_15
.Lfunc_end240:
	.size	gen_field_ref_ids.177, .Lfunc_end240-gen_field_ref_ids.177
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.178          # -- Begin function init_lists.178
	.p2align	4, 0x90
	.type	init_lists.178,@function
init_lists.178:                         # @init_lists.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$517262165, -76(%rbp)   # imm = 0x1ED4CB55
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB241_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB241_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB241_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB241_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB241_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB241_9
.LBB241_8:                              # %if.else
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB241_9:                              # %if.end
                                        #   in Loop: Header=BB241_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB241_10:                             # %if.end36
                                        #   in Loop: Header=BB241_2 Depth=1
	jmp	.LBB241_11
.LBB241_11:                             # %if.end37
                                        #   in Loop: Header=BB241_2 Depth=1
	jmp	.LBB241_12
.LBB241_12:                             # %for.inc
                                        #   in Loop: Header=BB241_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_2
.LBB241_13:                             # %for.end
	jmp	.LBB241_31
.LBB241_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB241_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB241_17
.LBB241_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB241_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB241_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB241_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB241_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB241_23
.LBB241_22:                             # %if.else63
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB241_23:                             # %if.end70
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB241_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB241_25:                             # %if.end83
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB241_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB241_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB241_27:                             # %if.end98
                                        #   in Loop: Header=BB241_18 Depth=1
	jmp	.LBB241_28
.LBB241_28:                             # %if.end99
                                        #   in Loop: Header=BB241_18 Depth=1
	jmp	.LBB241_29
.LBB241_29:                             # %for.inc100
                                        #   in Loop: Header=BB241_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_18
.LBB241_30:                             # %for.end102
	jmp	.LBB241_31
.LBB241_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB241_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB241_34
.LBB241_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB241_181
.LBB241_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB241_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB241_75
.LBB241_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB241_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB241_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB241_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB241_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB241_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB241_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB241_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB241_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_43:                             # %if.end140
                                        #   in Loop: Header=BB241_38 Depth=1
	jmp	.LBB241_44
.LBB241_44:                             # %if.end141
                                        #   in Loop: Header=BB241_38 Depth=1
	jmp	.LBB241_45
.LBB241_45:                             # %for.inc142
                                        #   in Loop: Header=BB241_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_38
.LBB241_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB241_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB241_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB241_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB241_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB241_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_51:                             # %if.end177
                                        #   in Loop: Header=BB241_47 Depth=1
	jmp	.LBB241_52
.LBB241_52:                             # %if.end178
                                        #   in Loop: Header=BB241_47 Depth=1
	jmp	.LBB241_53
.LBB241_53:                             # %for.inc179
                                        #   in Loop: Header=BB241_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_47
.LBB241_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB241_74
.LBB241_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB241_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB241_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB241_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB241_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB241_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB241_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB241_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB241_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_63:                             # %if.end212
                                        #   in Loop: Header=BB241_60 Depth=1
	jmp	.LBB241_64
.LBB241_64:                             # %for.inc213
                                        #   in Loop: Header=BB241_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_60
.LBB241_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB241_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB241_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB241_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB241_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB241_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB241_69:                             # %if.end242
                                        #   in Loop: Header=BB241_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB241_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB241_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB241_71:                             # %if.end259
                                        #   in Loop: Header=BB241_66 Depth=1
	jmp	.LBB241_72
.LBB241_72:                             # %for.inc260
                                        #   in Loop: Header=BB241_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_66
.LBB241_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB241_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB241_155
.LBB241_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB241_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB241_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB241_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB241_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB241_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB241_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB241_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB241_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB241_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB241_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_83:                             # %if.end307
                                        #   in Loop: Header=BB241_77 Depth=1
	jmp	.LBB241_84
.LBB241_84:                             # %if.end308
                                        #   in Loop: Header=BB241_77 Depth=1
	jmp	.LBB241_85
.LBB241_85:                             # %if.end309
                                        #   in Loop: Header=BB241_77 Depth=1
	jmp	.LBB241_86
.LBB241_86:                             # %for.inc310
                                        #   in Loop: Header=BB241_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_77
.LBB241_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB241_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB241_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB241_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB241_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB241_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB241_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB241_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB241_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB241_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_94:                             # %if.end354
                                        #   in Loop: Header=BB241_88 Depth=1
	jmp	.LBB241_95
.LBB241_95:                             # %if.end355
                                        #   in Loop: Header=BB241_88 Depth=1
	jmp	.LBB241_96
.LBB241_96:                             # %if.end356
                                        #   in Loop: Header=BB241_88 Depth=1
	jmp	.LBB241_97
.LBB241_97:                             # %for.inc357
                                        #   in Loop: Header=BB241_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_88
.LBB241_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB241_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB241_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB241_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB241_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_99
.LBB241_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB241_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB241_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB241_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB241_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_103
.LBB241_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB241_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB241_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB241_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB241_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB241_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB241_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_111:                            # %if.end428
                                        #   in Loop: Header=BB241_107 Depth=1
	jmp	.LBB241_112
.LBB241_112:                            # %if.end429
                                        #   in Loop: Header=BB241_107 Depth=1
	jmp	.LBB241_113
.LBB241_113:                            # %for.inc430
                                        #   in Loop: Header=BB241_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_107
.LBB241_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB241_154
.LBB241_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB241_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB241_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB241_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB241_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB241_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB241_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB241_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB241_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB241_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB241_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB241_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB241_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_126:                            # %if.end480
                                        #   in Loop: Header=BB241_122 Depth=1
	jmp	.LBB241_127
.LBB241_127:                            # %if.end481
                                        #   in Loop: Header=BB241_122 Depth=1
	jmp	.LBB241_128
.LBB241_128:                            # %for.inc482
                                        #   in Loop: Header=BB241_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_122
.LBB241_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB241_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB241_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB241_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB241_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB241_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB241_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB241_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB241_134:                            # %if.end507
                                        #   in Loop: Header=BB241_130 Depth=1
	jmp	.LBB241_135
.LBB241_135:                            # %if.end508
                                        #   in Loop: Header=BB241_130 Depth=1
	jmp	.LBB241_136
.LBB241_136:                            # %for.inc509
                                        #   in Loop: Header=BB241_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_130
.LBB241_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB241_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB241_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB241_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB241_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_138
.LBB241_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB241_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB241_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB241_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB241_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_142
.LBB241_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB241_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB241_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB241_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB241_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB241_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB241_149:                            # %if.end566
                                        #   in Loop: Header=BB241_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB241_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB241_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB241_151:                            # %if.end583
                                        #   in Loop: Header=BB241_146 Depth=1
	jmp	.LBB241_152
.LBB241_152:                            # %for.inc584
                                        #   in Loop: Header=BB241_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_146
.LBB241_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB241_154:                            # %if.end588
	jmp	.LBB241_155
.LBB241_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB241_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB241_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB241_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB241_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB241_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB241_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB241_158 Depth=1
	movl	$1, -72(%rbp)
.LBB241_161:                            # %if.end607
                                        #   in Loop: Header=BB241_158 Depth=1
	jmp	.LBB241_162
.LBB241_162:                            # %for.inc608
                                        #   in Loop: Header=BB241_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_158
.LBB241_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB241_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB241_165:                            # %if.end617
	jmp	.LBB241_166
.LBB241_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB241_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB241_169
.LBB241_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB241_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB241_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB241_172
.LBB241_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB241_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB241_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB241_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB241_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB241_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_173
.LBB241_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB241_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB241_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB241_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB241_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_177
.LBB241_180:                            # %for.end646.loopexit
	jmp	.LBB241_181
.LBB241_181:                            # %for.end646
	cmpl	$517262165, -76(%rbp)   # imm = 0x1ED4CB55
	jne	.LBB241_183
.LBB241_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_182
.Lfunc_end241:
	.size	init_lists.178, .Lfunc_end241-init_lists.178
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.179
	.type	idr_memory_management.179,@function
idr_memory_management.179:              # @idr_memory_management.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$991450138, -20(%rbp)   # imm = 0x3B18541A
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB242_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB242_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB242_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB242_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB242_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_2
.LBB242_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB242_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB242_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB242_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB242_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_6
.LBB242_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB242_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB242_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB242_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB242_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_10
.LBB242_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB242_15
.LBB242_14:                             # %if.else
	callq	flush_dpb
.LBB242_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB242_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB242_18
.LBB242_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB242_18:                             # %if.end23
	cmpl	$991450138, -20(%rbp)   # imm = 0x3B18541A
	jne	.LBB242_20
.LBB242_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_19
.Lfunc_end242:
	.size	idr_memory_management.179, .Lfunc_end242-idr_memory_management.179
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.180  # -- Begin function fill_frame_num_gap.180
	.p2align	4, 0x90
	.type	fill_frame_num_gap.180,@function
fill_frame_num_gap.180:                 # @fill_frame_num_gap.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$959196729, -36(%rbp)   # imm = 0x392C2E39
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB243_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB243_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB243_1
.LBB243_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$959196729, -36(%rbp)   # imm = 0x392C2E39
	jne	.LBB243_5
.LBB243_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_4
.Lfunc_end243:
	.size	fill_frame_num_gap.180, .Lfunc_end243-fill_frame_num_gap.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.181
	.type	compare_fs_by_frame_num_desc.181,@function
compare_fs_by_frame_num_desc.181:       # @compare_fs_by_frame_num_desc.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$919484199, -16(%rbp)   # imm = 0x36CE3727
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB244_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB244_5
.LBB244_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB244_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB244_5
.LBB244_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB244_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$919484199, -16(%rbp)   # imm = 0x36CE3727
	jne	.LBB244_7
.LBB244_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_6
.Lfunc_end244:
	.size	compare_fs_by_frame_num_desc.181, .Lfunc_end244-compare_fs_by_frame_num_desc.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.182
	.type	compare_fs_by_frame_num_desc.182,@function
compare_fs_by_frame_num_desc.182:       # @compare_fs_by_frame_num_desc.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1386030874, -16(%rbp)  # imm = 0x529D271A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB245_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB245_5
.LBB245_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB245_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB245_5
.LBB245_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB245_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1386030874, -16(%rbp)  # imm = 0x529D271A
	jne	.LBB245_7
.LBB245_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_6
.Lfunc_end245:
	.size	compare_fs_by_frame_num_desc.182, .Lfunc_end245-compare_fs_by_frame_num_desc.182
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.183
	.type	gen_pic_list_from_frame_list.183,@function
gen_pic_list_from_frame_list.183:       # @gen_pic_list_from_frame_list.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1744238220, -64(%rbp)  # imm = 0x67F6F68C
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB246_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB246_3
.LBB246_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB246_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB246_28
# %bb.4:                                # %if.then1
	jmp	.LBB246_5
.LBB246_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_9 Depth 2
                                        #     Child Loop BB246_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB246_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB246_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB246_7:                              # %lor.end
                                        #   in Loop: Header=BB246_5 Depth=1
	testb	$1, %al
	jne	.LBB246_8
	jmp	.LBB246_27
.LBB246_8:                              # %while.body
                                        #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_9
.LBB246_9:                              # %for.cond
                                        #   Parent Loop BB246_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB246_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB246_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB246_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB246_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB246_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB246_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB246_17
.LBB246_13:                             # %if.end17
                                        #   in Loop: Header=BB246_9 Depth=2
	jmp	.LBB246_14
.LBB246_14:                             # %if.end18
                                        #   in Loop: Header=BB246_9 Depth=2
	jmp	.LBB246_15
.LBB246_15:                             # %for.inc
                                        #   in Loop: Header=BB246_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB246_9
.LBB246_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_17
.LBB246_17:                             # %for.end
                                        #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_18
.LBB246_18:                             # %for.cond20
                                        #   Parent Loop BB246_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB246_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB246_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB246_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB246_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB246_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB246_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB246_26
.LBB246_22:                             # %if.end41
                                        #   in Loop: Header=BB246_18 Depth=2
	jmp	.LBB246_23
.LBB246_23:                             # %if.end42
                                        #   in Loop: Header=BB246_18 Depth=2
	jmp	.LBB246_24
.LBB246_24:                             # %for.inc43
                                        #   in Loop: Header=BB246_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB246_18
.LBB246_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_26
.LBB246_26:                             # %for.end45
                                        #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_5
.LBB246_27:                             # %while.end
	jmp	.LBB246_28
.LBB246_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB246_53
# %bb.29:                               # %if.then48
	jmp	.LBB246_30
.LBB246_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_34 Depth 2
                                        #     Child Loop BB246_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB246_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB246_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB246_32:                             # %lor.end53
                                        #   in Loop: Header=BB246_30 Depth=1
	testb	$1, %al
	jne	.LBB246_33
	jmp	.LBB246_52
.LBB246_33:                             # %while.body54
                                        #   in Loop: Header=BB246_30 Depth=1
	jmp	.LBB246_34
.LBB246_34:                             # %for.cond55
                                        #   Parent Loop BB246_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB246_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB246_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB246_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB246_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB246_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB246_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB246_42
.LBB246_38:                             # %if.end77
                                        #   in Loop: Header=BB246_34 Depth=2
	jmp	.LBB246_39
.LBB246_39:                             # %if.end78
                                        #   in Loop: Header=BB246_34 Depth=2
	jmp	.LBB246_40
.LBB246_40:                             # %for.inc79
                                        #   in Loop: Header=BB246_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB246_34
.LBB246_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB246_30 Depth=1
	jmp	.LBB246_42
.LBB246_42:                             # %for.end81
                                        #   in Loop: Header=BB246_30 Depth=1
	jmp	.LBB246_43
.LBB246_43:                             # %for.cond82
                                        #   Parent Loop BB246_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB246_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB246_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB246_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB246_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB246_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB246_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB246_51
.LBB246_47:                             # %if.end104
                                        #   in Loop: Header=BB246_43 Depth=2
	jmp	.LBB246_48
.LBB246_48:                             # %if.end105
                                        #   in Loop: Header=BB246_43 Depth=2
	jmp	.LBB246_49
.LBB246_49:                             # %for.inc106
                                        #   in Loop: Header=BB246_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB246_43
.LBB246_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB246_30 Depth=1
	jmp	.LBB246_51
.LBB246_51:                             # %for.end108
                                        #   in Loop: Header=BB246_30 Depth=1
	jmp	.LBB246_30
.LBB246_52:                             # %while.end109
	jmp	.LBB246_53
.LBB246_53:                             # %if.end110
	cmpl	$1744238220, -64(%rbp)  # imm = 0x67F6F68C
	jne	.LBB246_55
.LBB246_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_54
.Lfunc_end246:
	.size	gen_pic_list_from_frame_list.183, .Lfunc_end246-gen_pic_list_from_frame_list.183
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.184 # -- Begin function store_picture_in_dpb.184
	.p2align	4, 0x90
	.type	store_picture_in_dpb.184,@function
store_picture_in_dpb.184:               # @store_picture_in_dpb.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1359777452, -24(%rbp)  # imm = 0x510C8EAC
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB247_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB247_6
.LBB247_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB247_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB247_5:                              # %if.end
	jmp	.LBB247_6
.LBB247_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB247_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB247_23
.LBB247_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB247_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB247_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB247_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB247_14
.LBB247_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB247_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB247_20
.LBB247_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB247_18
.LBB247_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB247_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB247_19
.LBB247_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB247_50
.LBB247_19:                             # %if.end48
	jmp	.LBB247_20
.LBB247_20:                             # %if.end49
	jmp	.LBB247_21
.LBB247_21:                             # %if.end50
	jmp	.LBB247_22
.LBB247_22:                             # %if.end51
	jmp	.LBB247_23
.LBB247_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB247_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB247_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB247_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB247_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB247_29:                             # %if.end67
	jmp	.LBB247_30
.LBB247_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB247_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB247_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB247_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB247_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB247_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB247_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB247_35
.LBB247_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB247_50
.LBB247_35:                             # %if.end80
                                        #   in Loop: Header=BB247_30 Depth=1
	jmp	.LBB247_36
.LBB247_36:                             # %if.end81
                                        #   in Loop: Header=BB247_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB247_30
.LBB247_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB247_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB247_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB247_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB247_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB247_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB247_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB247_43:                             # %if.end94
                                        #   in Loop: Header=BB247_40 Depth=1
	jmp	.LBB247_44
.LBB247_44:                             # %for.inc
                                        #   in Loop: Header=BB247_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB247_40
.LBB247_45:                             # %for.end
	jmp	.LBB247_46
.LBB247_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB247_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB247_49
.LBB247_48:                             # %if.else104
	movq	$0, dpb+56
.LBB247_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB247_50:                             # %return
	cmpl	$1359777452, -24(%rbp)  # imm = 0x510C8EAC
	jne	.LBB247_52
.LBB247_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_51
.Lfunc_end247:
	.size	store_picture_in_dpb.184, .Lfunc_end247-store_picture_in_dpb.184
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.185
	.type	remove_frame_from_dpb.185,@function
remove_frame_from_dpb.185:              # @remove_frame_from_dpb.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$935332225, -20(%rbp)   # imm = 0x37C00981
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB248_6
# %bb.1:                                # %entry
	movq	.LJTI248_0(,%rax,8), %rax
	jmpq	*%rax
.LBB248_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB248_7
.LBB248_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB248_7
.LBB248_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB248_7
.LBB248_5:                              # %sw.bb10
	jmp	.LBB248_7
.LBB248_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB248_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB248_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB248_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB248_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB248_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_8
.LBB248_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$935332225, -20(%rbp)   # imm = 0x37C00981
	jne	.LBB248_13
.LBB248_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_12
.Lfunc_end248:
	.size	remove_frame_from_dpb.185, .Lfunc_end248-remove_frame_from_dpb.185
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI248_0:
	.quad	.LBB248_5
	.quad	.LBB248_4
	.quad	.LBB248_3
	.quad	.LBB248_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function reorder_long_term.186
	.type	reorder_long_term.186,@function
reorder_long_term.186:                  # @reorder_long_term.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1997850361, -44(%rbp)  # imm = 0x7714C6F9
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB249_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB249_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB249_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB249_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_1
.LBB249_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB249_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB249_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB249_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB249_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB249_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB249_9
.LBB249_8:                              # %if.then
                                        #   in Loop: Header=BB249_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB249_9:                              # %if.end
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_10
.LBB249_10:                             # %for.inc19
                                        #   in Loop: Header=BB249_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_5
.LBB249_11:                             # %for.end21
	cmpl	$1997850361, -44(%rbp)  # imm = 0x7714C6F9
	jne	.LBB249_13
.LBB249_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_12
.Lfunc_end249:
	.size	reorder_long_term.186, .Lfunc_end249-reorder_long_term.186
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.187
	.type	compare_pic_by_poc_desc.187,@function
compare_pic_by_poc_desc.187:            # @compare_pic_by_poc_desc.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$802127037, -16(%rbp)   # imm = 0x2FCF7CBD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB250_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB250_5
.LBB250_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB250_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB250_5
.LBB250_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB250_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$802127037, -16(%rbp)   # imm = 0x2FCF7CBD
	jne	.LBB250_7
.LBB250_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_6
.Lfunc_end250:
	.size	compare_pic_by_poc_desc.187, .Lfunc_end250-compare_pic_by_poc_desc.187
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.188
	.type	compare_pic_by_poc_asc.188,@function
compare_pic_by_poc_asc.188:             # @compare_pic_by_poc_asc.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$798249521, -16(%rbp)   # imm = 0x2F945231
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB251_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB251_5
.LBB251_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB251_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB251_5
.LBB251_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB251_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$798249521, -16(%rbp)   # imm = 0x2F945231
	jne	.LBB251_7
.LBB251_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_6
.Lfunc_end251:
	.size	compare_pic_by_poc_asc.188, .Lfunc_end251-compare_pic_by_poc_asc.188
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.189
	.type	reorder_short_term.189,@function
reorder_short_term.189:                 # @reorder_short_term.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1680536595, -44(%rbp)  # imm = 0x642AF413
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB252_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB252_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB252_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB252_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_1
.LBB252_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB252_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB252_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB252_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB252_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB252_10
.LBB252_9:                              # %if.then17
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB252_10:                             # %if.end
                                        #   in Loop: Header=BB252_5 Depth=1
	jmp	.LBB252_11
.LBB252_11:                             # %if.end23
                                        #   in Loop: Header=BB252_5 Depth=1
	jmp	.LBB252_12
.LBB252_12:                             # %for.inc24
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_5
.LBB252_13:                             # %for.end26
	cmpl	$1680536595, -44(%rbp)  # imm = 0x642AF413
	jne	.LBB252_15
.LBB252_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_14
.Lfunc_end252:
	.size	reorder_short_term.189, .Lfunc_end252-reorder_short_term.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.190
	.type	compare_fs_by_poc_desc.190,@function
compare_fs_by_poc_desc.190:             # @compare_fs_by_poc_desc.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1773270374, -16(%rbp)  # imm = 0x69B1F566
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB253_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB253_5
.LBB253_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB253_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB253_5
.LBB253_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB253_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1773270374, -16(%rbp)  # imm = 0x69B1F566
	jne	.LBB253_7
.LBB253_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_6
.Lfunc_end253:
	.size	compare_fs_by_poc_desc.190, .Lfunc_end253-compare_fs_by_poc_desc.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.191
	.type	gen_pic_list_from_frame_list.191,@function
gen_pic_list_from_frame_list.191:       # @gen_pic_list_from_frame_list.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$170364533, -64(%rbp)   # imm = 0xA278E75
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB254_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB254_3
.LBB254_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB254_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB254_28
# %bb.4:                                # %if.then1
	jmp	.LBB254_5
.LBB254_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_9 Depth 2
                                        #     Child Loop BB254_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB254_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB254_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB254_7:                              # %lor.end
                                        #   in Loop: Header=BB254_5 Depth=1
	testb	$1, %al
	jne	.LBB254_8
	jmp	.LBB254_27
.LBB254_8:                              # %while.body
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_9
.LBB254_9:                              # %for.cond
                                        #   Parent Loop BB254_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB254_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB254_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB254_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB254_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB254_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB254_17
.LBB254_13:                             # %if.end17
                                        #   in Loop: Header=BB254_9 Depth=2
	jmp	.LBB254_14
.LBB254_14:                             # %if.end18
                                        #   in Loop: Header=BB254_9 Depth=2
	jmp	.LBB254_15
.LBB254_15:                             # %for.inc
                                        #   in Loop: Header=BB254_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB254_9
.LBB254_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_17
.LBB254_17:                             # %for.end
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_18
.LBB254_18:                             # %for.cond20
                                        #   Parent Loop BB254_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB254_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB254_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB254_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB254_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB254_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_26
.LBB254_22:                             # %if.end41
                                        #   in Loop: Header=BB254_18 Depth=2
	jmp	.LBB254_23
.LBB254_23:                             # %if.end42
                                        #   in Loop: Header=BB254_18 Depth=2
	jmp	.LBB254_24
.LBB254_24:                             # %for.inc43
                                        #   in Loop: Header=BB254_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_18
.LBB254_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_26
.LBB254_26:                             # %for.end45
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_5
.LBB254_27:                             # %while.end
	jmp	.LBB254_28
.LBB254_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB254_53
# %bb.29:                               # %if.then48
	jmp	.LBB254_30
.LBB254_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_34 Depth 2
                                        #     Child Loop BB254_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB254_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB254_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB254_32:                             # %lor.end53
                                        #   in Loop: Header=BB254_30 Depth=1
	testb	$1, %al
	jne	.LBB254_33
	jmp	.LBB254_52
.LBB254_33:                             # %while.body54
                                        #   in Loop: Header=BB254_30 Depth=1
	jmp	.LBB254_34
.LBB254_34:                             # %for.cond55
                                        #   Parent Loop BB254_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB254_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB254_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB254_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB254_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB254_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB254_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_42
.LBB254_38:                             # %if.end77
                                        #   in Loop: Header=BB254_34 Depth=2
	jmp	.LBB254_39
.LBB254_39:                             # %if.end78
                                        #   in Loop: Header=BB254_34 Depth=2
	jmp	.LBB254_40
.LBB254_40:                             # %for.inc79
                                        #   in Loop: Header=BB254_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_34
.LBB254_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB254_30 Depth=1
	jmp	.LBB254_42
.LBB254_42:                             # %for.end81
                                        #   in Loop: Header=BB254_30 Depth=1
	jmp	.LBB254_43
.LBB254_43:                             # %for.cond82
                                        #   Parent Loop BB254_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB254_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB254_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB254_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB254_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB254_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB254_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB254_51
.LBB254_47:                             # %if.end104
                                        #   in Loop: Header=BB254_43 Depth=2
	jmp	.LBB254_48
.LBB254_48:                             # %if.end105
                                        #   in Loop: Header=BB254_43 Depth=2
	jmp	.LBB254_49
.LBB254_49:                             # %for.inc106
                                        #   in Loop: Header=BB254_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB254_43
.LBB254_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB254_30 Depth=1
	jmp	.LBB254_51
.LBB254_51:                             # %for.end108
                                        #   in Loop: Header=BB254_30 Depth=1
	jmp	.LBB254_30
.LBB254_52:                             # %while.end109
	jmp	.LBB254_53
.LBB254_53:                             # %if.end110
	cmpl	$170364533, -64(%rbp)   # imm = 0xA278E75
	jne	.LBB254_55
.LBB254_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_54
.Lfunc_end254:
	.size	gen_pic_list_from_frame_list.191, .Lfunc_end254-gen_pic_list_from_frame_list.191
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.192
	.type	compare_pic_by_poc_desc.192,@function
compare_pic_by_poc_desc.192:            # @compare_pic_by_poc_desc.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$291384004, -16(%rbp)   # imm = 0x115E2AC4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB255_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB255_5
.LBB255_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB255_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB255_5
.LBB255_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB255_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$291384004, -16(%rbp)   # imm = 0x115E2AC4
	jne	.LBB255_7
.LBB255_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_6
.Lfunc_end255:
	.size	compare_pic_by_poc_desc.192, .Lfunc_end255-compare_pic_by_poc_desc.192
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.193     # -- Begin function dpb_split_field.193
	.p2align	4, 0x90
	.type	dpb_split_field.193,@function
dpb_split_field.193:                    # @dpb_split_field.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1201809926, -80(%rbp)  # imm = 0x47A22A06
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB256_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB256_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB256_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB256_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_2
.LBB256_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB256_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB256_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB256_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_6
.LBB256_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB256_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB256_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB256_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_10
.LBB256_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB256_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB256_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB256_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_14
.LBB256_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB256_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB256_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB256_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB256_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB256_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_19
.LBB256_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB256_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB256_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB256_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB256_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_23
.LBB256_26:                             # %for.end328
	jmp	.LBB256_27
.LBB256_27:                             # %if.end
	jmp	.LBB256_29
.LBB256_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB256_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB256_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB256_30 Depth=1
	movl	$0, -4(%rbp)
.LBB256_32:                             # %for.cond343
                                        #   Parent Loop BB256_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB256_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB256_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB256_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB256_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB256_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB256_38
.LBB256_37:                             # %cond.false
                                        #   in Loop: Header=BB256_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_38
.LBB256_38:                             # %cond.end
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB256_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB256_41
.LBB256_40:                             # %cond.false415
                                        #   in Loop: Header=BB256_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_41
.LBB256_41:                             # %cond.end416
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB256_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB256_44
.LBB256_43:                             # %cond.false436
                                        #   in Loop: Header=BB256_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_44
.LBB256_44:                             # %cond.end437
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB256_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB256_47
.LBB256_46:                             # %cond.false456
                                        #   in Loop: Header=BB256_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_47
.LBB256_47:                             # %cond.end457
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB256_55
.LBB256_48:                             # %if.else466
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB256_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB256_51
.LBB256_50:                             # %cond.false491
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB256_51
.LBB256_51:                             # %cond.end492
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB256_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB256_54
.LBB256_53:                             # %cond.false509
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB256_54
.LBB256_54:                             # %cond.end510
                                        #   in Loop: Header=BB256_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_55:                             # %if.end519
                                        #   in Loop: Header=BB256_32 Depth=2
	jmp	.LBB256_56
.LBB256_56:                             # %for.inc520
                                        #   in Loop: Header=BB256_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_32
.LBB256_57:                             # %for.end522
                                        #   in Loop: Header=BB256_30 Depth=1
	jmp	.LBB256_58
.LBB256_58:                             # %for.inc523
                                        #   in Loop: Header=BB256_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_30
.LBB256_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB256_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB256_73
.LBB256_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB256_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB256_62 Depth=1
	movl	$0, -8(%rbp)
.LBB256_64:                             # %for.cond538
                                        #   Parent Loop BB256_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB256_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB256_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB256_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB256_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB256_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_68:                             # %if.end908
                                        #   in Loop: Header=BB256_64 Depth=2
	jmp	.LBB256_69
.LBB256_69:                             # %for.inc909
                                        #   in Loop: Header=BB256_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_64
.LBB256_70:                             # %for.end911
                                        #   in Loop: Header=BB256_62 Depth=1
	jmp	.LBB256_71
.LBB256_71:                             # %for.inc912
                                        #   in Loop: Header=BB256_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_62
.LBB256_72:                             # %for.end914
	jmp	.LBB256_73
.LBB256_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB256_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB256_74 Depth=1
	movl	$0, -8(%rbp)
.LBB256_76:                             # %for.cond923
                                        #   Parent Loop BB256_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB256_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB256_148
.LBB256_79:                             # %if.then954
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB256_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_83
.LBB256_82:                             # %cond.false991
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_83:                             # %cond.end993
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_86
.LBB256_85:                             # %cond.false1001
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_86:                             # %cond.end1003
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_89
.LBB256_88:                             # %cond.false1032
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_89:                             # %cond.end1034
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_92
.LBB256_91:                             # %cond.false1042
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_92:                             # %cond.end1044
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_95
.LBB256_94:                             # %cond.false1073
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_95:                             # %cond.end1075
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_98
.LBB256_97:                             # %cond.false1083
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_98:                             # %cond.end1085
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_101
.LBB256_100:                            # %cond.false1114
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_101:                            # %cond.end1116
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_104
.LBB256_103:                            # %cond.false1124
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_104:                            # %cond.end1126
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_107
.LBB256_106:                            # %cond.false1155
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_107:                            # %cond.end1157
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_110
.LBB256_109:                            # %cond.false1165
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_110:                            # %cond.end1167
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB256_125
.LBB256_112:                            # %if.else1190
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_115
.LBB256_114:                            # %cond.false1198
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_115:                            # %cond.end1200
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_118
.LBB256_117:                            # %cond.false1208
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_118:                            # %cond.end1210
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB256_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB256_121
.LBB256_120:                            # %cond.false1237
                                        #   in Loop: Header=BB256_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_121
.LBB256_121:                            # %cond.end1238
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB256_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB256_124
.LBB256_123:                            # %cond.false1254
                                        #   in Loop: Header=BB256_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_124
.LBB256_124:                            # %cond.end1255
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_125:                            # %if.end1264
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_128
.LBB256_127:                            # %cond.false1272
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_128:                            # %cond.end1274
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_131
.LBB256_130:                            # %cond.false1282
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_131:                            # %cond.end1284
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB256_146
.LBB256_133:                            # %if.else1307
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_136
.LBB256_135:                            # %cond.false1315
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_136:                            # %cond.end1317
                                        #   in Loop: Header=BB256_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_139
.LBB256_138:                            # %cond.false1325
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_139:                            # %cond.end1327
                                        #   in Loop: Header=BB256_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB256_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB256_142
.LBB256_141:                            # %cond.false1355
                                        #   in Loop: Header=BB256_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_142
.LBB256_142:                            # %cond.end1356
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB256_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB256_145
.LBB256_144:                            # %cond.false1373
                                        #   in Loop: Header=BB256_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_145
.LBB256_145:                            # %cond.end1374
                                        #   in Loop: Header=BB256_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_146:                            # %if.end1383
                                        #   in Loop: Header=BB256_76 Depth=2
	jmp	.LBB256_147
.LBB256_147:                            # %if.end1384
                                        #   in Loop: Header=BB256_76 Depth=2
	jmp	.LBB256_148
.LBB256_148:                            # %if.end1385
                                        #   in Loop: Header=BB256_76 Depth=2
	jmp	.LBB256_149
.LBB256_149:                            # %for.inc1386
                                        #   in Loop: Header=BB256_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_76
.LBB256_150:                            # %for.end1388
                                        #   in Loop: Header=BB256_74 Depth=1
	jmp	.LBB256_151
.LBB256_151:                            # %for.inc1389
                                        #   in Loop: Header=BB256_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_74
.LBB256_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB256_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB256_153 Depth=1
	movl	$0, -4(%rbp)
.LBB256_155:                            # %for.cond1399
                                        #   Parent Loop BB256_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB256_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB256_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_155
.LBB256_158:                            # %for.end1414
                                        #   in Loop: Header=BB256_153 Depth=1
	jmp	.LBB256_159
.LBB256_159:                            # %for.inc1415
                                        #   in Loop: Header=BB256_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_153
.LBB256_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB256_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB256_174
.LBB256_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB256_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB256_163 Depth=1
	movl	$0, -4(%rbp)
.LBB256_165:                            # %for.cond1431
                                        #   Parent Loop BB256_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB256_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB256_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB256_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB256_169
.LBB256_168:                            # %cond.false1462
                                        #   in Loop: Header=BB256_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB256_169
.LBB256_169:                            # %cond.end1463
                                        #   in Loop: Header=BB256_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB256_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_165
.LBB256_171:                            # %for.end1474
                                        #   in Loop: Header=BB256_163 Depth=1
	jmp	.LBB256_172
.LBB256_172:                            # %for.inc1475
                                        #   in Loop: Header=BB256_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_163
.LBB256_173:                            # %for.end1477
	jmp	.LBB256_174
.LBB256_174:                            # %if.end1478
	cmpl	$1201809926, -80(%rbp)  # imm = 0x47A22A06
	jne	.LBB256_176
.LBB256_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_175
.Lfunc_end256:
	.size	dpb_split_field.193, .Lfunc_end256-dpb_split_field.193
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.194
	.type	mark_pic_long_term.194,@function
mark_pic_long_term.194:                 # @mark_pic_long_term.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1295011959, -24(%rbp)  # imm = 0x4D305077
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB257_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB257_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB257_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB257_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB257_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB257_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB257_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB257_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB257_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB257_39
.LBB257_7:                              # %if.end
                                        #   in Loop: Header=BB257_2 Depth=1
	jmp	.LBB257_8
.LBB257_8:                              # %if.end50
                                        #   in Loop: Header=BB257_2 Depth=1
	jmp	.LBB257_9
.LBB257_9:                              # %for.inc
                                        #   in Loop: Header=BB257_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_2
.LBB257_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB257_39
.LBB257_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB257_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB257_14
.LBB257_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB257_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB257_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB257_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB257_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB257_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB257_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB257_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB257_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB257_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB257_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB257_24:                             # %if.end123
	jmp	.LBB257_39
.LBB257_25:                             # %if.end124
                                        #   in Loop: Header=BB257_15 Depth=1
	jmp	.LBB257_26
.LBB257_26:                             # %if.end125
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB257_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB257_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB257_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB257_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB257_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB257_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB257_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB257_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB257_34:                             # %if.end194
	jmp	.LBB257_39
.LBB257_35:                             # %if.end195
                                        #   in Loop: Header=BB257_15 Depth=1
	jmp	.LBB257_36
.LBB257_36:                             # %if.end196
                                        #   in Loop: Header=BB257_15 Depth=1
	jmp	.LBB257_37
.LBB257_37:                             # %for.inc197
                                        #   in Loop: Header=BB257_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_15
.LBB257_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB257_39:                             # %if.end201
	cmpl	$1295011959, -24(%rbp)  # imm = 0x4D305077
	jne	.LBB257_41
.LBB257_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_40
.Lfunc_end257:
	.size	mark_pic_long_term.194, .Lfunc_end257-mark_pic_long_term.194
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.195
	.type	compare_fs_by_poc_desc.195,@function
compare_fs_by_poc_desc.195:             # @compare_fs_by_poc_desc.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$62788039, -16(%rbp)    # imm = 0x3BE11C7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB258_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB258_5
.LBB258_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB258_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB258_5
.LBB258_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB258_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$62788039, -16(%rbp)    # imm = 0x3BE11C7
	jne	.LBB258_7
.LBB258_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_6
.Lfunc_end258:
	.size	compare_fs_by_poc_desc.195, .Lfunc_end258-compare_fs_by_poc_desc.195
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.196
	.type	compare_fs_by_poc_desc.196,@function
compare_fs_by_poc_desc.196:             # @compare_fs_by_poc_desc.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$638915755, -16(%rbp)   # imm = 0x261514AB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB259_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB259_5
.LBB259_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB259_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB259_5
.LBB259_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB259_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$638915755, -16(%rbp)   # imm = 0x261514AB
	jne	.LBB259_7
.LBB259_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_6
.Lfunc_end259:
	.size	compare_fs_by_poc_desc.196, .Lfunc_end259-compare_fs_by_poc_desc.196
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.197 # -- Begin function replace_top_pic_with_frame.197
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.197,@function
replace_top_pic_with_frame.197:         # @replace_top_pic_with_frame.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$218733413, -32(%rbp)   # imm = 0xD099B65
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB260_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB260_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB260_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB260_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB260_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB260_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB260_10
.LBB260_7:                              # %if.end14
                                        #   in Loop: Header=BB260_3 Depth=1
	jmp	.LBB260_8
.LBB260_8:                              # %for.inc
                                        #   in Loop: Header=BB260_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_3
.LBB260_9:                              # %for.end.loopexit
	jmp	.LBB260_10
.LBB260_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB260_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB260_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB260_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB260_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB260_15:                             # %if.end26
	jmp	.LBB260_16
.LBB260_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$218733413, -32(%rbp)   # imm = 0xD099B65
	jne	.LBB260_18
.LBB260_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_17
.Lfunc_end260:
	.size	replace_top_pic_with_frame.197, .Lfunc_end260-replace_top_pic_with_frame.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.198
	.type	get_smallest_poc.198,@function
get_smallest_poc.198:                   # @get_smallest_poc.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$770234935, -20(%rbp)   # imm = 0x2DE8DA37
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB261_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB261_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB261_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB261_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB261_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB261_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB261_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB261_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB261_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB261_7:                              # %if.end10
                                        #   in Loop: Header=BB261_3 Depth=1
	jmp	.LBB261_8
.LBB261_8:                              # %for.inc
                                        #   in Loop: Header=BB261_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_3
.LBB261_9:                              # %for.end
	cmpl	$770234935, -20(%rbp)   # imm = 0x2DE8DA37
	jne	.LBB261_11
.LBB261_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_10
.Lfunc_end261:
	.size	get_smallest_poc.198, .Lfunc_end261-get_smallest_poc.198
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.199
	.type	reorder_short_term.199,@function
reorder_short_term.199:                 # @reorder_short_term.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1236836177, -44(%rbp)  # imm = 0x49B89F51
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB262_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB262_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB262_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB262_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_1
.LBB262_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB262_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB262_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB262_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB262_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB262_10
.LBB262_9:                              # %if.then17
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB262_10:                             # %if.end
                                        #   in Loop: Header=BB262_5 Depth=1
	jmp	.LBB262_11
.LBB262_11:                             # %if.end23
                                        #   in Loop: Header=BB262_5 Depth=1
	jmp	.LBB262_12
.LBB262_12:                             # %for.inc24
                                        #   in Loop: Header=BB262_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_5
.LBB262_13:                             # %for.end26
	cmpl	$1236836177, -44(%rbp)  # imm = 0x49B89F51
	jne	.LBB262_15
.LBB262_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_14
.Lfunc_end262:
	.size	reorder_short_term.199, .Lfunc_end262-reorder_short_term.199
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.200
	.type	compare_fs_by_lt_pic_idx_asc.200,@function
compare_fs_by_lt_pic_idx_asc.200:       # @compare_fs_by_lt_pic_idx_asc.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1496326680, -16(%rbp)  # imm = 0x59302218
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB263_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB263_5
.LBB263_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB263_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB263_5
.LBB263_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB263_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1496326680, -16(%rbp)  # imm = 0x59302218
	jne	.LBB263_7
.LBB263_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_6
.Lfunc_end263:
	.size	compare_fs_by_lt_pic_idx_asc.200, .Lfunc_end263-compare_fs_by_lt_pic_idx_asc.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.201
	.type	mark_pic_long_term.201,@function
mark_pic_long_term.201:                 # @mark_pic_long_term.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$309229745, -24(%rbp)   # imm = 0x126E78B1
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB264_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB264_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB264_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB264_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB264_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB264_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB264_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB264_39
.LBB264_7:                              # %if.end
                                        #   in Loop: Header=BB264_2 Depth=1
	jmp	.LBB264_8
.LBB264_8:                              # %if.end50
                                        #   in Loop: Header=BB264_2 Depth=1
	jmp	.LBB264_9
.LBB264_9:                              # %for.inc
                                        #   in Loop: Header=BB264_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB264_2
.LBB264_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB264_39
.LBB264_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB264_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB264_14
.LBB264_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB264_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB264_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB264_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB264_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB264_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB264_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB264_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB264_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB264_24:                             # %if.end123
	jmp	.LBB264_39
.LBB264_25:                             # %if.end124
                                        #   in Loop: Header=BB264_15 Depth=1
	jmp	.LBB264_26
.LBB264_26:                             # %if.end125
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB264_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB264_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB264_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB264_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB264_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB264_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB264_34:                             # %if.end194
	jmp	.LBB264_39
.LBB264_35:                             # %if.end195
                                        #   in Loop: Header=BB264_15 Depth=1
	jmp	.LBB264_36
.LBB264_36:                             # %if.end196
                                        #   in Loop: Header=BB264_15 Depth=1
	jmp	.LBB264_37
.LBB264_37:                             # %for.inc197
                                        #   in Loop: Header=BB264_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB264_15
.LBB264_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB264_39:                             # %if.end201
	cmpl	$309229745, -24(%rbp)   # imm = 0x126E78B1
	jne	.LBB264_41
.LBB264_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_40
.Lfunc_end264:
	.size	mark_pic_long_term.201, .Lfunc_end264-mark_pic_long_term.201
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.202          # -- Begin function init_lists.202
	.p2align	4, 0x90
	.type	init_lists.202,@function
init_lists.202:                         # @init_lists.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$432289828, -76(%rbp)   # imm = 0x19C43824
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB265_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB265_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB265_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB265_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB265_9
.LBB265_8:                              # %if.else
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB265_9:                              # %if.end
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB265_10:                             # %if.end36
                                        #   in Loop: Header=BB265_2 Depth=1
	jmp	.LBB265_11
.LBB265_11:                             # %if.end37
                                        #   in Loop: Header=BB265_2 Depth=1
	jmp	.LBB265_12
.LBB265_12:                             # %for.inc
                                        #   in Loop: Header=BB265_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_2
.LBB265_13:                             # %for.end
	jmp	.LBB265_31
.LBB265_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB265_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB265_17
.LBB265_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB265_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB265_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB265_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB265_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB265_23
.LBB265_22:                             # %if.else63
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB265_23:                             # %if.end70
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB265_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB265_25:                             # %if.end83
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB265_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB265_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB265_27:                             # %if.end98
                                        #   in Loop: Header=BB265_18 Depth=1
	jmp	.LBB265_28
.LBB265_28:                             # %if.end99
                                        #   in Loop: Header=BB265_18 Depth=1
	jmp	.LBB265_29
.LBB265_29:                             # %for.inc100
                                        #   in Loop: Header=BB265_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_18
.LBB265_30:                             # %for.end102
	jmp	.LBB265_31
.LBB265_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB265_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB265_34
.LBB265_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB265_181
.LBB265_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB265_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB265_75
.LBB265_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB265_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB265_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB265_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB265_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB265_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB265_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB265_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_43:                             # %if.end140
                                        #   in Loop: Header=BB265_38 Depth=1
	jmp	.LBB265_44
.LBB265_44:                             # %if.end141
                                        #   in Loop: Header=BB265_38 Depth=1
	jmp	.LBB265_45
.LBB265_45:                             # %for.inc142
                                        #   in Loop: Header=BB265_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_38
.LBB265_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB265_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB265_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB265_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB265_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB265_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB265_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_51:                             # %if.end177
                                        #   in Loop: Header=BB265_47 Depth=1
	jmp	.LBB265_52
.LBB265_52:                             # %if.end178
                                        #   in Loop: Header=BB265_47 Depth=1
	jmp	.LBB265_53
.LBB265_53:                             # %for.inc179
                                        #   in Loop: Header=BB265_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_47
.LBB265_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB265_74
.LBB265_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB265_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB265_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB265_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB265_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB265_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB265_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB265_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB265_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_63:                             # %if.end212
                                        #   in Loop: Header=BB265_60 Depth=1
	jmp	.LBB265_64
.LBB265_64:                             # %for.inc213
                                        #   in Loop: Header=BB265_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_60
.LBB265_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB265_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB265_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB265_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB265_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB265_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB265_69:                             # %if.end242
                                        #   in Loop: Header=BB265_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB265_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB265_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB265_71:                             # %if.end259
                                        #   in Loop: Header=BB265_66 Depth=1
	jmp	.LBB265_72
.LBB265_72:                             # %for.inc260
                                        #   in Loop: Header=BB265_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_66
.LBB265_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB265_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB265_155
.LBB265_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB265_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB265_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB265_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB265_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB265_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB265_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB265_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB265_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB265_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_83:                             # %if.end307
                                        #   in Loop: Header=BB265_77 Depth=1
	jmp	.LBB265_84
.LBB265_84:                             # %if.end308
                                        #   in Loop: Header=BB265_77 Depth=1
	jmp	.LBB265_85
.LBB265_85:                             # %if.end309
                                        #   in Loop: Header=BB265_77 Depth=1
	jmp	.LBB265_86
.LBB265_86:                             # %for.inc310
                                        #   in Loop: Header=BB265_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_77
.LBB265_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB265_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB265_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB265_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB265_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB265_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB265_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB265_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB265_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_94:                             # %if.end354
                                        #   in Loop: Header=BB265_88 Depth=1
	jmp	.LBB265_95
.LBB265_95:                             # %if.end355
                                        #   in Loop: Header=BB265_88 Depth=1
	jmp	.LBB265_96
.LBB265_96:                             # %if.end356
                                        #   in Loop: Header=BB265_88 Depth=1
	jmp	.LBB265_97
.LBB265_97:                             # %for.inc357
                                        #   in Loop: Header=BB265_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_88
.LBB265_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB265_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB265_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB265_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB265_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_99
.LBB265_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB265_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB265_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB265_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB265_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_103
.LBB265_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB265_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB265_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB265_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB265_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB265_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB265_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB265_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_111:                            # %if.end428
                                        #   in Loop: Header=BB265_107 Depth=1
	jmp	.LBB265_112
.LBB265_112:                            # %if.end429
                                        #   in Loop: Header=BB265_107 Depth=1
	jmp	.LBB265_113
.LBB265_113:                            # %for.inc430
                                        #   in Loop: Header=BB265_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_107
.LBB265_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB265_154
.LBB265_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB265_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB265_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB265_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB265_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB265_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB265_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB265_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB265_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB265_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB265_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB265_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB265_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_126:                            # %if.end480
                                        #   in Loop: Header=BB265_122 Depth=1
	jmp	.LBB265_127
.LBB265_127:                            # %if.end481
                                        #   in Loop: Header=BB265_122 Depth=1
	jmp	.LBB265_128
.LBB265_128:                            # %for.inc482
                                        #   in Loop: Header=BB265_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_122
.LBB265_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB265_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB265_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB265_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB265_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB265_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB265_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_134:                            # %if.end507
                                        #   in Loop: Header=BB265_130 Depth=1
	jmp	.LBB265_135
.LBB265_135:                            # %if.end508
                                        #   in Loop: Header=BB265_130 Depth=1
	jmp	.LBB265_136
.LBB265_136:                            # %for.inc509
                                        #   in Loop: Header=BB265_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_130
.LBB265_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB265_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB265_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB265_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB265_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_138
.LBB265_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB265_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB265_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB265_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB265_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_142
.LBB265_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB265_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB265_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB265_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB265_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB265_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB265_149:                            # %if.end566
                                        #   in Loop: Header=BB265_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB265_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB265_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB265_151:                            # %if.end583
                                        #   in Loop: Header=BB265_146 Depth=1
	jmp	.LBB265_152
.LBB265_152:                            # %for.inc584
                                        #   in Loop: Header=BB265_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_146
.LBB265_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB265_154:                            # %if.end588
	jmp	.LBB265_155
.LBB265_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB265_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB265_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB265_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB265_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB265_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB265_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB265_158 Depth=1
	movl	$1, -72(%rbp)
.LBB265_161:                            # %if.end607
                                        #   in Loop: Header=BB265_158 Depth=1
	jmp	.LBB265_162
.LBB265_162:                            # %for.inc608
                                        #   in Loop: Header=BB265_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_158
.LBB265_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB265_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB265_165:                            # %if.end617
	jmp	.LBB265_166
.LBB265_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB265_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB265_169
.LBB265_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB265_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB265_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB265_172
.LBB265_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB265_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB265_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB265_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB265_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB265_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_173
.LBB265_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB265_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB265_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB265_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB265_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_177
.LBB265_180:                            # %for.end646.loopexit
	jmp	.LBB265_181
.LBB265_181:                            # %for.end646
	cmpl	$432289828, -76(%rbp)   # imm = 0x19C43824
	jne	.LBB265_183
.LBB265_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_182
.Lfunc_end265:
	.size	init_lists.202, .Lfunc_end265-init_lists.202
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.203     # -- Begin function alloc_colocated.203
	.p2align	4, 0x90
	.type	alloc_colocated.203,@function
alloc_colocated.203:                    # @alloc_colocated.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$857559981, -32(%rbp)   # imm = 0x331D53AD
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB266_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB266_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB266_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB266_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$857559981, -32(%rbp)   # imm = 0x331D53AD
	jne	.LBB266_6
.LBB266_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_5
.Lfunc_end266:
	.size	alloc_colocated.203, .Lfunc_end266-alloc_colocated.203
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.204          # -- Begin function init_lists.204
	.p2align	4, 0x90
	.type	init_lists.204,@function
init_lists.204:                         # @init_lists.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1484504501, -76(%rbp)  # imm = 0x587BBDB5
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB267_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB267_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB267_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB267_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB267_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB267_9
.LBB267_8:                              # %if.else
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB267_9:                              # %if.end
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB267_10:                             # %if.end36
                                        #   in Loop: Header=BB267_2 Depth=1
	jmp	.LBB267_11
.LBB267_11:                             # %if.end37
                                        #   in Loop: Header=BB267_2 Depth=1
	jmp	.LBB267_12
.LBB267_12:                             # %for.inc
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_2
.LBB267_13:                             # %for.end
	jmp	.LBB267_31
.LBB267_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB267_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB267_17
.LBB267_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB267_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB267_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB267_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB267_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB267_23
.LBB267_22:                             # %if.else63
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB267_23:                             # %if.end70
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB267_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB267_25:                             # %if.end83
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB267_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB267_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB267_27:                             # %if.end98
                                        #   in Loop: Header=BB267_18 Depth=1
	jmp	.LBB267_28
.LBB267_28:                             # %if.end99
                                        #   in Loop: Header=BB267_18 Depth=1
	jmp	.LBB267_29
.LBB267_29:                             # %for.inc100
                                        #   in Loop: Header=BB267_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_18
.LBB267_30:                             # %for.end102
	jmp	.LBB267_31
.LBB267_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB267_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB267_34
.LBB267_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB267_181
.LBB267_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB267_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB267_75
.LBB267_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB267_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB267_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB267_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB267_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB267_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB267_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB267_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB267_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_43:                             # %if.end140
                                        #   in Loop: Header=BB267_38 Depth=1
	jmp	.LBB267_44
.LBB267_44:                             # %if.end141
                                        #   in Loop: Header=BB267_38 Depth=1
	jmp	.LBB267_45
.LBB267_45:                             # %for.inc142
                                        #   in Loop: Header=BB267_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_38
.LBB267_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB267_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB267_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB267_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB267_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB267_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB267_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_51:                             # %if.end177
                                        #   in Loop: Header=BB267_47 Depth=1
	jmp	.LBB267_52
.LBB267_52:                             # %if.end178
                                        #   in Loop: Header=BB267_47 Depth=1
	jmp	.LBB267_53
.LBB267_53:                             # %for.inc179
                                        #   in Loop: Header=BB267_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_47
.LBB267_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB267_74
.LBB267_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB267_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB267_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB267_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB267_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB267_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB267_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB267_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB267_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_63:                             # %if.end212
                                        #   in Loop: Header=BB267_60 Depth=1
	jmp	.LBB267_64
.LBB267_64:                             # %for.inc213
                                        #   in Loop: Header=BB267_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_60
.LBB267_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB267_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB267_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB267_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB267_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB267_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB267_69:                             # %if.end242
                                        #   in Loop: Header=BB267_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB267_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB267_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB267_71:                             # %if.end259
                                        #   in Loop: Header=BB267_66 Depth=1
	jmp	.LBB267_72
.LBB267_72:                             # %for.inc260
                                        #   in Loop: Header=BB267_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_66
.LBB267_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB267_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB267_155
.LBB267_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB267_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB267_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB267_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB267_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB267_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB267_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB267_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB267_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB267_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB267_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_83:                             # %if.end307
                                        #   in Loop: Header=BB267_77 Depth=1
	jmp	.LBB267_84
.LBB267_84:                             # %if.end308
                                        #   in Loop: Header=BB267_77 Depth=1
	jmp	.LBB267_85
.LBB267_85:                             # %if.end309
                                        #   in Loop: Header=BB267_77 Depth=1
	jmp	.LBB267_86
.LBB267_86:                             # %for.inc310
                                        #   in Loop: Header=BB267_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_77
.LBB267_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB267_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB267_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB267_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB267_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB267_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB267_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB267_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB267_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB267_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_94:                             # %if.end354
                                        #   in Loop: Header=BB267_88 Depth=1
	jmp	.LBB267_95
.LBB267_95:                             # %if.end355
                                        #   in Loop: Header=BB267_88 Depth=1
	jmp	.LBB267_96
.LBB267_96:                             # %if.end356
                                        #   in Loop: Header=BB267_88 Depth=1
	jmp	.LBB267_97
.LBB267_97:                             # %for.inc357
                                        #   in Loop: Header=BB267_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_88
.LBB267_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB267_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB267_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB267_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB267_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_99
.LBB267_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB267_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB267_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB267_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB267_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_103
.LBB267_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB267_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB267_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB267_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB267_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB267_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB267_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB267_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_111:                            # %if.end428
                                        #   in Loop: Header=BB267_107 Depth=1
	jmp	.LBB267_112
.LBB267_112:                            # %if.end429
                                        #   in Loop: Header=BB267_107 Depth=1
	jmp	.LBB267_113
.LBB267_113:                            # %for.inc430
                                        #   in Loop: Header=BB267_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_107
.LBB267_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB267_154
.LBB267_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB267_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB267_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB267_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB267_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB267_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB267_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB267_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB267_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB267_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB267_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB267_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB267_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_126:                            # %if.end480
                                        #   in Loop: Header=BB267_122 Depth=1
	jmp	.LBB267_127
.LBB267_127:                            # %if.end481
                                        #   in Loop: Header=BB267_122 Depth=1
	jmp	.LBB267_128
.LBB267_128:                            # %for.inc482
                                        #   in Loop: Header=BB267_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_122
.LBB267_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB267_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB267_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB267_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB267_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB267_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB267_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_134:                            # %if.end507
                                        #   in Loop: Header=BB267_130 Depth=1
	jmp	.LBB267_135
.LBB267_135:                            # %if.end508
                                        #   in Loop: Header=BB267_130 Depth=1
	jmp	.LBB267_136
.LBB267_136:                            # %for.inc509
                                        #   in Loop: Header=BB267_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_130
.LBB267_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB267_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB267_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB267_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB267_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_138
.LBB267_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB267_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB267_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB267_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB267_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_142
.LBB267_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB267_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB267_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB267_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB267_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB267_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB267_149:                            # %if.end566
                                        #   in Loop: Header=BB267_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB267_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB267_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB267_151:                            # %if.end583
                                        #   in Loop: Header=BB267_146 Depth=1
	jmp	.LBB267_152
.LBB267_152:                            # %for.inc584
                                        #   in Loop: Header=BB267_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_146
.LBB267_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB267_154:                            # %if.end588
	jmp	.LBB267_155
.LBB267_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB267_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB267_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB267_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB267_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB267_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB267_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB267_158 Depth=1
	movl	$1, -72(%rbp)
.LBB267_161:                            # %if.end607
                                        #   in Loop: Header=BB267_158 Depth=1
	jmp	.LBB267_162
.LBB267_162:                            # %for.inc608
                                        #   in Loop: Header=BB267_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_158
.LBB267_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB267_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB267_165:                            # %if.end617
	jmp	.LBB267_166
.LBB267_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB267_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB267_169
.LBB267_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB267_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB267_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB267_172
.LBB267_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB267_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB267_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB267_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB267_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB267_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_173
.LBB267_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB267_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB267_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB267_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB267_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_177
.LBB267_180:                            # %for.end646.loopexit
	jmp	.LBB267_181
.LBB267_181:                            # %for.end646
	cmpl	$1484504501, -76(%rbp)  # imm = 0x587BBDB5
	jne	.LBB267_183
.LBB267_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_182
.Lfunc_end267:
	.size	init_lists.204, .Lfunc_end267-init_lists.204
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.205
	.type	unmark_long_term_frame_for_reference_by_frame_idx.205,@function
unmark_long_term_frame_for_reference_by_frame_idx.205: # @unmark_long_term_frame_for_reference_by_frame_idx.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$65088764, -8(%rbp)     # imm = 0x3E12CFC
	movl	%edi, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB268_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB268_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB268_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB268_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB268_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB268_4:                              # %if.end
                                        #   in Loop: Header=BB268_1 Depth=1
	jmp	.LBB268_5
.LBB268_5:                              # %for.inc
                                        #   in Loop: Header=BB268_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB268_1
.LBB268_6:                              # %for.end
	cmpl	$65088764, -8(%rbp)     # imm = 0x3E12CFC
	jne	.LBB268_8
.LBB268_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_7
.Lfunc_end268:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.205, .Lfunc_end268-unmark_long_term_frame_for_reference_by_frame_idx.205
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.206   # -- Begin function gen_field_ref_ids.206
	.p2align	4, 0x90
	.type	gen_field_ref_ids.206,@function
gen_field_ref_ids.206:                  # @gen_field_ref_ids.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1751717299, -28(%rbp)  # imm = 0x686915B3
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB269_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB269_1 Depth=1
	movl	$0, -4(%rbp)
.LBB269_3:                              # %for.cond1
                                        #   Parent Loop BB269_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB269_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB269_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB269_7
.LBB269_6:                              # %cond.false
                                        #   in Loop: Header=BB269_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_7
.LBB269_7:                              # %cond.end
                                        #   in Loop: Header=BB269_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB269_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB269_10
.LBB269_9:                              # %cond.false32
                                        #   in Loop: Header=BB269_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_10
.LBB269_10:                             # %cond.end33
                                        #   in Loop: Header=BB269_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB269_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_3
.LBB269_12:                             # %for.end
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_13
.LBB269_13:                             # %for.inc45
                                        #   in Loop: Header=BB269_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_1
.LBB269_14:                             # %for.end47
	cmpl	$1751717299, -28(%rbp)  # imm = 0x686915B3
	jne	.LBB269_16
.LBB269_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_15
.Lfunc_end269:
	.size	gen_field_ref_ids.206, .Lfunc_end269-gen_field_ref_ids.206
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.207
	.type	mm_mark_current_picture_long_term.207,@function
mm_mark_current_picture_long_term.207:  # @mm_mark_current_picture_long_term.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$457518039, -20(%rbp)   # imm = 0x1B452BD7
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB270_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB270_3
.LBB270_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB270_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$457518039, -20(%rbp)   # imm = 0x1B452BD7
	jne	.LBB270_5
.LBB270_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_4
.Lfunc_end270:
	.size	mm_mark_current_picture_long_term.207, .Lfunc_end270-mm_mark_current_picture_long_term.207
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.208
	.type	compare_fs_by_poc_desc.208,@function
compare_fs_by_poc_desc.208:             # @compare_fs_by_poc_desc.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1484896407, -16(%rbp)  # imm = 0x5881B897
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB271_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB271_5
.LBB271_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB271_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB271_5
.LBB271_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB271_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1484896407, -16(%rbp)  # imm = 0x5881B897
	jne	.LBB271_7
.LBB271_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_6
.Lfunc_end271:
	.size	compare_fs_by_poc_desc.208, .Lfunc_end271-compare_fs_by_poc_desc.208
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.209
	.type	get_pic_num_x.209,@function
get_pic_num_x.209:                      # @get_pic_num_x.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1506874959, -32(%rbp)  # imm = 0x59D1164F
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB272_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_3
.LBB272_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB272_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1506874959, -32(%rbp)  # imm = 0x59D1164F
	jne	.LBB272_5
.LBB272_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_4
.Lfunc_end272:
	.size	get_pic_num_x.209, .Lfunc_end272-get_pic_num_x.209
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.210 # -- Begin function store_picture_in_dpb.210
	.p2align	4, 0x90
	.type	store_picture_in_dpb.210,@function
store_picture_in_dpb.210:               # @store_picture_in_dpb.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$788543529, -24(%rbp)   # imm = 0x2F003829
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB273_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB273_6
.LBB273_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB273_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB273_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB273_5:                              # %if.end
	jmp	.LBB273_6
.LBB273_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB273_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB273_23
.LBB273_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB273_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB273_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB273_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB273_14
.LBB273_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB273_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB273_20
.LBB273_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB273_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB273_18
.LBB273_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB273_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB273_19
.LBB273_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB273_50
.LBB273_19:                             # %if.end48
	jmp	.LBB273_20
.LBB273_20:                             # %if.end49
	jmp	.LBB273_21
.LBB273_21:                             # %if.end50
	jmp	.LBB273_22
.LBB273_22:                             # %if.end51
	jmp	.LBB273_23
.LBB273_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB273_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB273_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB273_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB273_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB273_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB273_29:                             # %if.end67
	jmp	.LBB273_30
.LBB273_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB273_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB273_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB273_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB273_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB273_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB273_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB273_35
.LBB273_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB273_50
.LBB273_35:                             # %if.end80
                                        #   in Loop: Header=BB273_30 Depth=1
	jmp	.LBB273_36
.LBB273_36:                             # %if.end81
                                        #   in Loop: Header=BB273_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB273_30
.LBB273_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB273_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB273_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB273_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB273_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB273_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB273_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB273_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB273_43:                             # %if.end94
                                        #   in Loop: Header=BB273_40 Depth=1
	jmp	.LBB273_44
.LBB273_44:                             # %for.inc
                                        #   in Loop: Header=BB273_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_40
.LBB273_45:                             # %for.end
	jmp	.LBB273_46
.LBB273_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB273_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB273_49
.LBB273_48:                             # %if.else104
	movq	$0, dpb+56
.LBB273_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB273_50:                             # %return
	cmpl	$788543529, -24(%rbp)   # imm = 0x2F003829
	jne	.LBB273_52
.LBB273_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_51
.Lfunc_end273:
	.size	store_picture_in_dpb.210, .Lfunc_end273-store_picture_in_dpb.210
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.211     # -- Begin function alloc_colocated.211
	.p2align	4, 0x90
	.type	alloc_colocated.211,@function
alloc_colocated.211:                    # @alloc_colocated.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$619050700, -32(%rbp)   # imm = 0x24E5F6CC
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB274_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB274_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB274_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB274_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$619050700, -32(%rbp)   # imm = 0x24E5F6CC
	jne	.LBB274_6
.LBB274_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_5
.Lfunc_end274:
	.size	alloc_colocated.211, .Lfunc_end274-alloc_colocated.211
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.212
	.type	mark_pic_long_term.212,@function
mark_pic_long_term.212:                 # @mark_pic_long_term.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2087625180, -24(%rbp)  # imm = 0x7C6EA1DC
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB275_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB275_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB275_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB275_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB275_39
.LBB275_7:                              # %if.end
                                        #   in Loop: Header=BB275_2 Depth=1
	jmp	.LBB275_8
.LBB275_8:                              # %if.end50
                                        #   in Loop: Header=BB275_2 Depth=1
	jmp	.LBB275_9
.LBB275_9:                              # %for.inc
                                        #   in Loop: Header=BB275_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_2
.LBB275_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB275_39
.LBB275_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB275_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB275_14
.LBB275_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB275_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB275_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB275_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB275_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB275_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB275_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB275_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB275_24:                             # %if.end123
	jmp	.LBB275_39
.LBB275_25:                             # %if.end124
                                        #   in Loop: Header=BB275_15 Depth=1
	jmp	.LBB275_26
.LBB275_26:                             # %if.end125
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB275_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB275_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB275_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB275_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB275_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB275_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB275_34:                             # %if.end194
	jmp	.LBB275_39
.LBB275_35:                             # %if.end195
                                        #   in Loop: Header=BB275_15 Depth=1
	jmp	.LBB275_36
.LBB275_36:                             # %if.end196
                                        #   in Loop: Header=BB275_15 Depth=1
	jmp	.LBB275_37
.LBB275_37:                             # %for.inc197
                                        #   in Loop: Header=BB275_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_15
.LBB275_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB275_39:                             # %if.end201
	cmpl	$2087625180, -24(%rbp)  # imm = 0x7C6EA1DC
	jne	.LBB275_41
.LBB275_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_40
.Lfunc_end275:
	.size	mark_pic_long_term.212, .Lfunc_end275-mark_pic_long_term.212
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.213
	.type	mm_unmark_short_term_for_reference.213,@function
mm_unmark_short_term_for_reference.213: # @mm_unmark_short_term_for_reference.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$994277138, -12(%rbp)   # imm = 0x3B437712
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB276_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB276_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB276_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB276_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB276_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB276_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB276_27
.LBB276_7:                              # %if.end
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_8
.LBB276_8:                              # %if.end13
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_24
.LBB276_9:                              # %if.else
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB276_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB276_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB276_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB276_14:                             # %if.end44
	jmp	.LBB276_27
.LBB276_15:                             # %if.end45
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_16
.LBB276_16:                             # %if.end46
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB276_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB276_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB276_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB276_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB276_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB276_21:                             # %if.end81
	jmp	.LBB276_27
.LBB276_22:                             # %if.end82
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_23
.LBB276_23:                             # %if.end83
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_24
.LBB276_24:                             # %if.end84
                                        #   in Loop: Header=BB276_1 Depth=1
	jmp	.LBB276_25
.LBB276_25:                             # %for.inc
                                        #   in Loop: Header=BB276_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_1
.LBB276_26:                             # %for.end.loopexit
	jmp	.LBB276_27
.LBB276_27:                             # %for.end
	cmpl	$994277138, -12(%rbp)   # imm = 0x3B437712
	jne	.LBB276_29
.LBB276_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_28
.Lfunc_end276:
	.size	mm_unmark_short_term_for_reference.213, .Lfunc_end276-mm_unmark_short_term_for_reference.213
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.214
	.type	compare_pic_by_poc_desc.214,@function
compare_pic_by_poc_desc.214:            # @compare_pic_by_poc_desc.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$907824369, -16(%rbp)   # imm = 0x361C4CF1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB277_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB277_5
.LBB277_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB277_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB277_5
.LBB277_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB277_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$907824369, -16(%rbp)   # imm = 0x361C4CF1
	jne	.LBB277_7
.LBB277_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_6
.Lfunc_end277:
	.size	compare_pic_by_poc_desc.214, .Lfunc_end277-compare_pic_by_poc_desc.214
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.215   # -- Begin function dpb_combine_field.215
	.p2align	4, 0x90
	.type	dpb_combine_field.215,@function
dpb_combine_field.215:                  # @dpb_combine_field.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$610227972, -32(%rbp)   # imm = 0x245F5704
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB278_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB278_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB278_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_1
.LBB278_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB278_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB278_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB278_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB278_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_5
.LBB278_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB278_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB278_11
.LBB278_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB278_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB278_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB278_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB278_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB278_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB278_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB278_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB278_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB278_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB278_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB278_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB278_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB278_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB278_24
.LBB278_23:                             # %cond.false217
                                        #   in Loop: Header=BB278_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB278_24:                             # %cond.end226
                                        #   in Loop: Header=BB278_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB278_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_20
.LBB278_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB278_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB278_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB278_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB278_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB278_31
.LBB278_30:                             # %cond.false269
                                        #   in Loop: Header=BB278_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB278_31:                             # %cond.end278
                                        #   in Loop: Header=BB278_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB278_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_27
.LBB278_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB278_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB278_34 Depth=1
	movl	$0, -20(%rbp)
.LBB278_36:                             # %for.cond295
                                        #   Parent Loop BB278_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB278_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB278_40
.LBB278_39:                             # %cond.false445
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB278_40
.LBB278_40:                             # %cond.end446
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB278_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB278_43
.LBB278_42:                             # %cond.false462
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB278_43
.LBB278_43:                             # %cond.end463
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB278_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB278_46
.LBB278_45:                             # %cond.false479
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB278_46
.LBB278_46:                             # %cond.end480
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB278_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB278_49
.LBB278_48:                             # %cond.false501
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB278_49
.LBB278_49:                             # %cond.end502
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB278_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB278_52
.LBB278_51:                             # %cond.false647
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB278_52
.LBB278_52:                             # %cond.end648
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB278_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB278_55
.LBB278_54:                             # %cond.false665
                                        #   in Loop: Header=BB278_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB278_55
.LBB278_55:                             # %cond.end666
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB278_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB278_58
.LBB278_57:                             # %cond.false683
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB278_58
.LBB278_58:                             # %cond.end684
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB278_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB278_61
.LBB278_60:                             # %cond.false706
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB278_61
.LBB278_61:                             # %cond.end707
                                        #   in Loop: Header=BB278_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB278_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB278_36
.LBB278_63:                             # %for.end723
                                        #   in Loop: Header=BB278_34 Depth=1
	jmp	.LBB278_64
.LBB278_64:                             # %for.inc724
                                        #   in Loop: Header=BB278_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_34
.LBB278_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB278_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB278_76
.LBB278_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB278_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB278_68 Depth=1
	movl	$0, -20(%rbp)
.LBB278_70:                             # %for.cond737
                                        #   Parent Loop BB278_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB278_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB278_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB278_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB278_70
.LBB278_73:                             # %for.end758
                                        #   in Loop: Header=BB278_68 Depth=1
	jmp	.LBB278_74
.LBB278_74:                             # %for.inc759
                                        #   in Loop: Header=BB278_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_68
.LBB278_75:                             # %for.end761
	jmp	.LBB278_76
.LBB278_76:                             # %if.end762
	cmpl	$610227972, -32(%rbp)   # imm = 0x245F5704
	jne	.LBB278_78
.LBB278_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_77
.Lfunc_end278:
	.size	dpb_combine_field.215, .Lfunc_end278-dpb_combine_field.215
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.216
	.type	compare_pic_by_pic_num_desc.216,@function
compare_pic_by_pic_num_desc.216:        # @compare_pic_by_pic_num_desc.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2040778478, -16(%rbp)  # imm = 0x79A3CEEE
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB279_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB279_5
.LBB279_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB279_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB279_5
.LBB279_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB279_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2040778478, -16(%rbp)  # imm = 0x79A3CEEE
	jne	.LBB279_7
.LBB279_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_6
.Lfunc_end279:
	.size	compare_pic_by_pic_num_desc.216, .Lfunc_end279-compare_pic_by_pic_num_desc.216
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.217 # -- Begin function replace_top_pic_with_frame.217
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.217,@function
replace_top_pic_with_frame.217:         # @replace_top_pic_with_frame.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1549995357, -32(%rbp)  # imm = 0x5C630D5D
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB280_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB280_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB280_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB280_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB280_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB280_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB280_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB280_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB280_10
.LBB280_7:                              # %if.end14
                                        #   in Loop: Header=BB280_3 Depth=1
	jmp	.LBB280_8
.LBB280_8:                              # %for.inc
                                        #   in Loop: Header=BB280_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_3
.LBB280_9:                              # %for.end.loopexit
	jmp	.LBB280_10
.LBB280_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB280_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB280_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB280_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB280_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB280_15:                             # %if.end26
	jmp	.LBB280_16
.LBB280_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1549995357, -32(%rbp)  # imm = 0x5C630D5D
	jne	.LBB280_18
.LBB280_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_17
.Lfunc_end280:
	.size	replace_top_pic_with_frame.217, .Lfunc_end280-replace_top_pic_with_frame.217
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.218
	.type	mm_unmark_short_term_for_reference.218,@function
mm_unmark_short_term_for_reference.218: # @mm_unmark_short_term_for_reference.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$82578212, -16(%rbp)    # imm = 0x4EC0B24
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB281_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB281_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB281_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB281_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB281_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB281_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB281_27
.LBB281_7:                              # %if.end
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_8
.LBB281_8:                              # %if.end13
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_24
.LBB281_9:                              # %if.else
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB281_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB281_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB281_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB281_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB281_14:                             # %if.end44
	jmp	.LBB281_27
.LBB281_15:                             # %if.end45
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_16
.LBB281_16:                             # %if.end46
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB281_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB281_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB281_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB281_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB281_21:                             # %if.end81
	jmp	.LBB281_27
.LBB281_22:                             # %if.end82
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_23
.LBB281_23:                             # %if.end83
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_24
.LBB281_24:                             # %if.end84
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_25
.LBB281_25:                             # %for.inc
                                        #   in Loop: Header=BB281_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_1
.LBB281_26:                             # %for.end.loopexit
	jmp	.LBB281_27
.LBB281_27:                             # %for.end
	cmpl	$82578212, -16(%rbp)    # imm = 0x4EC0B24
	jne	.LBB281_29
.LBB281_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_28
.Lfunc_end281:
	.size	mm_unmark_short_term_for_reference.218, .Lfunc_end281-mm_unmark_short_term_for_reference.218
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.219     # -- Begin function alloc_colocated.219
	.p2align	4, 0x90
	.type	alloc_colocated.219,@function
alloc_colocated.219:                    # @alloc_colocated.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1834027364, -32(%rbp)  # imm = 0x6D510964
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB282_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB282_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB282_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB282_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1834027364, -32(%rbp)  # imm = 0x6D510964
	jne	.LBB282_6
.LBB282_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_5
.Lfunc_end282:
	.size	alloc_colocated.219, .Lfunc_end282-alloc_colocated.219
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.220     # -- Begin function dpb_split_field.220
	.p2align	4, 0x90
	.type	dpb_split_field.220,@function
dpb_split_field.220:                    # @dpb_split_field.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1447431774, -72(%rbp)  # imm = 0x56460E5E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB283_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB283_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB283_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_2
.LBB283_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB283_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB283_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB283_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_6
.LBB283_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB283_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB283_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB283_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_10
.LBB283_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB283_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB283_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB283_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_14
.LBB283_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB283_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB283_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB283_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB283_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_19
.LBB283_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB283_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB283_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB283_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB283_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_23
.LBB283_26:                             # %for.end328
	jmp	.LBB283_27
.LBB283_27:                             # %if.end
	jmp	.LBB283_29
.LBB283_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB283_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB283_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB283_30 Depth=1
	movl	$0, -4(%rbp)
.LBB283_32:                             # %for.cond343
                                        #   Parent Loop BB283_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB283_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_38
.LBB283_37:                             # %cond.false
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_38
.LBB283_38:                             # %cond.end
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_41
.LBB283_40:                             # %cond.false415
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_41
.LBB283_41:                             # %cond.end416
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_44
.LBB283_43:                             # %cond.false436
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_44
.LBB283_44:                             # %cond.end437
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_47
.LBB283_46:                             # %cond.false456
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_47
.LBB283_47:                             # %cond.end457
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB283_55
.LBB283_48:                             # %if.else466
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB283_51
.LBB283_50:                             # %cond.false491
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB283_51
.LBB283_51:                             # %cond.end492
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB283_54
.LBB283_53:                             # %cond.false509
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB283_54
.LBB283_54:                             # %cond.end510
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_55:                             # %if.end519
                                        #   in Loop: Header=BB283_32 Depth=2
	jmp	.LBB283_56
.LBB283_56:                             # %for.inc520
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_32
.LBB283_57:                             # %for.end522
                                        #   in Loop: Header=BB283_30 Depth=1
	jmp	.LBB283_58
.LBB283_58:                             # %for.inc523
                                        #   in Loop: Header=BB283_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_30
.LBB283_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB283_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB283_73
.LBB283_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB283_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB283_62 Depth=1
	movl	$0, -8(%rbp)
.LBB283_64:                             # %for.cond538
                                        #   Parent Loop BB283_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB283_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB283_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB283_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB283_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_68:                             # %if.end908
                                        #   in Loop: Header=BB283_64 Depth=2
	jmp	.LBB283_69
.LBB283_69:                             # %for.inc909
                                        #   in Loop: Header=BB283_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_64
.LBB283_70:                             # %for.end911
                                        #   in Loop: Header=BB283_62 Depth=1
	jmp	.LBB283_71
.LBB283_71:                             # %for.inc912
                                        #   in Loop: Header=BB283_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_62
.LBB283_72:                             # %for.end914
	jmp	.LBB283_73
.LBB283_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB283_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB283_74 Depth=1
	movl	$0, -8(%rbp)
.LBB283_76:                             # %for.cond923
                                        #   Parent Loop BB283_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB283_148
.LBB283_79:                             # %if.then954
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_83
.LBB283_82:                             # %cond.false991
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_83:                             # %cond.end993
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_86
.LBB283_85:                             # %cond.false1001
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_86:                             # %cond.end1003
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_89
.LBB283_88:                             # %cond.false1032
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_89:                             # %cond.end1034
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_92
.LBB283_91:                             # %cond.false1042
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_92:                             # %cond.end1044
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_95
.LBB283_94:                             # %cond.false1073
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_95:                             # %cond.end1075
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_98
.LBB283_97:                             # %cond.false1083
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_98:                             # %cond.end1085
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_101
.LBB283_100:                            # %cond.false1114
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_101:                            # %cond.end1116
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_104
.LBB283_103:                            # %cond.false1124
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_104:                            # %cond.end1126
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_107
.LBB283_106:                            # %cond.false1155
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_107:                            # %cond.end1157
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_110
.LBB283_109:                            # %cond.false1165
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_110:                            # %cond.end1167
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB283_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB283_125
.LBB283_112:                            # %if.else1190
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_115
.LBB283_114:                            # %cond.false1198
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_115:                            # %cond.end1200
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_118
.LBB283_117:                            # %cond.false1208
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_118:                            # %cond.end1210
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB283_121
.LBB283_120:                            # %cond.false1237
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_121
.LBB283_121:                            # %cond.end1238
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB283_124
.LBB283_123:                            # %cond.false1254
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_124
.LBB283_124:                            # %cond.end1255
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_125:                            # %if.end1264
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_128
.LBB283_127:                            # %cond.false1272
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_128:                            # %cond.end1274
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_131
.LBB283_130:                            # %cond.false1282
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_131:                            # %cond.end1284
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB283_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB283_146
.LBB283_133:                            # %if.else1307
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_136
.LBB283_135:                            # %cond.false1315
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_136:                            # %cond.end1317
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_139
.LBB283_138:                            # %cond.false1325
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_139:                            # %cond.end1327
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB283_142
.LBB283_141:                            # %cond.false1355
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_142
.LBB283_142:                            # %cond.end1356
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB283_145
.LBB283_144:                            # %cond.false1373
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_145
.LBB283_145:                            # %cond.end1374
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_146:                            # %if.end1383
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_147
.LBB283_147:                            # %if.end1384
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_148
.LBB283_148:                            # %if.end1385
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_149
.LBB283_149:                            # %for.inc1386
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_76
.LBB283_150:                            # %for.end1388
                                        #   in Loop: Header=BB283_74 Depth=1
	jmp	.LBB283_151
.LBB283_151:                            # %for.inc1389
                                        #   in Loop: Header=BB283_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_74
.LBB283_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB283_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB283_153 Depth=1
	movl	$0, -4(%rbp)
.LBB283_155:                            # %for.cond1399
                                        #   Parent Loop BB283_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB283_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB283_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_155
.LBB283_158:                            # %for.end1414
                                        #   in Loop: Header=BB283_153 Depth=1
	jmp	.LBB283_159
.LBB283_159:                            # %for.inc1415
                                        #   in Loop: Header=BB283_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_153
.LBB283_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB283_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB283_174
.LBB283_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB283_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB283_163 Depth=1
	movl	$0, -4(%rbp)
.LBB283_165:                            # %for.cond1431
                                        #   Parent Loop BB283_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB283_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB283_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB283_169
.LBB283_168:                            # %cond.false1462
                                        #   in Loop: Header=BB283_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_169
.LBB283_169:                            # %cond.end1463
                                        #   in Loop: Header=BB283_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB283_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_165
.LBB283_171:                            # %for.end1474
                                        #   in Loop: Header=BB283_163 Depth=1
	jmp	.LBB283_172
.LBB283_172:                            # %for.inc1475
                                        #   in Loop: Header=BB283_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_163
.LBB283_173:                            # %for.end1477
	jmp	.LBB283_174
.LBB283_174:                            # %if.end1478
	cmpl	$1447431774, -72(%rbp)  # imm = 0x56460E5E
	jne	.LBB283_176
.LBB283_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_175
.Lfunc_end283:
	.size	dpb_split_field.220, .Lfunc_end283-dpb_split_field.220
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.221          # -- Begin function init_lists.221
	.p2align	4, 0x90
	.type	init_lists.221,@function
init_lists.221:                         # @init_lists.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$758355229, -76(%rbp)   # imm = 0x2D33951D
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB284_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB284_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB284_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB284_9
.LBB284_8:                              # %if.else
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB284_9:                              # %if.end
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB284_10:                             # %if.end36
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_11
.LBB284_11:                             # %if.end37
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_12
.LBB284_12:                             # %for.inc
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_2
.LBB284_13:                             # %for.end
	jmp	.LBB284_31
.LBB284_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB284_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB284_17
.LBB284_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB284_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB284_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB284_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB284_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB284_23
.LBB284_22:                             # %if.else63
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB284_23:                             # %if.end70
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB284_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB284_25:                             # %if.end83
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB284_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB284_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB284_27:                             # %if.end98
                                        #   in Loop: Header=BB284_18 Depth=1
	jmp	.LBB284_28
.LBB284_28:                             # %if.end99
                                        #   in Loop: Header=BB284_18 Depth=1
	jmp	.LBB284_29
.LBB284_29:                             # %for.inc100
                                        #   in Loop: Header=BB284_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_18
.LBB284_30:                             # %for.end102
	jmp	.LBB284_31
.LBB284_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB284_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB284_34
.LBB284_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB284_181
.LBB284_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB284_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB284_75
.LBB284_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB284_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB284_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB284_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB284_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB284_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB284_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_43:                             # %if.end140
                                        #   in Loop: Header=BB284_38 Depth=1
	jmp	.LBB284_44
.LBB284_44:                             # %if.end141
                                        #   in Loop: Header=BB284_38 Depth=1
	jmp	.LBB284_45
.LBB284_45:                             # %for.inc142
                                        #   in Loop: Header=BB284_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_38
.LBB284_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB284_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB284_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB284_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB284_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB284_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB284_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_51:                             # %if.end177
                                        #   in Loop: Header=BB284_47 Depth=1
	jmp	.LBB284_52
.LBB284_52:                             # %if.end178
                                        #   in Loop: Header=BB284_47 Depth=1
	jmp	.LBB284_53
.LBB284_53:                             # %for.inc179
                                        #   in Loop: Header=BB284_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_47
.LBB284_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB284_74
.LBB284_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB284_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB284_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB284_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB284_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB284_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB284_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB284_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB284_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_63:                             # %if.end212
                                        #   in Loop: Header=BB284_60 Depth=1
	jmp	.LBB284_64
.LBB284_64:                             # %for.inc213
                                        #   in Loop: Header=BB284_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_60
.LBB284_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB284_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB284_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB284_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB284_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB284_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB284_69:                             # %if.end242
                                        #   in Loop: Header=BB284_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB284_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB284_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB284_71:                             # %if.end259
                                        #   in Loop: Header=BB284_66 Depth=1
	jmp	.LBB284_72
.LBB284_72:                             # %for.inc260
                                        #   in Loop: Header=BB284_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_66
.LBB284_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB284_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB284_155
.LBB284_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB284_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB284_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB284_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB284_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB284_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB284_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB284_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB284_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_83:                             # %if.end307
                                        #   in Loop: Header=BB284_77 Depth=1
	jmp	.LBB284_84
.LBB284_84:                             # %if.end308
                                        #   in Loop: Header=BB284_77 Depth=1
	jmp	.LBB284_85
.LBB284_85:                             # %if.end309
                                        #   in Loop: Header=BB284_77 Depth=1
	jmp	.LBB284_86
.LBB284_86:                             # %for.inc310
                                        #   in Loop: Header=BB284_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_77
.LBB284_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB284_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB284_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB284_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB284_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB284_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB284_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB284_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_94:                             # %if.end354
                                        #   in Loop: Header=BB284_88 Depth=1
	jmp	.LBB284_95
.LBB284_95:                             # %if.end355
                                        #   in Loop: Header=BB284_88 Depth=1
	jmp	.LBB284_96
.LBB284_96:                             # %if.end356
                                        #   in Loop: Header=BB284_88 Depth=1
	jmp	.LBB284_97
.LBB284_97:                             # %for.inc357
                                        #   in Loop: Header=BB284_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_88
.LBB284_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB284_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB284_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB284_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB284_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_99
.LBB284_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB284_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB284_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB284_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB284_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_103
.LBB284_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB284_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB284_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB284_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB284_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB284_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB284_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB284_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_111:                            # %if.end428
                                        #   in Loop: Header=BB284_107 Depth=1
	jmp	.LBB284_112
.LBB284_112:                            # %if.end429
                                        #   in Loop: Header=BB284_107 Depth=1
	jmp	.LBB284_113
.LBB284_113:                            # %for.inc430
                                        #   in Loop: Header=BB284_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_107
.LBB284_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB284_154
.LBB284_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB284_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB284_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB284_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB284_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB284_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB284_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB284_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB284_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB284_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB284_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB284_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB284_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_126:                            # %if.end480
                                        #   in Loop: Header=BB284_122 Depth=1
	jmp	.LBB284_127
.LBB284_127:                            # %if.end481
                                        #   in Loop: Header=BB284_122 Depth=1
	jmp	.LBB284_128
.LBB284_128:                            # %for.inc482
                                        #   in Loop: Header=BB284_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_122
.LBB284_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB284_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB284_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB284_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB284_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB284_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB284_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB284_134:                            # %if.end507
                                        #   in Loop: Header=BB284_130 Depth=1
	jmp	.LBB284_135
.LBB284_135:                            # %if.end508
                                        #   in Loop: Header=BB284_130 Depth=1
	jmp	.LBB284_136
.LBB284_136:                            # %for.inc509
                                        #   in Loop: Header=BB284_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_130
.LBB284_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB284_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB284_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB284_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB284_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_138
.LBB284_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB284_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB284_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB284_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB284_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_142
.LBB284_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB284_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB284_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB284_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB284_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB284_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB284_149:                            # %if.end566
                                        #   in Loop: Header=BB284_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB284_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB284_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB284_151:                            # %if.end583
                                        #   in Loop: Header=BB284_146 Depth=1
	jmp	.LBB284_152
.LBB284_152:                            # %for.inc584
                                        #   in Loop: Header=BB284_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_146
.LBB284_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB284_154:                            # %if.end588
	jmp	.LBB284_155
.LBB284_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB284_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB284_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB284_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB284_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB284_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB284_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB284_158 Depth=1
	movl	$1, -72(%rbp)
.LBB284_161:                            # %if.end607
                                        #   in Loop: Header=BB284_158 Depth=1
	jmp	.LBB284_162
.LBB284_162:                            # %for.inc608
                                        #   in Loop: Header=BB284_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_158
.LBB284_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB284_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB284_165:                            # %if.end617
	jmp	.LBB284_166
.LBB284_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB284_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB284_169
.LBB284_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB284_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB284_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB284_172
.LBB284_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB284_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB284_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB284_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB284_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB284_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_173
.LBB284_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB284_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB284_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB284_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB284_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_177
.LBB284_180:                            # %for.end646.loopexit
	jmp	.LBB284_181
.LBB284_181:                            # %for.end646
	cmpl	$758355229, -76(%rbp)   # imm = 0x2D33951D
	jne	.LBB284_183
.LBB284_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_182
.Lfunc_end284:
	.size	init_lists.221, .Lfunc_end284-init_lists.221
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.222
	.type	get_long_term_pic.222,@function
get_long_term_pic.222:                  # @get_long_term_pic.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$502314558, -28(%rbp)   # imm = 0x1DF0B63E
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB285_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB285_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB285_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB285_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB285_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB285_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB285_23
.LBB285_7:                              # %if.end
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_8
.LBB285_8:                              # %if.end14
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_20
.LBB285_9:                              # %if.else
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB285_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB285_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB285_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB285_23
.LBB285_13:                             # %if.end34
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_14
.LBB285_14:                             # %if.end35
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB285_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB285_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB285_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB285_23
.LBB285_18:                             # %if.end56
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_19
.LBB285_19:                             # %if.end57
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_20
.LBB285_20:                             # %if.end58
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_21
.LBB285_21:                             # %for.inc
                                        #   in Loop: Header=BB285_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB285_1
.LBB285_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB285_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$502314558, -28(%rbp)   # imm = 0x1DF0B63E
	jne	.LBB285_25
.LBB285_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_24
.Lfunc_end285:
	.size	get_long_term_pic.222, .Lfunc_end285-get_long_term_pic.222
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.223
	.type	compare_pic_by_lt_pic_num_asc.223,@function
compare_pic_by_lt_pic_num_asc.223:      # @compare_pic_by_lt_pic_num_asc.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$952126948, -16(%rbp)   # imm = 0x38C04DE4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB286_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB286_5
.LBB286_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB286_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB286_5
.LBB286_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB286_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$952126948, -16(%rbp)   # imm = 0x38C04DE4
	jne	.LBB286_7
.LBB286_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_6
.Lfunc_end286:
	.size	compare_pic_by_lt_pic_num_asc.223, .Lfunc_end286-compare_pic_by_lt_pic_num_asc.223
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.224
	.type	get_pic_num_x.224,@function
get_pic_num_x.224:                      # @get_pic_num_x.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$917879571, -32(%rbp)   # imm = 0x36B5BB13
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB287_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_3
.LBB287_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB287_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$917879571, -32(%rbp)   # imm = 0x36B5BB13
	jne	.LBB287_5
.LBB287_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_4
.Lfunc_end287:
	.size	get_pic_num_x.224, .Lfunc_end287-get_pic_num_x.224
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.225
	.type	reorder_long_term.225,@function
reorder_long_term.225:                  # @reorder_long_term.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1238233423, -44(%rbp)  # imm = 0x49CDF14F
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB288_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB288_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB288_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB288_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_1
.LBB288_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB288_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB288_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB288_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB288_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB288_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB288_9
.LBB288_8:                              # %if.then
                                        #   in Loop: Header=BB288_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB288_9:                              # %if.end
                                        #   in Loop: Header=BB288_5 Depth=1
	jmp	.LBB288_10
.LBB288_10:                             # %for.inc19
                                        #   in Loop: Header=BB288_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_5
.LBB288_11:                             # %for.end21
	cmpl	$1238233423, -44(%rbp)  # imm = 0x49CDF14F
	jne	.LBB288_13
.LBB288_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_12
.Lfunc_end288:
	.size	reorder_long_term.225, .Lfunc_end288-reorder_long_term.225
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.226 # -- Begin function store_picture_in_dpb.226
	.p2align	4, 0x90
	.type	store_picture_in_dpb.226,@function
store_picture_in_dpb.226:               # @store_picture_in_dpb.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$983151307, -24(%rbp)   # imm = 0x3A99B2CB
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB289_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB289_6
.LBB289_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB289_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB289_5:                              # %if.end
	jmp	.LBB289_6
.LBB289_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB289_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB289_23
.LBB289_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB289_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB289_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB289_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB289_14
.LBB289_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB289_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB289_20
.LBB289_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB289_18
.LBB289_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB289_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB289_19
.LBB289_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB289_50
.LBB289_19:                             # %if.end48
	jmp	.LBB289_20
.LBB289_20:                             # %if.end49
	jmp	.LBB289_21
.LBB289_21:                             # %if.end50
	jmp	.LBB289_22
.LBB289_22:                             # %if.end51
	jmp	.LBB289_23
.LBB289_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB289_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB289_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB289_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB289_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB289_29:                             # %if.end67
	jmp	.LBB289_30
.LBB289_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB289_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB289_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB289_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB289_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB289_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB289_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB289_35
.LBB289_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB289_50
.LBB289_35:                             # %if.end80
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_36
.LBB289_36:                             # %if.end81
                                        #   in Loop: Header=BB289_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB289_30
.LBB289_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB289_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB289_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB289_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB289_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB289_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB289_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB289_43:                             # %if.end94
                                        #   in Loop: Header=BB289_40 Depth=1
	jmp	.LBB289_44
.LBB289_44:                             # %for.inc
                                        #   in Loop: Header=BB289_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_40
.LBB289_45:                             # %for.end
	jmp	.LBB289_46
.LBB289_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB289_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB289_49
.LBB289_48:                             # %if.else104
	movq	$0, dpb+56
.LBB289_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB289_50:                             # %return
	cmpl	$983151307, -24(%rbp)   # imm = 0x3A99B2CB
	jne	.LBB289_52
.LBB289_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_51
.Lfunc_end289:
	.size	store_picture_in_dpb.226, .Lfunc_end289-store_picture_in_dpb.226
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.227
	.type	compare_pic_by_lt_pic_num_asc.227,@function
compare_pic_by_lt_pic_num_asc.227:      # @compare_pic_by_lt_pic_num_asc.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$315038704, -16(%rbp)   # imm = 0x12C71BF0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB290_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB290_5
.LBB290_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB290_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB290_5
.LBB290_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB290_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$315038704, -16(%rbp)   # imm = 0x12C71BF0
	jne	.LBB290_7
.LBB290_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_6
.Lfunc_end290:
	.size	compare_pic_by_lt_pic_num_asc.227, .Lfunc_end290-compare_pic_by_lt_pic_num_asc.227
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.228  # -- Begin function fill_frame_num_gap.228
	.p2align	4, 0x90
	.type	fill_frame_num_gap.228,@function
fill_frame_num_gap.228:                 # @fill_frame_num_gap.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$579950462, -32(%rbp)   # imm = 0x2291577E
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB291_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB291_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB291_1
.LBB291_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$579950462, -32(%rbp)   # imm = 0x2291577E
	jne	.LBB291_5
.LBB291_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_4
.Lfunc_end291:
	.size	fill_frame_num_gap.228, .Lfunc_end291-fill_frame_num_gap.228
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.229
	.type	mm_unmark_short_term_for_reference.229,@function
mm_unmark_short_term_for_reference.229: # @mm_unmark_short_term_for_reference.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1075010165, -16(%rbp)  # imm = 0x40135A75
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB292_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB292_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB292_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB292_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB292_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB292_27
.LBB292_7:                              # %if.end
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_8
.LBB292_8:                              # %if.end13
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_24
.LBB292_9:                              # %if.else
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB292_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB292_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB292_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB292_14:                             # %if.end44
	jmp	.LBB292_27
.LBB292_15:                             # %if.end45
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_16
.LBB292_16:                             # %if.end46
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB292_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB292_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB292_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB292_21:                             # %if.end81
	jmp	.LBB292_27
.LBB292_22:                             # %if.end82
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_23
.LBB292_23:                             # %if.end83
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_24
.LBB292_24:                             # %if.end84
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_25
.LBB292_25:                             # %for.inc
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_1
.LBB292_26:                             # %for.end.loopexit
	jmp	.LBB292_27
.LBB292_27:                             # %for.end
	cmpl	$1075010165, -16(%rbp)  # imm = 0x40135A75
	jne	.LBB292_29
.LBB292_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_28
.Lfunc_end292:
	.size	mm_unmark_short_term_for_reference.229, .Lfunc_end292-mm_unmark_short_term_for_reference.229
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.230          # -- Begin function init_lists.230
	.p2align	4, 0x90
	.type	init_lists.230,@function
init_lists.230:                         # @init_lists.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$220981057, -76(%rbp)   # imm = 0xD2BE741
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB293_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB293_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB293_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB293_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB293_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB293_9
.LBB293_8:                              # %if.else
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB293_9:                              # %if.end
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB293_10:                             # %if.end36
                                        #   in Loop: Header=BB293_2 Depth=1
	jmp	.LBB293_11
.LBB293_11:                             # %if.end37
                                        #   in Loop: Header=BB293_2 Depth=1
	jmp	.LBB293_12
.LBB293_12:                             # %for.inc
                                        #   in Loop: Header=BB293_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_2
.LBB293_13:                             # %for.end
	jmp	.LBB293_31
.LBB293_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB293_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB293_17
.LBB293_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB293_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB293_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB293_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB293_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB293_23
.LBB293_22:                             # %if.else63
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB293_23:                             # %if.end70
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB293_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB293_25:                             # %if.end83
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB293_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB293_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB293_27:                             # %if.end98
                                        #   in Loop: Header=BB293_18 Depth=1
	jmp	.LBB293_28
.LBB293_28:                             # %if.end99
                                        #   in Loop: Header=BB293_18 Depth=1
	jmp	.LBB293_29
.LBB293_29:                             # %for.inc100
                                        #   in Loop: Header=BB293_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_18
.LBB293_30:                             # %for.end102
	jmp	.LBB293_31
.LBB293_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB293_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB293_34
.LBB293_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB293_181
.LBB293_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB293_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB293_75
.LBB293_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB293_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB293_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB293_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB293_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB293_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB293_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB293_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB293_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_43:                             # %if.end140
                                        #   in Loop: Header=BB293_38 Depth=1
	jmp	.LBB293_44
.LBB293_44:                             # %if.end141
                                        #   in Loop: Header=BB293_38 Depth=1
	jmp	.LBB293_45
.LBB293_45:                             # %for.inc142
                                        #   in Loop: Header=BB293_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_38
.LBB293_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB293_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB293_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB293_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB293_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB293_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB293_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_51:                             # %if.end177
                                        #   in Loop: Header=BB293_47 Depth=1
	jmp	.LBB293_52
.LBB293_52:                             # %if.end178
                                        #   in Loop: Header=BB293_47 Depth=1
	jmp	.LBB293_53
.LBB293_53:                             # %for.inc179
                                        #   in Loop: Header=BB293_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_47
.LBB293_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB293_74
.LBB293_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB293_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB293_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB293_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB293_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB293_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB293_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB293_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB293_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_63:                             # %if.end212
                                        #   in Loop: Header=BB293_60 Depth=1
	jmp	.LBB293_64
.LBB293_64:                             # %for.inc213
                                        #   in Loop: Header=BB293_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_60
.LBB293_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB293_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB293_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB293_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB293_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB293_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB293_69:                             # %if.end242
                                        #   in Loop: Header=BB293_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB293_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB293_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB293_71:                             # %if.end259
                                        #   in Loop: Header=BB293_66 Depth=1
	jmp	.LBB293_72
.LBB293_72:                             # %for.inc260
                                        #   in Loop: Header=BB293_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_66
.LBB293_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB293_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB293_155
.LBB293_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB293_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB293_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB293_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB293_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB293_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB293_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB293_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB293_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB293_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB293_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_83:                             # %if.end307
                                        #   in Loop: Header=BB293_77 Depth=1
	jmp	.LBB293_84
.LBB293_84:                             # %if.end308
                                        #   in Loop: Header=BB293_77 Depth=1
	jmp	.LBB293_85
.LBB293_85:                             # %if.end309
                                        #   in Loop: Header=BB293_77 Depth=1
	jmp	.LBB293_86
.LBB293_86:                             # %for.inc310
                                        #   in Loop: Header=BB293_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_77
.LBB293_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB293_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB293_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB293_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB293_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB293_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB293_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB293_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB293_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB293_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_94:                             # %if.end354
                                        #   in Loop: Header=BB293_88 Depth=1
	jmp	.LBB293_95
.LBB293_95:                             # %if.end355
                                        #   in Loop: Header=BB293_88 Depth=1
	jmp	.LBB293_96
.LBB293_96:                             # %if.end356
                                        #   in Loop: Header=BB293_88 Depth=1
	jmp	.LBB293_97
.LBB293_97:                             # %for.inc357
                                        #   in Loop: Header=BB293_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_88
.LBB293_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB293_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB293_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB293_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB293_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_99
.LBB293_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB293_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB293_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB293_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB293_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_103
.LBB293_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB293_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB293_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB293_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB293_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB293_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB293_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB293_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_111:                            # %if.end428
                                        #   in Loop: Header=BB293_107 Depth=1
	jmp	.LBB293_112
.LBB293_112:                            # %if.end429
                                        #   in Loop: Header=BB293_107 Depth=1
	jmp	.LBB293_113
.LBB293_113:                            # %for.inc430
                                        #   in Loop: Header=BB293_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_107
.LBB293_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB293_154
.LBB293_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB293_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB293_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB293_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB293_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB293_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB293_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB293_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB293_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB293_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB293_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB293_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB293_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_126:                            # %if.end480
                                        #   in Loop: Header=BB293_122 Depth=1
	jmp	.LBB293_127
.LBB293_127:                            # %if.end481
                                        #   in Loop: Header=BB293_122 Depth=1
	jmp	.LBB293_128
.LBB293_128:                            # %for.inc482
                                        #   in Loop: Header=BB293_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_122
.LBB293_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB293_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB293_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB293_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB293_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB293_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB293_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB293_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_134:                            # %if.end507
                                        #   in Loop: Header=BB293_130 Depth=1
	jmp	.LBB293_135
.LBB293_135:                            # %if.end508
                                        #   in Loop: Header=BB293_130 Depth=1
	jmp	.LBB293_136
.LBB293_136:                            # %for.inc509
                                        #   in Loop: Header=BB293_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_130
.LBB293_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB293_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB293_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB293_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB293_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_138
.LBB293_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB293_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB293_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB293_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB293_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_142
.LBB293_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB293_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB293_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB293_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB293_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB293_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB293_149:                            # %if.end566
                                        #   in Loop: Header=BB293_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB293_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB293_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB293_151:                            # %if.end583
                                        #   in Loop: Header=BB293_146 Depth=1
	jmp	.LBB293_152
.LBB293_152:                            # %for.inc584
                                        #   in Loop: Header=BB293_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_146
.LBB293_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB293_154:                            # %if.end588
	jmp	.LBB293_155
.LBB293_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB293_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB293_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB293_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB293_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB293_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB293_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB293_158 Depth=1
	movl	$1, -68(%rbp)
.LBB293_161:                            # %if.end607
                                        #   in Loop: Header=BB293_158 Depth=1
	jmp	.LBB293_162
.LBB293_162:                            # %for.inc608
                                        #   in Loop: Header=BB293_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_158
.LBB293_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB293_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB293_165:                            # %if.end617
	jmp	.LBB293_166
.LBB293_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB293_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB293_169
.LBB293_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB293_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB293_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB293_172
.LBB293_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB293_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB293_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB293_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB293_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB293_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_173
.LBB293_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB293_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB293_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB293_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB293_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_177
.LBB293_180:                            # %for.end646.loopexit
	jmp	.LBB293_181
.LBB293_181:                            # %for.end646
	cmpl	$220981057, -76(%rbp)   # imm = 0xD2BE741
	jne	.LBB293_183
.LBB293_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_182
.Lfunc_end293:
	.size	init_lists.230, .Lfunc_end293-init_lists.230
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.231     # -- Begin function alloc_colocated.231
	.p2align	4, 0x90
	.type	alloc_colocated.231,@function
alloc_colocated.231:                    # @alloc_colocated.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1413938445, -32(%rbp)  # imm = 0x5446FD0D
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB294_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB294_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB294_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB294_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1413938445, -32(%rbp)  # imm = 0x5446FD0D
	jne	.LBB294_6
.LBB294_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_5
.Lfunc_end294:
	.size	alloc_colocated.231, .Lfunc_end294-alloc_colocated.231
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.232
	.type	mm_assign_long_term_frame_idx.232,@function
mm_assign_long_term_frame_idx.232:      # @mm_assign_long_term_frame_idx.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$844956468, -28(%rbp)   # imm = 0x325D0334
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB295_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB295_18
.LBB295_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB295_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB295_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB295_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB295_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB295_15
.LBB295_7:                              # %if.end
                                        #   in Loop: Header=BB295_3 Depth=1
	jmp	.LBB295_8
.LBB295_8:                              # %if.end8
                                        #   in Loop: Header=BB295_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB295_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB295_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB295_15
.LBB295_11:                             # %if.end20
                                        #   in Loop: Header=BB295_3 Depth=1
	jmp	.LBB295_12
.LBB295_12:                             # %if.end21
                                        #   in Loop: Header=BB295_3 Depth=1
	jmp	.LBB295_13
.LBB295_13:                             # %for.inc
                                        #   in Loop: Header=BB295_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_3
.LBB295_14:                             # %for.end.loopexit
	jmp	.LBB295_15
.LBB295_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB295_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB295_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB295_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$844956468, -28(%rbp)   # imm = 0x325D0334
	jne	.LBB295_20
.LBB295_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_19
.Lfunc_end295:
	.size	mm_assign_long_term_frame_idx.232, .Lfunc_end295-mm_assign_long_term_frame_idx.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.233
	.type	unmark_long_term_field_for_reference_by_frame_idx.233,@function
unmark_long_term_field_for_reference_by_frame_idx.233: # @unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2052165670, -28(%rbp)  # imm = 0x7A519026
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB296_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB296_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB296_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB296_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB296_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB296_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_23
.LBB296_8:                              # %if.else
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB296_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_22
.LBB296_10:                             # %if.else21
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB296_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB296_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB296_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB296_15
.LBB296_14:                             # %if.then29
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_15:                             # %if.end32
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_17
.LBB296_16:                             # %if.else33
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_17:                             # %if.end36
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_21
.LBB296_18:                             # %if.else37
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB296_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_20:                             # %if.end45
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_21
.LBB296_21:                             # %if.end46
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_22
.LBB296_22:                             # %if.end47
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_23
.LBB296_23:                             # %if.end48
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_24
.LBB296_24:                             # %if.end49
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB296_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_42
.LBB296_27:                             # %if.else59
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB296_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_41
.LBB296_29:                             # %if.else67
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB296_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB296_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB296_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB296_34
.LBB296_33:                             # %if.then78
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_34:                             # %if.end81
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_36
.LBB296_35:                             # %if.else82
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_36:                             # %if.end85
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_40
.LBB296_37:                             # %if.else86
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB296_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_39:                             # %if.end95
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_40
.LBB296_40:                             # %if.end96
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_41
.LBB296_41:                             # %if.end97
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_42
.LBB296_42:                             # %if.end98
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_43
.LBB296_43:                             # %if.end99
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_44
.LBB296_44:                             # %if.end100
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_45
.LBB296_45:                             # %for.inc
                                        #   in Loop: Header=BB296_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_3
.LBB296_46:                             # %for.end
	cmpl	$2052165670, -28(%rbp)  # imm = 0x7A519026
	jne	.LBB296_48
.LBB296_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_47
.Lfunc_end296:
	.size	unmark_long_term_field_for_reference_by_frame_idx.233, .Lfunc_end296-unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.234
	.type	get_long_term_pic.234,@function
get_long_term_pic.234:                  # @get_long_term_pic.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1131543865, -28(%rbp)  # imm = 0x4371FD39
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB297_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB297_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB297_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB297_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB297_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB297_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB297_23
.LBB297_7:                              # %if.end
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_8
.LBB297_8:                              # %if.end14
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_20
.LBB297_9:                              # %if.else
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB297_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB297_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB297_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB297_23
.LBB297_13:                             # %if.end34
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_14
.LBB297_14:                             # %if.end35
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB297_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB297_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB297_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB297_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB297_23
.LBB297_18:                             # %if.end56
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_19
.LBB297_19:                             # %if.end57
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_20
.LBB297_20:                             # %if.end58
                                        #   in Loop: Header=BB297_1 Depth=1
	jmp	.LBB297_21
.LBB297_21:                             # %for.inc
                                        #   in Loop: Header=BB297_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB297_1
.LBB297_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB297_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1131543865, -28(%rbp)  # imm = 0x4371FD39
	jne	.LBB297_25
.LBB297_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_24
.Lfunc_end297:
	.size	get_long_term_pic.234, .Lfunc_end297-get_long_term_pic.234
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.235   # -- Begin function gen_field_ref_ids.235
	.p2align	4, 0x90
	.type	gen_field_ref_ids.235,@function
gen_field_ref_ids.235:                  # @gen_field_ref_ids.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$876714326, -28(%rbp)   # imm = 0x34419956
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB298_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB298_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB298_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB298_1 Depth=1
	movl	$0, -8(%rbp)
.LBB298_3:                              # %for.cond1
                                        #   Parent Loop BB298_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB298_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB298_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB298_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB298_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB298_7
.LBB298_6:                              # %cond.false
                                        #   in Loop: Header=BB298_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB298_7
.LBB298_7:                              # %cond.end
                                        #   in Loop: Header=BB298_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB298_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB298_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB298_10
.LBB298_9:                              # %cond.false32
                                        #   in Loop: Header=BB298_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB298_10
.LBB298_10:                             # %cond.end33
                                        #   in Loop: Header=BB298_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB298_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB298_3
.LBB298_12:                             # %for.end
                                        #   in Loop: Header=BB298_1 Depth=1
	jmp	.LBB298_13
.LBB298_13:                             # %for.inc45
                                        #   in Loop: Header=BB298_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_1
.LBB298_14:                             # %for.end47
	cmpl	$876714326, -28(%rbp)   # imm = 0x34419956
	jne	.LBB298_16
.LBB298_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_15
.Lfunc_end298:
	.size	gen_field_ref_ids.235, .Lfunc_end298-gen_field_ref_ids.235
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.236   # -- Begin function gen_field_ref_ids.236
	.p2align	4, 0x90
	.type	gen_field_ref_ids.236,@function
gen_field_ref_ids.236:                  # @gen_field_ref_ids.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1497946423, -28(%rbp)  # imm = 0x5948D937
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB299_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB299_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB299_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	$0, -8(%rbp)
.LBB299_3:                              # %for.cond1
                                        #   Parent Loop BB299_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB299_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB299_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB299_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB299_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB299_7
.LBB299_6:                              # %cond.false
                                        #   in Loop: Header=BB299_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_7
.LBB299_7:                              # %cond.end
                                        #   in Loop: Header=BB299_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB299_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB299_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB299_10
.LBB299_9:                              # %cond.false32
                                        #   in Loop: Header=BB299_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_10
.LBB299_10:                             # %cond.end33
                                        #   in Loop: Header=BB299_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB299_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB299_3
.LBB299_12:                             # %for.end
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_13
.LBB299_13:                             # %for.inc45
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB299_1
.LBB299_14:                             # %for.end47
	cmpl	$1497946423, -28(%rbp)  # imm = 0x5948D937
	jne	.LBB299_16
.LBB299_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_15
.Lfunc_end299:
	.size	gen_field_ref_ids.236, .Lfunc_end299-gen_field_ref_ids.236
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.237
	.type	get_pic_num_x.237,@function
get_pic_num_x.237:                      # @get_pic_num_x.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$652144063, -28(%rbp)   # imm = 0x26DEEDBF
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB300_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_3
.LBB300_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB300_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$652144063, -28(%rbp)   # imm = 0x26DEEDBF
	jne	.LBB300_5
.LBB300_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_4
.Lfunc_end300:
	.size	get_pic_num_x.237, .Lfunc_end300-get_pic_num_x.237
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.238
	.type	get_pic_num_x.238,@function
get_pic_num_x.238:                      # @get_pic_num_x.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1636169531, -32(%rbp)  # imm = 0x6185F73B
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB301_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_3
.LBB301_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB301_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1636169531, -32(%rbp)  # imm = 0x6185F73B
	jne	.LBB301_5
.LBB301_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_4
.Lfunc_end301:
	.size	get_pic_num_x.238, .Lfunc_end301-get_pic_num_x.238
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.239 # -- Begin function alloc_storable_picture.239
	.p2align	4, 0x90
	.type	alloc_storable_picture.239,@function
alloc_storable_picture.239:             # @alloc_storable_picture.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1133012524, -40(%rbp)  # imm = 0x4388662C
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB302_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB302_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB302_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB302_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB302_6
.LBB302_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB302_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB302_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB302_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB302_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB302_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1133012524, -40(%rbp)  # imm = 0x4388662C
	jne	.LBB302_12
.LBB302_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_11
.Lfunc_end302:
	.size	alloc_storable_picture.239, .Lfunc_end302-alloc_storable_picture.239
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.240   # -- Begin function gen_field_ref_ids.240
	.p2align	4, 0x90
	.type	gen_field_ref_ids.240,@function
gen_field_ref_ids.240:                  # @gen_field_ref_ids.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1639777733, -28(%rbp)  # imm = 0x61BD05C5
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB303_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB303_1 Depth=1
	movl	$0, -8(%rbp)
.LBB303_3:                              # %for.cond1
                                        #   Parent Loop BB303_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB303_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB303_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB303_7
.LBB303_6:                              # %cond.false
                                        #   in Loop: Header=BB303_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_7
.LBB303_7:                              # %cond.end
                                        #   in Loop: Header=BB303_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB303_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB303_10
.LBB303_9:                              # %cond.false32
                                        #   in Loop: Header=BB303_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_10
.LBB303_10:                             # %cond.end33
                                        #   in Loop: Header=BB303_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB303_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_3
.LBB303_12:                             # %for.end
                                        #   in Loop: Header=BB303_1 Depth=1
	jmp	.LBB303_13
.LBB303_13:                             # %for.inc45
                                        #   in Loop: Header=BB303_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_1
.LBB303_14:                             # %for.end47
	cmpl	$1639777733, -28(%rbp)  # imm = 0x61BD05C5
	jne	.LBB303_16
.LBB303_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_15
.Lfunc_end303:
	.size	gen_field_ref_ids.240, .Lfunc_end303-gen_field_ref_ids.240
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.241 # -- Begin function reorder_ref_pic_list.241
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.241,@function
reorder_ref_pic_list.241:               # @reorder_ref_pic_list.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$26561693, -60(%rbp)    # imm = 0x1954C9D
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB304_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB304_3
.LBB304_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB304_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB304_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB304_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB304_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB304_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB304_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB304_7:                              # %if.end9
                                        #   in Loop: Header=BB304_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB304_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB304_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB304_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB304_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_12
.LBB304_11:                             # %if.else28
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB304_12:                             # %if.end33
                                        #   in Loop: Header=BB304_4 Depth=1
	jmp	.LBB304_17
.LBB304_13:                             # %if.else34
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB304_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_16
.LBB304_15:                             # %if.else46
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB304_16:                             # %if.end51
                                        #   in Loop: Header=BB304_4 Depth=1
	jmp	.LBB304_17
.LBB304_17:                             # %if.end52
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB304_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB304_20
.LBB304_19:                             # %if.else56
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB304_20:                             # %if.end57
                                        #   in Loop: Header=BB304_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB304_22
.LBB304_21:                             # %if.else58
                                        #   in Loop: Header=BB304_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB304_22:                             # %if.end61
                                        #   in Loop: Header=BB304_4 Depth=1
	jmp	.LBB304_23
.LBB304_23:                             # %for.inc
                                        #   in Loop: Header=BB304_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_4
.LBB304_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$26561693, -60(%rbp)    # imm = 0x1954C9D
	jne	.LBB304_26
.LBB304_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_25
.Lfunc_end304:
	.size	reorder_ref_pic_list.241, .Lfunc_end304-reorder_ref_pic_list.241
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.242
	.type	compare_pic_by_poc_desc.242,@function
compare_pic_by_poc_desc.242:            # @compare_pic_by_poc_desc.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$75956078, -16(%rbp)    # imm = 0x486FF6E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB305_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB305_5
.LBB305_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB305_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB305_5
.LBB305_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB305_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$75956078, -16(%rbp)    # imm = 0x486FF6E
	jne	.LBB305_7
.LBB305_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_6
.Lfunc_end305:
	.size	compare_pic_by_poc_desc.242, .Lfunc_end305-compare_pic_by_poc_desc.242
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.243
	.type	compare_fs_by_lt_pic_idx_asc.243,@function
compare_fs_by_lt_pic_idx_asc.243:       # @compare_fs_by_lt_pic_idx_asc.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$592851849, -16(%rbp)   # imm = 0x23563389
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB306_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB306_5
.LBB306_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB306_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB306_5
.LBB306_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB306_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$592851849, -16(%rbp)   # imm = 0x23563389
	jne	.LBB306_7
.LBB306_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_6
.Lfunc_end306:
	.size	compare_fs_by_lt_pic_idx_asc.243, .Lfunc_end306-compare_fs_by_lt_pic_idx_asc.243
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.244 # -- Begin function alloc_storable_picture.244
	.p2align	4, 0x90
	.type	alloc_storable_picture.244,@function
alloc_storable_picture.244:             # @alloc_storable_picture.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$684717576, -40(%rbp)   # imm = 0x28CFF608
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB307_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB307_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB307_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB307_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB307_6
.LBB307_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB307_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB307_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB307_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB307_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB307_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$684717576, -40(%rbp)   # imm = 0x28CFF608
	jne	.LBB307_12
.LBB307_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_11
.Lfunc_end307:
	.size	alloc_storable_picture.244, .Lfunc_end307-alloc_storable_picture.244
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.245 # -- Begin function store_picture_in_dpb.245
	.p2align	4, 0x90
	.type	store_picture_in_dpb.245,@function
store_picture_in_dpb.245:               # @store_picture_in_dpb.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$257812559, -24(%rbp)   # imm = 0xF5DE84F
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB308_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB308_6
.LBB308_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB308_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB308_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB308_5:                              # %if.end
	jmp	.LBB308_6
.LBB308_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB308_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB308_23
.LBB308_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB308_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB308_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB308_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB308_14
.LBB308_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB308_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB308_20
.LBB308_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB308_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB308_18
.LBB308_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB308_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB308_19
.LBB308_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB308_50
.LBB308_19:                             # %if.end48
	jmp	.LBB308_20
.LBB308_20:                             # %if.end49
	jmp	.LBB308_21
.LBB308_21:                             # %if.end50
	jmp	.LBB308_22
.LBB308_22:                             # %if.end51
	jmp	.LBB308_23
.LBB308_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB308_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB308_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB308_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB308_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB308_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB308_29:                             # %if.end67
	jmp	.LBB308_30
.LBB308_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB308_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB308_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB308_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB308_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB308_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB308_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB308_35
.LBB308_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB308_50
.LBB308_35:                             # %if.end80
                                        #   in Loop: Header=BB308_30 Depth=1
	jmp	.LBB308_36
.LBB308_36:                             # %if.end81
                                        #   in Loop: Header=BB308_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB308_30
.LBB308_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB308_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB308_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB308_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB308_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB308_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB308_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB308_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB308_43:                             # %if.end94
                                        #   in Loop: Header=BB308_40 Depth=1
	jmp	.LBB308_44
.LBB308_44:                             # %for.inc
                                        #   in Loop: Header=BB308_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_40
.LBB308_45:                             # %for.end
	jmp	.LBB308_46
.LBB308_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB308_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB308_49
.LBB308_48:                             # %if.else104
	movq	$0, dpb+56
.LBB308_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB308_50:                             # %return
	cmpl	$257812559, -24(%rbp)   # imm = 0xF5DE84F
	jne	.LBB308_52
.LBB308_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_51
.Lfunc_end308:
	.size	store_picture_in_dpb.245, .Lfunc_end308-store_picture_in_dpb.245
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.246
	.type	unmark_long_term_field_for_reference_by_frame_idx.246,@function
unmark_long_term_field_for_reference_by_frame_idx.246: # @unmark_long_term_field_for_reference_by_frame_idx.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$439896025, -24(%rbp)   # imm = 0x1A3847D9
	movl	%edi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB309_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB309_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB309_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB309_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB309_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB309_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB309_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB309_23
.LBB309_8:                              # %if.else
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB309_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB309_22
.LBB309_10:                             # %if.else21
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB309_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB309_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB309_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB309_15
.LBB309_14:                             # %if.then29
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_15:                             # %if.end32
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_17
.LBB309_16:                             # %if.else33
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_17:                             # %if.end36
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_21
.LBB309_18:                             # %if.else37
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB309_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_20:                             # %if.end45
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_21
.LBB309_21:                             # %if.end46
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_22
.LBB309_22:                             # %if.end47
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_23
.LBB309_23:                             # %if.end48
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_24
.LBB309_24:                             # %if.end49
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB309_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB309_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB309_42
.LBB309_27:                             # %if.else59
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB309_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB309_41
.LBB309_29:                             # %if.else67
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB309_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB309_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB309_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB309_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB309_34
.LBB309_33:                             # %if.then78
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_34:                             # %if.end81
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_36
.LBB309_35:                             # %if.else82
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_36:                             # %if.end85
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_40
.LBB309_37:                             # %if.else86
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB309_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB309_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB309_39:                             # %if.end95
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_40
.LBB309_40:                             # %if.end96
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_41
.LBB309_41:                             # %if.end97
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_42
.LBB309_42:                             # %if.end98
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_43
.LBB309_43:                             # %if.end99
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_44
.LBB309_44:                             # %if.end100
                                        #   in Loop: Header=BB309_3 Depth=1
	jmp	.LBB309_45
.LBB309_45:                             # %for.inc
                                        #   in Loop: Header=BB309_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB309_3
.LBB309_46:                             # %for.end
	cmpl	$439896025, -24(%rbp)   # imm = 0x1A3847D9
	jne	.LBB309_48
.LBB309_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_47
.Lfunc_end309:
	.size	unmark_long_term_field_for_reference_by_frame_idx.246, .Lfunc_end309-unmark_long_term_field_for_reference_by_frame_idx.246
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.247
	.type	compare_pic_by_lt_pic_num_asc.247,@function
compare_pic_by_lt_pic_num_asc.247:      # @compare_pic_by_lt_pic_num_asc.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1867953027, -16(%rbp)  # imm = 0x6F56B383
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB310_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB310_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB310_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1867953027, -16(%rbp)  # imm = 0x6F56B383
	jne	.LBB310_7
.LBB310_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_6
.Lfunc_end310:
	.size	compare_pic_by_lt_pic_num_asc.247, .Lfunc_end310-compare_pic_by_lt_pic_num_asc.247
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.248 # -- Begin function reorder_ref_pic_list.248
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.248,@function
reorder_ref_pic_list.248:               # @reorder_ref_pic_list.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$790951190, -60(%rbp)   # imm = 0x2F24F516
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB311_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB311_3
.LBB311_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB311_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB311_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB311_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB311_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB311_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB311_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB311_7:                              # %if.end9
                                        #   in Loop: Header=BB311_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB311_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB311_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB311_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB311_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_12
.LBB311_11:                             # %if.else28
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB311_12:                             # %if.end33
                                        #   in Loop: Header=BB311_4 Depth=1
	jmp	.LBB311_17
.LBB311_13:                             # %if.else34
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB311_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_16
.LBB311_15:                             # %if.else46
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB311_16:                             # %if.end51
                                        #   in Loop: Header=BB311_4 Depth=1
	jmp	.LBB311_17
.LBB311_17:                             # %if.end52
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB311_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB311_20
.LBB311_19:                             # %if.else56
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB311_20:                             # %if.end57
                                        #   in Loop: Header=BB311_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB311_22
.LBB311_21:                             # %if.else58
                                        #   in Loop: Header=BB311_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB311_22:                             # %if.end61
                                        #   in Loop: Header=BB311_4 Depth=1
	jmp	.LBB311_23
.LBB311_23:                             # %for.inc
                                        #   in Loop: Header=BB311_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_4
.LBB311_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$790951190, -60(%rbp)   # imm = 0x2F24F516
	jne	.LBB311_26
.LBB311_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_25
.Lfunc_end311:
	.size	reorder_ref_pic_list.248, .Lfunc_end311-reorder_ref_pic_list.248
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.249 # -- Begin function alloc_storable_picture.249
	.p2align	4, 0x90
	.type	alloc_storable_picture.249,@function
alloc_storable_picture.249:             # @alloc_storable_picture.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$294924483, -40(%rbp)   # imm = 0x119430C3
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB312_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB312_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB312_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB312_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB312_6
.LBB312_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB312_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB312_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB312_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB312_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB312_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$294924483, -40(%rbp)   # imm = 0x119430C3
	jne	.LBB312_12
.LBB312_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_11
.Lfunc_end312:
	.size	alloc_storable_picture.249, .Lfunc_end312-alloc_storable_picture.249
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.250 # -- Begin function reorder_ref_pic_list.250
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.250,@function
reorder_ref_pic_list.250:               # @reorder_ref_pic_list.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1922883417, -60(%rbp)  # imm = 0x729CDF59
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB313_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB313_3
.LBB313_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB313_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB313_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB313_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB313_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB313_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB313_7:                              # %if.end9
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB313_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB313_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB313_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB313_12
.LBB313_11:                             # %if.else28
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB313_12:                             # %if.end33
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_17
.LBB313_13:                             # %if.else34
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB313_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB313_16
.LBB313_15:                             # %if.else46
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB313_16:                             # %if.end51
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_17
.LBB313_17:                             # %if.end52
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB313_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB313_20
.LBB313_19:                             # %if.else56
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB313_20:                             # %if.end57
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB313_22
.LBB313_21:                             # %if.else58
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB313_22:                             # %if.end61
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_23
.LBB313_23:                             # %for.inc
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB313_4
.LBB313_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1922883417, -60(%rbp)  # imm = 0x729CDF59
	jne	.LBB313_26
.LBB313_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_25
.Lfunc_end313:
	.size	reorder_ref_pic_list.250, .Lfunc_end313-reorder_ref_pic_list.250
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.251
	.type	unmark_long_term_field_for_reference_by_frame_idx.251,@function
unmark_long_term_field_for_reference_by_frame_idx.251: # @unmark_long_term_field_for_reference_by_frame_idx.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$561175038, -32(%rbp)   # imm = 0x2172D9FE
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB314_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB314_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB314_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB314_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB314_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB314_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB314_23
.LBB314_8:                              # %if.else
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB314_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB314_22
.LBB314_10:                             # %if.else21
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB314_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB314_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB314_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB314_15
.LBB314_14:                             # %if.then29
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_15:                             # %if.end32
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_17
.LBB314_16:                             # %if.else33
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_17:                             # %if.end36
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_21
.LBB314_18:                             # %if.else37
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB314_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_20:                             # %if.end45
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_21
.LBB314_21:                             # %if.end46
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_22
.LBB314_22:                             # %if.end47
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_23
.LBB314_23:                             # %if.end48
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_24
.LBB314_24:                             # %if.end49
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB314_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB314_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB314_42
.LBB314_27:                             # %if.else59
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB314_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB314_41
.LBB314_29:                             # %if.else67
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB314_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB314_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB314_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB314_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB314_34
.LBB314_33:                             # %if.then78
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_34:                             # %if.end81
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_36
.LBB314_35:                             # %if.else82
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_36:                             # %if.end85
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_40
.LBB314_37:                             # %if.else86
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB314_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB314_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB314_39:                             # %if.end95
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_40
.LBB314_40:                             # %if.end96
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_41
.LBB314_41:                             # %if.end97
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_42
.LBB314_42:                             # %if.end98
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_43
.LBB314_43:                             # %if.end99
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_44
.LBB314_44:                             # %if.end100
                                        #   in Loop: Header=BB314_3 Depth=1
	jmp	.LBB314_45
.LBB314_45:                             # %for.inc
                                        #   in Loop: Header=BB314_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_3
.LBB314_46:                             # %for.end
	cmpl	$561175038, -32(%rbp)   # imm = 0x2172D9FE
	jne	.LBB314_48
.LBB314_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_47
.Lfunc_end314:
	.size	unmark_long_term_field_for_reference_by_frame_idx.251, .Lfunc_end314-unmark_long_term_field_for_reference_by_frame_idx.251
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.252
	.type	gen_pic_list_from_frame_list.252,@function
gen_pic_list_from_frame_list.252:       # @gen_pic_list_from_frame_list.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$805626385, -60(%rbp)   # imm = 0x3004E211
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB315_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB315_3
.LBB315_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB315_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB315_28
# %bb.4:                                # %if.then1
	jmp	.LBB315_5
.LBB315_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_9 Depth 2
                                        #     Child Loop BB315_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB315_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB315_7:                              # %lor.end
                                        #   in Loop: Header=BB315_5 Depth=1
	testb	$1, %al
	jne	.LBB315_8
	jmp	.LBB315_27
.LBB315_8:                              # %while.body
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_9
.LBB315_9:                              # %for.cond
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB315_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB315_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB315_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB315_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB315_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_17
.LBB315_13:                             # %if.end17
                                        #   in Loop: Header=BB315_9 Depth=2
	jmp	.LBB315_14
.LBB315_14:                             # %if.end18
                                        #   in Loop: Header=BB315_9 Depth=2
	jmp	.LBB315_15
.LBB315_15:                             # %for.inc
                                        #   in Loop: Header=BB315_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_9
.LBB315_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_17
.LBB315_17:                             # %for.end
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_18
.LBB315_18:                             # %for.cond20
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB315_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB315_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB315_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB315_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB315_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_26
.LBB315_22:                             # %if.end41
                                        #   in Loop: Header=BB315_18 Depth=2
	jmp	.LBB315_23
.LBB315_23:                             # %if.end42
                                        #   in Loop: Header=BB315_18 Depth=2
	jmp	.LBB315_24
.LBB315_24:                             # %for.inc43
                                        #   in Loop: Header=BB315_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_18
.LBB315_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_26
.LBB315_26:                             # %for.end45
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_5
.LBB315_27:                             # %while.end
	jmp	.LBB315_28
.LBB315_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB315_53
# %bb.29:                               # %if.then48
	jmp	.LBB315_30
.LBB315_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_34 Depth 2
                                        #     Child Loop BB315_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB315_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB315_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB315_32:                             # %lor.end53
                                        #   in Loop: Header=BB315_30 Depth=1
	testb	$1, %al
	jne	.LBB315_33
	jmp	.LBB315_52
.LBB315_33:                             # %while.body54
                                        #   in Loop: Header=BB315_30 Depth=1
	jmp	.LBB315_34
.LBB315_34:                             # %for.cond55
                                        #   Parent Loop BB315_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB315_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB315_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB315_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB315_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_42
.LBB315_38:                             # %if.end77
                                        #   in Loop: Header=BB315_34 Depth=2
	jmp	.LBB315_39
.LBB315_39:                             # %if.end78
                                        #   in Loop: Header=BB315_34 Depth=2
	jmp	.LBB315_40
.LBB315_40:                             # %for.inc79
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_34
.LBB315_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB315_30 Depth=1
	jmp	.LBB315_42
.LBB315_42:                             # %for.end81
                                        #   in Loop: Header=BB315_30 Depth=1
	jmp	.LBB315_43
.LBB315_43:                             # %for.cond82
                                        #   Parent Loop BB315_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB315_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB315_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB315_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB315_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB315_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB315_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_51
.LBB315_47:                             # %if.end104
                                        #   in Loop: Header=BB315_43 Depth=2
	jmp	.LBB315_48
.LBB315_48:                             # %if.end105
                                        #   in Loop: Header=BB315_43 Depth=2
	jmp	.LBB315_49
.LBB315_49:                             # %for.inc106
                                        #   in Loop: Header=BB315_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_43
.LBB315_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB315_30 Depth=1
	jmp	.LBB315_51
.LBB315_51:                             # %for.end108
                                        #   in Loop: Header=BB315_30 Depth=1
	jmp	.LBB315_30
.LBB315_52:                             # %while.end109
	jmp	.LBB315_53
.LBB315_53:                             # %if.end110
	cmpl	$805626385, -60(%rbp)   # imm = 0x3004E211
	jne	.LBB315_55
.LBB315_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_54
.Lfunc_end315:
	.size	gen_pic_list_from_frame_list.252, .Lfunc_end315-gen_pic_list_from_frame_list.252
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.253
	.type	compare_pic_by_lt_pic_num_asc.253,@function
compare_pic_by_lt_pic_num_asc.253:      # @compare_pic_by_lt_pic_num_asc.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$666326486, -16(%rbp)   # imm = 0x27B755D6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB316_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB316_5
.LBB316_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB316_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB316_5
.LBB316_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB316_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$666326486, -16(%rbp)   # imm = 0x27B755D6
	jne	.LBB316_7
.LBB316_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_6
.Lfunc_end316:
	.size	compare_pic_by_lt_pic_num_asc.253, .Lfunc_end316-compare_pic_by_lt_pic_num_asc.253
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.254
	.type	mm_assign_long_term_frame_idx.254,@function
mm_assign_long_term_frame_idx.254:      # @mm_assign_long_term_frame_idx.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$923882477, -28(%rbp)   # imm = 0x371153ED
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB317_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB317_18
.LBB317_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB317_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB317_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB317_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB317_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB317_15
.LBB317_7:                              # %if.end
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_8
.LBB317_8:                              # %if.end8
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB317_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB317_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB317_15
.LBB317_11:                             # %if.end20
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_12
.LBB317_12:                             # %if.end21
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_13
.LBB317_13:                             # %for.inc
                                        #   in Loop: Header=BB317_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_3
.LBB317_14:                             # %for.end.loopexit
	jmp	.LBB317_15
.LBB317_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB317_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB317_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB317_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$923882477, -28(%rbp)   # imm = 0x371153ED
	jne	.LBB317_20
.LBB317_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_19
.Lfunc_end317:
	.size	mm_assign_long_term_frame_idx.254, .Lfunc_end317-mm_assign_long_term_frame_idx.254
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.255
	.type	unmark_long_term_field_for_reference_by_frame_idx.255,@function
unmark_long_term_field_for_reference_by_frame_idx.255: # @unmark_long_term_field_for_reference_by_frame_idx.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$455323926, -28(%rbp)   # imm = 0x1B23B116
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB318_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB318_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB318_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB318_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB318_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB318_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB318_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB318_23
.LBB318_8:                              # %if.else
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB318_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB318_22
.LBB318_10:                             # %if.else21
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB318_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB318_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB318_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB318_15
.LBB318_14:                             # %if.then29
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_15:                             # %if.end32
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_17
.LBB318_16:                             # %if.else33
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_17:                             # %if.end36
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_21
.LBB318_18:                             # %if.else37
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB318_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_20:                             # %if.end45
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_21
.LBB318_21:                             # %if.end46
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_22
.LBB318_22:                             # %if.end47
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_23
.LBB318_23:                             # %if.end48
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_24
.LBB318_24:                             # %if.end49
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB318_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB318_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB318_42
.LBB318_27:                             # %if.else59
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB318_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB318_41
.LBB318_29:                             # %if.else67
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB318_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB318_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB318_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB318_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB318_34
.LBB318_33:                             # %if.then78
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_34:                             # %if.end81
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_36
.LBB318_35:                             # %if.else82
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_36:                             # %if.end85
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_40
.LBB318_37:                             # %if.else86
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB318_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB318_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB318_39:                             # %if.end95
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_40
.LBB318_40:                             # %if.end96
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_41
.LBB318_41:                             # %if.end97
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_42
.LBB318_42:                             # %if.end98
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_43
.LBB318_43:                             # %if.end99
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_44
.LBB318_44:                             # %if.end100
                                        #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_45
.LBB318_45:                             # %for.inc
                                        #   in Loop: Header=BB318_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB318_3
.LBB318_46:                             # %for.end
	cmpl	$455323926, -28(%rbp)   # imm = 0x1B23B116
	jne	.LBB318_48
.LBB318_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_47
.Lfunc_end318:
	.size	unmark_long_term_field_for_reference_by_frame_idx.255, .Lfunc_end318-unmark_long_term_field_for_reference_by_frame_idx.255
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.256 # -- Begin function reorder_ref_pic_list.256
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.256,@function
reorder_ref_pic_list.256:               # @reorder_ref_pic_list.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1101866199, -60(%rbp)  # imm = 0x41AD24D7
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB319_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB319_3
.LBB319_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB319_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB319_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB319_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB319_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB319_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB319_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB319_7:                              # %if.end9
                                        #   in Loop: Header=BB319_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB319_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB319_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB319_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB319_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_12
.LBB319_11:                             # %if.else28
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB319_12:                             # %if.end33
                                        #   in Loop: Header=BB319_4 Depth=1
	jmp	.LBB319_17
.LBB319_13:                             # %if.else34
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB319_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_16
.LBB319_15:                             # %if.else46
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB319_16:                             # %if.end51
                                        #   in Loop: Header=BB319_4 Depth=1
	jmp	.LBB319_17
.LBB319_17:                             # %if.end52
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB319_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB319_20
.LBB319_19:                             # %if.else56
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB319_20:                             # %if.end57
                                        #   in Loop: Header=BB319_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB319_22
.LBB319_21:                             # %if.else58
                                        #   in Loop: Header=BB319_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB319_22:                             # %if.end61
                                        #   in Loop: Header=BB319_4 Depth=1
	jmp	.LBB319_23
.LBB319_23:                             # %for.inc
                                        #   in Loop: Header=BB319_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_4
.LBB319_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1101866199, -60(%rbp)  # imm = 0x41AD24D7
	jne	.LBB319_26
.LBB319_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_25
.Lfunc_end319:
	.size	reorder_ref_pic_list.256, .Lfunc_end319-reorder_ref_pic_list.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.257
	.type	mm_assign_long_term_frame_idx.257,@function
mm_assign_long_term_frame_idx.257:      # @mm_assign_long_term_frame_idx.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1558283973, -32(%rbp)  # imm = 0x5CE186C5
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB320_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB320_18
.LBB320_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB320_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB320_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB320_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB320_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB320_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB320_15
.LBB320_7:                              # %if.end
                                        #   in Loop: Header=BB320_3 Depth=1
	jmp	.LBB320_8
.LBB320_8:                              # %if.end8
                                        #   in Loop: Header=BB320_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB320_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB320_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB320_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB320_15
.LBB320_11:                             # %if.end20
                                        #   in Loop: Header=BB320_3 Depth=1
	jmp	.LBB320_12
.LBB320_12:                             # %if.end21
                                        #   in Loop: Header=BB320_3 Depth=1
	jmp	.LBB320_13
.LBB320_13:                             # %for.inc
                                        #   in Loop: Header=BB320_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_3
.LBB320_14:                             # %for.end.loopexit
	jmp	.LBB320_15
.LBB320_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB320_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB320_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB320_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1558283973, -32(%rbp)  # imm = 0x5CE186C5
	jne	.LBB320_20
.LBB320_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_19
.Lfunc_end320:
	.size	mm_assign_long_term_frame_idx.257, .Lfunc_end320-mm_assign_long_term_frame_idx.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.258
	.type	compare_pic_by_lt_pic_num_asc.258,@function
compare_pic_by_lt_pic_num_asc.258:      # @compare_pic_by_lt_pic_num_asc.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$641242272, -16(%rbp)   # imm = 0x263894A0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB321_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB321_5
.LBB321_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB321_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB321_5
.LBB321_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB321_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$641242272, -16(%rbp)   # imm = 0x263894A0
	jne	.LBB321_7
.LBB321_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_6
.Lfunc_end321:
	.size	compare_pic_by_lt_pic_num_asc.258, .Lfunc_end321-compare_pic_by_lt_pic_num_asc.258
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.259     # -- Begin function dpb_split_field.259
	.p2align	4, 0x90
	.type	dpb_split_field.259,@function
dpb_split_field.259:                    # @dpb_split_field.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$240941621, -52(%rbp)   # imm = 0xE5C7A35
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB322_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB322_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB322_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB322_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_2
.LBB322_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB322_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB322_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB322_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_6
.LBB322_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB322_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB322_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB322_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_10
.LBB322_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB322_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB322_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB322_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_14
.LBB322_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB322_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB322_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB322_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB322_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB322_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_19
.LBB322_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB322_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB322_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB322_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB322_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_23
.LBB322_26:                             # %for.end328
	jmp	.LBB322_27
.LBB322_27:                             # %if.end
	jmp	.LBB322_29
.LBB322_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB322_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB322_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB322_30 Depth=1
	movl	$0, -4(%rbp)
.LBB322_32:                             # %for.cond343
                                        #   Parent Loop BB322_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB322_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB322_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB322_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB322_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB322_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB322_38
.LBB322_37:                             # %cond.false
                                        #   in Loop: Header=BB322_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_38
.LBB322_38:                             # %cond.end
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB322_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB322_41
.LBB322_40:                             # %cond.false415
                                        #   in Loop: Header=BB322_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_41
.LBB322_41:                             # %cond.end416
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB322_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB322_44
.LBB322_43:                             # %cond.false436
                                        #   in Loop: Header=BB322_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_44
.LBB322_44:                             # %cond.end437
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB322_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB322_47
.LBB322_46:                             # %cond.false456
                                        #   in Loop: Header=BB322_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_47
.LBB322_47:                             # %cond.end457
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB322_55
.LBB322_48:                             # %if.else466
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB322_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB322_51
.LBB322_50:                             # %cond.false491
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB322_51
.LBB322_51:                             # %cond.end492
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB322_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB322_54
.LBB322_53:                             # %cond.false509
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB322_54
.LBB322_54:                             # %cond.end510
                                        #   in Loop: Header=BB322_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB322_55:                             # %if.end519
                                        #   in Loop: Header=BB322_32 Depth=2
	jmp	.LBB322_56
.LBB322_56:                             # %for.inc520
                                        #   in Loop: Header=BB322_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_32
.LBB322_57:                             # %for.end522
                                        #   in Loop: Header=BB322_30 Depth=1
	jmp	.LBB322_58
.LBB322_58:                             # %for.inc523
                                        #   in Loop: Header=BB322_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_30
.LBB322_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB322_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB322_73
.LBB322_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB322_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB322_62 Depth=1
	movl	$0, -8(%rbp)
.LBB322_64:                             # %for.cond538
                                        #   Parent Loop BB322_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB322_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB322_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB322_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB322_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB322_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB322_68:                             # %if.end908
                                        #   in Loop: Header=BB322_64 Depth=2
	jmp	.LBB322_69
.LBB322_69:                             # %for.inc909
                                        #   in Loop: Header=BB322_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_64
.LBB322_70:                             # %for.end911
                                        #   in Loop: Header=BB322_62 Depth=1
	jmp	.LBB322_71
.LBB322_71:                             # %for.inc912
                                        #   in Loop: Header=BB322_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_62
.LBB322_72:                             # %for.end914
	jmp	.LBB322_73
.LBB322_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB322_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB322_74 Depth=1
	movl	$0, -8(%rbp)
.LBB322_76:                             # %for.cond923
                                        #   Parent Loop BB322_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB322_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB322_148
.LBB322_79:                             # %if.then954
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB322_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_83
.LBB322_82:                             # %cond.false991
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_83:                             # %cond.end993
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_86
.LBB322_85:                             # %cond.false1001
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_86:                             # %cond.end1003
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_89
.LBB322_88:                             # %cond.false1032
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_89:                             # %cond.end1034
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_92
.LBB322_91:                             # %cond.false1042
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_92:                             # %cond.end1044
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_95
.LBB322_94:                             # %cond.false1073
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_95:                             # %cond.end1075
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_98
.LBB322_97:                             # %cond.false1083
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_98:                             # %cond.end1085
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_101
.LBB322_100:                            # %cond.false1114
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_101:                            # %cond.end1116
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_104
.LBB322_103:                            # %cond.false1124
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_104:                            # %cond.end1126
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_107
.LBB322_106:                            # %cond.false1155
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_107:                            # %cond.end1157
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_110
.LBB322_109:                            # %cond.false1165
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_110:                            # %cond.end1167
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB322_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB322_125
.LBB322_112:                            # %if.else1190
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_115
.LBB322_114:                            # %cond.false1198
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_115:                            # %cond.end1200
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_118
.LBB322_117:                            # %cond.false1208
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_118:                            # %cond.end1210
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB322_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB322_121
.LBB322_120:                            # %cond.false1237
                                        #   in Loop: Header=BB322_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_121
.LBB322_121:                            # %cond.end1238
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB322_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB322_124
.LBB322_123:                            # %cond.false1254
                                        #   in Loop: Header=BB322_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_124
.LBB322_124:                            # %cond.end1255
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB322_125:                            # %if.end1264
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_128
.LBB322_127:                            # %cond.false1272
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_128:                            # %cond.end1274
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_131
.LBB322_130:                            # %cond.false1282
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_131:                            # %cond.end1284
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB322_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB322_146
.LBB322_133:                            # %if.else1307
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_136
.LBB322_135:                            # %cond.false1315
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_136:                            # %cond.end1317
                                        #   in Loop: Header=BB322_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB322_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB322_139
.LBB322_138:                            # %cond.false1325
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB322_139:                            # %cond.end1327
                                        #   in Loop: Header=BB322_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB322_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB322_142
.LBB322_141:                            # %cond.false1355
                                        #   in Loop: Header=BB322_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_142
.LBB322_142:                            # %cond.end1356
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB322_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB322_145
.LBB322_144:                            # %cond.false1373
                                        #   in Loop: Header=BB322_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_145
.LBB322_145:                            # %cond.end1374
                                        #   in Loop: Header=BB322_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB322_146:                            # %if.end1383
                                        #   in Loop: Header=BB322_76 Depth=2
	jmp	.LBB322_147
.LBB322_147:                            # %if.end1384
                                        #   in Loop: Header=BB322_76 Depth=2
	jmp	.LBB322_148
.LBB322_148:                            # %if.end1385
                                        #   in Loop: Header=BB322_76 Depth=2
	jmp	.LBB322_149
.LBB322_149:                            # %for.inc1386
                                        #   in Loop: Header=BB322_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_76
.LBB322_150:                            # %for.end1388
                                        #   in Loop: Header=BB322_74 Depth=1
	jmp	.LBB322_151
.LBB322_151:                            # %for.inc1389
                                        #   in Loop: Header=BB322_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_74
.LBB322_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB322_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB322_153 Depth=1
	movl	$0, -4(%rbp)
.LBB322_155:                            # %for.cond1399
                                        #   Parent Loop BB322_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB322_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB322_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_155
.LBB322_158:                            # %for.end1414
                                        #   in Loop: Header=BB322_153 Depth=1
	jmp	.LBB322_159
.LBB322_159:                            # %for.inc1415
                                        #   in Loop: Header=BB322_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_153
.LBB322_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB322_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB322_174
.LBB322_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB322_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB322_163 Depth=1
	movl	$0, -4(%rbp)
.LBB322_165:                            # %for.cond1431
                                        #   Parent Loop BB322_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB322_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB322_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB322_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB322_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB322_169
.LBB322_168:                            # %cond.false1462
                                        #   in Loop: Header=BB322_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB322_169
.LBB322_169:                            # %cond.end1463
                                        #   in Loop: Header=BB322_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB322_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_165
.LBB322_171:                            # %for.end1474
                                        #   in Loop: Header=BB322_163 Depth=1
	jmp	.LBB322_172
.LBB322_172:                            # %for.inc1475
                                        #   in Loop: Header=BB322_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_163
.LBB322_173:                            # %for.end1477
	jmp	.LBB322_174
.LBB322_174:                            # %if.end1478
	cmpl	$240941621, -52(%rbp)   # imm = 0xE5C7A35
	jne	.LBB322_176
.LBB322_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_175
.Lfunc_end322:
	.size	dpb_split_field.259, .Lfunc_end322-dpb_split_field.259
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.260     # -- Begin function dpb_split_field.260
	.p2align	4, 0x90
	.type	dpb_split_field.260,@function
dpb_split_field.260:                    # @dpb_split_field.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$419960783, -80(%rbp)   # imm = 0x190817CF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB323_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB323_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB323_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB323_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_2
.LBB323_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB323_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB323_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB323_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_6
.LBB323_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB323_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB323_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB323_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_10
.LBB323_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB323_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB323_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB323_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_14
.LBB323_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB323_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB323_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB323_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB323_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB323_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_19
.LBB323_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB323_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB323_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB323_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB323_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_23
.LBB323_26:                             # %for.end328
	jmp	.LBB323_27
.LBB323_27:                             # %if.end
	jmp	.LBB323_29
.LBB323_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB323_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB323_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB323_30 Depth=1
	movl	$0, -4(%rbp)
.LBB323_32:                             # %for.cond343
                                        #   Parent Loop BB323_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB323_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB323_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB323_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB323_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB323_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB323_38
.LBB323_37:                             # %cond.false
                                        #   in Loop: Header=BB323_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_38
.LBB323_38:                             # %cond.end
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB323_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB323_41
.LBB323_40:                             # %cond.false415
                                        #   in Loop: Header=BB323_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_41
.LBB323_41:                             # %cond.end416
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB323_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB323_44
.LBB323_43:                             # %cond.false436
                                        #   in Loop: Header=BB323_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_44
.LBB323_44:                             # %cond.end437
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB323_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB323_47
.LBB323_46:                             # %cond.false456
                                        #   in Loop: Header=BB323_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_47
.LBB323_47:                             # %cond.end457
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB323_55
.LBB323_48:                             # %if.else466
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB323_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB323_51
.LBB323_50:                             # %cond.false491
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB323_51
.LBB323_51:                             # %cond.end492
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB323_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB323_54
.LBB323_53:                             # %cond.false509
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB323_54
.LBB323_54:                             # %cond.end510
                                        #   in Loop: Header=BB323_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB323_55:                             # %if.end519
                                        #   in Loop: Header=BB323_32 Depth=2
	jmp	.LBB323_56
.LBB323_56:                             # %for.inc520
                                        #   in Loop: Header=BB323_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_32
.LBB323_57:                             # %for.end522
                                        #   in Loop: Header=BB323_30 Depth=1
	jmp	.LBB323_58
.LBB323_58:                             # %for.inc523
                                        #   in Loop: Header=BB323_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_30
.LBB323_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB323_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB323_73
.LBB323_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB323_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB323_62 Depth=1
	movl	$0, -8(%rbp)
.LBB323_64:                             # %for.cond538
                                        #   Parent Loop BB323_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB323_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB323_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB323_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB323_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB323_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB323_68:                             # %if.end908
                                        #   in Loop: Header=BB323_64 Depth=2
	jmp	.LBB323_69
.LBB323_69:                             # %for.inc909
                                        #   in Loop: Header=BB323_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_64
.LBB323_70:                             # %for.end911
                                        #   in Loop: Header=BB323_62 Depth=1
	jmp	.LBB323_71
.LBB323_71:                             # %for.inc912
                                        #   in Loop: Header=BB323_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_62
.LBB323_72:                             # %for.end914
	jmp	.LBB323_73
.LBB323_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB323_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB323_74 Depth=1
	movl	$0, -8(%rbp)
.LBB323_76:                             # %for.cond923
                                        #   Parent Loop BB323_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB323_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB323_148
.LBB323_79:                             # %if.then954
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB323_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_83
.LBB323_82:                             # %cond.false991
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_83:                             # %cond.end993
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_86
.LBB323_85:                             # %cond.false1001
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_86:                             # %cond.end1003
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_89
.LBB323_88:                             # %cond.false1032
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_89:                             # %cond.end1034
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_92
.LBB323_91:                             # %cond.false1042
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_92:                             # %cond.end1044
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_95
.LBB323_94:                             # %cond.false1073
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_95:                             # %cond.end1075
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_98
.LBB323_97:                             # %cond.false1083
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_98:                             # %cond.end1085
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_101
.LBB323_100:                            # %cond.false1114
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_101:                            # %cond.end1116
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_104
.LBB323_103:                            # %cond.false1124
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_104:                            # %cond.end1126
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_107
.LBB323_106:                            # %cond.false1155
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_107:                            # %cond.end1157
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_110
.LBB323_109:                            # %cond.false1165
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_110:                            # %cond.end1167
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB323_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB323_125
.LBB323_112:                            # %if.else1190
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_115
.LBB323_114:                            # %cond.false1198
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_115:                            # %cond.end1200
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_118
.LBB323_117:                            # %cond.false1208
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_118:                            # %cond.end1210
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB323_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB323_121
.LBB323_120:                            # %cond.false1237
                                        #   in Loop: Header=BB323_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_121
.LBB323_121:                            # %cond.end1238
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB323_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB323_124
.LBB323_123:                            # %cond.false1254
                                        #   in Loop: Header=BB323_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_124
.LBB323_124:                            # %cond.end1255
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB323_125:                            # %if.end1264
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_128
.LBB323_127:                            # %cond.false1272
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_128:                            # %cond.end1274
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_131
.LBB323_130:                            # %cond.false1282
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_131:                            # %cond.end1284
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB323_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB323_146
.LBB323_133:                            # %if.else1307
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_136
.LBB323_135:                            # %cond.false1315
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_136:                            # %cond.end1317
                                        #   in Loop: Header=BB323_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB323_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB323_139
.LBB323_138:                            # %cond.false1325
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB323_139:                            # %cond.end1327
                                        #   in Loop: Header=BB323_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB323_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB323_142
.LBB323_141:                            # %cond.false1355
                                        #   in Loop: Header=BB323_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_142
.LBB323_142:                            # %cond.end1356
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB323_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB323_145
.LBB323_144:                            # %cond.false1373
                                        #   in Loop: Header=BB323_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_145
.LBB323_145:                            # %cond.end1374
                                        #   in Loop: Header=BB323_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB323_146:                            # %if.end1383
                                        #   in Loop: Header=BB323_76 Depth=2
	jmp	.LBB323_147
.LBB323_147:                            # %if.end1384
                                        #   in Loop: Header=BB323_76 Depth=2
	jmp	.LBB323_148
.LBB323_148:                            # %if.end1385
                                        #   in Loop: Header=BB323_76 Depth=2
	jmp	.LBB323_149
.LBB323_149:                            # %for.inc1386
                                        #   in Loop: Header=BB323_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_76
.LBB323_150:                            # %for.end1388
                                        #   in Loop: Header=BB323_74 Depth=1
	jmp	.LBB323_151
.LBB323_151:                            # %for.inc1389
                                        #   in Loop: Header=BB323_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_74
.LBB323_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB323_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB323_153 Depth=1
	movl	$0, -4(%rbp)
.LBB323_155:                            # %for.cond1399
                                        #   Parent Loop BB323_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB323_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB323_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_155
.LBB323_158:                            # %for.end1414
                                        #   in Loop: Header=BB323_153 Depth=1
	jmp	.LBB323_159
.LBB323_159:                            # %for.inc1415
                                        #   in Loop: Header=BB323_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_153
.LBB323_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB323_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB323_174
.LBB323_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB323_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB323_163 Depth=1
	movl	$0, -4(%rbp)
.LBB323_165:                            # %for.cond1431
                                        #   Parent Loop BB323_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB323_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB323_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB323_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB323_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB323_169
.LBB323_168:                            # %cond.false1462
                                        #   in Loop: Header=BB323_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_169
.LBB323_169:                            # %cond.end1463
                                        #   in Loop: Header=BB323_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB323_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_165
.LBB323_171:                            # %for.end1474
                                        #   in Loop: Header=BB323_163 Depth=1
	jmp	.LBB323_172
.LBB323_172:                            # %for.inc1475
                                        #   in Loop: Header=BB323_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_163
.LBB323_173:                            # %for.end1477
	jmp	.LBB323_174
.LBB323_174:                            # %if.end1478
	cmpl	$419960783, -80(%rbp)   # imm = 0x190817CF
	jne	.LBB323_176
.LBB323_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_175
.Lfunc_end323:
	.size	dpb_split_field.260, .Lfunc_end323-dpb_split_field.260
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.261
	.type	gen_pic_list_from_frame_list.261,@function
gen_pic_list_from_frame_list.261:       # @gen_pic_list_from_frame_list.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1906221479, -64(%rbp)  # imm = 0x719EA1A7
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB324_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB324_3
.LBB324_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB324_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB324_28
# %bb.4:                                # %if.then1
	jmp	.LBB324_5
.LBB324_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_9 Depth 2
                                        #     Child Loop BB324_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB324_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB324_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB324_7:                              # %lor.end
                                        #   in Loop: Header=BB324_5 Depth=1
	testb	$1, %al
	jne	.LBB324_8
	jmp	.LBB324_27
.LBB324_8:                              # %while.body
                                        #   in Loop: Header=BB324_5 Depth=1
	jmp	.LBB324_9
.LBB324_9:                              # %for.cond
                                        #   Parent Loop BB324_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB324_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB324_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB324_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB324_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB324_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB324_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_17
.LBB324_13:                             # %if.end17
                                        #   in Loop: Header=BB324_9 Depth=2
	jmp	.LBB324_14
.LBB324_14:                             # %if.end18
                                        #   in Loop: Header=BB324_9 Depth=2
	jmp	.LBB324_15
.LBB324_15:                             # %for.inc
                                        #   in Loop: Header=BB324_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_9
.LBB324_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB324_5 Depth=1
	jmp	.LBB324_17
.LBB324_17:                             # %for.end
                                        #   in Loop: Header=BB324_5 Depth=1
	jmp	.LBB324_18
.LBB324_18:                             # %for.cond20
                                        #   Parent Loop BB324_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB324_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB324_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB324_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB324_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB324_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB324_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_26
.LBB324_22:                             # %if.end41
                                        #   in Loop: Header=BB324_18 Depth=2
	jmp	.LBB324_23
.LBB324_23:                             # %if.end42
                                        #   in Loop: Header=BB324_18 Depth=2
	jmp	.LBB324_24
.LBB324_24:                             # %for.inc43
                                        #   in Loop: Header=BB324_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_18
.LBB324_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB324_5 Depth=1
	jmp	.LBB324_26
.LBB324_26:                             # %for.end45
                                        #   in Loop: Header=BB324_5 Depth=1
	jmp	.LBB324_5
.LBB324_27:                             # %while.end
	jmp	.LBB324_28
.LBB324_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB324_53
# %bb.29:                               # %if.then48
	jmp	.LBB324_30
.LBB324_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_34 Depth 2
                                        #     Child Loop BB324_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB324_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB324_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB324_32:                             # %lor.end53
                                        #   in Loop: Header=BB324_30 Depth=1
	testb	$1, %al
	jne	.LBB324_33
	jmp	.LBB324_52
.LBB324_33:                             # %while.body54
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_34
.LBB324_34:                             # %for.cond55
                                        #   Parent Loop BB324_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB324_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB324_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB324_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB324_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB324_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB324_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_42
.LBB324_38:                             # %if.end77
                                        #   in Loop: Header=BB324_34 Depth=2
	jmp	.LBB324_39
.LBB324_39:                             # %if.end78
                                        #   in Loop: Header=BB324_34 Depth=2
	jmp	.LBB324_40
.LBB324_40:                             # %for.inc79
                                        #   in Loop: Header=BB324_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_34
.LBB324_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_42
.LBB324_42:                             # %for.end81
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_43
.LBB324_43:                             # %for.cond82
                                        #   Parent Loop BB324_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB324_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB324_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB324_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB324_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB324_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB324_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_51
.LBB324_47:                             # %if.end104
                                        #   in Loop: Header=BB324_43 Depth=2
	jmp	.LBB324_48
.LBB324_48:                             # %if.end105
                                        #   in Loop: Header=BB324_43 Depth=2
	jmp	.LBB324_49
.LBB324_49:                             # %for.inc106
                                        #   in Loop: Header=BB324_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_43
.LBB324_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_51
.LBB324_51:                             # %for.end108
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_30
.LBB324_52:                             # %while.end109
	jmp	.LBB324_53
.LBB324_53:                             # %if.end110
	cmpl	$1906221479, -64(%rbp)  # imm = 0x719EA1A7
	jne	.LBB324_55
.LBB324_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_54
.Lfunc_end324:
	.size	gen_pic_list_from_frame_list.261, .Lfunc_end324-gen_pic_list_from_frame_list.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.262
	.type	gen_pic_list_from_frame_list.262,@function
gen_pic_list_from_frame_list.262:       # @gen_pic_list_from_frame_list.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2000234163, -64(%rbp)  # imm = 0x773926B3
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB325_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB325_3
.LBB325_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB325_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB325_28
# %bb.4:                                # %if.then1
	jmp	.LBB325_5
.LBB325_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_9 Depth 2
                                        #     Child Loop BB325_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB325_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB325_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB325_7:                              # %lor.end
                                        #   in Loop: Header=BB325_5 Depth=1
	testb	$1, %al
	jne	.LBB325_8
	jmp	.LBB325_27
.LBB325_8:                              # %while.body
                                        #   in Loop: Header=BB325_5 Depth=1
	jmp	.LBB325_9
.LBB325_9:                              # %for.cond
                                        #   Parent Loop BB325_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB325_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB325_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB325_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB325_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB325_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB325_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_17
.LBB325_13:                             # %if.end17
                                        #   in Loop: Header=BB325_9 Depth=2
	jmp	.LBB325_14
.LBB325_14:                             # %if.end18
                                        #   in Loop: Header=BB325_9 Depth=2
	jmp	.LBB325_15
.LBB325_15:                             # %for.inc
                                        #   in Loop: Header=BB325_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_9
.LBB325_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB325_5 Depth=1
	jmp	.LBB325_17
.LBB325_17:                             # %for.end
                                        #   in Loop: Header=BB325_5 Depth=1
	jmp	.LBB325_18
.LBB325_18:                             # %for.cond20
                                        #   Parent Loop BB325_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB325_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB325_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB325_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB325_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB325_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB325_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_26
.LBB325_22:                             # %if.end41
                                        #   in Loop: Header=BB325_18 Depth=2
	jmp	.LBB325_23
.LBB325_23:                             # %if.end42
                                        #   in Loop: Header=BB325_18 Depth=2
	jmp	.LBB325_24
.LBB325_24:                             # %for.inc43
                                        #   in Loop: Header=BB325_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_18
.LBB325_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB325_5 Depth=1
	jmp	.LBB325_26
.LBB325_26:                             # %for.end45
                                        #   in Loop: Header=BB325_5 Depth=1
	jmp	.LBB325_5
.LBB325_27:                             # %while.end
	jmp	.LBB325_28
.LBB325_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB325_53
# %bb.29:                               # %if.then48
	jmp	.LBB325_30
.LBB325_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_34 Depth 2
                                        #     Child Loop BB325_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB325_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB325_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB325_32:                             # %lor.end53
                                        #   in Loop: Header=BB325_30 Depth=1
	testb	$1, %al
	jne	.LBB325_33
	jmp	.LBB325_52
.LBB325_33:                             # %while.body54
                                        #   in Loop: Header=BB325_30 Depth=1
	jmp	.LBB325_34
.LBB325_34:                             # %for.cond55
                                        #   Parent Loop BB325_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB325_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB325_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB325_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB325_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB325_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB325_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_42
.LBB325_38:                             # %if.end77
                                        #   in Loop: Header=BB325_34 Depth=2
	jmp	.LBB325_39
.LBB325_39:                             # %if.end78
                                        #   in Loop: Header=BB325_34 Depth=2
	jmp	.LBB325_40
.LBB325_40:                             # %for.inc79
                                        #   in Loop: Header=BB325_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_34
.LBB325_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB325_30 Depth=1
	jmp	.LBB325_42
.LBB325_42:                             # %for.end81
                                        #   in Loop: Header=BB325_30 Depth=1
	jmp	.LBB325_43
.LBB325_43:                             # %for.cond82
                                        #   Parent Loop BB325_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB325_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB325_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB325_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB325_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB325_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB325_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_51
.LBB325_47:                             # %if.end104
                                        #   in Loop: Header=BB325_43 Depth=2
	jmp	.LBB325_48
.LBB325_48:                             # %if.end105
                                        #   in Loop: Header=BB325_43 Depth=2
	jmp	.LBB325_49
.LBB325_49:                             # %for.inc106
                                        #   in Loop: Header=BB325_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_43
.LBB325_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB325_30 Depth=1
	jmp	.LBB325_51
.LBB325_51:                             # %for.end108
                                        #   in Loop: Header=BB325_30 Depth=1
	jmp	.LBB325_30
.LBB325_52:                             # %while.end109
	jmp	.LBB325_53
.LBB325_53:                             # %if.end110
	cmpl	$2000234163, -64(%rbp)  # imm = 0x773926B3
	jne	.LBB325_55
.LBB325_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_54
.Lfunc_end325:
	.size	gen_pic_list_from_frame_list.262, .Lfunc_end325-gen_pic_list_from_frame_list.262
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.263
	.type	gen_pic_list_from_frame_list.263,@function
gen_pic_list_from_frame_list.263:       # @gen_pic_list_from_frame_list.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$263997298, -64(%rbp)   # imm = 0xFBC4772
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB326_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB326_3
.LBB326_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB326_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB326_28
# %bb.4:                                # %if.then1
	jmp	.LBB326_5
.LBB326_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_9 Depth 2
                                        #     Child Loop BB326_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB326_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB326_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB326_7:                              # %lor.end
                                        #   in Loop: Header=BB326_5 Depth=1
	testb	$1, %al
	jne	.LBB326_8
	jmp	.LBB326_27
.LBB326_8:                              # %while.body
                                        #   in Loop: Header=BB326_5 Depth=1
	jmp	.LBB326_9
.LBB326_9:                              # %for.cond
                                        #   Parent Loop BB326_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB326_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB326_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB326_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB326_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB326_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB326_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_17
.LBB326_13:                             # %if.end17
                                        #   in Loop: Header=BB326_9 Depth=2
	jmp	.LBB326_14
.LBB326_14:                             # %if.end18
                                        #   in Loop: Header=BB326_9 Depth=2
	jmp	.LBB326_15
.LBB326_15:                             # %for.inc
                                        #   in Loop: Header=BB326_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_9
.LBB326_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB326_5 Depth=1
	jmp	.LBB326_17
.LBB326_17:                             # %for.end
                                        #   in Loop: Header=BB326_5 Depth=1
	jmp	.LBB326_18
.LBB326_18:                             # %for.cond20
                                        #   Parent Loop BB326_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB326_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB326_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB326_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB326_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB326_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB326_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_26
.LBB326_22:                             # %if.end41
                                        #   in Loop: Header=BB326_18 Depth=2
	jmp	.LBB326_23
.LBB326_23:                             # %if.end42
                                        #   in Loop: Header=BB326_18 Depth=2
	jmp	.LBB326_24
.LBB326_24:                             # %for.inc43
                                        #   in Loop: Header=BB326_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_18
.LBB326_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB326_5 Depth=1
	jmp	.LBB326_26
.LBB326_26:                             # %for.end45
                                        #   in Loop: Header=BB326_5 Depth=1
	jmp	.LBB326_5
.LBB326_27:                             # %while.end
	jmp	.LBB326_28
.LBB326_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB326_53
# %bb.29:                               # %if.then48
	jmp	.LBB326_30
.LBB326_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_34 Depth 2
                                        #     Child Loop BB326_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB326_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB326_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB326_32:                             # %lor.end53
                                        #   in Loop: Header=BB326_30 Depth=1
	testb	$1, %al
	jne	.LBB326_33
	jmp	.LBB326_52
.LBB326_33:                             # %while.body54
                                        #   in Loop: Header=BB326_30 Depth=1
	jmp	.LBB326_34
.LBB326_34:                             # %for.cond55
                                        #   Parent Loop BB326_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB326_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB326_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB326_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB326_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB326_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB326_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_42
.LBB326_38:                             # %if.end77
                                        #   in Loop: Header=BB326_34 Depth=2
	jmp	.LBB326_39
.LBB326_39:                             # %if.end78
                                        #   in Loop: Header=BB326_34 Depth=2
	jmp	.LBB326_40
.LBB326_40:                             # %for.inc79
                                        #   in Loop: Header=BB326_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_34
.LBB326_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB326_30 Depth=1
	jmp	.LBB326_42
.LBB326_42:                             # %for.end81
                                        #   in Loop: Header=BB326_30 Depth=1
	jmp	.LBB326_43
.LBB326_43:                             # %for.cond82
                                        #   Parent Loop BB326_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB326_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB326_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB326_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB326_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB326_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB326_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_51
.LBB326_47:                             # %if.end104
                                        #   in Loop: Header=BB326_43 Depth=2
	jmp	.LBB326_48
.LBB326_48:                             # %if.end105
                                        #   in Loop: Header=BB326_43 Depth=2
	jmp	.LBB326_49
.LBB326_49:                             # %for.inc106
                                        #   in Loop: Header=BB326_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_43
.LBB326_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB326_30 Depth=1
	jmp	.LBB326_51
.LBB326_51:                             # %for.end108
                                        #   in Loop: Header=BB326_30 Depth=1
	jmp	.LBB326_30
.LBB326_52:                             # %while.end109
	jmp	.LBB326_53
.LBB326_53:                             # %if.end110
	cmpl	$263997298, -64(%rbp)   # imm = 0xFBC4772
	jne	.LBB326_55
.LBB326_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_54
.Lfunc_end326:
	.size	gen_pic_list_from_frame_list.263, .Lfunc_end326-gen_pic_list_from_frame_list.263
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.264 # -- Begin function alloc_storable_picture.264
	.p2align	4, 0x90
	.type	alloc_storable_picture.264,@function
alloc_storable_picture.264:             # @alloc_storable_picture.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1209004386, -40(%rbp)  # imm = 0x480FF162
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB327_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB327_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB327_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB327_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB327_6
.LBB327_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB327_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB327_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB327_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB327_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB327_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1209004386, -40(%rbp)  # imm = 0x480FF162
	jne	.LBB327_12
.LBB327_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_11
.Lfunc_end327:
	.size	alloc_storable_picture.264, .Lfunc_end327-alloc_storable_picture.264
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.265     # -- Begin function dpb_split_field.265
	.p2align	4, 0x90
	.type	dpb_split_field.265,@function
dpb_split_field.265:                    # @dpb_split_field.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$959616772, -52(%rbp)   # imm = 0x39329704
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB328_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB328_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB328_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB328_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_2
.LBB328_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB328_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB328_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB328_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_6
.LBB328_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB328_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB328_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB328_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_10
.LBB328_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB328_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB328_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB328_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_14
.LBB328_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB328_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB328_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB328_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB328_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB328_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_19
.LBB328_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB328_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB328_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB328_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB328_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_23
.LBB328_26:                             # %for.end328
	jmp	.LBB328_27
.LBB328_27:                             # %if.end
	jmp	.LBB328_29
.LBB328_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB328_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB328_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB328_30 Depth=1
	movl	$0, -4(%rbp)
.LBB328_32:                             # %for.cond343
                                        #   Parent Loop BB328_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB328_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB328_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB328_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB328_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB328_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB328_38
.LBB328_37:                             # %cond.false
                                        #   in Loop: Header=BB328_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_38
.LBB328_38:                             # %cond.end
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB328_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB328_41
.LBB328_40:                             # %cond.false415
                                        #   in Loop: Header=BB328_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_41
.LBB328_41:                             # %cond.end416
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB328_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB328_44
.LBB328_43:                             # %cond.false436
                                        #   in Loop: Header=BB328_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_44
.LBB328_44:                             # %cond.end437
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB328_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB328_47
.LBB328_46:                             # %cond.false456
                                        #   in Loop: Header=BB328_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_47
.LBB328_47:                             # %cond.end457
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB328_55
.LBB328_48:                             # %if.else466
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB328_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB328_51
.LBB328_50:                             # %cond.false491
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB328_51
.LBB328_51:                             # %cond.end492
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB328_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB328_54
.LBB328_53:                             # %cond.false509
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB328_54
.LBB328_54:                             # %cond.end510
                                        #   in Loop: Header=BB328_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB328_55:                             # %if.end519
                                        #   in Loop: Header=BB328_32 Depth=2
	jmp	.LBB328_56
.LBB328_56:                             # %for.inc520
                                        #   in Loop: Header=BB328_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_32
.LBB328_57:                             # %for.end522
                                        #   in Loop: Header=BB328_30 Depth=1
	jmp	.LBB328_58
.LBB328_58:                             # %for.inc523
                                        #   in Loop: Header=BB328_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_30
.LBB328_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB328_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB328_73
.LBB328_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB328_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB328_62 Depth=1
	movl	$0, -8(%rbp)
.LBB328_64:                             # %for.cond538
                                        #   Parent Loop BB328_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB328_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB328_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB328_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB328_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB328_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB328_68:                             # %if.end908
                                        #   in Loop: Header=BB328_64 Depth=2
	jmp	.LBB328_69
.LBB328_69:                             # %for.inc909
                                        #   in Loop: Header=BB328_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_64
.LBB328_70:                             # %for.end911
                                        #   in Loop: Header=BB328_62 Depth=1
	jmp	.LBB328_71
.LBB328_71:                             # %for.inc912
                                        #   in Loop: Header=BB328_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_62
.LBB328_72:                             # %for.end914
	jmp	.LBB328_73
.LBB328_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB328_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB328_74 Depth=1
	movl	$0, -8(%rbp)
.LBB328_76:                             # %for.cond923
                                        #   Parent Loop BB328_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB328_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB328_148
.LBB328_79:                             # %if.then954
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB328_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_83
.LBB328_82:                             # %cond.false991
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_83:                             # %cond.end993
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_86
.LBB328_85:                             # %cond.false1001
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_86:                             # %cond.end1003
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_89
.LBB328_88:                             # %cond.false1032
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_89:                             # %cond.end1034
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_92
.LBB328_91:                             # %cond.false1042
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_92:                             # %cond.end1044
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_95
.LBB328_94:                             # %cond.false1073
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_95:                             # %cond.end1075
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_98
.LBB328_97:                             # %cond.false1083
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_98:                             # %cond.end1085
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_101
.LBB328_100:                            # %cond.false1114
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_101:                            # %cond.end1116
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_104
.LBB328_103:                            # %cond.false1124
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_104:                            # %cond.end1126
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_107
.LBB328_106:                            # %cond.false1155
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_107:                            # %cond.end1157
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_110
.LBB328_109:                            # %cond.false1165
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_110:                            # %cond.end1167
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB328_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB328_125
.LBB328_112:                            # %if.else1190
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_115
.LBB328_114:                            # %cond.false1198
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_115:                            # %cond.end1200
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_118
.LBB328_117:                            # %cond.false1208
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_118:                            # %cond.end1210
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB328_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB328_121
.LBB328_120:                            # %cond.false1237
                                        #   in Loop: Header=BB328_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_121
.LBB328_121:                            # %cond.end1238
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB328_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB328_124
.LBB328_123:                            # %cond.false1254
                                        #   in Loop: Header=BB328_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_124
.LBB328_124:                            # %cond.end1255
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB328_125:                            # %if.end1264
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_128
.LBB328_127:                            # %cond.false1272
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_128:                            # %cond.end1274
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_131
.LBB328_130:                            # %cond.false1282
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_131:                            # %cond.end1284
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB328_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB328_146
.LBB328_133:                            # %if.else1307
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_136
.LBB328_135:                            # %cond.false1315
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_136:                            # %cond.end1317
                                        #   in Loop: Header=BB328_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB328_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB328_139
.LBB328_138:                            # %cond.false1325
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB328_139:                            # %cond.end1327
                                        #   in Loop: Header=BB328_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB328_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB328_142
.LBB328_141:                            # %cond.false1355
                                        #   in Loop: Header=BB328_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_142
.LBB328_142:                            # %cond.end1356
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB328_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB328_145
.LBB328_144:                            # %cond.false1373
                                        #   in Loop: Header=BB328_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_145
.LBB328_145:                            # %cond.end1374
                                        #   in Loop: Header=BB328_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB328_146:                            # %if.end1383
                                        #   in Loop: Header=BB328_76 Depth=2
	jmp	.LBB328_147
.LBB328_147:                            # %if.end1384
                                        #   in Loop: Header=BB328_76 Depth=2
	jmp	.LBB328_148
.LBB328_148:                            # %if.end1385
                                        #   in Loop: Header=BB328_76 Depth=2
	jmp	.LBB328_149
.LBB328_149:                            # %for.inc1386
                                        #   in Loop: Header=BB328_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_76
.LBB328_150:                            # %for.end1388
                                        #   in Loop: Header=BB328_74 Depth=1
	jmp	.LBB328_151
.LBB328_151:                            # %for.inc1389
                                        #   in Loop: Header=BB328_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_74
.LBB328_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB328_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB328_153 Depth=1
	movl	$0, -4(%rbp)
.LBB328_155:                            # %for.cond1399
                                        #   Parent Loop BB328_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB328_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB328_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_155
.LBB328_158:                            # %for.end1414
                                        #   in Loop: Header=BB328_153 Depth=1
	jmp	.LBB328_159
.LBB328_159:                            # %for.inc1415
                                        #   in Loop: Header=BB328_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_153
.LBB328_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB328_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB328_174
.LBB328_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB328_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB328_163 Depth=1
	movl	$0, -4(%rbp)
.LBB328_165:                            # %for.cond1431
                                        #   Parent Loop BB328_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB328_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB328_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB328_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB328_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB328_169
.LBB328_168:                            # %cond.false1462
                                        #   in Loop: Header=BB328_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB328_169
.LBB328_169:                            # %cond.end1463
                                        #   in Loop: Header=BB328_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB328_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_165
.LBB328_171:                            # %for.end1474
                                        #   in Loop: Header=BB328_163 Depth=1
	jmp	.LBB328_172
.LBB328_172:                            # %for.inc1475
                                        #   in Loop: Header=BB328_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_163
.LBB328_173:                            # %for.end1477
	jmp	.LBB328_174
.LBB328_174:                            # %if.end1478
	cmpl	$959616772, -52(%rbp)   # imm = 0x39329704
	jne	.LBB328_176
.LBB328_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_175
.Lfunc_end328:
	.size	dpb_split_field.265, .Lfunc_end328-dpb_split_field.265
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.266 # -- Begin function alloc_storable_picture.266
	.p2align	4, 0x90
	.type	alloc_storable_picture.266,@function
alloc_storable_picture.266:             # @alloc_storable_picture.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$159739219, -36(%rbp)   # imm = 0x9856D53
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB329_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB329_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB329_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB329_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB329_6
.LBB329_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB329_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB329_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB329_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB329_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB329_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$159739219, -36(%rbp)   # imm = 0x9856D53
	jne	.LBB329_12
.LBB329_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_11
.Lfunc_end329:
	.size	alloc_storable_picture.266, .Lfunc_end329-alloc_storable_picture.266
	.cfi_endproc
                                        # -- End function
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"undefined level"
	.size	.L.str, 16

	.type	dpb,@object             # @dpb
	.comm	dpb,64,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"DPB size at specified level is smaller than the specified number of reference frames. This is not allowed.\n"
	.size	.L.str.1, 108

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"init_dpb: dpb->fs"
	.size	.L.str.2, 18

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"init_dpb: dpb->fs_ref"
	.size	.L.str.3, 22

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"init_dpb: dpb->fs_ltref"
	.size	.L.str.4, 24

	.type	listX,@object           # @listX
	.comm	listX,48,16
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"init_dpb: listX[i]"
	.size	.L.str.5, 19

	.type	listXsize,@object       # @listXsize
	.comm	listXsize,24,16
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"alloc_frame_store: f"
	.size	.L.str.6, 21

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"alloc_storable_picture: s"
	.size	.L.str.7, 26

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"alloc_storable_picture: s->mb_field"
	.size	.L.str.8, 36

	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"init_lists: fs_list0"
	.size	.L.str.9, 21

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"init_lists: fs_listlt"
	.size	.L.str.10, 22

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"init_lists: fs_list1"
	.size	.L.str.11, 21

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Invalid remapping_of_pic_nums_idc command"
	.size	.L.str.12, 42

	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"duplicate frame_num im short-term reference picture buffer"
	.size	.L.str.13, 59

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"replace_top_pic_with_frame: error storing reference frame (top field not found)"
	.size	.L.str.14, 80

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l0"
	.size	.L.str.15, 67

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l0"
	.size	.L.str.16, 65

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l0"
	.size	.L.str.17, 59

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l1"
	.size	.L.str.18, 67

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l1"
	.size	.L.str.19, 65

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l1"
	.size	.L.str.20, 59

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"alloc_colocated: s"
	.size	.L.str.21, 19

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	Co_located,@object      # @Co_located
	.bss
	.globl	Co_located
	.p2align	3
Co_located:
	.quad	0
	.size	Co_located, 8

	.type	.L.str.22,@object       # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"memory_management_control_operation = 0 not last operation in buffer"
	.size	.L.str.22, 69

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"invalid memory_management_control_operation in buffer"
	.size	.L.str.23, 54

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"field for long term marking not found"
	.size	.L.str.24, 38

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"Warning: reference frame for long term marking not found\n"
	.size	.L.str.25, 58

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"Warning: assigning long_term_frame_idx different from other field\n"
	.size	.L.str.26, 67

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"Warning: reference field for long term marking not found\n"
	.size	.L.str.27, 58

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Cannot determine smallest POC, DPB empty."
	.size	.L.str.28, 42

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"invalid frame store type"
	.size	.L.str.29, 25

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"Cannot output frame, DPB empty."
	.size	.L.str.30, 32

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"no frames for output available"
	.size	.L.str.31, 31

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"output POC must be in ascending order"
	.size	.L.str.32, 38


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
