	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_7
# %bb.1:                                # %func_proceed2nextMacroblock.33
	callq	proceed2nextMacroblock.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.36
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.93
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.93
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.101
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.101
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_proceed2nextMacroblock.129
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.129
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_proceed2nextMacroblock.225
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.225
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
	jmp	.LBB3_6
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_start_macroblock.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.119
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.119
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_start_macroblock.169
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.169
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_start_macroblock.182
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.182
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_start_macroblock.192
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.192
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_start_macroblock.200
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_terminate_macroblock.42
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.103
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.135
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_terminate_macroblock.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.147
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_terminate_macroblock.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.195
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_terminate_macroblock.202
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.202
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_terminate_macroblock.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.207
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_slice_too_big.9
	movl	%ebx, %edi
	callq	slice_too_big.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_slice_too_big.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_slice_too_big.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_slice_too_big.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_slice_too_big.194
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.194
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.79
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.91
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.92
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.178
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.178
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_OneComponentLumaPrediction4x4.190
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.190
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_OneComponentLumaPrediction4x4.191
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.191
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_OneComponentLumaPrediction4x4.199
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.199
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_OneComponentLumaPrediction4x4.214
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.214
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.6
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_LumaPrediction4x4.65
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.65
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.96
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.96
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.109
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.109
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.158
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.158
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_LumaPrediction4x4.171
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.171
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_LumaPrediction4x4.248
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.248
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_LumaPrediction4x4.254
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.254
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_LumaPrediction4x4.288
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.288
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	-44(%rbp), %r12d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_LumaPrediction4x4Bi.18
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.18
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.51
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.71
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.71
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.86
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.86
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_LumaPrediction4x4Bi.128
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.128
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_LumaPrediction4x4Bi.140
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.140
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_LumaPrediction4x4Bi.151
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.151
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_LumaPrediction4x4Bi.188
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.188
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r11w
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r12
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_9
# %bb.1:                                # %func_LumaResidualCoding8x8.11
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.11
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.35
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.35
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.75
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.75
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.94
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.94
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_LumaResidualCoding8x8.173
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.173
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_LumaResidualCoding8x8.175
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.175
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_LumaResidualCoding8x8.180
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.180
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_LumaResidualCoding8x8.259
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.259
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r12, %rdi
	je	.LBB11_7
	jmp	.LBB11_8
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_9
# %bb.1:                                # %func_ChromaPrediction4x4.32
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.32
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.69
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.69
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.77
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.77
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.88
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.88
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ChromaPrediction4x4.139
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.139
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ChromaPrediction4x4.152
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.152
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %func_ChromaPrediction4x4.201
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.201
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_8:                               # %func_ChromaPrediction4x4.228
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.228
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	16(%rbp), %r11w
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB12_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB12_7
	jmp	.LBB12_8
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_9
# %bb.1:                                # %func_SetModesAndRefframe.12
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.20
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.73
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.112
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_SetModesAndRefframe.143
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.143
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_SetModesAndRefframe.148
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.148
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_SetModesAndRefframe.162
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.162
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_SetModesAndRefframe.241
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.241
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_7
	jmp	.LBB13_8
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_LumaResidualCoding.10
	callq	LumaResidualCoding.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.83
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.217
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.217
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.232
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.232
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_LumaResidualCoding.233
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.233
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_LumaResidualCoding.238
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.238
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_LumaResidualCoding.264
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.264
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_LumaResidualCoding.266
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.266
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_9
# %bb.1:                                # %func_TransformDecision.13
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_TransformDecision.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.111
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_TransformDecision.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.132
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %func_TransformDecision.134
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_8:                               # %func_TransformDecision.146
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.146
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB15_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB15_7
	jmp	.LBB15_8
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movq	%rcx, %r12
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r13
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_9
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.67
	movq	%r13, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.67
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.183
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.183
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.213
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.213
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.224
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.224
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_OneComponentChromaPrediction4x4.240
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.240
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_OneComponentChromaPrediction4x4.252
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.252
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %func_OneComponentChromaPrediction4x4.258
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.258
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_8:                               # %func_OneComponentChromaPrediction4x4.269
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.269
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r13, %rdi
	movl	-44(%rbp), %r13d        # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB16_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movq	%r12, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_7
	jmp	.LBB16_8
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_9
# %bb.1:                                # %func_IntraChromaPrediction4x4.21
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_IntraChromaPrediction4x4.116
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_IntraChromaPrediction4x4.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.124
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %func_IntraChromaPrediction4x4.197
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.197
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_8:                               # %func_IntraChromaPrediction4x4.206
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.206
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB17_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB17_7
	jmp	.LBB17_8
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_9
# %bb.1:                                # %func_ChromaResidualCoding.47
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.196
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.209
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.255
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.255
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_ChromaResidualCoding.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.260
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_ChromaResidualCoding.276
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.276
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %func_ChromaResidualCoding.280
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.280
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_8:                               # %func_ChromaResidualCoding.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.282
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB18_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB18_7
	jmp	.LBB18_8
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_9
# %bb.1:                                # %func_IntraChromaPrediction.8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_IntraChromaPrediction.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.166
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_IntraChromaPrediction.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.208
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %func_IntraChromaPrediction.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.218
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_8:                               # %func_IntraChromaPrediction.235
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.235
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB19_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB19_7
	jmp	.LBB19_8
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_ZeroRef.60
	movq	%rbx, %rdi
	callq	ZeroRef.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.219
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.271
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.271
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_ZeroRef.283
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.283
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_ZeroRef.285
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.285
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_ZeroRef.286
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.286
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_ZeroRef.287
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.287
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_MBType2Value.3
	movq	%rbx, %rdi
	callq	MBType2Value.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.90
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.172
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_MBType2Value.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.227
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_MBType2Value.270
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.270
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_MBType2Value.274
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.274
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_MBType2Value.284
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.284
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_writeIntra4x4Modes.48
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_writeIntra4x4Modes.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.122
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_writeIntra4x4Modes.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_writeIntra4x4Modes.163
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.163
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_writeIntra4x4Modes.186
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.186
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_7
# %bb.1:                                # %func_B8Mode2Value.4
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.108
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.108
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_B8Mode2Value.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.115
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_B8Mode2Value.198
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.198
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
	jmp	.LBB23_6
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_writeMBLayer.15
	movl	%ebx, %edi
	callq	writeMBLayer.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.97
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.113
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.156
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.156
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_writeMBLayer.210
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.210
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_writeMBLayer.234
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.234
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_writeMBLayer.245
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.245
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_writeMBLayer.251
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.251
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_9
# %bb.1:                                # %func_write_terminating_bit.5
	movswl	%bx, %edi
	callq	write_terminating_bit.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.17
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.58
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.155
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.155
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_write_terminating_bit.185
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.185
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_write_terminating_bit.212
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.212
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_write_terminating_bit.222
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.222
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_write_terminating_bit.242
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.242
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
	jmp	.LBB25_8
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_9
# %bb.1:                                # %func_writeChromaIntraPredMode.41
	callq	writeChromaIntraPredMode.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.76
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.114
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.114
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.118
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.118
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_writeChromaIntraPredMode.130
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.130
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_writeChromaIntraPredMode.131
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.131
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %func_writeChromaIntraPredMode.165
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.165
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_8:                               # %func_writeChromaIntraPredMode.177
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.177
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB26_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB26_7
	jmp	.LBB26_8
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_9
# %bb.1:                                # %func_write_one_macroblock.34
	movl	%ebx, %edi
	callq	write_one_macroblock.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.193
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.193
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.205
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.205
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_write_one_macroblock.247
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.247
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_write_one_macroblock.249
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.249
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_write_one_macroblock.256
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.256
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_write_one_macroblock.268
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
	jmp	.LBB28_8
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.179
	movl	%ebx, %edi
	callq	BType2CtxRef.179
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.220
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_writeReferenceFrame.2
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_writeReferenceFrame.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_writeReferenceFrame.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_writeReferenceFrame.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_writeReferenceFrame.176
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.176
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_writeMotionVector8x8.31
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.31
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.82
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.82
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.104
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.104
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.106
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.106
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_writeMotionVector8x8.154
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.154
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_writeMotionVector8x8.157
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.157
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_writeMotionVector8x8.204
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.204
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_writeMotionVector8x8.229
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.229
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r12d, %edi
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB32_9
# %bb.1:                                # %func_writeMotionInfo2NAL.53
	callq	writeMotionInfo2NAL.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.74
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.145
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.145
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.223
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.223
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_writeMotionInfo2NAL.263
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.263
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_writeMotionInfo2NAL.277
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.277
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %func_writeMotionInfo2NAL.279
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.279
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_8:                               # %func_writeMotionInfo2NAL.281
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.281
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB32_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB32_7
	jmp	.LBB32_8
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB33_9
# %bb.1:                                # %func_writeChromaCoeff.37
	callq	writeChromaCoeff.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.89
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.89
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.160
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.181
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.181
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_writeChromaCoeff.189
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.189
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_writeChromaCoeff.211
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.211
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_writeChromaCoeff.226
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.226
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_writeChromaCoeff.243
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.243
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
	jmp	.LBB33_8
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB34_9
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.1
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.1
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.70
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.98
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.100
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_writeCoeff4x4_CAVLC.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.117
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_writeCoeff4x4_CAVLC.170
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.170
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_writeCoeff4x4_CAVLC.184
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.184
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_writeCoeff4x4_CAVLC.215
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.215
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
	jmp	.LBB34_8
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB35_9
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.19
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.236
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.236
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_writeLumaCoeff4x4_CABAC.253
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.253
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_writeLumaCoeff4x4_CABAC.262
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.262
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %func_writeLumaCoeff4x4_CABAC.267
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.267
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_8:                               # %func_writeLumaCoeff4x4_CABAC.272
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.272
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB35_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB35_7
	jmp	.LBB35_8
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.40
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.84
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.105
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.105
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_writeLumaCoeff8x8_CABAC.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_writeLumaCoeff8x8_CABAC.142
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_writeLumaCoeff8x8_CABAC.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_writeLumaCoeff8x8_CABAC.203
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.203
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_writeLumaCoeff8x8.149
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.149
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.168
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.168
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.244
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.244
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.261
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.261
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_writeLumaCoeff8x8.265
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.265
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_writeLumaCoeff8x8.273
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.273
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_writeLumaCoeff8x8.275
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.275
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_writeLumaCoeff8x8.278
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.278
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB38_9
# %bb.1:                                # %func_writeCBPandLumaCoeff.23
	callq	writeCBPandLumaCoeff.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.26
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.38
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.45
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_writeCBPandLumaCoeff.55
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_writeCBPandLumaCoeff.61
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_writeCBPandLumaCoeff.138
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.138
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_writeCBPandLumaCoeff.167
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.167
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
	jmp	.LBB38_8
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB39_9
# %bb.1:                                # %func_predict_nnz.64
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.127
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.136
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_predict_nnz.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.137
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_predict_nnz.161
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.161
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_predict_nnz.174
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.174
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_predict_nnz.187
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.187
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
	jmp	.LBB39_8
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_predict_nnz_chroma.125
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.153
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.153
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.216
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.221
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.221
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_predict_nnz_chroma.230
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.230
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_predict_nnz_chroma.231
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.231
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_predict_nnz_chroma.239
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.239
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_predict_nnz_chroma.250
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.250
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_find_sad_16x16.24
	movq	%rbx, %rdi
	callq	find_sad_16x16.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.150
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_find_sad_16x16.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.164
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_find_sad_16x16.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.237
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_find_sad_16x16.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.246
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_find_sad_16x16.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.257
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.1   # -- Begin function writeCoeff4x4_CAVLC.1
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.1,@function
writeCoeff4x4_CAVLC.1:                  # @writeCoeff4x4_CAVLC.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$69003258, -168(%rbp)   # imm = 0x41CE7FA
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB42_22
# %bb.1:                                # %entry
	movq	.LJTI42_0(,%rax,8), %rax
	jmpq	*%rax
.LBB42_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB42_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB42_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB42_6
.LBB42_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB42_7
.LBB42_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB42_7:                               # %if.end
	jmp	.LBB42_23
.LBB42_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB42_23
.LBB42_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB42_23
.LBB42_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB42_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB42_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB42_14
.LBB42_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB42_15
.LBB42_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB42_15:                              # %if.end67
	jmp	.LBB42_23
.LBB42_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB42_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB42_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB42_20
.LBB42_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB42_21
.LBB42_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB42_21:                              # %if.end93
	jmp	.LBB42_23
.LBB42_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB42_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB42_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB42_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB42_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB42_27
.LBB42_26:                              # %cond.false
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB42_27
.LBB42_27:                              # %cond.end
                                        #   in Loop: Header=BB42_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB42_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB42_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB42_29:                              # %land.end
                                        #   in Loop: Header=BB42_24 Depth=1
	testb	$1, %dl
	jne	.LBB42_30
	jmp	.LBB42_41
.LBB42_30:                              # %for.body
                                        #   in Loop: Header=BB42_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB42_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB42_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB42_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB42_33:                              # %if.end110
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB42_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB42_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	$3, -28(%rbp)
.LBB42_36:                              # %if.end117
                                        #   in Loop: Header=BB42_24 Depth=1
	jmp	.LBB42_38
.LBB42_37:                              # %if.else118
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	$0, -28(%rbp)
.LBB42_38:                              # %if.end119
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB42_39:                              # %if.end121
                                        #   in Loop: Header=BB42_24 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_24
.LBB42_41:                              # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB42_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB42_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB42_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB42_46
.LBB42_45:                              # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB42_46:                              # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB42_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB42_49
.LBB42_48:                              # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB42_49:                              # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB42_51
.LBB42_50:                              # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB42_51:                              # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB42_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB42_60
.LBB42_53:                              # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB42_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB42_59
.LBB42_55:                              # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB42_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else167
	movl	$3, -96(%rbp)
.LBB42_58:                              # %if.end168
	jmp	.LBB42_59
.LBB42_59:                              # %if.end169
	jmp	.LBB42_60
.LBB42_60:                              # %if.end170
	jmp	.LBB42_62
.LBB42_61:                              # %if.else171
	movl	$0, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB42_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB42_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB42_65
.LBB42_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB42_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB42_122
.LBB42_67:                              # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB42_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB42_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB42_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB42_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB42_72:                              # %if.end202
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB42_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB42_74:                              # %if.end205
                                        #   in Loop: Header=BB42_69 Depth=1
	jmp	.LBB42_75
.LBB42_75:                              # %for.inc206
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_69
.LBB42_76:                              # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB42_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB42_78:                              # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB42_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB42_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB42_81:                              # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB42_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB42_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB42_85
.LBB42_84:                              # %if.else232
	movl	$0, -32(%rbp)
.LBB42_85:                              # %if.end233
	movl	-68(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB42_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB42_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB42_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB42_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB42_91
.LBB42_90:                              # %if.else249
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB42_91:                              # %if.end252
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	$0, -144(%rbp)
.LBB42_92:                              # %if.end253
                                        #   in Loop: Header=BB42_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB42_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB42_95
.LBB42_94:                              # %if.else257
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB42_95:                              # %if.end259
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB42_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB42_97:                              # %if.end266
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB42_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB42_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	$2, -32(%rbp)
.LBB42_100:                             # %if.end273
                                        #   in Loop: Header=BB42_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_86
.LBB42_102:                             # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB42_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB42_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB42_106
.LBB42_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB42_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB42_107:                             # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB42_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB42_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB42_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB42_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB42_108 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB42_112
.LBB42_111:                             # %if.then318
	jmp	.LBB42_120
.LBB42_112:                             # %if.end319
                                        #   in Loop: Header=BB42_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB42_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB42_108 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB42_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB42_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	$6, -32(%rbp)
.LBB42_116:                             # %if.end327
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	movl	-92(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB42_117:                             # %if.end341
                                        #   in Loop: Header=BB42_108 Depth=1
	jmp	.LBB42_118
.LBB42_118:                             # %for.inc342
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_108
.LBB42_119:                             # %for.end344.loopexit
	jmp	.LBB42_120
.LBB42_120:                             # %for.end344
	jmp	.LBB42_121
.LBB42_121:                             # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB42_122:                             # %return
	movl	-156(%rbp), %ebx
	cmpl	$69003258, -168(%rbp)   # imm = 0x41CE7FA
	jne	.LBB42_124
.LBB42_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_123
.Lfunc_end42:
	.size	writeCoeff4x4_CAVLC.1, .Lfunc_end42-writeCoeff4x4_CAVLC.1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI42_0:
	.quad	.LBB42_2
	.quad	.LBB42_8
	.quad	.LBB42_9
	.quad	.LBB42_22
	.quad	.LBB42_22
	.quad	.LBB42_22
	.quad	.LBB42_10
	.quad	.LBB42_16
                                        # -- End function
	.text
	.globl	writeReferenceFrame.2   # -- Begin function writeReferenceFrame.2
	.p2align	4, 0x90
	.type	writeReferenceFrame.2,@function
writeReferenceFrame.2:                  # @writeReferenceFrame.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2125407554, -80(%rbp)  # imm = 0x7EAF2542
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB43_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB43_7
.LBB43_6:                               # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB43_7:                               # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB43_18
.LBB43_9:                               # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB43_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB43_11:                              # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB43_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB43_15
.LBB43_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB43_15:                              # %if.end33
	jmp	.LBB43_17
.LBB43_16:                              # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB43_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB43_18:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$2125407554, -80(%rbp)  # imm = 0x7EAF2542
	jne	.LBB43_20
.LBB43_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_19
.Lfunc_end43:
	.size	writeReferenceFrame.2, .Lfunc_end43-writeReferenceFrame.2
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.3          # -- Begin function MBType2Value.3
	.p2align	4, 0x90
	.type	MBType2Value.3,@function
MBType2Value.3:                         # @MBType2Value.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$273966130, -36(%rbp)   # imm = 0x10546432
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB44_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB44_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB44_4
.LBB44_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB44_26
.LBB44_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB44_26
.LBB44_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB44_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB44_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB44_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB44_26
.LBB44_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB44_26
.LBB44_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_26
.LBB44_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB44_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB44_26
.LBB44_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB44_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB44_17
.LBB44_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB44_26
.LBB44_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB44_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_26
.LBB44_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB44_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB44_26
.LBB44_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB44_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_26
.LBB44_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB44_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_26
.LBB44_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB44_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$273966130, -36(%rbp)   # imm = 0x10546432
	jne	.LBB44_28
.LBB44_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_27
.Lfunc_end44:
	.size	MBType2Value.3, .Lfunc_end44-MBType2Value.3
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.4          # -- Begin function B8Mode2Value.4
	.p2align	4, 0x90
	.type	B8Mode2Value.4,@function
B8Mode2Value.4:                         # @B8Mode2Value.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$173054359, -20(%rbp)   # imm = 0xA509997
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB45_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_3
.LBB45_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB45_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$173054359, -20(%rbp)   # imm = 0xA509997
	jne	.LBB45_5
.LBB45_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_4
.Lfunc_end45:
	.size	B8Mode2Value.4, .Lfunc_end45-B8Mode2Value.4
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.5 # -- Begin function write_terminating_bit.5
	.p2align	4, 0x90
	.type	write_terminating_bit.5,@function
write_terminating_bit.5:                # @write_terminating_bit.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2055445297, -8(%rbp)   # imm = 0x7A839B31
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$2055445297, -8(%rbp)   # imm = 0x7A839B31
	jne	.LBB46_2
.LBB46_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_1
.Lfunc_end46:
	.size	write_terminating_bit.5, .Lfunc_end46-write_terminating_bit.5
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.6          # -- Begin function copyblock4x4.6
	.p2align	4, 0x90
	.type	copyblock4x4.6,@function
copyblock4x4.6:                         # @copyblock4x4.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1636514590, -20(%rbp)  # imm = 0x618B3B1E
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1636514590, -20(%rbp)  # imm = 0x618B3B1E
	jne	.LBB47_2
.LBB47_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_1
.Lfunc_end47:
	.size	copyblock4x4.6, .Lfunc_end47-copyblock4x4.6
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.7   # -- Begin function writeReferenceFrame.7
	.p2align	4, 0x90
	.type	writeReferenceFrame.7,@function
writeReferenceFrame.7:                  # @writeReferenceFrame.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1507796308, -84(%rbp)  # imm = 0x59DF2554
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB48_4
.LBB48_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB48_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB48_7
.LBB48_6:                               # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB48_7:                               # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB48_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB48_18
.LBB48_9:                               # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB48_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB48_11:                              # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB48_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB48_15
.LBB48_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB48_15:                              # %if.end33
	jmp	.LBB48_17
.LBB48_16:                              # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-52(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB48_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB48_18:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$1507796308, -84(%rbp)  # imm = 0x59DF2554
	jne	.LBB48_20
.LBB48_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_19
.Lfunc_end48:
	.size	writeReferenceFrame.7, .Lfunc_end48-writeReferenceFrame.7
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.8 # -- Begin function IntraChromaPrediction.8
	.p2align	4, 0x90
	.type	IntraChromaPrediction.8,@function
IntraChromaPrediction.8:                # @IntraChromaPrediction.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1347196059, -164(%rbp) # imm = 0x504C949B
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB49_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB49_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_8
.LBB49_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB49_8
.LBB49_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB49_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB49_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB49_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_13
.LBB49_12:                              # %cond.false32
                                        #   in Loop: Header=BB49_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_13
.LBB49_13:                              # %cond.end33
                                        #   in Loop: Header=BB49_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_9
.LBB49_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB49_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB49_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB49_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB49_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_20
.LBB49_19:                              # %cond.false57
                                        #   in Loop: Header=BB49_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_20
.LBB49_20:                              # %cond.end58
                                        #   in Loop: Header=BB49_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB49_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_16
.LBB49_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB49_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_25
.LBB49_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB49_25
.LBB49_25:                              # %cond.end75
	movl	%eax, -96(%rbp)
.LBB49_26:                              # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB49_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_28:                              # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB49_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB49_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB49_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_32:                              # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB49_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB49_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_37 Depth 2
                                        #       Child Loop BB49_39 Depth 3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
                                        #     Child Loop BB49_138 Depth 2
                                        #     Child Loop BB49_142 Depth 2
                                        #       Child Loop BB49_144 Depth 3
                                        #     Child Loop BB49_153 Depth 2
                                        #     Child Loop BB49_157 Depth 2
                                        #       Child Loop BB49_159 Depth 3
                                        #     Child Loop BB49_170 Depth 2
                                        #     Child Loop BB49_174 Depth 2
                                        #     Child Loop BB49_178 Depth 2
                                        #       Child Loop BB49_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB49_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB49_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB49_37:                              # %for.cond95
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_39 Depth 3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB49_37 Depth=2
	movl	$0, -88(%rbp)
.LBB49_39:                              # %for.cond99
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB49_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB49_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB49_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB49_39 Depth=3
	movq	.LJTI49_0(,%rax,8), %rax
	jmpq	*%rax
.LBB49_42:                              # %sw.bb
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_44:                              # %for.cond124
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB49_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB49_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_44
.LBB49_47:                              # %for.end138
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_48
.LBB49_48:                              # %if.end139
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_50:                              # %for.cond143
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB49_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB49_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_50
.LBB49_53:                              # %for.end162
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_54
.LBB49_54:                              # %if.end163
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_63
.LBB49_57:                              # %if.else
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_62
.LBB49_59:                              # %if.else174
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_61:                              # %if.end180
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_62
.LBB49_62:                              # %if.end181
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_63
.LBB49_63:                              # %if.end182
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_64:                              # %sw.bb183
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_66:                              # %for.cond186
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB49_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB49_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_66
.LBB49_69:                              # %for.end202
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_77
.LBB49_70:                              # %if.else203
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_72:                              # %for.cond207
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB49_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB49_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_72
.LBB49_75:                              # %for.end226
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_76
.LBB49_76:                              # %if.end227
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_77
.LBB49_77:                              # %if.end228
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_82
.LBB49_79:                              # %if.else233
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_81:                              # %if.end239
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_82
.LBB49_82:                              # %if.end240
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_83:                              # %sw.bb241
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_85:                              # %for.cond245
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB49_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB49_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_85
.LBB49_88:                              # %for.end264
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_96
.LBB49_89:                              # %if.else265
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_91:                              # %for.cond268
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB49_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB49_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_91
.LBB49_94:                              # %for.end284
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_95
.LBB49_95:                              # %if.end285
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_96
.LBB49_96:                              # %if.end286
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_101
.LBB49_98:                              # %if.else292
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_100:                             # %if.end297
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_101
.LBB49_101:                             # %if.end298
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_102:                             # %sw.bb299
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_104:                             # %for.cond302
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB49_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB49_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_104
.LBB49_107:                             # %for.end318
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_108
.LBB49_108:                             # %if.end319
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_110:                             # %for.cond323
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB49_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB49_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_110
.LBB49_113:                             # %for.end342
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_114
.LBB49_114:                             # %if.end343
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_123
.LBB49_117:                             # %if.else352
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_122
.LBB49_119:                             # %if.else357
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_121:                             # %if.end363
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_122
.LBB49_122:                             # %if.end364
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_123
.LBB49_123:                             # %if.end365
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_124:                             # %sw.epilog
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_125:                             # %for.cond366
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB49_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_127:                             # %for.cond371
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        #         Parent Loop BB49_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB49_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB49_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_127
.LBB49_130:                             # %for.end386
                                        #   in Loop: Header=BB49_125 Depth=4
	jmp	.LBB49_131
.LBB49_131:                             # %for.inc387
                                        #   in Loop: Header=BB49_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_125
.LBB49_132:                             # %for.end389
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_133
.LBB49_133:                             # %for.inc390
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB49_39
.LBB49_134:                             # %for.end392
                                        #   in Loop: Header=BB49_37 Depth=2
	jmp	.LBB49_135
.LBB49_135:                             # %for.inc393
                                        #   in Loop: Header=BB49_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB49_37
.LBB49_136:                             # %for.end395
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_138:                             # %for.cond398
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB49_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB49_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_138
.LBB49_141:                             # %for.end414
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_142:                             # %for.cond415
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB49_142 Depth=2
	movl	$0, -8(%rbp)
.LBB49_144:                             # %for.cond419
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB49_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB49_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_144
.LBB49_147:                             # %for.end436
                                        #   in Loop: Header=BB49_142 Depth=2
	jmp	.LBB49_148
.LBB49_148:                             # %for.inc437
                                        #   in Loop: Header=BB49_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_142
.LBB49_149:                             # %for.end439
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_150
.LBB49_150:                             # %if.end440
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_153:                             # %for.cond447
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB49_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB49_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_153
.LBB49_156:                             # %for.end468
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_157:                             # %for.cond469
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB49_157 Depth=2
	movl	$0, -8(%rbp)
.LBB49_159:                             # %for.cond473
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB49_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB49_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_159
.LBB49_162:                             # %for.end490
                                        #   in Loop: Header=BB49_157 Depth=2
	jmp	.LBB49_163
.LBB49_163:                             # %for.inc491
                                        #   in Loop: Header=BB49_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_157
.LBB49_164:                             # %for.end493
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_165
.LBB49_165:                             # %if.end494
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB49_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB49_170:                             # %for.cond519
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB49_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB49_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB49_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_170
.LBB49_173:                             # %for.end540
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB49_174:                             # %for.cond556
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB49_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB49_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB49_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_174
.LBB49_177:                             # %for.end577
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB49_178:                             # %for.cond606
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB49_178 Depth=2
	movl	$0, -4(%rbp)
.LBB49_180:                             # %for.cond610
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB49_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB49_184
.LBB49_183:                             # %cond.false630
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB49_184:                             # %cond.end643
                                        #   in Loop: Header=BB49_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB49_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB49_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB49_190
.LBB49_186:                             # %cond.false648
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB49_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB49_189
.LBB49_188:                             # %cond.false666
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB49_189:                             # %cond.end679
                                        #   in Loop: Header=BB49_180 Depth=3
.LBB49_190:                             # %cond.end681
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_180
.LBB49_192:                             # %for.end694
                                        #   in Loop: Header=BB49_178 Depth=2
	jmp	.LBB49_193
.LBB49_193:                             # %for.inc695
                                        #   in Loop: Header=BB49_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_178
.LBB49_194:                             # %for.end697
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_195
.LBB49_195:                             # %if.end698
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_196
.LBB49_196:                             # %for.inc699
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_35
.LBB49_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB49_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB49_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_199
.LBB49_202:                             # %for.end712
	movl	$0, -40(%rbp)
.LBB49_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_219 Depth 2
                                        #       Child Loop BB49_221 Depth 3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB49_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB49_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB49_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB49_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_207:                             # %if.end723
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB49_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_217
.LBB49_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB49_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_217
.LBB49_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB49_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB49_218
.LBB49_217:                             # %if.then749
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_218:                             # %if.end750
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB49_219:                             # %for.cond751
                                        #   Parent Loop BB49_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_221 Depth 3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB49_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB49_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB49_221:                             # %for.cond757
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB49_221 Depth=3
	movl	$0, -48(%rbp)
.LBB49_223:                             # %for.cond761
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB49_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_225:                             # %for.cond765
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        #         Parent Loop BB49_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB49_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB49_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_227:                             # %for.cond770
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        #         Parent Loop BB49_223 Depth=4
                                        #           Parent Loop BB49_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB49_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB49_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB49_227
.LBB49_230:                             # %for.end803
                                        #   in Loop: Header=BB49_225 Depth=5
	jmp	.LBB49_231
.LBB49_231:                             # %for.inc804
                                        #   in Loop: Header=BB49_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_225
.LBB49_232:                             # %for.end806
                                        #   in Loop: Header=BB49_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB49_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB49_223
.LBB49_234:                             # %for.end810
                                        #   in Loop: Header=BB49_221 Depth=3
	jmp	.LBB49_235
.LBB49_235:                             # %for.inc811
                                        #   in Loop: Header=BB49_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_221
.LBB49_236:                             # %for.end813
                                        #   in Loop: Header=BB49_219 Depth=2
	jmp	.LBB49_237
.LBB49_237:                             # %for.inc814
                                        #   in Loop: Header=BB49_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_219
.LBB49_238:                             # %for.end816
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB49_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB49_240:                             # %if.end820
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_241:                             # %for.inc821
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB49_203
.LBB49_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB49_243:                             # %if.end824
	cmpl	$1347196059, -164(%rbp) # imm = 0x504C949B
	jne	.LBB49_245
.LBB49_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_244
.Lfunc_end49:
	.size	IntraChromaPrediction.8, .Lfunc_end49-IntraChromaPrediction.8
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI49_0:
	.quad	.LBB49_42
	.quad	.LBB49_64
	.quad	.LBB49_83
	.quad	.LBB49_102
                                        # -- End function
	.text
	.globl	slice_too_big.9         # -- Begin function slice_too_big.9
	.p2align	4, 0x90
	.type	slice_too_big.9,@function
slice_too_big.9:                        # @slice_too_big.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$460323770, -56(%rbp)   # imm = 0x1B6FFBBA
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB50_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB50_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_5:                               # %if.end
                                        #   in Loop: Header=BB50_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_7:                               # %if.end8
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB50_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB50_21
.LBB50_9:                               # %if.end11
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_10
.LBB50_10:                              # %for.inc
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_2
.LBB50_11:                              # %for.end
	jmp	.LBB50_12
.LBB50_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB50_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB50_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB50_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB50_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB50_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB50_21
.LBB50_17:                              # %if.end27
                                        #   in Loop: Header=BB50_14 Depth=1
	jmp	.LBB50_18
.LBB50_18:                              # %for.inc28
                                        #   in Loop: Header=BB50_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_14
.LBB50_19:                              # %for.end30
	jmp	.LBB50_20
.LBB50_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB50_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$460323770, -56(%rbp)   # imm = 0x1B6FFBBA
	jne	.LBB50_23
.LBB50_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_22
.Lfunc_end50:
	.size	slice_too_big.9, .Lfunc_end50-slice_too_big.9
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.10   # -- Begin function LumaResidualCoding.10
	.p2align	4, 0x90
	.type	LumaResidualCoding.10,@function
LumaResidualCoding.10:                  # @LumaResidualCoding.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$118840825, -52(%rbp)   # imm = 0x7155DF9
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB51_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-36(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-36(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB51_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB51_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB51_33
.LBB51_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB51_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	$0, -4(%rbp)
.LBB51_10:                              # %for.cond13
                                        #   Parent Loop BB51_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB51_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB51_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB51_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB51_14
.LBB51_13:                              # %if.else
                                        #   in Loop: Header=BB51_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB51_14:                              # %if.end
                                        #   in Loop: Header=BB51_10 Depth=2
	jmp	.LBB51_15
.LBB51_15:                              # %for.inc31
                                        #   in Loop: Header=BB51_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_10
.LBB51_16:                              # %for.end33
                                        #   in Loop: Header=BB51_8 Depth=1
	jmp	.LBB51_17
.LBB51_17:                              # %for.inc34
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_8
.LBB51_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB51_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB51_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_22 Depth 2
                                        #       Child Loop BB51_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB51_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB51_22:                              # %for.cond45
                                        #   Parent Loop BB51_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB51_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	$0, -4(%rbp)
.LBB51_24:                              # %for.cond48
                                        #   Parent Loop BB51_20 Depth=1
                                        #     Parent Loop BB51_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB51_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB51_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB51_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_24
.LBB51_27:                              # %for.end55
                                        #   in Loop: Header=BB51_22 Depth=2
	jmp	.LBB51_28
.LBB51_28:                              # %for.inc56
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_22
.LBB51_29:                              # %for.end58
                                        #   in Loop: Header=BB51_20 Depth=1
	jmp	.LBB51_30
.LBB51_30:                              # %for.inc59
                                        #   in Loop: Header=BB51_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_20
.LBB51_31:                              # %for.end61
	jmp	.LBB51_32
.LBB51_32:                              # %if.end62
	jmp	.LBB51_33
.LBB51_33:                              # %if.end63
	cmpl	$118840825, -52(%rbp)   # imm = 0x7155DF9
	jne	.LBB51_35
.LBB51_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_34
.Lfunc_end51:
	.size	LumaResidualCoding.10, .Lfunc_end51-LumaResidualCoding.10
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.11 # -- Begin function LumaResidualCoding8x8.11
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.11,@function
LumaResidualCoding8x8.11:               # @LumaResidualCoding8x8.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1000689479, -128(%rbp) # imm = 0x3BA54F47
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB52_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -64(%rbp)
	jne	.LBB52_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB52_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB52_5:                               # %if.end
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_8 Depth 2
                                        #       Child Loop BB52_11 Depth 3
                                        #         Child Loop BB52_13 Depth 4
                                        #       Child Loop BB52_19 Depth 3
                                        #         Child Loop BB52_21 Depth 4
                                        #       Child Loop BB52_29 Depth 3
                                        #         Child Loop BB52_31 Depth 4
                                        #       Child Loop BB52_40 Depth 3
                                        #         Child Loop BB52_42 Depth 4
                                        #       Child Loop BB52_57 Depth 3
                                        #         Child Loop BB52_59 Depth 4
                                        #       Child Loop BB52_67 Depth 3
                                        #         Child Loop BB52_69 Depth 4
                                        #       Child Loop BB52_84 Depth 3
                                        #         Child Loop BB52_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB52_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -80(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_8:                               # %for.cond9
                                        #   Parent Loop BB52_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_11 Depth 3
                                        #         Child Loop BB52_13 Depth 4
                                        #       Child Loop BB52_19 Depth 3
                                        #         Child Loop BB52_21 Depth 4
                                        #       Child Loop BB52_29 Depth 3
                                        #         Child Loop BB52_31 Depth 4
                                        #       Child Loop BB52_40 Depth 3
                                        #         Child Loop BB52_42 Depth 4
                                        #       Child Loop BB52_57 Depth 3
                                        #         Child Loop BB52_59 Depth 4
                                        #       Child Loop BB52_67 Depth 3
                                        #         Child Loop BB52_69 Depth 4
                                        #       Child Loop BB52_84 Depth 3
                                        #         Child Loop BB52_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB52_11:                              # %for.cond16
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB52_11 Depth=3
	movl	$0, -12(%rbp)
.LBB52_13:                              # %for.cond20
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB52_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB52_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_13
.LBB52_16:                              # %for.end
                                        #   in Loop: Header=BB52_11 Depth=3
	jmp	.LBB52_17
.LBB52_17:                              # %for.inc37
                                        #   in Loop: Header=BB52_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_11
.LBB52_18:                              # %for.end39
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB52_19:                              # %for.cond41
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB52_19 Depth=3
	movl	$0, -12(%rbp)
.LBB52_21:                              # %for.cond45
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB52_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB52_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_21
.LBB52_24:                              # %for.end65
                                        #   in Loop: Header=BB52_19 Depth=3
	jmp	.LBB52_25
.LBB52_25:                              # %for.inc66
                                        #   in Loop: Header=BB52_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_19
.LBB52_26:                              # %for.end68
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_27
.LBB52_27:                              # %if.end69
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	$0, -16(%rbp)
.LBB52_29:                              # %for.cond74
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB52_29 Depth=3
	movl	$0, -12(%rbp)
.LBB52_31:                              # %for.cond78
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB52_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB52_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_31
.LBB52_34:                              # %for.end98
                                        #   in Loop: Header=BB52_29 Depth=3
	jmp	.LBB52_35
.LBB52_35:                              # %for.inc99
                                        #   in Loop: Header=BB52_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_29
.LBB52_36:                              # %for.end101
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_37
.LBB52_37:                              # %if.end102
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB52_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	$0, -16(%rbp)
.LBB52_40:                              # %for.cond108
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB52_40 Depth=3
	movl	$0, -12(%rbp)
.LBB52_42:                              # %for.cond112
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB52_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB52_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_42
.LBB52_45:                              # %for.end137
                                        #   in Loop: Header=BB52_40 Depth=3
	jmp	.LBB52_46
.LBB52_46:                              # %for.inc138
                                        #   in Loop: Header=BB52_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_40
.LBB52_47:                              # %for.end140
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB52_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB52_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB52_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB52_52
.LBB52_51:                              # %if.else
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB52_52:                              # %if.end151
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB52_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB52_54:                              # %if.end157
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_55
.LBB52_55:                              # %if.end158
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_65
.LBB52_56:                              # %if.else159
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	$0, -16(%rbp)
.LBB52_57:                              # %for.cond160
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB52_57 Depth=3
	movl	$0, -12(%rbp)
.LBB52_59:                              # %for.cond164
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB52_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB52_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_59
.LBB52_62:                              # %for.end193
                                        #   in Loop: Header=BB52_57 Depth=3
	jmp	.LBB52_63
.LBB52_63:                              # %for.inc194
                                        #   in Loop: Header=BB52_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_57
.LBB52_64:                              # %for.end196
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_65
.LBB52_65:                              # %if.end197
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_95
.LBB52_66:                              # %if.else198
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	$0, -16(%rbp)
.LBB52_67:                              # %for.cond199
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB52_67 Depth=3
	movl	$0, -12(%rbp)
.LBB52_69:                              # %for.cond203
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB52_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -120(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB52_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB52_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB52_73
.LBB52_72:                              # %if.else300
                                        #   in Loop: Header=BB52_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB52_73:                              # %if.end314
                                        #   in Loop: Header=BB52_69 Depth=4
	jmp	.LBB52_74
.LBB52_74:                              # %for.inc315
                                        #   in Loop: Header=BB52_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_69
.LBB52_75:                              # %for.end317
                                        #   in Loop: Header=BB52_67 Depth=3
	jmp	.LBB52_76
.LBB52_76:                              # %for.inc318
                                        #   in Loop: Header=BB52_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_67
.LBB52_77:                              # %for.end320
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB52_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB52_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB52_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB52_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB52_83
.LBB52_82:                              # %if.else334
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB52_83:                              # %if.end336
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	$0, -16(%rbp)
.LBB52_84:                              # %for.cond337
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB52_84 Depth=3
	movl	$0, -12(%rbp)
.LBB52_86:                              # %for.cond341
                                        #   Parent Loop BB52_6 Depth=1
                                        #     Parent Loop BB52_8 Depth=2
                                        #       Parent Loop BB52_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB52_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB52_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_86
.LBB52_89:                              # %for.end358
                                        #   in Loop: Header=BB52_84 Depth=3
	jmp	.LBB52_90
.LBB52_90:                              # %for.inc359
                                        #   in Loop: Header=BB52_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_84
.LBB52_91:                              # %for.end361
                                        #   in Loop: Header=BB52_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB52_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB52_93:                              # %if.end368
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_94
.LBB52_94:                              # %if.end369
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_95
.LBB52_95:                              # %if.end370
                                        #   in Loop: Header=BB52_8 Depth=2
	jmp	.LBB52_96
.LBB52_96:                              # %for.inc371
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_8
.LBB52_97:                              # %for.end374
                                        #   in Loop: Header=BB52_6 Depth=1
	jmp	.LBB52_98
.LBB52_98:                              # %for.inc375
                                        #   in Loop: Header=BB52_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_6
.LBB52_99:                              # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB52_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB52_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB52_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB52_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB52_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB52_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB52_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB52_106 Depth=1
	movl	$0, -12(%rbp)
.LBB52_108:                             # %for.cond400
                                        #   Parent Loop BB52_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB52_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB52_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB52_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_108
.LBB52_111:                             # %for.end417
                                        #   in Loop: Header=BB52_106 Depth=1
	jmp	.LBB52_112
.LBB52_112:                             # %for.inc418
                                        #   in Loop: Header=BB52_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_106
.LBB52_113:                             # %for.end420
	jmp	.LBB52_114
.LBB52_114:                             # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB52_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB52_116:                             # %if.end431
	jmp	.LBB52_117
.LBB52_117:                             # %if.end432
	jmp	.LBB52_118
.LBB52_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB52_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB52_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB52_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB52_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB52_145
.LBB52_123:                             # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB52_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_126:                             # %for.cond462
                                        #   Parent Loop BB52_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB52_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB52_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB52_130
.LBB52_129:                             # %if.else481
                                        #   in Loop: Header=BB52_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB52_130:                             # %if.end486
                                        #   in Loop: Header=BB52_126 Depth=2
	jmp	.LBB52_131
.LBB52_131:                             # %for.inc487
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_126
.LBB52_132:                             # %for.end489
                                        #   in Loop: Header=BB52_124 Depth=1
	jmp	.LBB52_133
.LBB52_133:                             # %for.inc490
                                        #   in Loop: Header=BB52_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_124
.LBB52_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB52_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB52_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_138:                             # %for.cond502
                                        #   Parent Loop BB52_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB52_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB52_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_138
.LBB52_141:                             # %for.end509
                                        #   in Loop: Header=BB52_136 Depth=1
	jmp	.LBB52_142
.LBB52_142:                             # %for.inc510
                                        #   in Loop: Header=BB52_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_136
.LBB52_143:                             # %for.end512
	jmp	.LBB52_144
.LBB52_144:                             # %if.end513
	jmp	.LBB52_145
.LBB52_145:                             # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1000689479, -128(%rbp) # imm = 0x3BA54F47
	jne	.LBB52_147
.LBB52_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_146
.Lfunc_end52:
	.size	LumaResidualCoding8x8.11, .Lfunc_end52-LumaResidualCoding8x8.11
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.12  # -- Begin function SetModesAndRefframe.12
	.p2align	4, 0x90
	.type	SetModesAndRefframe.12,@function
SetModesAndRefframe.12:                 # @SetModesAndRefframe.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2066360145, -60(%rbp)  # imm = 0x7B2A2751
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB53_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB53_12
.LBB53_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB53_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB53_11
.LBB53_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB53_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB53_10
.LBB53_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB53_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB53_9
.LBB53_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB53_9:                               # %if.end
	jmp	.LBB53_10
.LBB53_10:                              # %if.end86
	jmp	.LBB53_11
.LBB53_11:                              # %if.end87
	jmp	.LBB53_12
.LBB53_12:                              # %if.end88
	cmpl	$2066360145, -60(%rbp)  # imm = 0x7B2A2751
	jne	.LBB53_14
.LBB53_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_13
.Lfunc_end53:
	.size	SetModesAndRefframe.12, .Lfunc_end53-SetModesAndRefframe.12
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.13    # -- Begin function TransformDecision.13
	.p2align	4, 0x90
	.type	TransformDecision.13,@function
TransformDecision.13:                   # @TransformDecision.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1323262779, -84(%rbp)  # imm = 0x4EDF633B
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB54_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB54_3
.LBB54_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB54_3:                               # %if.end
	jmp	.LBB54_4
.LBB54_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_6 Depth 2
                                        #       Child Loop BB54_8 Depth 3
                                        #         Child Loop BB54_10 Depth 4
                                        #           Child Loop BB54_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB54_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB54_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB54_6:                               # %for.cond3
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_8 Depth 3
                                        #         Child Loop BB54_10 Depth 4
                                        #           Child Loop BB54_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB54_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB54_8:                               # %for.cond8
                                        #   Parent Loop BB54_4 Depth=1
                                        #     Parent Loop BB54_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_10 Depth 4
                                        #           Child Loop BB54_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB54_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB54_10:                              # %for.cond13
                                        #   Parent Loop BB54_4 Depth=1
                                        #     Parent Loop BB54_6 Depth=2
                                        #       Parent Loop BB54_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB54_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB54_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB54_10 Depth=4
	movl	$0, -24(%rbp)
.LBB54_12:                              # %for.cond17
                                        #   Parent Loop BB54_4 Depth=1
                                        #     Parent Loop BB54_6 Depth=2
                                        #       Parent Loop BB54_8 Depth=3
                                        #         Parent Loop BB54_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB54_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB54_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB54_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB54_12
.LBB54_15:                              # %for.end
                                        #   in Loop: Header=BB54_10 Depth=4
	jmp	.LBB54_16
.LBB54_16:                              # %for.inc38
                                        #   in Loop: Header=BB54_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_10
.LBB54_17:                              # %for.end40
                                        #   in Loop: Header=BB54_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB54_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_8
.LBB54_19:                              # %for.end44
                                        #   in Loop: Header=BB54_6 Depth=2
	jmp	.LBB54_20
.LBB54_20:                              # %for.inc45
                                        #   in Loop: Header=BB54_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_6
.LBB54_21:                              # %for.end47
                                        #   in Loop: Header=BB54_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB54_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_4
.LBB54_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB54_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB54_28
.LBB54_25:                              # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB54_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB54_28
.LBB54_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB54_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$1323262779, -84(%rbp)  # imm = 0x4EDF633B
	jne	.LBB54_30
.LBB54_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_29
.Lfunc_end54:
	.size	TransformDecision.13, .Lfunc_end54-TransformDecision.13
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.14 # -- Begin function IntraChromaPrediction.14
	.p2align	4, 0x90
	.type	IntraChromaPrediction.14,@function
IntraChromaPrediction.14:               # @IntraChromaPrediction.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$955518908, -164(%rbp)  # imm = 0x38F40FBC
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB55_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB55_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB55_8
.LBB55_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB55_8
.LBB55_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB55_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB55_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB55_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB55_13
.LBB55_12:                              # %cond.false32
                                        #   in Loop: Header=BB55_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_13
.LBB55_13:                              # %cond.end33
                                        #   in Loop: Header=BB55_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_9
.LBB55_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB55_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB55_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB55_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB55_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB55_20
.LBB55_19:                              # %cond.false57
                                        #   in Loop: Header=BB55_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_20
.LBB55_20:                              # %cond.end58
                                        #   in Loop: Header=BB55_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB55_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_16
.LBB55_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB55_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB55_25
.LBB55_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB55_25
.LBB55_25:                              # %cond.end75
	movl	%eax, -100(%rbp)
.LBB55_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB55_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_28:                              # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB55_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB55_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB55_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_32:                              # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB55_34
# %bb.33:                               # %if.then88
	movl	-100(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB55_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_37 Depth 2
                                        #       Child Loop BB55_39 Depth 3
                                        #         Child Loop BB55_104 Depth 4
                                        #         Child Loop BB55_110 Depth 4
                                        #         Child Loop BB55_85 Depth 4
                                        #         Child Loop BB55_91 Depth 4
                                        #         Child Loop BB55_66 Depth 4
                                        #         Child Loop BB55_72 Depth 4
                                        #         Child Loop BB55_44 Depth 4
                                        #         Child Loop BB55_50 Depth 4
                                        #         Child Loop BB55_125 Depth 4
                                        #           Child Loop BB55_127 Depth 5
                                        #     Child Loop BB55_138 Depth 2
                                        #     Child Loop BB55_142 Depth 2
                                        #       Child Loop BB55_144 Depth 3
                                        #     Child Loop BB55_153 Depth 2
                                        #     Child Loop BB55_157 Depth 2
                                        #       Child Loop BB55_159 Depth 3
                                        #     Child Loop BB55_170 Depth 2
                                        #     Child Loop BB55_174 Depth 2
                                        #     Child Loop BB55_178 Depth 2
                                        #       Child Loop BB55_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB55_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB55_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB55_37:                              # %for.cond95
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_39 Depth 3
                                        #         Child Loop BB55_104 Depth 4
                                        #         Child Loop BB55_110 Depth 4
                                        #         Child Loop BB55_85 Depth 4
                                        #         Child Loop BB55_91 Depth 4
                                        #         Child Loop BB55_66 Depth 4
                                        #         Child Loop BB55_72 Depth 4
                                        #         Child Loop BB55_44 Depth 4
                                        #         Child Loop BB55_50 Depth 4
                                        #         Child Loop BB55_125 Depth 4
                                        #           Child Loop BB55_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB55_37 Depth=2
	movl	$0, -84(%rbp)
.LBB55_39:                              # %for.cond99
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_104 Depth 4
                                        #         Child Loop BB55_110 Depth 4
                                        #         Child Loop BB55_85 Depth 4
                                        #         Child Loop BB55_91 Depth 4
                                        #         Child Loop BB55_66 Depth 4
                                        #         Child Loop BB55_72 Depth 4
                                        #         Child Loop BB55_44 Depth 4
                                        #         Child Loop BB55_50 Depth 4
                                        #         Child Loop BB55_125 Depth 4
                                        #           Child Loop BB55_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB55_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB55_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB55_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB55_39 Depth=3
	movq	.LJTI55_0(,%rax,8), %rax
	jmpq	*%rax
.LBB55_42:                              # %sw.bb
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_44:                              # %for.cond124
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB55_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB55_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_44
.LBB55_47:                              # %for.end138
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_48
.LBB55_48:                              # %if.end139
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB55_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_50:                              # %for.cond143
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB55_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB55_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_50
.LBB55_53:                              # %for.end162
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_54
.LBB55_54:                              # %if.end163
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB55_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_63
.LBB55_57:                              # %if.else
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_62
.LBB55_59:                              # %if.else174
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB55_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB55_61:                              # %if.end180
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_62
.LBB55_62:                              # %if.end181
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_63
.LBB55_63:                              # %if.end182
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_124
.LBB55_64:                              # %sw.bb183
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_66:                              # %for.cond186
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB55_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB55_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_66
.LBB55_69:                              # %for.end202
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_77
.LBB55_70:                              # %if.else203
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB55_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_72:                              # %for.cond207
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB55_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB55_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_72
.LBB55_75:                              # %for.end226
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_76
.LBB55_76:                              # %if.end227
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_77
.LBB55_77:                              # %if.end228
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_82
.LBB55_79:                              # %if.else233
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB55_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB55_81:                              # %if.end239
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_82
.LBB55_82:                              # %if.end240
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_124
.LBB55_83:                              # %sw.bb241
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB55_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_85:                              # %for.cond245
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB55_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB55_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_85
.LBB55_88:                              # %for.end264
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_96
.LBB55_89:                              # %if.else265
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_91:                              # %for.cond268
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB55_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB55_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_91
.LBB55_94:                              # %for.end284
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_95
.LBB55_95:                              # %if.end285
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_96
.LBB55_96:                              # %if.end286
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB55_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_101
.LBB55_98:                              # %if.else292
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB55_100:                             # %if.end297
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_101
.LBB55_101:                             # %if.end298
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_124
.LBB55_102:                             # %sw.bb299
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_104:                             # %for.cond302
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB55_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB55_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_104
.LBB55_107:                             # %for.end318
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_108
.LBB55_108:                             # %if.end319
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB55_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_110:                             # %for.cond323
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB55_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB55_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_110
.LBB55_113:                             # %for.end342
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_114
.LBB55_114:                             # %if.end343
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB55_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_123
.LBB55_117:                             # %if.else352
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB55_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_122
.LBB55_119:                             # %if.else357
                                        #   in Loop: Header=BB55_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB55_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB55_121:                             # %if.end363
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_122
.LBB55_122:                             # %if.end364
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_123
.LBB55_123:                             # %if.end365
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_124
.LBB55_124:                             # %sw.epilog
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_125:                             # %for.cond366
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB55_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB55_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_127:                             # %for.cond371
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_37 Depth=2
                                        #       Parent Loop BB55_39 Depth=3
                                        #         Parent Loop BB55_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB55_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB55_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_127
.LBB55_130:                             # %for.end386
                                        #   in Loop: Header=BB55_125 Depth=4
	jmp	.LBB55_131
.LBB55_131:                             # %for.inc387
                                        #   in Loop: Header=BB55_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_125
.LBB55_132:                             # %for.end389
                                        #   in Loop: Header=BB55_39 Depth=3
	jmp	.LBB55_133
.LBB55_133:                             # %for.inc390
                                        #   in Loop: Header=BB55_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB55_39
.LBB55_134:                             # %for.end392
                                        #   in Loop: Header=BB55_37 Depth=2
	jmp	.LBB55_135
.LBB55_135:                             # %for.inc393
                                        #   in Loop: Header=BB55_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB55_37
.LBB55_136:                             # %for.end395
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB55_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	$0, -4(%rbp)
.LBB55_138:                             # %for.cond398
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB55_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB55_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_138
.LBB55_141:                             # %for.end414
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	$0, -4(%rbp)
.LBB55_142:                             # %for.cond415
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB55_142 Depth=2
	movl	$0, -8(%rbp)
.LBB55_144:                             # %for.cond419
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB55_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB55_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_144
.LBB55_147:                             # %for.end436
                                        #   in Loop: Header=BB55_142 Depth=2
	jmp	.LBB55_148
.LBB55_148:                             # %for.inc437
                                        #   in Loop: Header=BB55_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_142
.LBB55_149:                             # %for.end439
                                        #   in Loop: Header=BB55_35 Depth=1
	jmp	.LBB55_150
.LBB55_150:                             # %if.end440
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB55_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB55_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	$0, -4(%rbp)
.LBB55_153:                             # %for.cond447
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB55_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB55_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_153
.LBB55_156:                             # %for.end468
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	$0, -4(%rbp)
.LBB55_157:                             # %for.cond469
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB55_157 Depth=2
	movl	$0, -8(%rbp)
.LBB55_159:                             # %for.cond473
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB55_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB55_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_159
.LBB55_162:                             # %for.end490
                                        #   in Loop: Header=BB55_157 Depth=2
	jmp	.LBB55_163
.LBB55_163:                             # %for.inc491
                                        #   in Loop: Header=BB55_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_157
.LBB55_164:                             # %for.end493
                                        #   in Loop: Header=BB55_35 Depth=1
	jmp	.LBB55_165
.LBB55_165:                             # %if.end494
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB55_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB55_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB55_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB55_35 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB55_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB55_170:                             # %for.cond519
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB55_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB55_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB55_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_170
.LBB55_173:                             # %for.end540
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB55_174:                             # %for.cond556
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB55_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB55_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB55_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_174
.LBB55_177:                             # %for.end577
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB55_178:                             # %for.cond606
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB55_178 Depth=2
	movl	$0, -4(%rbp)
.LBB55_180:                             # %for.cond610
                                        #   Parent Loop BB55_35 Depth=1
                                        #     Parent Loop BB55_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB55_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB55_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB55_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB55_184
.LBB55_183:                             # %cond.false630
                                        #   in Loop: Header=BB55_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB55_184:                             # %cond.end643
                                        #   in Loop: Header=BB55_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB55_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB55_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB55_190
.LBB55_186:                             # %cond.false648
                                        #   in Loop: Header=BB55_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB55_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB55_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB55_189
.LBB55_188:                             # %cond.false666
                                        #   in Loop: Header=BB55_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB55_189:                             # %cond.end679
                                        #   in Loop: Header=BB55_180 Depth=3
.LBB55_190:                             # %cond.end681
                                        #   in Loop: Header=BB55_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB55_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_180
.LBB55_192:                             # %for.end694
                                        #   in Loop: Header=BB55_178 Depth=2
	jmp	.LBB55_193
.LBB55_193:                             # %for.inc695
                                        #   in Loop: Header=BB55_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_178
.LBB55_194:                             # %for.end697
                                        #   in Loop: Header=BB55_35 Depth=1
	jmp	.LBB55_195
.LBB55_195:                             # %if.end698
                                        #   in Loop: Header=BB55_35 Depth=1
	jmp	.LBB55_196
.LBB55_196:                             # %for.inc699
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_35
.LBB55_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB55_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB55_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_199
.LBB55_202:                             # %for.end712
	movl	$0, -44(%rbp)
.LBB55_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_219 Depth 2
                                        #       Child Loop BB55_221 Depth 3
                                        #         Child Loop BB55_223 Depth 4
                                        #           Child Loop BB55_225 Depth 5
                                        #             Child Loop BB55_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB55_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB55_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB55_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB55_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB55_203 Depth=1
	jmp	.LBB55_241
.LBB55_207:                             # %if.end723
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB55_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB55_217
.LBB55_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB55_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB55_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB55_217
.LBB55_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB55_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB55_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB55_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB55_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB55_203 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB55_218
.LBB55_217:                             # %if.then749
                                        #   in Loop: Header=BB55_203 Depth=1
	jmp	.LBB55_241
.LBB55_218:                             # %if.end750
                                        #   in Loop: Header=BB55_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB55_219:                             # %for.cond751
                                        #   Parent Loop BB55_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_221 Depth 3
                                        #         Child Loop BB55_223 Depth 4
                                        #           Child Loop BB55_225 Depth 5
                                        #             Child Loop BB55_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB55_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB55_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB55_221:                             # %for.cond757
                                        #   Parent Loop BB55_203 Depth=1
                                        #     Parent Loop BB55_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_223 Depth 4
                                        #           Child Loop BB55_225 Depth 5
                                        #             Child Loop BB55_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB55_221 Depth=3
	movl	$0, -48(%rbp)
.LBB55_223:                             # %for.cond761
                                        #   Parent Loop BB55_203 Depth=1
                                        #     Parent Loop BB55_219 Depth=2
                                        #       Parent Loop BB55_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB55_225 Depth 5
                                        #             Child Loop BB55_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB55_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_225:                             # %for.cond765
                                        #   Parent Loop BB55_203 Depth=1
                                        #     Parent Loop BB55_219 Depth=2
                                        #       Parent Loop BB55_221 Depth=3
                                        #         Parent Loop BB55_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB55_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB55_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_227:                             # %for.cond770
                                        #   Parent Loop BB55_203 Depth=1
                                        #     Parent Loop BB55_219 Depth=2
                                        #       Parent Loop BB55_221 Depth=3
                                        #         Parent Loop BB55_223 Depth=4
                                        #           Parent Loop BB55_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB55_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB55_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB55_227
.LBB55_230:                             # %for.end803
                                        #   in Loop: Header=BB55_225 Depth=5
	jmp	.LBB55_231
.LBB55_231:                             # %for.inc804
                                        #   in Loop: Header=BB55_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_225
.LBB55_232:                             # %for.end806
                                        #   in Loop: Header=BB55_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB55_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB55_223
.LBB55_234:                             # %for.end810
                                        #   in Loop: Header=BB55_221 Depth=3
	jmp	.LBB55_235
.LBB55_235:                             # %for.inc811
                                        #   in Loop: Header=BB55_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB55_221
.LBB55_236:                             # %for.end813
                                        #   in Loop: Header=BB55_219 Depth=2
	jmp	.LBB55_237
.LBB55_237:                             # %for.inc814
                                        #   in Loop: Header=BB55_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_219
.LBB55_238:                             # %for.end816
                                        #   in Loop: Header=BB55_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB55_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB55_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB55_240:                             # %if.end820
                                        #   in Loop: Header=BB55_203 Depth=1
	jmp	.LBB55_241
.LBB55_241:                             # %for.inc821
                                        #   in Loop: Header=BB55_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB55_203
.LBB55_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB55_243:                             # %if.end824
	cmpl	$955518908, -164(%rbp)  # imm = 0x38F40FBC
	jne	.LBB55_245
.LBB55_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_244
.Lfunc_end55:
	.size	IntraChromaPrediction.14, .Lfunc_end55-IntraChromaPrediction.14
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI55_0:
	.quad	.LBB55_42
	.quad	.LBB55_64
	.quad	.LBB55_83
	.quad	.LBB55_102
                                        # -- End function
	.text
	.globl	writeMBLayer.15         # -- Begin function writeMBLayer.15
	.p2align	4, 0x90
	.type	writeMBLayer.15,@function
writeMBLayer.15:                        # @writeMBLayer.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1339722705, -92(%rbp)  # imm = 0x4FDA8BD1
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB56_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB56_3
.LBB56_3:                               # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB56_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB56_8
.LBB56_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB56_8
.LBB56_8:                               # %cond.end14
.LBB56_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB56_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB56_24
.LBB56_12:                              # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB56_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB56_17
	jmp	.LBB56_18
.LBB56_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_18
	jmp	.LBB56_17
.LBB56_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB56_17
	jmp	.LBB56_18
.LBB56_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB56_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB56_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB56_23
.LBB56_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB56_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB56_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB56_23:                              # %if.end50
	jmp	.LBB56_24
.LBB56_24:                              # %if.end51
	jmp	.LBB56_25
.LBB56_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB56_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB56_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB56_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB56_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_35
.LBB56_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB56_38
.LBB56_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB56_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_39:                              # %if.end96
	jmp	.LBB56_40
.LBB56_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_43
.LBB56_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB56_89
.LBB56_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB56_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB56_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB56_49
.LBB56_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB56_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB56_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB56_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_55
.LBB56_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB56_58
.LBB56_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB56_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_59:                              # %if.end198
	jmp	.LBB56_60
.LBB56_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB56_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB56_64
.LBB56_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_64:                              # %if.end226
	jmp	.LBB56_88
.LBB56_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB56_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB56_76
.LBB56_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB56_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB56_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_72:                              # %if.end281
	jmp	.LBB56_73
.LBB56_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB56_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB56_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB56_87
.LBB56_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB56_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB56_77 Depth=1
	movl	$0, -44(%rbp)
.LBB56_79:                              # %for.cond310
                                        #   Parent Loop BB56_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB56_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB56_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB56_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_79
.LBB56_82:                              # %for.end
                                        #   in Loop: Header=BB56_77 Depth=1
	jmp	.LBB56_83
.LBB56_83:                              # %for.inc322
                                        #   in Loop: Header=BB56_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB56_77
.LBB56_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB56_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB56_86:                              # %if.end345
	jmp	.LBB56_87
.LBB56_87:                              # %if.end346
	jmp	.LBB56_88
.LBB56_88:                              # %if.end347
	jmp	.LBB56_89
.LBB56_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB56_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB56_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB56_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB56_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB56_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB56_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_98
.LBB56_97:                              # %if.else380
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_98:                              # %if.end382
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB56_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB56_101
.LBB56_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB56_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB56_101:                             # %lor.end415
                                        #   in Loop: Header=BB56_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_94
.LBB56_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB56_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB56_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB56_114
.LBB56_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB56_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_110
.LBB56_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB56_113
.LBB56_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB56_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB56_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_120
.LBB56_117:                             # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB56_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB56_119:                             # %if.end483
	jmp	.LBB56_120
.LBB56_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB56_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB56_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB56_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB56_129
.LBB56_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_128:                             # %if.end516
	jmp	.LBB56_129
.LBB56_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1339722705, -92(%rbp)  # imm = 0x4FDA8BD1
	jne	.LBB56_131
.LBB56_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_130
.Lfunc_end56:
	.size	writeMBLayer.15, .Lfunc_end56-writeMBLayer.15
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.16     # -- Begin function start_macroblock.16
	.p2align	4, 0x90
	.type	start_macroblock.16,@function
start_macroblock.16:                    # @start_macroblock.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1512441648, -88(%rbp)  # imm = 0x5A260730
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB57_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB57_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB57_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB57_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB57_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB57_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB57_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB57_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB57_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB57_8:                               # %if.end
                                        #   in Loop: Header=BB57_5 Depth=1
	jmp	.LBB57_9
.LBB57_9:                               # %for.inc
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_10:                              # %for.end
	jmp	.LBB57_11
.LBB57_11:                              # %if.end19
	jmp	.LBB57_12
.LBB57_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB57_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB57_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB57_16
.LBB57_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB57_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB57_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_97
.LBB57_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_21
.LBB57_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_96
.LBB57_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB57_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB57_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB57_34
.LBB57_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_32
.LBB57_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB57_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_31
.LBB57_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB57_33
.LBB57_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB57_33:                              # %if.end112
	jmp	.LBB57_34
.LBB57_34:                              # %if.end113
	jmp	.LBB57_39
.LBB57_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_38
.LBB57_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB57_38:                              # %if.end125
	jmp	.LBB57_39
.LBB57_39:                              # %if.end126
	jmp	.LBB57_47
.LBB57_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB57_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB57_44
.LBB57_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_44:                              # %if.end140
	jmp	.LBB57_46
.LBB57_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB57_46:                              # %if.end145
	jmp	.LBB57_47
.LBB57_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_93
.LBB57_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB57_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB57_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB57_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_74
.LBB57_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB57_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB57_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_73
.LBB57_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB57_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB57_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_72
.LBB57_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB57_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_71
.LBB57_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB57_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB57_70:                              # %if.end223
	jmp	.LBB57_71
.LBB57_71:                              # %if.end224
	jmp	.LBB57_72
.LBB57_72:                              # %if.end225
	jmp	.LBB57_73
.LBB57_73:                              # %if.end226
	jmp	.LBB57_74
.LBB57_74:                              # %if.end227
	jmp	.LBB57_75
.LBB57_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB57_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB57_82
.LBB57_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB57_81:                              # %if.end256
	jmp	.LBB57_82
.LBB57_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB57_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB57_88
.LBB57_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB57_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB57_87
.LBB57_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_87:                              # %if.end292
	jmp	.LBB57_88
.LBB57_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB57_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB57_92
.LBB57_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB57_92:                              # %if.end305
	jmp	.LBB57_94
.LBB57_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB57_94:                              # %if.end309
	jmp	.LBB57_95
.LBB57_95:                              # %if.end310
	jmp	.LBB57_96
.LBB57_96:                              # %if.end311
	jmp	.LBB57_97
.LBB57_97:                              # %if.end312
	jmp	.LBB57_102
.LBB57_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB57_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB57_101
.LBB57_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB57_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB57_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB57_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB57_105
.LBB57_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB57_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB57_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB57_107:                             # %if.end359
	movl	$0, -16(%rbp)
.LBB57_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_110 Depth 2
                                        #       Child Loop BB57_112 Depth 3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB57_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	$0, -20(%rbp)
.LBB57_110:                             # %for.cond364
                                        #   Parent Loop BB57_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_112 Depth 3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB57_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	$0, -12(%rbp)
.LBB57_112:                             # %for.cond368
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	$0, -36(%rbp)
.LBB57_114:                             # %for.cond372
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        #       Parent Loop BB57_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB57_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB57_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB57_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_114
.LBB57_117:                             # %for.end388
                                        #   in Loop: Header=BB57_112 Depth=3
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc389
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_112
.LBB57_119:                             # %for.end391
                                        #   in Loop: Header=BB57_110 Depth=2
	jmp	.LBB57_120
.LBB57_120:                             # %for.inc392
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_110
.LBB57_121:                             # %for.end394
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_122
.LBB57_122:                             # %for.inc395
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_108
.LBB57_123:                             # %for.end397
	movl	$0, -20(%rbp)
.LBB57_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_126 Depth 2
                                        #       Child Loop BB57_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB57_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	$0, -12(%rbp)
.LBB57_126:                             # %for.cond402
                                        #   Parent Loop BB57_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	$0, -16(%rbp)
.LBB57_128:                             # %for.cond406
                                        #   Parent Loop BB57_124 Depth=1
                                        #     Parent Loop BB57_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB57_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB57_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB57_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_128
.LBB57_131:                             # %for.end432
                                        #   in Loop: Header=BB57_126 Depth=2
	jmp	.LBB57_132
.LBB57_132:                             # %for.inc433
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_126
.LBB57_133:                             # %for.end435
                                        #   in Loop: Header=BB57_124 Depth=1
	jmp	.LBB57_134
.LBB57_134:                             # %for.inc436
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_124
.LBB57_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB57_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_138 Depth 2
                                        #       Child Loop BB57_140 Depth 3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB57_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB57_136 Depth=1
	movl	$0, -20(%rbp)
.LBB57_138:                             # %for.cond443
                                        #   Parent Loop BB57_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_140 Depth 3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB57_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB57_138 Depth=2
	movl	$0, -12(%rbp)
.LBB57_140:                             # %for.cond447
                                        #   Parent Loop BB57_136 Depth=1
                                        #     Parent Loop BB57_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB57_140 Depth=3
	movl	$0, -36(%rbp)
.LBB57_142:                             # %for.cond451
                                        #   Parent Loop BB57_136 Depth=1
                                        #     Parent Loop BB57_138 Depth=2
                                        #       Parent Loop BB57_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB57_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB57_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB57_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_142
.LBB57_145:                             # %for.end465
                                        #   in Loop: Header=BB57_140 Depth=3
	jmp	.LBB57_146
.LBB57_146:                             # %for.inc466
                                        #   in Loop: Header=BB57_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_140
.LBB57_147:                             # %for.end468
                                        #   in Loop: Header=BB57_138 Depth=2
	jmp	.LBB57_148
.LBB57_148:                             # %for.inc469
                                        #   in Loop: Header=BB57_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_138
.LBB57_149:                             # %for.end471
                                        #   in Loop: Header=BB57_136 Depth=1
	jmp	.LBB57_150
.LBB57_150:                             # %for.inc472
                                        #   in Loop: Header=BB57_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_136
.LBB57_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB57_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB57_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB57_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB57_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_152
.LBB57_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB57_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB57_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB57_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB57_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_156
.LBB57_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB57_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB57_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB57_166
.LBB57_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB57_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB57_165:                             # %if.end520
	jmp	.LBB57_166
.LBB57_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB57_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB57_168:                             # %if.end536
	cmpl	$1512441648, -88(%rbp)  # imm = 0x5A260730
	jne	.LBB57_170
.LBB57_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_169
.Lfunc_end57:
	.size	start_macroblock.16, .Lfunc_end57-start_macroblock.16
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.17 # -- Begin function write_terminating_bit.17
	.p2align	4, 0x90
	.type	write_terminating_bit.17,@function
write_terminating_bit.17:               # @write_terminating_bit.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$576587172, -8(%rbp)    # imm = 0x225E05A4
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$576587172, -8(%rbp)    # imm = 0x225E05A4
	jne	.LBB58_2
.LBB58_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_1
.Lfunc_end58:
	.size	write_terminating_bit.17, .Lfunc_end58-write_terminating_bit.17
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.18  # -- Begin function LumaPrediction4x4Bi.18
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.18,@function
LumaPrediction4x4Bi.18:                 # @LumaPrediction4x4Bi.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1702092940, -76(%rbp)  # imm = 0x6573E08C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB59_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB59_6
.LBB59_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB59_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB59_5:                               # %land.end
.LBB59_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB59_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB59_10
.LBB59_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB59_10
.LBB59_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB59_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB59_13
.LBB59_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB59_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB59_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB59_16
.LBB59_15:                              # %if.then
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB59_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB59_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB59_19
.LBB59_18:                              # %if.then39
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB59_19:                              # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB59_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB59_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB59_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_24:                              # %for.cond58
                                        #   Parent Loop BB59_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB59_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB59_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_24
.LBB59_27:                              # %for.end
                                        #   in Loop: Header=BB59_22 Depth=1
	jmp	.LBB59_28
.LBB59_28:                              # %for.inc96
                                        #   in Loop: Header=BB59_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_22
.LBB59_29:                              # %for.end98
	jmp	.LBB59_50
.LBB59_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB59_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_34:                              # %for.cond106
                                        #   Parent Loop BB59_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB59_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB59_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_34
.LBB59_37:                              # %for.end132
                                        #   in Loop: Header=BB59_32 Depth=1
	jmp	.LBB59_38
.LBB59_38:                              # %for.inc133
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_32
.LBB59_39:                              # %for.end135
	jmp	.LBB59_49
.LBB59_40:                              # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB59_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_43:                              # %for.cond141
                                        #   Parent Loop BB59_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB59_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB59_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_43
.LBB59_46:                              # %for.end167
                                        #   in Loop: Header=BB59_41 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc168
                                        #   in Loop: Header=BB59_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_48:                              # %for.end170
	jmp	.LBB59_49
.LBB59_49:                              # %if.end171
	jmp	.LBB59_50
.LBB59_50:                              # %if.end172
	jmp	.LBB59_82
.LBB59_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB59_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB59_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_55:                              # %for.cond181
                                        #   Parent Loop BB59_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB59_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB59_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_55
.LBB59_58:                              # %for.end197
                                        #   in Loop: Header=BB59_53 Depth=1
	jmp	.LBB59_59
.LBB59_59:                              # %for.inc198
                                        #   in Loop: Header=BB59_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_53
.LBB59_60:                              # %for.end200
	jmp	.LBB59_81
.LBB59_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB59_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB59_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_65:                              # %for.cond209
                                        #   Parent Loop BB59_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB59_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB59_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_65
.LBB59_68:                              # %for.end222
                                        #   in Loop: Header=BB59_63 Depth=1
	jmp	.LBB59_69
.LBB59_69:                              # %for.inc223
                                        #   in Loop: Header=BB59_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_63
.LBB59_70:                              # %for.end225
	jmp	.LBB59_80
.LBB59_71:                              # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_74:                              # %for.cond231
                                        #   Parent Loop BB59_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB59_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB59_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_74
.LBB59_77:                              # %for.end244
                                        #   in Loop: Header=BB59_72 Depth=1
	jmp	.LBB59_78
.LBB59_78:                              # %for.inc245
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_72
.LBB59_79:                              # %for.end247
	jmp	.LBB59_80
.LBB59_80:                              # %if.end248
	jmp	.LBB59_81
.LBB59_81:                              # %if.end249
	jmp	.LBB59_82
.LBB59_82:                              # %if.end250
	cmpl	$1702092940, -76(%rbp)  # imm = 0x6573E08C
	jne	.LBB59_84
.LBB59_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_83
.Lfunc_end59:
	.size	LumaPrediction4x4Bi.18, .Lfunc_end59-LumaPrediction4x4Bi.18
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.19 # -- Begin function writeLumaCoeff4x4_CABAC.19
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.19,@function
writeLumaCoeff4x4_CABAC.19:             # @writeLumaCoeff4x4_CABAC.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1172959189, -52(%rbp)  # imm = 0x45E9EFD5
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB60_3
.LBB60_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB60_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB60_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB60_6
.LBB60_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB60_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB60_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB60_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB60_9:                               # %land.end
                                        #   in Loop: Header=BB60_7 Depth=1
	testb	$1, %al
	jne	.LBB60_10
	jmp	.LBB60_15
.LBB60_10:                              # %for.body
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB60_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB60_13
.LBB60_12:                              # %cond.false40
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB60_13:                              # %cond.end43
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_7
.LBB60_15:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1172959189, -52(%rbp)  # imm = 0x45E9EFD5
	jne	.LBB60_17
.LBB60_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_16
.Lfunc_end60:
	.size	writeLumaCoeff4x4_CABAC.19, .Lfunc_end60-writeLumaCoeff4x4_CABAC.19
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.20  # -- Begin function SetModesAndRefframe.20
	.p2align	4, 0x90
	.type	SetModesAndRefframe.20,@function
SetModesAndRefframe.20:                 # @SetModesAndRefframe.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1729345282, -60(%rbp)  # imm = 0x6713B702
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB61_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB61_12
.LBB61_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB61_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB61_11
.LBB61_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB61_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB61_10
.LBB61_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB61_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB61_9
.LBB61_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB61_9:                               # %if.end
	jmp	.LBB61_10
.LBB61_10:                              # %if.end86
	jmp	.LBB61_11
.LBB61_11:                              # %if.end87
	jmp	.LBB61_12
.LBB61_12:                              # %if.end88
	cmpl	$1729345282, -60(%rbp)  # imm = 0x6713B702
	jne	.LBB61_14
.LBB61_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_13
.Lfunc_end61:
	.size	SetModesAndRefframe.20, .Lfunc_end61-SetModesAndRefframe.20
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.21 # -- Begin function IntraChromaPrediction4x4.21
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.21,@function
IntraChromaPrediction4x4.21:            # @IntraChromaPrediction4x4.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1301142329, -28(%rbp)  # imm = 0x4D8DDB39
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_3:                               # %for.cond1
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_3
.LBB62_6:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc17
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_1
.LBB62_8:                               # %for.end19
	cmpl	$1301142329, -28(%rbp)  # imm = 0x4D8DDB39
	jne	.LBB62_10
.LBB62_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_9
.Lfunc_end62:
	.size	IntraChromaPrediction4x4.21, .Lfunc_end62-IntraChromaPrediction4x4.21
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.22  # -- Begin function writeReferenceFrame.22
	.p2align	4, 0x90
	.type	writeReferenceFrame.22,@function
writeReferenceFrame.22:                 # @writeReferenceFrame.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1009028353, -84(%rbp)  # imm = 0x3C248D01
	movl	%edi, -80(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_4
.LBB63_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB63_4
.LBB63_4:                               # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB63_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB63_7
.LBB63_6:                               # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB63_7:                               # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB63_18
.LBB63_9:                               # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB63_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB63_11:                              # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB63_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB63_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB63_15
.LBB63_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB63_15:                              # %if.end33
	jmp	.LBB63_17
.LBB63_16:                              # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB63_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB63_18:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1009028353, -84(%rbp)  # imm = 0x3C248D01
	jne	.LBB63_20
.LBB63_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_19
.Lfunc_end63:
	.size	writeReferenceFrame.22, .Lfunc_end63-writeReferenceFrame.22
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.23 # -- Begin function writeCBPandLumaCoeff.23
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.23,@function
writeCBPandLumaCoeff.23:                # @writeCBPandLumaCoeff.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$862883605, -108(%rbp)  # imm = 0x336E8F15
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB64_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_7
.LBB64_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB64_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB64_10
.LBB64_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB64_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB64_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB64_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB64_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB64_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB64_18
.LBB64_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB64_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB64_18
.LBB64_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB64_22
.LBB64_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB64_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB64_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB64_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB64_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB64_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB64_26
.LBB64_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB64_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB64_29
.LBB64_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB64_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB64_30:                              # %if.end93
	jmp	.LBB64_31
.LBB64_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB64_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB64_42
.LBB64_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB64_36
.LBB64_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB64_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB64_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB64_41
.LBB64_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB64_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB64_42:                              # %if.end138
	movl	$0, -36(%rbp)
.LBB64_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	$0, -20(%rbp)
.LBB64_45:                              # %for.cond141
                                        #   Parent Loop BB64_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB64_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB64_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB64_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_45
.LBB64_48:                              # %for.end
                                        #   in Loop: Header=BB64_43 Depth=1
	jmp	.LBB64_49
.LBB64_49:                              # %for.inc152
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB64_43
.LBB64_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB64_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB64_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB64_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB64_55:                              # %if.end169
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_56
.LBB64_56:                              # %for.inc170
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_52
.LBB64_57:                              # %for.end172
	jmp	.LBB64_101
.LBB64_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_70
.LBB64_60:                              # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB64_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB64_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB64_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB64_63:                              # %land.end184
                                        #   in Loop: Header=BB64_61 Depth=1
	testb	$1, %al
	jne	.LBB64_64
	jmp	.LBB64_69
.LBB64_64:                              # %for.body186
                                        #   in Loop: Header=BB64_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB64_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB64_67
.LBB64_66:                              # %if.else196
                                        #   in Loop: Header=BB64_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB64_67:                              # %if.end198
                                        #   in Loop: Header=BB64_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB64_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB64_61
.LBB64_69:                              # %for.end218
	jmp	.LBB64_70
.LBB64_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB64_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB64_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_74 Depth 2
                                        #       Child Loop BB64_76 Depth 3
                                        #         Child Loop BB64_78 Depth 4
                                        #           Child Loop BB64_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB64_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	$0, -52(%rbp)
.LBB64_74:                              # %for.cond226
                                        #   Parent Loop BB64_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_76 Depth 3
                                        #         Child Loop BB64_78 Depth 4
                                        #           Child Loop BB64_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB64_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB64_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB64_76:                              # %for.cond229
                                        #   Parent Loop BB64_72 Depth=1
                                        #     Parent Loop BB64_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_78 Depth 4
                                        #           Child Loop BB64_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB64_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB64_78:                              # %for.cond233
                                        #   Parent Loop BB64_72 Depth=1
                                        #     Parent Loop BB64_74 Depth=2
                                        #       Parent Loop BB64_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB64_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB64_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB64_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_91
.LBB64_81:                              # %if.else247
                                        #   in Loop: Header=BB64_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB64_82:                              # %for.cond259
                                        #   Parent Loop BB64_72 Depth=1
                                        #     Parent Loop BB64_74 Depth=2
                                        #       Parent Loop BB64_76 Depth=3
                                        #         Parent Loop BB64_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB64_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB64_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB64_84:                              # %land.end263
                                        #   in Loop: Header=BB64_82 Depth=5
	testb	$1, %al
	jne	.LBB64_85
	jmp	.LBB64_90
.LBB64_85:                              # %for.body265
                                        #   in Loop: Header=BB64_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB64_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB64_88
.LBB64_87:                              # %if.else276
                                        #   in Loop: Header=BB64_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB64_88:                              # %if.end278
                                        #   in Loop: Header=BB64_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB64_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB64_82
.LBB64_90:                              # %for.end300
                                        #   in Loop: Header=BB64_78 Depth=4
	jmp	.LBB64_91
.LBB64_91:                              # %if.end301
                                        #   in Loop: Header=BB64_78 Depth=4
	jmp	.LBB64_92
.LBB64_92:                              # %for.inc302
                                        #   in Loop: Header=BB64_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_78
.LBB64_93:                              # %for.end304
                                        #   in Loop: Header=BB64_76 Depth=3
	jmp	.LBB64_94
.LBB64_94:                              # %for.inc305
                                        #   in Loop: Header=BB64_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB64_76
.LBB64_95:                              # %for.end307
                                        #   in Loop: Header=BB64_74 Depth=2
	jmp	.LBB64_96
.LBB64_96:                              # %for.inc308
                                        #   in Loop: Header=BB64_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB64_74
.LBB64_97:                              # %for.end310
                                        #   in Loop: Header=BB64_72 Depth=1
	jmp	.LBB64_98
.LBB64_98:                              # %for.inc311
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB64_72
.LBB64_99:                              # %for.end313
	jmp	.LBB64_100
.LBB64_100:                             # %if.end314
	jmp	.LBB64_101
.LBB64_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$862883605, -108(%rbp)  # imm = 0x336E8F15
	jne	.LBB64_103
.LBB64_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_102
.Lfunc_end64:
	.size	writeCBPandLumaCoeff.23, .Lfunc_end64-writeCBPandLumaCoeff.23
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.24       # -- Begin function find_sad_16x16.24
	.p2align	4, 0x90
	.type	find_sad_16x16.24,@function
find_sad_16x16.24:                      # @find_sad_16x16.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1621268127, -80(%rbp)  # imm = 0x60A2969F
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB65_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_4:                               # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB65_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB65_20
.LBB65_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB65_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_9
.LBB65_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB65_9
.LBB65_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB65_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB65_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB65_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB65_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB65_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_14
.LBB65_13:                              # %cond.false23
                                        #   in Loop: Header=BB65_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_14
.LBB65_14:                              # %cond.end24
                                        #   in Loop: Header=BB65_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB65_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_10
.LBB65_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB65_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_19
.LBB65_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB65_19
.LBB65_19:                              # %cond.end39
	movl	%eax, -72(%rbp)
.LBB65_20:                              # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB65_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_42 Depth 2
                                        #       Child Loop BB65_44 Depth 3
                                        #     Child Loop BB65_50 Depth 2
                                        #       Child Loop BB65_52 Depth 3
                                        #         Child Loop BB65_54 Depth 4
                                        #         Child Loop BB65_58 Depth 4
                                        #           Child Loop BB65_60 Depth 5
                                        #     Child Loop BB65_72 Depth 2
                                        #       Child Loop BB65_74 Depth 3
                                        #     Child Loop BB65_80 Depth 2
                                        #     Child Loop BB65_84 Depth 2
                                        #       Child Loop BB65_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB65_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB65_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB65_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB65_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB65_32
.LBB65_24:                              # %if.then46
                                        #   in Loop: Header=BB65_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB65_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB65_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB65_28
.LBB65_27:                              # %if.then51
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_95
.LBB65_28:                              # %if.end52
                                        #   in Loop: Header=BB65_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB65_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB65_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_95
.LBB65_31:                              # %if.end57
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_32
.LBB65_32:                              # %if.end58
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB65_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB65_40
.LBB65_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB65_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB65_40
.LBB65_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB65_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB65_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB65_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB65_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB65_41
.LBB65_40:                              # %if.then74
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_94
.LBB65_41:                              # %if.else75
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	$0, -16(%rbp)
.LBB65_42:                              # %for.cond76
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB65_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB65_42 Depth=2
	movl	$0, -12(%rbp)
.LBB65_44:                              # %for.cond79
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB65_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB65_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB65_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_44
.LBB65_47:                              # %for.end115
                                        #   in Loop: Header=BB65_42 Depth=2
	jmp	.LBB65_48
.LBB65_48:                              # %for.inc116
                                        #   in Loop: Header=BB65_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_42
.LBB65_49:                              # %for.end118
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB65_50:                              # %for.cond119
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_52 Depth 3
                                        #         Child Loop BB65_54 Depth 4
                                        #         Child Loop BB65_58 Depth 4
                                        #           Child Loop BB65_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB65_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB65_50 Depth=2
	movl	$0, -20(%rbp)
.LBB65_52:                              # %for.cond123
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_54 Depth 4
                                        #         Child Loop BB65_58 Depth 4
                                        #           Child Loop BB65_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB65_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB65_52 Depth=3
	movl	$0, -16(%rbp)
.LBB65_54:                              # %for.cond127
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_50 Depth=2
                                        #       Parent Loop BB65_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB65_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB65_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB65_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_54
.LBB65_57:                              # %for.end237
                                        #   in Loop: Header=BB65_52 Depth=3
	movl	$0, -12(%rbp)
.LBB65_58:                              # %for.cond238
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_50 Depth=2
                                        #       Parent Loop BB65_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB65_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB65_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB65_60:                              # %for.cond346
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_50 Depth=2
                                        #       Parent Loop BB65_52 Depth=3
                                        #         Parent Loop BB65_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB65_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB65_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB65_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB65_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB65_63:                              # %if.end363
                                        #   in Loop: Header=BB65_60 Depth=5
	jmp	.LBB65_64
.LBB65_64:                              # %for.inc364
                                        #   in Loop: Header=BB65_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_60
.LBB65_65:                              # %for.end366
                                        #   in Loop: Header=BB65_58 Depth=4
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc367
                                        #   in Loop: Header=BB65_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_58
.LBB65_67:                              # %for.end369
                                        #   in Loop: Header=BB65_52 Depth=3
	jmp	.LBB65_68
.LBB65_68:                              # %for.inc370
                                        #   in Loop: Header=BB65_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_52
.LBB65_69:                              # %for.end372
                                        #   in Loop: Header=BB65_50 Depth=2
	jmp	.LBB65_70
.LBB65_70:                              # %for.inc373
                                        #   in Loop: Header=BB65_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_50
.LBB65_71:                              # %for.end375
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	$0, -16(%rbp)
.LBB65_72:                              # %for.cond376
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB65_72 Depth=2
	movl	$0, -12(%rbp)
.LBB65_74:                              # %for.cond380
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB65_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_74
.LBB65_77:                              # %for.end397
                                        #   in Loop: Header=BB65_72 Depth=2
	jmp	.LBB65_78
.LBB65_78:                              # %for.inc398
                                        #   in Loop: Header=BB65_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_72
.LBB65_79:                              # %for.end400
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	$0, -16(%rbp)
.LBB65_80:                              # %for.cond401
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB65_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB65_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB65_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_80
.LBB65_83:                              # %for.end463
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	$0, -12(%rbp)
.LBB65_84:                              # %for.cond464
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB65_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB65_86:                              # %for.cond524
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB65_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB65_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_86
.LBB65_89:                              # %for.end536
                                        #   in Loop: Header=BB65_84 Depth=2
	jmp	.LBB65_90
.LBB65_90:                              # %for.inc537
                                        #   in Loop: Header=BB65_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_84
.LBB65_91:                              # %for.end539
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB65_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_93:                              # %if.end543
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_94
.LBB65_94:                              # %if.end544
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_95
.LBB65_95:                              # %for.inc545
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB65_21
.LBB65_96:                              # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1621268127, -80(%rbp)  # imm = 0x60A2969F
	jne	.LBB65_98
.LBB65_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_97
.Lfunc_end65:
	.size	find_sad_16x16.24, .Lfunc_end65-find_sad_16x16.24
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.25        # -- Begin function slice_too_big.25
	.p2align	4, 0x90
	.type	slice_too_big.25,@function
slice_too_big.25:                       # @slice_too_big.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2142498929, -56(%rbp)  # imm = 0x7FB3F071
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB66_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB66_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB66_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB66_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB66_5:                               # %if.end
                                        #   in Loop: Header=BB66_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB66_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB66_7:                               # %if.end8
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB66_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB66_21
.LBB66_9:                               # %if.end11
                                        #   in Loop: Header=BB66_2 Depth=1
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_2
.LBB66_11:                              # %for.end
	jmp	.LBB66_12
.LBB66_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB66_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB66_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB66_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB66_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB66_21
.LBB66_17:                              # %if.end27
                                        #   in Loop: Header=BB66_14 Depth=1
	jmp	.LBB66_18
.LBB66_18:                              # %for.inc28
                                        #   in Loop: Header=BB66_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_14
.LBB66_19:                              # %for.end30
	jmp	.LBB66_20
.LBB66_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB66_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$2142498929, -56(%rbp)  # imm = 0x7FB3F071
	jne	.LBB66_23
.LBB66_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_22
.Lfunc_end66:
	.size	slice_too_big.25, .Lfunc_end66-slice_too_big.25
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.26 # -- Begin function writeCBPandLumaCoeff.26
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.26,@function
writeCBPandLumaCoeff.26:                # @writeCBPandLumaCoeff.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1282024916, -100(%rbp) # imm = 0x4C6A25D4
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB67_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_7
.LBB67_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB67_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB67_10
.LBB67_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB67_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB67_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB67_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB67_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB67_18
.LBB67_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB67_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB67_18
.LBB67_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB67_22
.LBB67_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB67_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB67_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB67_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB67_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB67_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_26
.LBB67_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB67_29
.LBB67_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB67_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB67_30:                              # %if.end93
	jmp	.LBB67_31
.LBB67_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB67_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB67_42
.LBB67_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_36
.LBB67_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB67_41
.LBB67_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB67_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB67_42:                              # %if.end138
	movl	$0, -36(%rbp)
.LBB67_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	$0, -20(%rbp)
.LBB67_45:                              # %for.cond141
                                        #   Parent Loop BB67_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB67_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB67_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_45
.LBB67_48:                              # %for.end
                                        #   in Loop: Header=BB67_43 Depth=1
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc152
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_43
.LBB67_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB67_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB67_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_55:                              # %if.end169
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_56
.LBB67_56:                              # %for.inc170
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_52
.LBB67_57:                              # %for.end172
	jmp	.LBB67_101
.LBB67_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_70
.LBB67_60:                              # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB67_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB67_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB67_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB67_63:                              # %land.end184
                                        #   in Loop: Header=BB67_61 Depth=1
	testb	$1, %al
	jne	.LBB67_64
	jmp	.LBB67_69
.LBB67_64:                              # %for.body186
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_67
.LBB67_66:                              # %if.else196
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_67:                              # %if.end198
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB67_61
.LBB67_69:                              # %for.end218
	jmp	.LBB67_70
.LBB67_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB67_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB67_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_74 Depth 2
                                        #       Child Loop BB67_76 Depth 3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB67_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	$0, -56(%rbp)
.LBB67_74:                              # %for.cond226
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_76 Depth 3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB67_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB67_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_76:                              # %for.cond229
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB67_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_78:                              # %for.cond233
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        #       Parent Loop BB67_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_91
.LBB67_81:                              # %if.else247
                                        #   in Loop: Header=BB67_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB67_82:                              # %for.cond259
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        #       Parent Loop BB67_76 Depth=3
                                        #         Parent Loop BB67_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB67_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB67_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB67_84:                              # %land.end263
                                        #   in Loop: Header=BB67_82 Depth=5
	testb	$1, %al
	jne	.LBB67_85
	jmp	.LBB67_90
.LBB67_85:                              # %for.body265
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_88
.LBB67_87:                              # %if.else276
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_88:                              # %if.end278
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB67_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB67_82
.LBB67_90:                              # %for.end300
                                        #   in Loop: Header=BB67_78 Depth=4
	jmp	.LBB67_91
.LBB67_91:                              # %if.end301
                                        #   in Loop: Header=BB67_78 Depth=4
	jmp	.LBB67_92
.LBB67_92:                              # %for.inc302
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_78
.LBB67_93:                              # %for.end304
                                        #   in Loop: Header=BB67_76 Depth=3
	jmp	.LBB67_94
.LBB67_94:                              # %for.inc305
                                        #   in Loop: Header=BB67_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_76
.LBB67_95:                              # %for.end307
                                        #   in Loop: Header=BB67_74 Depth=2
	jmp	.LBB67_96
.LBB67_96:                              # %for.inc308
                                        #   in Loop: Header=BB67_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_74
.LBB67_97:                              # %for.end310
                                        #   in Loop: Header=BB67_72 Depth=1
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc311
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB67_72
.LBB67_99:                              # %for.end313
	jmp	.LBB67_100
.LBB67_100:                             # %if.end314
	jmp	.LBB67_101
.LBB67_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1282024916, -100(%rbp) # imm = 0x4C6A25D4
	jne	.LBB67_103
.LBB67_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_102
.Lfunc_end67:
	.size	writeCBPandLumaCoeff.26, .Lfunc_end67-writeCBPandLumaCoeff.26
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.27  # -- Begin function writeReferenceFrame.27
	.p2align	4, 0x90
	.type	writeReferenceFrame.27,@function
writeReferenceFrame.27:                 # @writeReferenceFrame.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1795292436, -84(%rbp)  # imm = 0x6B01FD14
	movl	%edi, -76(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB68_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB68_4
.LBB68_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB68_4
.LBB68_4:                               # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB68_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB68_7
.LBB68_6:                               # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB68_7:                               # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB68_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB68_18
.LBB68_9:                               # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB68_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB68_11:                              # %if.end21
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB68_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB68_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB68_15
.LBB68_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB68_15:                              # %if.end33
	jmp	.LBB68_17
.LBB68_16:                              # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB68_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB68_18:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$1795292436, -84(%rbp)  # imm = 0x6B01FD14
	jne	.LBB68_20
.LBB68_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_19
.Lfunc_end68:
	.size	writeReferenceFrame.27, .Lfunc_end68-writeReferenceFrame.27
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.28         # -- Begin function copyblock4x4.28
	.p2align	4, 0x90
	.type	copyblock4x4.28,@function
copyblock4x4.28:                        # @copyblock4x4.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1369672895, -20(%rbp)  # imm = 0x51A38CBF
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1369672895, -20(%rbp)  # imm = 0x51A38CBF
	jne	.LBB69_2
.LBB69_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	copyblock4x4.28, .Lfunc_end69-copyblock4x4.28
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.29     # -- Begin function start_macroblock.29
	.p2align	4, 0x90
	.type	start_macroblock.29,@function
start_macroblock.29:                    # @start_macroblock.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1927599241, -88(%rbp)  # imm = 0x72E4D489
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB70_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB70_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB70_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB70_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB70_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB70_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB70_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB70_8:                               # %if.end
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_9
.LBB70_9:                               # %for.inc
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_5
.LBB70_10:                              # %for.end
	jmp	.LBB70_11
.LBB70_11:                              # %if.end19
	jmp	.LBB70_12
.LBB70_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB70_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB70_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB70_16
.LBB70_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB70_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB70_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB70_97
.LBB70_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_21
.LBB70_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB70_96
.LBB70_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB70_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB70_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB70_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB70_34
.LBB70_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB70_32
.LBB70_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB70_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB70_31
.LBB70_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB70_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB70_33
.LBB70_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB70_33:                              # %if.end112
	jmp	.LBB70_34
.LBB70_34:                              # %if.end113
	jmp	.LBB70_39
.LBB70_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB70_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB70_38
.LBB70_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB70_38:                              # %if.end125
	jmp	.LBB70_39
.LBB70_39:                              # %if.end126
	jmp	.LBB70_47
.LBB70_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB70_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB70_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB70_44
.LBB70_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB70_44:                              # %if.end140
	jmp	.LBB70_46
.LBB70_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB70_46:                              # %if.end145
	jmp	.LBB70_47
.LBB70_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB70_93
.LBB70_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB70_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB70_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB70_74
.LBB70_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB70_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB70_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB70_73
.LBB70_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB70_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB70_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB70_72
.LBB70_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB70_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB70_71
.LBB70_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB70_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB70_70:                              # %if.end223
	jmp	.LBB70_71
.LBB70_71:                              # %if.end224
	jmp	.LBB70_72
.LBB70_72:                              # %if.end225
	jmp	.LBB70_73
.LBB70_73:                              # %if.end226
	jmp	.LBB70_74
.LBB70_74:                              # %if.end227
	jmp	.LBB70_75
.LBB70_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB70_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB70_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB70_82
.LBB70_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB70_81:                              # %if.end256
	jmp	.LBB70_82
.LBB70_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB70_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB70_88
.LBB70_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB70_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB70_87
.LBB70_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB70_87:                              # %if.end292
	jmp	.LBB70_88
.LBB70_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB70_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB70_92
.LBB70_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB70_92:                              # %if.end305
	jmp	.LBB70_94
.LBB70_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB70_94:                              # %if.end309
	jmp	.LBB70_95
.LBB70_95:                              # %if.end310
	jmp	.LBB70_96
.LBB70_96:                              # %if.end311
	jmp	.LBB70_97
.LBB70_97:                              # %if.end312
	jmp	.LBB70_102
.LBB70_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB70_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB70_101
.LBB70_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB70_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB70_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB70_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB70_105
.LBB70_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB70_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB70_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB70_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB70_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_110 Depth 2
                                        #       Child Loop BB70_112 Depth 3
                                        #         Child Loop BB70_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB70_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	$0, -16(%rbp)
.LBB70_110:                             # %for.cond364
                                        #   Parent Loop BB70_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_112 Depth 3
                                        #         Child Loop BB70_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB70_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	$0, -12(%rbp)
.LBB70_112:                             # %for.cond368
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB70_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	$0, -36(%rbp)
.LBB70_114:                             # %for.cond372
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        #       Parent Loop BB70_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB70_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB70_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB70_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB70_114
.LBB70_117:                             # %for.end388
                                        #   in Loop: Header=BB70_112 Depth=3
	jmp	.LBB70_118
.LBB70_118:                             # %for.inc389
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_112
.LBB70_119:                             # %for.end391
                                        #   in Loop: Header=BB70_110 Depth=2
	jmp	.LBB70_120
.LBB70_120:                             # %for.inc392
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_110
.LBB70_121:                             # %for.end394
                                        #   in Loop: Header=BB70_108 Depth=1
	jmp	.LBB70_122
.LBB70_122:                             # %for.inc395
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB70_108
.LBB70_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB70_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_126 Depth 2
                                        #       Child Loop BB70_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	$0, -12(%rbp)
.LBB70_126:                             # %for.cond402
                                        #   Parent Loop BB70_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB70_126 Depth=2
	movl	$0, -20(%rbp)
.LBB70_128:                             # %for.cond406
                                        #   Parent Loop BB70_124 Depth=1
                                        #     Parent Loop BB70_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB70_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB70_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB70_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB70_128
.LBB70_131:                             # %for.end432
                                        #   in Loop: Header=BB70_126 Depth=2
	jmp	.LBB70_132
.LBB70_132:                             # %for.inc433
                                        #   in Loop: Header=BB70_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_126
.LBB70_133:                             # %for.end435
                                        #   in Loop: Header=BB70_124 Depth=1
	jmp	.LBB70_134
.LBB70_134:                             # %for.inc436
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_124
.LBB70_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB70_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_138 Depth 2
                                        #       Child Loop BB70_140 Depth 3
                                        #         Child Loop BB70_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB70_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB70_136 Depth=1
	movl	$0, -16(%rbp)
.LBB70_138:                             # %for.cond443
                                        #   Parent Loop BB70_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_140 Depth 3
                                        #         Child Loop BB70_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB70_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB70_138 Depth=2
	movl	$0, -12(%rbp)
.LBB70_140:                             # %for.cond447
                                        #   Parent Loop BB70_136 Depth=1
                                        #     Parent Loop BB70_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB70_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB70_140 Depth=3
	movl	$0, -36(%rbp)
.LBB70_142:                             # %for.cond451
                                        #   Parent Loop BB70_136 Depth=1
                                        #     Parent Loop BB70_138 Depth=2
                                        #       Parent Loop BB70_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB70_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB70_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB70_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB70_142
.LBB70_145:                             # %for.end465
                                        #   in Loop: Header=BB70_140 Depth=3
	jmp	.LBB70_146
.LBB70_146:                             # %for.inc466
                                        #   in Loop: Header=BB70_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_140
.LBB70_147:                             # %for.end468
                                        #   in Loop: Header=BB70_138 Depth=2
	jmp	.LBB70_148
.LBB70_148:                             # %for.inc469
                                        #   in Loop: Header=BB70_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_138
.LBB70_149:                             # %for.end471
                                        #   in Loop: Header=BB70_136 Depth=1
	jmp	.LBB70_150
.LBB70_150:                             # %for.inc472
                                        #   in Loop: Header=BB70_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB70_136
.LBB70_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB70_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB70_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB70_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB70_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_152
.LBB70_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB70_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB70_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB70_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB70_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_156
.LBB70_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB70_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB70_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB70_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB70_166
.LBB70_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB70_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB70_165:                             # %if.end520
	jmp	.LBB70_166
.LBB70_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB70_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB70_168:                             # %if.end536
	cmpl	$1927599241, -88(%rbp)  # imm = 0x72E4D489
	jne	.LBB70_170
.LBB70_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_169
.Lfunc_end70:
	.size	start_macroblock.29, .Lfunc_end70-start_macroblock.29
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.30    # -- Begin function TransformDecision.30
	.p2align	4, 0x90
	.type	TransformDecision.30,@function
TransformDecision.30:                   # @TransformDecision.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$260601709, -84(%rbp)   # imm = 0xF88776D
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB71_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB71_3
.LBB71_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB71_3:                               # %if.end
	jmp	.LBB71_4
.LBB71_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_6 Depth 2
                                        #       Child Loop BB71_8 Depth 3
                                        #         Child Loop BB71_10 Depth 4
                                        #           Child Loop BB71_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB71_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB71_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB71_6:                               # %for.cond3
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_8 Depth 3
                                        #         Child Loop BB71_10 Depth 4
                                        #           Child Loop BB71_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB71_8:                               # %for.cond8
                                        #   Parent Loop BB71_4 Depth=1
                                        #     Parent Loop BB71_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_10 Depth 4
                                        #           Child Loop BB71_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB71_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB71_10:                              # %for.cond13
                                        #   Parent Loop BB71_4 Depth=1
                                        #     Parent Loop BB71_6 Depth=2
                                        #       Parent Loop BB71_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB71_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB71_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB71_10 Depth=4
	movl	$0, -24(%rbp)
.LBB71_12:                              # %for.cond17
                                        #   Parent Loop BB71_4 Depth=1
                                        #     Parent Loop BB71_6 Depth=2
                                        #       Parent Loop BB71_8 Depth=3
                                        #         Parent Loop BB71_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB71_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB71_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB71_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_12
.LBB71_15:                              # %for.end
                                        #   in Loop: Header=BB71_10 Depth=4
	jmp	.LBB71_16
.LBB71_16:                              # %for.inc38
                                        #   in Loop: Header=BB71_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB71_10
.LBB71_17:                              # %for.end40
                                        #   in Loop: Header=BB71_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB71_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_8
.LBB71_19:                              # %for.end44
                                        #   in Loop: Header=BB71_6 Depth=2
	jmp	.LBB71_20
.LBB71_20:                              # %for.inc45
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_6
.LBB71_21:                              # %for.end47
                                        #   in Loop: Header=BB71_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB71_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_4
.LBB71_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB71_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB71_28
.LBB71_25:                              # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB71_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB71_28
.LBB71_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB71_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$260601709, -84(%rbp)   # imm = 0xF88776D
	jne	.LBB71_30
.LBB71_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_29
.Lfunc_end71:
	.size	TransformDecision.30, .Lfunc_end71-TransformDecision.30
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.31 # -- Begin function writeMotionVector8x8.31
	.p2align	4, 0x90
	.type	writeMotionVector8x8.31,@function
writeMotionVector8x8.31:                # @writeMotionVector8x8.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$373445487, -96(%rbp)   # imm = 0x1642536F
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB72_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB72_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB72_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB72_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB72_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB72_7
.LBB72_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB72_7:                               # %cond.end
	movq	%rax, -112(%rbp)
.LBB72_8:                               # %if.end
	movl	-84(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB72_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_11 Depth 2
                                        #       Child Loop BB72_13 Depth 3
                                        #         Child Loop BB72_15 Depth 4
                                        #           Child Loop BB72_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB72_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB72_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB72_11:                              # %for.cond22
                                        #   Parent Loop BB72_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_13 Depth 3
                                        #         Child Loop BB72_15 Depth 4
                                        #           Child Loop BB72_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB72_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB72_11 Depth=2
	movl	$0, -12(%rbp)
.LBB72_13:                              # %for.cond25
                                        #   Parent Loop BB72_9 Depth=1
                                        #     Parent Loop BB72_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_15 Depth 4
                                        #           Child Loop BB72_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB72_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB72_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB72_15:                              # %for.cond53
                                        #   Parent Loop BB72_9 Depth=1
                                        #     Parent Loop BB72_11 Depth=2
                                        #       Parent Loop BB72_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB72_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB72_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB72_15 Depth=4
	movl	$0, -36(%rbp)
.LBB72_17:                              # %for.cond57
                                        #   Parent Loop BB72_9 Depth=1
                                        #     Parent Loop BB72_11 Depth=2
                                        #       Parent Loop BB72_13 Depth=3
                                        #         Parent Loop BB72_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB72_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB72_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB72_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB72_17
.LBB72_20:                              # %for.end
                                        #   in Loop: Header=BB72_15 Depth=4
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc70
                                        #   in Loop: Header=BB72_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB72_15
.LBB72_22:                              # %for.end72
                                        #   in Loop: Header=BB72_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB72_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_25
.LBB72_24:                              # %if.else
                                        #   in Loop: Header=BB72_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_25:                              # %if.end78
                                        #   in Loop: Header=BB72_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB72_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_13
.LBB72_27:                              # %for.end90
                                        #   in Loop: Header=BB72_11 Depth=2
	jmp	.LBB72_28
.LBB72_28:                              # %for.inc91
                                        #   in Loop: Header=BB72_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_11
.LBB72_29:                              # %for.end93
                                        #   in Loop: Header=BB72_9 Depth=1
	jmp	.LBB72_30
.LBB72_30:                              # %for.inc94
                                        #   in Loop: Header=BB72_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_9
.LBB72_31:                              # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$373445487, -96(%rbp)   # imm = 0x1642536F
	jne	.LBB72_33
.LBB72_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_32
.Lfunc_end72:
	.size	writeMotionVector8x8.31, .Lfunc_end72-writeMotionVector8x8.31
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.32  # -- Begin function ChromaPrediction4x4.32
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.32,@function
ChromaPrediction4x4.32:                 # @ChromaPrediction4x4.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1124254284, -72(%rbp)  # imm = 0x4302C24C
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB73_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB73_6
.LBB73_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB73_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB73_5:                               # %land.end
.LBB73_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB73_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB73_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB73_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB73_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB73_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB73_15
.LBB73_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB73_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB73_16:                              # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB73_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB73_87
.LBB73_18:                              # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB73_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB73_21
.LBB73_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB73_21:                              # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB73_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB73_24
.LBB73_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB73_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB73_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB73_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_29:                              # %for.cond52
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc99
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end101
	jmp	.LBB73_55
.LBB73_35:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB73_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_39:                              # %for.cond109
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB73_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_39
.LBB73_42:                              # %for.end139
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc140
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_37
.LBB73_44:                              # %for.end142
	jmp	.LBB73_54
.LBB73_45:                              # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB73_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_48:                              # %for.cond148
                                        #   Parent Loop BB73_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB73_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB73_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_48
.LBB73_51:                              # %for.end178
                                        #   in Loop: Header=BB73_46 Depth=1
	jmp	.LBB73_52
.LBB73_52:                              # %for.inc179
                                        #   in Loop: Header=BB73_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_46
.LBB73_53:                              # %for.end181
	jmp	.LBB73_54
.LBB73_54:                              # %if.end182
	jmp	.LBB73_55
.LBB73_55:                              # %if.end183
	jmp	.LBB73_87
.LBB73_56:                              # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB73_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB73_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_60:                              # %for.cond192
                                        #   Parent Loop BB73_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB73_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB73_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_60
.LBB73_63:                              # %for.end208
                                        #   in Loop: Header=BB73_58 Depth=1
	jmp	.LBB73_64
.LBB73_64:                              # %for.inc209
                                        #   in Loop: Header=BB73_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_58
.LBB73_65:                              # %for.end211
	jmp	.LBB73_86
.LBB73_66:                              # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB73_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB73_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_70:                              # %for.cond220
                                        #   Parent Loop BB73_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB73_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB73_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_70
.LBB73_73:                              # %for.end233
                                        #   in Loop: Header=BB73_68 Depth=1
	jmp	.LBB73_74
.LBB73_74:                              # %for.inc234
                                        #   in Loop: Header=BB73_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_68
.LBB73_75:                              # %for.end236
	jmp	.LBB73_85
.LBB73_76:                              # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_79:                              # %for.cond242
                                        #   Parent Loop BB73_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB73_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB73_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_79
.LBB73_82:                              # %for.end255
                                        #   in Loop: Header=BB73_77 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc256
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_77
.LBB73_84:                              # %for.end258
	jmp	.LBB73_85
.LBB73_85:                              # %if.end259
	jmp	.LBB73_86
.LBB73_86:                              # %if.end260
	jmp	.LBB73_87
.LBB73_87:                              # %if.end261
	cmpl	$1124254284, -72(%rbp)  # imm = 0x4302C24C
	jne	.LBB73_89
.LBB73_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_88
.Lfunc_end73:
	.size	ChromaPrediction4x4.32, .Lfunc_end73-ChromaPrediction4x4.32
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.33 # -- Begin function proceed2nextMacroblock.33
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.33,@function
proceed2nextMacroblock.33:              # @proceed2nextMacroblock.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$243641549, -28(%rbp)   # imm = 0xE85ACCD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB74_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB74_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB74_9
.LBB74_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB74_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_7
.LBB74_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_7:                               # %if.end
	jmp	.LBB74_8
.LBB74_8:                               # %if.end48
	jmp	.LBB74_9
.LBB74_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB74_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB74_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB74_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB74_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_16
.LBB74_15:                              # %if.else86
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_16:                              # %if.end94
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB74_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB74_20
.LBB74_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB74_21
.LBB74_20:                              # %if.then107
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB74_22
.LBB74_21:                              # %if.else114
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB74_22:                              # %if.end121
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_23
.LBB74_23:                              # %if.end122
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_24
.LBB74_24:                              # %for.inc
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_12
.LBB74_25:                              # %for.end
	jmp	.LBB74_34
.LBB74_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB74_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB74_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB74_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_32
.LBB74_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_32:                              # %if.end155
	jmp	.LBB74_33
.LBB74_33:                              # %if.end156
	jmp	.LBB74_34
.LBB74_34:                              # %if.end157
	jmp	.LBB74_35
.LBB74_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB74_38
.LBB74_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB74_38:                              # %if.end167
	cmpl	$243641549, -28(%rbp)   # imm = 0xE85ACCD
	jne	.LBB74_40
.LBB74_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_39
.Lfunc_end74:
	.size	proceed2nextMacroblock.33, .Lfunc_end74-proceed2nextMacroblock.33
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.34 # -- Begin function write_one_macroblock.34
	.p2align	4, 0x90
	.type	write_one_macroblock.34,@function
write_one_macroblock.34:                # @write_one_macroblock.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$883117894, -32(%rbp)   # imm = 0x34A34F46
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB75_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB75_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB75_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB75_6
.LBB75_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB75_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB75_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB75_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB75_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB75_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB75_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB75_22
.LBB75_13:                              # %if.then22
	movl	$0, -24(%rbp)
.LBB75_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB75_14 Depth=1
	movl	$0, -20(%rbp)
.LBB75_16:                              # %for.cond24
                                        #   Parent Loop BB75_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB75_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB75_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_16
.LBB75_19:                              # %for.end
                                        #   in Loop: Header=BB75_14 Depth=1
	jmp	.LBB75_20
.LBB75_20:                              # %for.inc35
                                        #   in Loop: Header=BB75_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_14
.LBB75_21:                              # %for.end37
	jmp	.LBB75_22
.LBB75_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB75_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB75_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_30
.LBB75_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB75_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB75_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB75_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB75_29:                              # %if.end59
	jmp	.LBB75_30
.LBB75_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB75_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB75_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$883117894, -32(%rbp)   # imm = 0x34A34F46
	jne	.LBB75_34
.LBB75_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_33
.Lfunc_end75:
	.size	write_one_macroblock.34, .Lfunc_end75-write_one_macroblock.34
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.35 # -- Begin function LumaResidualCoding8x8.35
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.35,@function
LumaResidualCoding8x8.35:               # @LumaResidualCoding8x8.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$677982718, -128(%rbp)  # imm = 0x286931FE
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB76_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB76_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB76_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB76_5:                               # %if.end
	movl	$0, -76(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB76_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_8 Depth 2
                                        #       Child Loop BB76_11 Depth 3
                                        #         Child Loop BB76_13 Depth 4
                                        #       Child Loop BB76_19 Depth 3
                                        #         Child Loop BB76_21 Depth 4
                                        #       Child Loop BB76_29 Depth 3
                                        #         Child Loop BB76_31 Depth 4
                                        #       Child Loop BB76_40 Depth 3
                                        #         Child Loop BB76_42 Depth 4
                                        #       Child Loop BB76_57 Depth 3
                                        #         Child Loop BB76_59 Depth 4
                                        #       Child Loop BB76_67 Depth 3
                                        #         Child Loop BB76_69 Depth 4
                                        #       Child Loop BB76_84 Depth 3
                                        #         Child Loop BB76_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB76_8:                               # %for.cond9
                                        #   Parent Loop BB76_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_11 Depth 3
                                        #         Child Loop BB76_13 Depth 4
                                        #       Child Loop BB76_19 Depth 3
                                        #         Child Loop BB76_21 Depth 4
                                        #       Child Loop BB76_29 Depth 3
                                        #         Child Loop BB76_31 Depth 4
                                        #       Child Loop BB76_40 Depth 3
                                        #         Child Loop BB76_42 Depth 4
                                        #       Child Loop BB76_57 Depth 3
                                        #         Child Loop BB76_59 Depth 4
                                        #       Child Loop BB76_67 Depth 3
                                        #         Child Loop BB76_69 Depth 4
                                        #       Child Loop BB76_84 Depth 3
                                        #         Child Loop BB76_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB76_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB76_11:                              # %for.cond16
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB76_11 Depth=3
	movl	$0, -16(%rbp)
.LBB76_13:                              # %for.cond20
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB76_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB76_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_13
.LBB76_16:                              # %for.end
                                        #   in Loop: Header=BB76_11 Depth=3
	jmp	.LBB76_17
.LBB76_17:                              # %for.inc37
                                        #   in Loop: Header=BB76_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_11
.LBB76_18:                              # %for.end39
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB76_19:                              # %for.cond41
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB76_19 Depth=3
	movl	$0, -16(%rbp)
.LBB76_21:                              # %for.cond45
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB76_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB76_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_21
.LBB76_24:                              # %for.end65
                                        #   in Loop: Header=BB76_19 Depth=3
	jmp	.LBB76_25
.LBB76_25:                              # %for.inc66
                                        #   in Loop: Header=BB76_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_19
.LBB76_26:                              # %for.end68
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_27
.LBB76_27:                              # %if.end69
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB76_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	$0, -12(%rbp)
.LBB76_29:                              # %for.cond74
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB76_29 Depth=3
	movl	$0, -16(%rbp)
.LBB76_31:                              # %for.cond78
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB76_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB76_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_31
.LBB76_34:                              # %for.end98
                                        #   in Loop: Header=BB76_29 Depth=3
	jmp	.LBB76_35
.LBB76_35:                              # %for.inc99
                                        #   in Loop: Header=BB76_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_29
.LBB76_36:                              # %for.end101
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_37
.LBB76_37:                              # %if.end102
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB76_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB76_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	$0, -12(%rbp)
.LBB76_40:                              # %for.cond108
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB76_40 Depth=3
	movl	$0, -16(%rbp)
.LBB76_42:                              # %for.cond112
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB76_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB76_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_42
.LBB76_45:                              # %for.end137
                                        #   in Loop: Header=BB76_40 Depth=3
	jmp	.LBB76_46
.LBB76_46:                              # %for.inc138
                                        #   in Loop: Header=BB76_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_40
.LBB76_47:                              # %for.end140
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB76_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB76_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB76_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB76_52
.LBB76_51:                              # %if.else
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB76_52:                              # %if.end151
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB76_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB76_54:                              # %if.end157
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_55
.LBB76_55:                              # %if.end158
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_65
.LBB76_56:                              # %if.else159
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	$0, -12(%rbp)
.LBB76_57:                              # %for.cond160
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB76_57 Depth=3
	movl	$0, -16(%rbp)
.LBB76_59:                              # %for.cond164
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB76_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB76_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_59
.LBB76_62:                              # %for.end193
                                        #   in Loop: Header=BB76_57 Depth=3
	jmp	.LBB76_63
.LBB76_63:                              # %for.inc194
                                        #   in Loop: Header=BB76_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_57
.LBB76_64:                              # %for.end196
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_65
.LBB76_65:                              # %if.end197
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_95
.LBB76_66:                              # %if.else198
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	$0, -12(%rbp)
.LBB76_67:                              # %for.cond199
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB76_67 Depth=3
	movl	$0, -16(%rbp)
.LBB76_69:                              # %for.cond203
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB76_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB76_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB76_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB76_73
.LBB76_72:                              # %if.else300
                                        #   in Loop: Header=BB76_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB76_73:                              # %if.end314
                                        #   in Loop: Header=BB76_69 Depth=4
	jmp	.LBB76_74
.LBB76_74:                              # %for.inc315
                                        #   in Loop: Header=BB76_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_69
.LBB76_75:                              # %for.end317
                                        #   in Loop: Header=BB76_67 Depth=3
	jmp	.LBB76_76
.LBB76_76:                              # %for.inc318
                                        #   in Loop: Header=BB76_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_67
.LBB76_77:                              # %for.end320
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB76_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB76_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB76_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB76_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB76_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB76_83
.LBB76_82:                              # %if.else334
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB76_83:                              # %if.end336
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	$0, -12(%rbp)
.LBB76_84:                              # %for.cond337
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB76_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	$0, -16(%rbp)
.LBB76_86:                              # %for.cond341
                                        #   Parent Loop BB76_6 Depth=1
                                        #     Parent Loop BB76_8 Depth=2
                                        #       Parent Loop BB76_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB76_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB76_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB76_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_86
.LBB76_89:                              # %for.end358
                                        #   in Loop: Header=BB76_84 Depth=3
	jmp	.LBB76_90
.LBB76_90:                              # %for.inc359
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_84
.LBB76_91:                              # %for.end361
                                        #   in Loop: Header=BB76_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB76_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB76_93:                              # %if.end368
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_94
.LBB76_94:                              # %if.end369
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_95
.LBB76_95:                              # %if.end370
                                        #   in Loop: Header=BB76_8 Depth=2
	jmp	.LBB76_96
.LBB76_96:                              # %for.inc371
                                        #   in Loop: Header=BB76_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB76_8
.LBB76_97:                              # %for.end374
                                        #   in Loop: Header=BB76_6 Depth=1
	jmp	.LBB76_98
.LBB76_98:                              # %for.inc375
                                        #   in Loop: Header=BB76_6 Depth=1
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_6
.LBB76_99:                              # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB76_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB76_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB76_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB76_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB76_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB76_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB76_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB76_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB76_106 Depth=1
	movl	$0, -16(%rbp)
.LBB76_108:                             # %for.cond400
                                        #   Parent Loop BB76_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB76_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB76_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB76_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_108
.LBB76_111:                             # %for.end417
                                        #   in Loop: Header=BB76_106 Depth=1
	jmp	.LBB76_112
.LBB76_112:                             # %for.inc418
                                        #   in Loop: Header=BB76_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_106
.LBB76_113:                             # %for.end420
	jmp	.LBB76_114
.LBB76_114:                             # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB76_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB76_116:                             # %if.end431
	jmp	.LBB76_117
.LBB76_117:                             # %if.end432
	jmp	.LBB76_118
.LBB76_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB76_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB76_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB76_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB76_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB76_145
.LBB76_123:                             # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB76_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_126:                             # %for.cond462
                                        #   Parent Loop BB76_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB76_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB76_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB76_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB76_130
.LBB76_129:                             # %if.else481
                                        #   in Loop: Header=BB76_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB76_130:                             # %if.end486
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_131
.LBB76_131:                             # %for.inc487
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_126
.LBB76_132:                             # %for.end489
                                        #   in Loop: Header=BB76_124 Depth=1
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc490
                                        #   in Loop: Header=BB76_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_124
.LBB76_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB76_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB76_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_138:                             # %for.cond502
                                        #   Parent Loop BB76_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB76_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB76_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_138
.LBB76_141:                             # %for.end509
                                        #   in Loop: Header=BB76_136 Depth=1
	jmp	.LBB76_142
.LBB76_142:                             # %for.inc510
                                        #   in Loop: Header=BB76_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_136
.LBB76_143:                             # %for.end512
	jmp	.LBB76_144
.LBB76_144:                             # %if.end513
	jmp	.LBB76_145
.LBB76_145:                             # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$677982718, -128(%rbp)  # imm = 0x286931FE
	jne	.LBB76_147
.LBB76_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_146
.Lfunc_end76:
	.size	LumaResidualCoding8x8.35, .Lfunc_end76-LumaResidualCoding8x8.35
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.36 # -- Begin function proceed2nextMacroblock.36
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.36,@function
proceed2nextMacroblock.36:              # @proceed2nextMacroblock.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$332631597, -28(%rbp)   # imm = 0x13D38E2D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB77_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB77_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB77_9
.LBB77_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB77_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB77_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB77_7
.LBB77_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB77_7:                               # %if.end
	jmp	.LBB77_8
.LBB77_8:                               # %if.end48
	jmp	.LBB77_9
.LBB77_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB77_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB77_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB77_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB77_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB77_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB77_16
.LBB77_15:                              # %if.else86
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB77_16:                              # %if.end94
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB77_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB77_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB77_20
.LBB77_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB77_21
.LBB77_20:                              # %if.then107
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB77_22
.LBB77_21:                              # %if.else114
                                        #   in Loop: Header=BB77_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB77_22:                              # %if.end121
                                        #   in Loop: Header=BB77_12 Depth=1
	jmp	.LBB77_23
.LBB77_23:                              # %if.end122
                                        #   in Loop: Header=BB77_12 Depth=1
	jmp	.LBB77_24
.LBB77_24:                              # %for.inc
                                        #   in Loop: Header=BB77_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_12
.LBB77_25:                              # %for.end
	jmp	.LBB77_34
.LBB77_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB77_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB77_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB77_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB77_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB77_32
.LBB77_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB77_32:                              # %if.end155
	jmp	.LBB77_33
.LBB77_33:                              # %if.end156
	jmp	.LBB77_34
.LBB77_34:                              # %if.end157
	jmp	.LBB77_35
.LBB77_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB77_38
.LBB77_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB77_38:                              # %if.end167
	cmpl	$332631597, -28(%rbp)   # imm = 0x13D38E2D
	jne	.LBB77_40
.LBB77_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_39
.Lfunc_end77:
	.size	proceed2nextMacroblock.36, .Lfunc_end77-proceed2nextMacroblock.36
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.37     # -- Begin function writeChromaCoeff.37
	.p2align	4, 0x90
	.type	writeChromaCoeff.37,@function
writeChromaCoeff.37:                    # @writeChromaCoeff.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1703562529, -80(%rbp)  # imm = 0x658A4D21
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB78_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB78_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB78_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB78_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_21
.LBB78_5:                               # %if.else
                                        #   in Loop: Header=BB78_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB78_6:                               # %for.cond18
                                        #   Parent Loop BB78_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB78_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB78_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB78_8:                               # %land.end
                                        #   in Loop: Header=BB78_6 Depth=2
	testb	$1, %al
	jne	.LBB78_9
	jmp	.LBB78_20
.LBB78_9:                               # %for.body21
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_12
.LBB78_11:                              # %if.else29
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_12:                              # %if.end
                                        #   in Loop: Header=BB78_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB78_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB78_15:                              # %lor.end
                                        #   in Loop: Header=BB78_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB78_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB78_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB78_18:                              # %lor.end45
                                        #   in Loop: Header=BB78_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB78_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_6
.LBB78_20:                              # %for.end
                                        #   in Loop: Header=BB78_2 Depth=1
	jmp	.LBB78_21
.LBB78_21:                              # %if.end58
                                        #   in Loop: Header=BB78_2 Depth=1
	jmp	.LBB78_22
.LBB78_22:                              # %for.inc59
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_2
.LBB78_23:                              # %for.end61
	jmp	.LBB78_24
.LBB78_24:                              # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB78_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB78_26:                              # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_28 Depth 2
                                        #       Child Loop BB78_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB78_26 Depth=1
	movl	$0, -36(%rbp)
.LBB78_28:                              # %for.cond69
                                        #   Parent Loop BB78_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB78_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB78_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB78_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_47
.LBB78_31:                              # %if.else84
                                        #   in Loop: Header=BB78_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB78_32:                              # %for.cond115
                                        #   Parent Loop BB78_26 Depth=1
                                        #     Parent Loop BB78_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB78_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB78_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB78_34:                              # %land.end121
                                        #   in Loop: Header=BB78_32 Depth=3
	testb	$1, %al
	jne	.LBB78_35
	jmp	.LBB78_46
.LBB78_35:                              # %for.body122
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_38
.LBB78_37:                              # %if.else134
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_38:                              # %if.end136
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB78_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB78_41:                              # %lor.end149
                                        #   in Loop: Header=BB78_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB78_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB78_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB78_44:                              # %lor.end164
                                        #   in Loop: Header=BB78_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB78_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_32
.LBB78_46:                              # %for.end189
                                        #   in Loop: Header=BB78_28 Depth=2
	jmp	.LBB78_47
.LBB78_47:                              # %if.end190
                                        #   in Loop: Header=BB78_28 Depth=2
	jmp	.LBB78_48
.LBB78_48:                              # %for.inc191
                                        #   in Loop: Header=BB78_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB78_28
.LBB78_49:                              # %for.end193
                                        #   in Loop: Header=BB78_26 Depth=1
	jmp	.LBB78_50
.LBB78_50:                              # %for.inc194
                                        #   in Loop: Header=BB78_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB78_26
.LBB78_51:                              # %for.end196
	jmp	.LBB78_52
.LBB78_52:                              # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1703562529, -80(%rbp)  # imm = 0x658A4D21
	jne	.LBB78_54
.LBB78_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_53
.Lfunc_end78:
	.size	writeChromaCoeff.37, .Lfunc_end78-writeChromaCoeff.37
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.38 # -- Begin function writeCBPandLumaCoeff.38
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.38,@function
writeCBPandLumaCoeff.38:                # @writeCBPandLumaCoeff.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1447671169, -100(%rbp) # imm = 0x5649B581
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB79_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB79_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB79_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB79_7
.LBB79_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB79_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB79_10
.LBB79_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB79_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB79_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB79_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB79_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB79_18
.LBB79_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB79_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB79_18
.LBB79_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB79_22
.LBB79_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB79_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB79_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB79_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB79_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB79_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB79_26
.LBB79_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB79_29
.LBB79_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB79_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB79_30:                              # %if.end93
	jmp	.LBB79_31
.LBB79_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB79_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB79_42
.LBB79_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB79_36
.LBB79_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB79_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB79_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB79_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB79_41
.LBB79_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB79_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB79_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB79_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	$0, -20(%rbp)
.LBB79_45:                              # %for.cond141
                                        #   Parent Loop BB79_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB79_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB79_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_45
.LBB79_48:                              # %for.end
                                        #   in Loop: Header=BB79_43 Depth=1
	jmp	.LBB79_49
.LBB79_49:                              # %for.inc152
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB79_43
.LBB79_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB79_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB79_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB79_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB79_55:                              # %if.end169
                                        #   in Loop: Header=BB79_52 Depth=1
	jmp	.LBB79_56
.LBB79_56:                              # %for.inc170
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_52
.LBB79_57:                              # %for.end172
	jmp	.LBB79_101
.LBB79_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_70
.LBB79_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB79_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB79_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB79_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB79_63:                              # %land.end184
                                        #   in Loop: Header=BB79_61 Depth=1
	testb	$1, %al
	jne	.LBB79_64
	jmp	.LBB79_69
.LBB79_64:                              # %for.body186
                                        #   in Loop: Header=BB79_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB79_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB79_67
.LBB79_66:                              # %if.else196
                                        #   in Loop: Header=BB79_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_67:                              # %if.end198
                                        #   in Loop: Header=BB79_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_61
.LBB79_69:                              # %for.end218
	jmp	.LBB79_70
.LBB79_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB79_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB79_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_74 Depth 2
                                        #       Child Loop BB79_76 Depth 3
                                        #         Child Loop BB79_78 Depth 4
                                        #           Child Loop BB79_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB79_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	$0, -56(%rbp)
.LBB79_74:                              # %for.cond226
                                        #   Parent Loop BB79_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_76 Depth 3
                                        #         Child Loop BB79_78 Depth 4
                                        #           Child Loop BB79_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB79_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB79_76:                              # %for.cond229
                                        #   Parent Loop BB79_72 Depth=1
                                        #     Parent Loop BB79_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_78 Depth 4
                                        #           Child Loop BB79_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB79_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB79_78:                              # %for.cond233
                                        #   Parent Loop BB79_72 Depth=1
                                        #     Parent Loop BB79_74 Depth=2
                                        #       Parent Loop BB79_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB79_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB79_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB79_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_91
.LBB79_81:                              # %if.else247
                                        #   in Loop: Header=BB79_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB79_82:                              # %for.cond259
                                        #   Parent Loop BB79_72 Depth=1
                                        #     Parent Loop BB79_74 Depth=2
                                        #       Parent Loop BB79_76 Depth=3
                                        #         Parent Loop BB79_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB79_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB79_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB79_84:                              # %land.end263
                                        #   in Loop: Header=BB79_82 Depth=5
	testb	$1, %al
	jne	.LBB79_85
	jmp	.LBB79_90
.LBB79_85:                              # %for.body265
                                        #   in Loop: Header=BB79_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB79_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB79_88
.LBB79_87:                              # %if.else276
                                        #   in Loop: Header=BB79_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_88:                              # %if.end278
                                        #   in Loop: Header=BB79_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB79_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_82
.LBB79_90:                              # %for.end300
                                        #   in Loop: Header=BB79_78 Depth=4
	jmp	.LBB79_91
.LBB79_91:                              # %if.end301
                                        #   in Loop: Header=BB79_78 Depth=4
	jmp	.LBB79_92
.LBB79_92:                              # %for.inc302
                                        #   in Loop: Header=BB79_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_78
.LBB79_93:                              # %for.end304
                                        #   in Loop: Header=BB79_76 Depth=3
	jmp	.LBB79_94
.LBB79_94:                              # %for.inc305
                                        #   in Loop: Header=BB79_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB79_76
.LBB79_95:                              # %for.end307
                                        #   in Loop: Header=BB79_74 Depth=2
	jmp	.LBB79_96
.LBB79_96:                              # %for.inc308
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB79_74
.LBB79_97:                              # %for.end310
                                        #   in Loop: Header=BB79_72 Depth=1
	jmp	.LBB79_98
.LBB79_98:                              # %for.inc311
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB79_72
.LBB79_99:                              # %for.end313
	jmp	.LBB79_100
.LBB79_100:                             # %if.end314
	jmp	.LBB79_101
.LBB79_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1447671169, -100(%rbp) # imm = 0x5649B581
	jne	.LBB79_103
.LBB79_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_102
.Lfunc_end79:
	.size	writeCBPandLumaCoeff.38, .Lfunc_end79-writeCBPandLumaCoeff.38
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.39 # -- Begin function IntraChromaPrediction.39
	.p2align	4, 0x90
	.type	IntraChromaPrediction.39,@function
IntraChromaPrediction.39:               # @IntraChromaPrediction.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$393599011, -164(%rbp)  # imm = 0x1775D823
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_1
.LBB80_4:                               # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB80_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB80_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB80_8
.LBB80_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB80_8
.LBB80_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB80_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB80_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB80_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB80_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB80_13
.LBB80_12:                              # %cond.false32
                                        #   in Loop: Header=BB80_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_13
.LBB80_13:                              # %cond.end33
                                        #   in Loop: Header=BB80_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB80_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_9
.LBB80_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB80_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB80_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB80_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB80_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB80_20
.LBB80_19:                              # %cond.false57
                                        #   in Loop: Header=BB80_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_20
.LBB80_20:                              # %cond.end58
                                        #   in Loop: Header=BB80_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB80_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_16
.LBB80_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB80_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB80_25
.LBB80_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB80_25
.LBB80_25:                              # %cond.end75
	movl	%eax, -104(%rbp)
.LBB80_26:                              # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB80_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_28:                              # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB80_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB80_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB80_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB80_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB80_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_37 Depth 2
                                        #       Child Loop BB80_39 Depth 3
                                        #         Child Loop BB80_104 Depth 4
                                        #         Child Loop BB80_110 Depth 4
                                        #         Child Loop BB80_85 Depth 4
                                        #         Child Loop BB80_91 Depth 4
                                        #         Child Loop BB80_66 Depth 4
                                        #         Child Loop BB80_72 Depth 4
                                        #         Child Loop BB80_44 Depth 4
                                        #         Child Loop BB80_50 Depth 4
                                        #         Child Loop BB80_125 Depth 4
                                        #           Child Loop BB80_127 Depth 5
                                        #     Child Loop BB80_138 Depth 2
                                        #     Child Loop BB80_142 Depth 2
                                        #       Child Loop BB80_144 Depth 3
                                        #     Child Loop BB80_153 Depth 2
                                        #     Child Loop BB80_157 Depth 2
                                        #       Child Loop BB80_159 Depth 3
                                        #     Child Loop BB80_170 Depth 2
                                        #     Child Loop BB80_174 Depth 2
                                        #     Child Loop BB80_178 Depth 2
                                        #       Child Loop BB80_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB80_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB80_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB80_37:                              # %for.cond95
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_39 Depth 3
                                        #         Child Loop BB80_104 Depth 4
                                        #         Child Loop BB80_110 Depth 4
                                        #         Child Loop BB80_85 Depth 4
                                        #         Child Loop BB80_91 Depth 4
                                        #         Child Loop BB80_66 Depth 4
                                        #         Child Loop BB80_72 Depth 4
                                        #         Child Loop BB80_44 Depth 4
                                        #         Child Loop BB80_50 Depth 4
                                        #         Child Loop BB80_125 Depth 4
                                        #           Child Loop BB80_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB80_37 Depth=2
	movl	$0, -88(%rbp)
.LBB80_39:                              # %for.cond99
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_104 Depth 4
                                        #         Child Loop BB80_110 Depth 4
                                        #         Child Loop BB80_85 Depth 4
                                        #         Child Loop BB80_91 Depth 4
                                        #         Child Loop BB80_66 Depth 4
                                        #         Child Loop BB80_72 Depth 4
                                        #         Child Loop BB80_44 Depth 4
                                        #         Child Loop BB80_50 Depth 4
                                        #         Child Loop BB80_125 Depth 4
                                        #           Child Loop BB80_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB80_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB80_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB80_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB80_39 Depth=3
	movq	.LJTI80_0(,%rax,8), %rax
	jmpq	*%rax
.LBB80_42:                              # %sw.bb
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_44:                              # %for.cond124
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB80_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB80_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_44
.LBB80_47:                              # %for.end138
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_48
.LBB80_48:                              # %if.end139
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB80_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_50:                              # %for.cond143
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB80_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB80_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_50
.LBB80_53:                              # %for.end162
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_54
.LBB80_54:                              # %if.end163
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB80_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_63
.LBB80_57:                              # %if.else
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_62
.LBB80_59:                              # %if.else174
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB80_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB80_61:                              # %if.end180
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_62
.LBB80_62:                              # %if.end181
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_63
.LBB80_63:                              # %if.end182
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_124
.LBB80_64:                              # %sw.bb183
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_66:                              # %for.cond186
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB80_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB80_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_66
.LBB80_69:                              # %for.end202
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_77
.LBB80_70:                              # %if.else203
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB80_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_72:                              # %for.cond207
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB80_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB80_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_72
.LBB80_75:                              # %for.end226
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_76
.LBB80_76:                              # %if.end227
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_77
.LBB80_77:                              # %if.end228
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_82
.LBB80_79:                              # %if.else233
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB80_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB80_81:                              # %if.end239
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_82
.LBB80_82:                              # %if.end240
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_124
.LBB80_83:                              # %sw.bb241
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_85:                              # %for.cond245
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB80_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB80_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_85
.LBB80_88:                              # %for.end264
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_96
.LBB80_89:                              # %if.else265
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_91:                              # %for.cond268
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB80_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB80_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_91
.LBB80_94:                              # %for.end284
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_95
.LBB80_95:                              # %if.end285
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_96
.LBB80_96:                              # %if.end286
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_101
.LBB80_98:                              # %if.else292
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB80_100:                             # %if.end297
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_101
.LBB80_101:                             # %if.end298
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_124
.LBB80_102:                             # %sw.bb299
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_104:                             # %for.cond302
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB80_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB80_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_104
.LBB80_107:                             # %for.end318
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_108
.LBB80_108:                             # %if.end319
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_110:                             # %for.cond323
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB80_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB80_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_110
.LBB80_113:                             # %for.end342
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_114
.LBB80_114:                             # %if.end343
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_123
.LBB80_117:                             # %if.else352
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB80_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_122
.LBB80_119:                             # %if.else357
                                        #   in Loop: Header=BB80_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB80_121:                             # %if.end363
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_122
.LBB80_122:                             # %if.end364
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_123
.LBB80_123:                             # %if.end365
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_124
.LBB80_124:                             # %sw.epilog
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_125:                             # %for.cond366
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB80_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB80_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_127:                             # %for.cond371
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_37 Depth=2
                                        #       Parent Loop BB80_39 Depth=3
                                        #         Parent Loop BB80_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB80_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB80_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_127
.LBB80_130:                             # %for.end386
                                        #   in Loop: Header=BB80_125 Depth=4
	jmp	.LBB80_131
.LBB80_131:                             # %for.inc387
                                        #   in Loop: Header=BB80_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_125
.LBB80_132:                             # %for.end389
                                        #   in Loop: Header=BB80_39 Depth=3
	jmp	.LBB80_133
.LBB80_133:                             # %for.inc390
                                        #   in Loop: Header=BB80_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB80_39
.LBB80_134:                             # %for.end392
                                        #   in Loop: Header=BB80_37 Depth=2
	jmp	.LBB80_135
.LBB80_135:                             # %for.inc393
                                        #   in Loop: Header=BB80_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB80_37
.LBB80_136:                             # %for.end395
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB80_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	$0, -4(%rbp)
.LBB80_138:                             # %for.cond398
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB80_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB80_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_138
.LBB80_141:                             # %for.end414
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	$0, -4(%rbp)
.LBB80_142:                             # %for.cond415
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB80_142 Depth=2
	movl	$0, -8(%rbp)
.LBB80_144:                             # %for.cond419
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB80_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB80_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_144
.LBB80_147:                             # %for.end436
                                        #   in Loop: Header=BB80_142 Depth=2
	jmp	.LBB80_148
.LBB80_148:                             # %for.inc437
                                        #   in Loop: Header=BB80_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_142
.LBB80_149:                             # %for.end439
                                        #   in Loop: Header=BB80_35 Depth=1
	jmp	.LBB80_150
.LBB80_150:                             # %if.end440
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB80_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB80_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	$0, -4(%rbp)
.LBB80_153:                             # %for.cond447
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB80_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB80_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_153
.LBB80_156:                             # %for.end468
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	$0, -4(%rbp)
.LBB80_157:                             # %for.cond469
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB80_157 Depth=2
	movl	$0, -8(%rbp)
.LBB80_159:                             # %for.cond473
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB80_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB80_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_159
.LBB80_162:                             # %for.end490
                                        #   in Loop: Header=BB80_157 Depth=2
	jmp	.LBB80_163
.LBB80_163:                             # %for.inc491
                                        #   in Loop: Header=BB80_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_157
.LBB80_164:                             # %for.end493
                                        #   in Loop: Header=BB80_35 Depth=1
	jmp	.LBB80_165
.LBB80_165:                             # %if.end494
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB80_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB80_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB80_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB80_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB80_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB80_170:                             # %for.cond519
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB80_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB80_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB80_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_170
.LBB80_173:                             # %for.end540
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB80_174:                             # %for.cond556
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB80_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB80_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB80_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_174
.LBB80_177:                             # %for.end577
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB80_178:                             # %for.cond606
                                        #   Parent Loop BB80_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB80_178 Depth=2
	movl	$0, -4(%rbp)
.LBB80_180:                             # %for.cond610
                                        #   Parent Loop BB80_35 Depth=1
                                        #     Parent Loop BB80_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB80_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB80_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB80_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB80_184
.LBB80_183:                             # %cond.false630
                                        #   in Loop: Header=BB80_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB80_184:                             # %cond.end643
                                        #   in Loop: Header=BB80_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB80_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB80_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB80_190
.LBB80_186:                             # %cond.false648
                                        #   in Loop: Header=BB80_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB80_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB80_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB80_189
.LBB80_188:                             # %cond.false666
                                        #   in Loop: Header=BB80_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB80_189:                             # %cond.end679
                                        #   in Loop: Header=BB80_180 Depth=3
.LBB80_190:                             # %cond.end681
                                        #   in Loop: Header=BB80_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB80_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_180
.LBB80_192:                             # %for.end694
                                        #   in Loop: Header=BB80_178 Depth=2
	jmp	.LBB80_193
.LBB80_193:                             # %for.inc695
                                        #   in Loop: Header=BB80_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_178
.LBB80_194:                             # %for.end697
                                        #   in Loop: Header=BB80_35 Depth=1
	jmp	.LBB80_195
.LBB80_195:                             # %if.end698
                                        #   in Loop: Header=BB80_35 Depth=1
	jmp	.LBB80_196
.LBB80_196:                             # %for.inc699
                                        #   in Loop: Header=BB80_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_35
.LBB80_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB80_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB80_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_199
.LBB80_202:                             # %for.end712
	movl	$0, -40(%rbp)
.LBB80_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_219 Depth 2
                                        #       Child Loop BB80_221 Depth 3
                                        #         Child Loop BB80_223 Depth 4
                                        #           Child Loop BB80_225 Depth 5
                                        #             Child Loop BB80_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB80_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB80_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB80_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB80_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB80_203 Depth=1
	jmp	.LBB80_241
.LBB80_207:                             # %if.end723
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB80_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB80_217
.LBB80_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB80_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB80_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB80_217
.LBB80_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB80_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB80_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB80_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB80_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB80_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB80_218
.LBB80_217:                             # %if.then749
                                        #   in Loop: Header=BB80_203 Depth=1
	jmp	.LBB80_241
.LBB80_218:                             # %if.end750
                                        #   in Loop: Header=BB80_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB80_219:                             # %for.cond751
                                        #   Parent Loop BB80_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_221 Depth 3
                                        #         Child Loop BB80_223 Depth 4
                                        #           Child Loop BB80_225 Depth 5
                                        #             Child Loop BB80_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB80_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB80_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB80_221:                             # %for.cond757
                                        #   Parent Loop BB80_203 Depth=1
                                        #     Parent Loop BB80_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_223 Depth 4
                                        #           Child Loop BB80_225 Depth 5
                                        #             Child Loop BB80_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB80_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB80_221 Depth=3
	movl	$0, -44(%rbp)
.LBB80_223:                             # %for.cond761
                                        #   Parent Loop BB80_203 Depth=1
                                        #     Parent Loop BB80_219 Depth=2
                                        #       Parent Loop BB80_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB80_225 Depth 5
                                        #             Child Loop BB80_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB80_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_225:                             # %for.cond765
                                        #   Parent Loop BB80_203 Depth=1
                                        #     Parent Loop BB80_219 Depth=2
                                        #       Parent Loop BB80_221 Depth=3
                                        #         Parent Loop BB80_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB80_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB80_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_227:                             # %for.cond770
                                        #   Parent Loop BB80_203 Depth=1
                                        #     Parent Loop BB80_219 Depth=2
                                        #       Parent Loop BB80_221 Depth=3
                                        #         Parent Loop BB80_223 Depth=4
                                        #           Parent Loop BB80_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB80_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB80_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB80_227
.LBB80_230:                             # %for.end803
                                        #   in Loop: Header=BB80_225 Depth=5
	jmp	.LBB80_231
.LBB80_231:                             # %for.inc804
                                        #   in Loop: Header=BB80_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_225
.LBB80_232:                             # %for.end806
                                        #   in Loop: Header=BB80_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB80_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB80_223
.LBB80_234:                             # %for.end810
                                        #   in Loop: Header=BB80_221 Depth=3
	jmp	.LBB80_235
.LBB80_235:                             # %for.inc811
                                        #   in Loop: Header=BB80_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB80_221
.LBB80_236:                             # %for.end813
                                        #   in Loop: Header=BB80_219 Depth=2
	jmp	.LBB80_237
.LBB80_237:                             # %for.inc814
                                        #   in Loop: Header=BB80_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_219
.LBB80_238:                             # %for.end816
                                        #   in Loop: Header=BB80_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB80_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB80_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB80_240:                             # %if.end820
                                        #   in Loop: Header=BB80_203 Depth=1
	jmp	.LBB80_241
.LBB80_241:                             # %for.inc821
                                        #   in Loop: Header=BB80_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB80_203
.LBB80_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB80_243:                             # %if.end824
	cmpl	$393599011, -164(%rbp)  # imm = 0x1775D823
	jne	.LBB80_245
.LBB80_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_244
.Lfunc_end80:
	.size	IntraChromaPrediction.39, .Lfunc_end80-IntraChromaPrediction.39
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI80_0:
	.quad	.LBB80_42
	.quad	.LBB80_64
	.quad	.LBB80_83
	.quad	.LBB80_102
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8_CABAC.40 # -- Begin function writeLumaCoeff8x8_CABAC.40
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.40,@function
writeLumaCoeff8x8_CABAC.40:             # @writeLumaCoeff8x8_CABAC.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$793423834, -60(%rbp)   # imm = 0x2F4AAFDA
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB81_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB81_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB81_3:                               # %land.end
                                        #   in Loop: Header=BB81_1 Depth=1
	testb	$1, %al
	jne	.LBB81_4
	jmp	.LBB81_12
.LBB81_4:                               # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB81_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB81_7
.LBB81_6:                               # %cond.false
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB81_7:                               # %cond.end
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB81_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB81_10
.LBB81_9:                               # %if.else
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB81_10:                              # %if.end
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_1
.LBB81_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$793423834, -60(%rbp)   # imm = 0x2F4AAFDA
	jne	.LBB81_14
.LBB81_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_13
.Lfunc_end81:
	.size	writeLumaCoeff8x8_CABAC.40, .Lfunc_end81-writeLumaCoeff8x8_CABAC.40
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.41 # -- Begin function writeChromaIntraPredMode.41
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.41,@function
writeChromaIntraPredMode.41:            # @writeChromaIntraPredMode.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1879402553, -36(%rbp)  # imm = 0x70056839
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB82_3
.LBB82_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB82_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1879402553, -36(%rbp)  # imm = 0x70056839
	jne	.LBB82_5
.LBB82_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_4
.Lfunc_end82:
	.size	writeChromaIntraPredMode.41, .Lfunc_end82-writeChromaIntraPredMode.41
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.42 # -- Begin function terminate_macroblock.42
	.p2align	4, 0x90
	.type	terminate_macroblock.42,@function
terminate_macroblock.42:                # @terminate_macroblock.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1431829238, -112(%rbp) # imm = 0x5557FAF6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB83_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB83_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB83_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB83_5
.LBB83_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB83_8
.LBB83_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB83_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB83_7:                               # %if.end
	jmp	.LBB83_8
.LBB83_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB83_45
# %bb.9:                                # %if.end18
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB83_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB83_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB83_46
.LBB83_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB83_46
.LBB83_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB83_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB83_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB83_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB83_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB83_22
.LBB83_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB83_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB83_21:                              # %if.end64
	jmp	.LBB83_22
.LBB83_22:                              # %if.end65
	jmp	.LBB83_23
.LBB83_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB83_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB83_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB83_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB83_27:                              # %if.end79
	jmp	.LBB83_28
.LBB83_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB83_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB83_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB83_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB83_32:                              # %if.end89
	jmp	.LBB83_33
.LBB83_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB83_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB83_35:                              # %if.end95
	jmp	.LBB83_46
.LBB83_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB83_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB83_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB83_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB83_40:                              # %if.end106
	jmp	.LBB83_41
.LBB83_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB83_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB83_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB83_44:                              # %if.end118
	jmp	.LBB83_46
.LBB83_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB83_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB83_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB83_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB83_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB83_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB83_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB83_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB83_51:                              # %if.end139
                                        #   in Loop: Header=BB83_48 Depth=1
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc
                                        #   in Loop: Header=BB83_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB83_48
.LBB83_53:                              # %for.end
	jmp	.LBB83_54
.LBB83_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB83_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB83_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB83_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB83_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB83_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB83_60:                              # %if.end174
	jmp	.LBB83_62
.LBB83_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB83_62:                              # %if.end188
	jmp	.LBB83_63
.LBB83_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB83_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB83_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB83_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB83_67:                              # %if.end218
	cmpl	$1431829238, -112(%rbp) # imm = 0x5557FAF6
	jne	.LBB83_69
.LBB83_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_68
.Lfunc_end83:
	.size	terminate_macroblock.42, .Lfunc_end83-terminate_macroblock.42
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_10
	.quad	.LBB83_13
	.quad	.LBB83_14
	.quad	.LBB83_36
                                        # -- End function
	.text
	.globl	B8Mode2Value.43         # -- Begin function B8Mode2Value.43
	.p2align	4, 0x90
	.type	B8Mode2Value.43,@function
B8Mode2Value.43:                        # @B8Mode2Value.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1656457459, -20(%rbp)  # imm = 0x62BB88F3
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB84_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_3
.LBB84_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB84_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1656457459, -20(%rbp)  # imm = 0x62BB88F3
	jne	.LBB84_5
.LBB84_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_4
.Lfunc_end84:
	.size	B8Mode2Value.43, .Lfunc_end84-B8Mode2Value.43
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.44 # -- Begin function IntraChromaPrediction4x4.44
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.44,@function
IntraChromaPrediction4x4.44:            # @IntraChromaPrediction4x4.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$138922394, -28(%rbp)   # imm = 0x847C99A
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_3:                               # %for.cond1
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_3
.LBB85_6:                               # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_7
.LBB85_7:                               # %for.inc17
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_1
.LBB85_8:                               # %for.end19
	cmpl	$138922394, -28(%rbp)   # imm = 0x847C99A
	jne	.LBB85_10
.LBB85_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_9
.Lfunc_end85:
	.size	IntraChromaPrediction4x4.44, .Lfunc_end85-IntraChromaPrediction4x4.44
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.45 # -- Begin function writeCBPandLumaCoeff.45
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.45,@function
writeCBPandLumaCoeff.45:                # @writeCBPandLumaCoeff.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1787352592, -104(%rbp) # imm = 0x6A88D610
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB86_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB86_7
.LBB86_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB86_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB86_10
.LBB86_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB86_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB86_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB86_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB86_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB86_18
.LBB86_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB86_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB86_18
.LBB86_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB86_22
.LBB86_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB86_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB86_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB86_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB86_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB86_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB86_26
.LBB86_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB86_29
.LBB86_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB86_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB86_30:                              # %if.end93
	jmp	.LBB86_31
.LBB86_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB86_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB86_42
.LBB86_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB86_36
.LBB86_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB86_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB86_41
.LBB86_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB86_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB86_42:                              # %if.end138
	movl	$0, -36(%rbp)
.LBB86_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB86_43 Depth=1
	movl	$0, -20(%rbp)
.LBB86_45:                              # %for.cond141
                                        #   Parent Loop BB86_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB86_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB86_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB86_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_45
.LBB86_48:                              # %for.end
                                        #   in Loop: Header=BB86_43 Depth=1
	jmp	.LBB86_49
.LBB86_49:                              # %for.inc152
                                        #   in Loop: Header=BB86_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB86_43
.LBB86_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB86_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB86_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB86_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB86_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB86_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_55:                              # %if.end169
                                        #   in Loop: Header=BB86_52 Depth=1
	jmp	.LBB86_56
.LBB86_56:                              # %for.inc170
                                        #   in Loop: Header=BB86_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_52
.LBB86_57:                              # %for.end172
	jmp	.LBB86_101
.LBB86_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_70
.LBB86_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB86_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB86_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB86_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB86_63:                              # %land.end184
                                        #   in Loop: Header=BB86_61 Depth=1
	testb	$1, %al
	jne	.LBB86_64
	jmp	.LBB86_69
.LBB86_64:                              # %for.body186
                                        #   in Loop: Header=BB86_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB86_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB86_67
.LBB86_66:                              # %if.else196
                                        #   in Loop: Header=BB86_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_67:                              # %if.end198
                                        #   in Loop: Header=BB86_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB86_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB86_61
.LBB86_69:                              # %for.end218
	jmp	.LBB86_70
.LBB86_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB86_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB86_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_74 Depth 2
                                        #       Child Loop BB86_76 Depth 3
                                        #         Child Loop BB86_78 Depth 4
                                        #           Child Loop BB86_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB86_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB86_72 Depth=1
	movl	$0, -60(%rbp)
.LBB86_74:                              # %for.cond226
                                        #   Parent Loop BB86_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_76 Depth 3
                                        #         Child Loop BB86_78 Depth 4
                                        #           Child Loop BB86_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB86_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB86_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_76:                              # %for.cond229
                                        #   Parent Loop BB86_72 Depth=1
                                        #     Parent Loop BB86_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_78 Depth 4
                                        #           Child Loop BB86_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB86_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_78:                              # %for.cond233
                                        #   Parent Loop BB86_72 Depth=1
                                        #     Parent Loop BB86_74 Depth=2
                                        #       Parent Loop BB86_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB86_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB86_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_91
.LBB86_81:                              # %if.else247
                                        #   in Loop: Header=BB86_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB86_82:                              # %for.cond259
                                        #   Parent Loop BB86_72 Depth=1
                                        #     Parent Loop BB86_74 Depth=2
                                        #       Parent Loop BB86_76 Depth=3
                                        #         Parent Loop BB86_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB86_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB86_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB86_84:                              # %land.end263
                                        #   in Loop: Header=BB86_82 Depth=5
	testb	$1, %al
	jne	.LBB86_85
	jmp	.LBB86_90
.LBB86_85:                              # %for.body265
                                        #   in Loop: Header=BB86_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB86_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB86_88
.LBB86_87:                              # %if.else276
                                        #   in Loop: Header=BB86_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_88:                              # %if.end278
                                        #   in Loop: Header=BB86_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB86_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB86_82
.LBB86_90:                              # %for.end300
                                        #   in Loop: Header=BB86_78 Depth=4
	jmp	.LBB86_91
.LBB86_91:                              # %if.end301
                                        #   in Loop: Header=BB86_78 Depth=4
	jmp	.LBB86_92
.LBB86_92:                              # %for.inc302
                                        #   in Loop: Header=BB86_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_78
.LBB86_93:                              # %for.end304
                                        #   in Loop: Header=BB86_76 Depth=3
	jmp	.LBB86_94
.LBB86_94:                              # %for.inc305
                                        #   in Loop: Header=BB86_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB86_76
.LBB86_95:                              # %for.end307
                                        #   in Loop: Header=BB86_74 Depth=2
	jmp	.LBB86_96
.LBB86_96:                              # %for.inc308
                                        #   in Loop: Header=BB86_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_74
.LBB86_97:                              # %for.end310
                                        #   in Loop: Header=BB86_72 Depth=1
	jmp	.LBB86_98
.LBB86_98:                              # %for.inc311
                                        #   in Loop: Header=BB86_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_72
.LBB86_99:                              # %for.end313
	jmp	.LBB86_100
.LBB86_100:                             # %if.end314
	jmp	.LBB86_101
.LBB86_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1787352592, -104(%rbp) # imm = 0x6A88D610
	jne	.LBB86_103
.LBB86_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_102
.Lfunc_end86:
	.size	writeCBPandLumaCoeff.45, .Lfunc_end86-writeCBPandLumaCoeff.45
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.46        # -- Begin function slice_too_big.46
	.p2align	4, 0x90
	.type	slice_too_big.46,@function
slice_too_big.46:                       # @slice_too_big.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1761808950, -56(%rbp)  # imm = 0x69031236
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB87_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB87_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB87_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB87_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB87_5:                               # %if.end
                                        #   in Loop: Header=BB87_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB87_7:                               # %if.end8
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB87_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB87_21
.LBB87_9:                               # %if.end11
                                        #   in Loop: Header=BB87_2 Depth=1
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_2
.LBB87_11:                              # %for.end
	jmp	.LBB87_12
.LBB87_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB87_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB87_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB87_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB87_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB87_21
.LBB87_17:                              # %if.end27
                                        #   in Loop: Header=BB87_14 Depth=1
	jmp	.LBB87_18
.LBB87_18:                              # %for.inc28
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_14
.LBB87_19:                              # %for.end30
	jmp	.LBB87_20
.LBB87_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB87_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1761808950, -56(%rbp)  # imm = 0x69031236
	jne	.LBB87_23
.LBB87_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_22
.Lfunc_end87:
	.size	slice_too_big.46, .Lfunc_end87-slice_too_big.46
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.47 # -- Begin function ChromaResidualCoding.47
	.p2align	4, 0x90
	.type	ChromaResidualCoding.47,@function
ChromaResidualCoding.47:                # @ChromaResidualCoding.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1678773317, -80(%rbp)  # imm = 0x64100C45
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB88_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB88_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB88_3:                               # %lor.end
.LBB88_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB88_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
                                        #       Child Loop BB88_9 Depth 3
                                        #     Child Loop BB88_16 Depth 2
                                        #       Child Loop BB88_18 Depth 3
                                        #     Child Loop BB88_33 Depth 2
                                        #       Child Loop BB88_35 Depth 3
                                        #     Child Loop BB88_43 Depth 2
                                        #       Child Loop BB88_45 Depth 3
                                        #     Child Loop BB88_58 Depth 2
                                        #       Child Loop BB88_60 Depth 3
                                        #     Child Loop BB88_87 Depth 2
                                        #       Child Loop BB88_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB88_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB88_7:                               # %for.cond5
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	$0, -20(%rbp)
.LBB88_9:                               # %for.cond8
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB88_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB88_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_9
.LBB88_12:                              # %for.end
                                        #   in Loop: Header=BB88_7 Depth=2
	jmp	.LBB88_13
.LBB88_13:                              # %for.inc18
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_7
.LBB88_14:                              # %for.end20
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB88_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_16:                              # %for.cond21
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB88_16 Depth=2
	movl	$0, -4(%rbp)
.LBB88_18:                              # %for.cond26
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB88_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB88_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB88_25
.LBB88_21:                              # %if.else
                                        #   in Loop: Header=BB88_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB88_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB88_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB88_24
.LBB88_23:                              # %if.else52
                                        #   in Loop: Header=BB88_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB88_24:                              # %if.end
                                        #   in Loop: Header=BB88_18 Depth=3
	jmp	.LBB88_25
.LBB88_25:                              # %if.end57
                                        #   in Loop: Header=BB88_18 Depth=3
	jmp	.LBB88_26
.LBB88_26:                              # %for.inc58
                                        #   in Loop: Header=BB88_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_18
.LBB88_27:                              # %for.end59
                                        #   in Loop: Header=BB88_16 Depth=2
	jmp	.LBB88_28
.LBB88_28:                              # %for.inc60
                                        #   in Loop: Header=BB88_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_16
.LBB88_29:                              # %for.end62
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_74
.LBB88_30:                              # %if.else63
                                        #   in Loop: Header=BB88_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB88_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB88_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_33:                              # %for.cond69
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB88_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB88_33 Depth=2
	movl	$0, -4(%rbp)
.LBB88_35:                              # %for.cond73
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB88_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB88_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB88_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_35
.LBB88_38:                              # %for.end83
                                        #   in Loop: Header=BB88_33 Depth=2
	jmp	.LBB88_39
.LBB88_39:                              # %for.inc84
                                        #   in Loop: Header=BB88_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_33
.LBB88_40:                              # %for.end86
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_73
.LBB88_41:                              # %if.else87
                                        #   in Loop: Header=BB88_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB88_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_43:                              # %for.cond90
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB88_43 Depth=2
	movl	$0, -4(%rbp)
.LBB88_45:                              # %for.cond95
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB88_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB88_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB88_52
.LBB88_48:                              # %if.else119
                                        #   in Loop: Header=BB88_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB88_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB88_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB88_51
.LBB88_50:                              # %if.else127
                                        #   in Loop: Header=BB88_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB88_51:                              # %if.end132
                                        #   in Loop: Header=BB88_45 Depth=3
	jmp	.LBB88_52
.LBB88_52:                              # %if.end133
                                        #   in Loop: Header=BB88_45 Depth=3
	jmp	.LBB88_53
.LBB88_53:                              # %for.inc134
                                        #   in Loop: Header=BB88_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_45
.LBB88_54:                              # %for.end136
                                        #   in Loop: Header=BB88_43 Depth=2
	jmp	.LBB88_55
.LBB88_55:                              # %for.inc137
                                        #   in Loop: Header=BB88_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_43
.LBB88_56:                              # %for.end139
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_72
.LBB88_57:                              # %if.else140
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_58:                              # %for.cond141
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB88_58 Depth=2
	movl	$0, -4(%rbp)
.LBB88_60:                              # %for.cond146
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB88_67
.LBB88_63:                              # %if.else175
                                        #   in Loop: Header=BB88_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB88_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB88_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB88_66
.LBB88_65:                              # %if.else188
                                        #   in Loop: Header=BB88_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_66:                              # %if.end198
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_67
.LBB88_67:                              # %if.end199
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_68
.LBB88_68:                              # %for.inc200
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_60
.LBB88_69:                              # %for.end202
                                        #   in Loop: Header=BB88_58 Depth=2
	jmp	.LBB88_70
.LBB88_70:                              # %for.inc203
                                        #   in Loop: Header=BB88_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_58
.LBB88_71:                              # %for.end205
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_72
.LBB88_72:                              # %if.end206
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_73
.LBB88_73:                              # %if.end207
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_74
.LBB88_74:                              # %if.end208
                                        #   in Loop: Header=BB88_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB88_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB88_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB88_100
.LBB88_77:                              # %if.else215
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB88_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB88_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB88_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB88_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_84
.LBB88_83:                              # %if.then247
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB88_85
.LBB88_84:                              # %if.else249
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB88_85:                              # %if.end251
                                        #   in Loop: Header=BB88_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB88_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_87:                              # %for.cond255
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB88_87 Depth=2
	movl	$0, -4(%rbp)
.LBB88_89:                              # %for.cond260
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB88_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB88_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB88_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB88_93
.LBB88_92:                              # %if.else277
                                        #   in Loop: Header=BB88_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB88_93:                              # %if.end287
                                        #   in Loop: Header=BB88_89 Depth=3
	jmp	.LBB88_94
.LBB88_94:                              # %for.inc288
                                        #   in Loop: Header=BB88_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_89
.LBB88_95:                              # %for.end290
                                        #   in Loop: Header=BB88_87 Depth=2
	jmp	.LBB88_96
.LBB88_96:                              # %for.inc291
                                        #   in Loop: Header=BB88_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_87
.LBB88_97:                              # %for.end293
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_98
.LBB88_98:                              # %if.end294
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_99
.LBB88_99:                              # %if.end295
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_100
.LBB88_100:                             # %if.end296
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_101
.LBB88_101:                             # %for.inc297
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_5
.LBB88_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB88_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB88_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB88_104 Depth=1
	movl	$0, -4(%rbp)
.LBB88_106:                             # %for.cond312
                                        #   Parent Loop BB88_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB88_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_110
.LBB88_109:                             # %cond.false
                                        #   in Loop: Header=BB88_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB88_110:                             # %cond.end
                                        #   in Loop: Header=BB88_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB88_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB88_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_116
.LBB88_112:                             # %cond.false358
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB88_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_115
.LBB88_114:                             # %cond.false367
                                        #   in Loop: Header=BB88_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB88_115:                             # %cond.end373
                                        #   in Loop: Header=BB88_106 Depth=2
.LBB88_116:                             # %cond.end375
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB88_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_119
.LBB88_118:                             # %cond.false394
                                        #   in Loop: Header=BB88_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB88_119:                             # %cond.end400
                                        #   in Loop: Header=BB88_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB88_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB88_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_125
.LBB88_121:                             # %cond.false406
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB88_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_124
.LBB88_123:                             # %cond.false415
                                        #   in Loop: Header=BB88_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB88_124:                             # %cond.end421
                                        #   in Loop: Header=BB88_106 Depth=2
.LBB88_125:                             # %cond.end423
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB88_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_128
.LBB88_127:                             # %cond.false443
                                        #   in Loop: Header=BB88_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB88_128:                             # %cond.end449
                                        #   in Loop: Header=BB88_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB88_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB88_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_134
.LBB88_130:                             # %cond.false455
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB88_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB88_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_133
.LBB88_132:                             # %cond.false464
                                        #   in Loop: Header=BB88_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB88_133:                             # %cond.end470
                                        #   in Loop: Header=BB88_106 Depth=2
.LBB88_134:                             # %cond.end472
                                        #   in Loop: Header=BB88_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB88_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_106
.LBB88_136:                             # %for.end487
                                        #   in Loop: Header=BB88_104 Depth=1
	jmp	.LBB88_137
.LBB88_137:                             # %for.inc488
                                        #   in Loop: Header=BB88_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_104
.LBB88_138:                             # %for.end490
	jmp	.LBB88_139
.LBB88_139:                             # %if.end491
	cmpl	$1678773317, -80(%rbp)  # imm = 0x64100C45
	jne	.LBB88_141
.LBB88_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_140
.Lfunc_end88:
	.size	ChromaResidualCoding.47, .Lfunc_end88-ChromaResidualCoding.47
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.48   # -- Begin function writeIntra4x4Modes.48
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.48,@function
writeIntra4x4Modes.48:                  # @writeIntra4x4Modes.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1138322951, -72(%rbp)  # imm = 0x43D96E07
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_9 Depth 2
                                        #       Child Loop BB89_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB89_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB89_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB89_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB89_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB89_8
.LBB89_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB89_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB89_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB89_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB89_17
.LBB89_8:                               # %if.then
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -32(%rbp)
.LBB89_9:                               # %for.cond24
                                        #   Parent Loop BB89_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB89_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB89_9 Depth=2
	movl	$0, -12(%rbp)
.LBB89_11:                              # %for.cond27
                                        #   Parent Loop BB89_1 Depth=1
                                        #     Parent Loop BB89_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB89_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB89_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB89_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_11
.LBB89_14:                              # %for.end
                                        #   in Loop: Header=BB89_9 Depth=2
	jmp	.LBB89_15
.LBB89_15:                              # %for.inc42
                                        #   in Loop: Header=BB89_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB89_9
.LBB89_16:                              # %for.end44
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_17
.LBB89_17:                              # %if.end
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_18
.LBB89_18:                              # %for.inc45
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_1
.LBB89_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB89_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB89_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB89_23:                              # %if.end57
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB89_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB89_26
.LBB89_25:                              # %if.else
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB89_26:                              # %if.end65
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB89_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_20
.LBB89_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1138322951, -72(%rbp)  # imm = 0x43D96E07
	jne	.LBB89_30
.LBB89_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_29
.Lfunc_end89:
	.size	writeIntra4x4Modes.48, .Lfunc_end89-writeIntra4x4Modes.48
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.49  # -- Begin function writeReferenceFrame.49
	.p2align	4, 0x90
	.type	writeReferenceFrame.49,@function
writeReferenceFrame.49:                 # @writeReferenceFrame.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1354834016, -76(%rbp)  # imm = 0x50C12060
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB90_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB90_4
.LBB90_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB90_4
.LBB90_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB90_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB90_7
.LBB90_6:                               # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB90_7:                               # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB90_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB90_18
.LBB90_9:                               # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB90_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB90_11:                              # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB90_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB90_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB90_15
.LBB90_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB90_15:                              # %if.end33
	jmp	.LBB90_17
.LBB90_16:                              # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-52(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB90_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB90_18:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$1354834016, -76(%rbp)  # imm = 0x50C12060
	jne	.LBB90_20
.LBB90_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_19
.Lfunc_end90:
	.size	writeReferenceFrame.49, .Lfunc_end90-writeReferenceFrame.49
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.50 # -- Begin function write_one_macroblock.50
	.p2align	4, 0x90
	.type	write_one_macroblock.50,@function
write_one_macroblock.50:                # @write_one_macroblock.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1364515460, -28(%rbp)  # imm = 0x5154DA84
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB91_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB91_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB91_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB91_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB91_6
.LBB91_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB91_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB91_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB91_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB91_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB91_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB91_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB91_22
.LBB91_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB91_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	$0, -24(%rbp)
.LBB91_16:                              # %for.cond24
                                        #   Parent Loop BB91_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB91_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB91_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB91_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB91_16
.LBB91_19:                              # %for.end
                                        #   in Loop: Header=BB91_14 Depth=1
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc35
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end37
	jmp	.LBB91_22
.LBB91_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB91_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB91_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_30
.LBB91_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB91_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB91_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB91_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB91_29:                              # %if.end59
	jmp	.LBB91_30
.LBB91_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB91_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB91_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1364515460, -28(%rbp)  # imm = 0x5154DA84
	jne	.LBB91_34
.LBB91_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_33
.Lfunc_end91:
	.size	write_one_macroblock.50, .Lfunc_end91-write_one_macroblock.50
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.51  # -- Begin function LumaPrediction4x4Bi.51
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.51,@function
LumaPrediction4x4Bi.51:                 # @LumaPrediction4x4Bi.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$451127973, -72(%rbp)   # imm = 0x1AE3AAA5
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB92_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB92_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB92_6
.LBB92_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB92_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB92_5:                               # %land.end
.LBB92_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB92_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB92_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB92_10
.LBB92_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB92_10
.LBB92_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB92_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB92_13
.LBB92_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB92_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB92_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB92_16
.LBB92_15:                              # %if.then
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB92_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB92_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB92_19
.LBB92_18:                              # %if.then39
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB92_19:                              # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB92_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB92_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB92_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_24:                              # %for.cond58
                                        #   Parent Loop BB92_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB92_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB92_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_24
.LBB92_27:                              # %for.end
                                        #   in Loop: Header=BB92_22 Depth=1
	jmp	.LBB92_28
.LBB92_28:                              # %for.inc96
                                        #   in Loop: Header=BB92_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_22
.LBB92_29:                              # %for.end98
	jmp	.LBB92_50
.LBB92_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB92_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_34:                              # %for.cond106
                                        #   Parent Loop BB92_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB92_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB92_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_34
.LBB92_37:                              # %for.end132
                                        #   in Loop: Header=BB92_32 Depth=1
	jmp	.LBB92_38
.LBB92_38:                              # %for.inc133
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_32
.LBB92_39:                              # %for.end135
	jmp	.LBB92_49
.LBB92_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB92_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_43:                              # %for.cond141
                                        #   Parent Loop BB92_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB92_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB92_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_43
.LBB92_46:                              # %for.end167
                                        #   in Loop: Header=BB92_41 Depth=1
	jmp	.LBB92_47
.LBB92_47:                              # %for.inc168
                                        #   in Loop: Header=BB92_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_41
.LBB92_48:                              # %for.end170
	jmp	.LBB92_49
.LBB92_49:                              # %if.end171
	jmp	.LBB92_50
.LBB92_50:                              # %if.end172
	jmp	.LBB92_82
.LBB92_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB92_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_55:                              # %for.cond181
                                        #   Parent Loop BB92_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB92_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB92_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_55
.LBB92_58:                              # %for.end197
                                        #   in Loop: Header=BB92_53 Depth=1
	jmp	.LBB92_59
.LBB92_59:                              # %for.inc198
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_53
.LBB92_60:                              # %for.end200
	jmp	.LBB92_81
.LBB92_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB92_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB92_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_65:                              # %for.cond209
                                        #   Parent Loop BB92_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB92_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB92_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_65
.LBB92_68:                              # %for.end222
                                        #   in Loop: Header=BB92_63 Depth=1
	jmp	.LBB92_69
.LBB92_69:                              # %for.inc223
                                        #   in Loop: Header=BB92_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_63
.LBB92_70:                              # %for.end225
	jmp	.LBB92_80
.LBB92_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB92_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_74:                              # %for.cond231
                                        #   Parent Loop BB92_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB92_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB92_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_74
.LBB92_77:                              # %for.end244
                                        #   in Loop: Header=BB92_72 Depth=1
	jmp	.LBB92_78
.LBB92_78:                              # %for.inc245
                                        #   in Loop: Header=BB92_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_72
.LBB92_79:                              # %for.end247
	jmp	.LBB92_80
.LBB92_80:                              # %if.end248
	jmp	.LBB92_81
.LBB92_81:                              # %if.end249
	jmp	.LBB92_82
.LBB92_82:                              # %if.end250
	cmpl	$451127973, -72(%rbp)   # imm = 0x1AE3AAA5
	jne	.LBB92_84
.LBB92_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_83
.Lfunc_end92:
	.size	LumaPrediction4x4Bi.51, .Lfunc_end92-LumaPrediction4x4Bi.51
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.52   # -- Begin function writeIntra4x4Modes.52
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.52,@function
writeIntra4x4Modes.52:                  # @writeIntra4x4Modes.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$817710782, -84(%rbp)   # imm = 0x30BD46BE
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_9 Depth 2
                                        #       Child Loop BB93_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB93_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB93_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB93_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB93_8
.LBB93_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB93_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB93_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB93_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB93_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB93_17
.LBB93_8:                               # %if.then
                                        #   in Loop: Header=BB93_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -28(%rbp)
.LBB93_9:                               # %for.cond24
                                        #   Parent Loop BB93_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB93_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB93_9 Depth=2
	movl	$0, -12(%rbp)
.LBB93_11:                              # %for.cond27
                                        #   Parent Loop BB93_1 Depth=1
                                        #     Parent Loop BB93_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB93_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB93_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_11
.LBB93_14:                              # %for.end
                                        #   in Loop: Header=BB93_9 Depth=2
	jmp	.LBB93_15
.LBB93_15:                              # %for.inc42
                                        #   in Loop: Header=BB93_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_9
.LBB93_16:                              # %for.end44
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_17
.LBB93_17:                              # %if.end
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_18
.LBB93_18:                              # %for.inc45
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_1
.LBB93_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB93_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB93_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_23:                              # %if.end57
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB93_26
.LBB93_25:                              # %if.else
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB93_26:                              # %if.end65
                                        #   in Loop: Header=BB93_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB93_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_20
.LBB93_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$817710782, -84(%rbp)   # imm = 0x30BD46BE
	jne	.LBB93_30
.LBB93_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_29
.Lfunc_end93:
	.size	writeIntra4x4Modes.52, .Lfunc_end93-writeIntra4x4Modes.52
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.53  # -- Begin function writeMotionInfo2NAL.53
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.53,@function
writeMotionInfo2NAL.53:                 # @writeMotionInfo2NAL.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$471829766, -56(%rbp)   # imm = 0x1C1F8D06
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB94_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB94_3
.LBB94_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB94_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB94_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB94_6
.LBB94_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB94_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB94_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB94_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB94_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB94_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB94_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB94_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB94_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB94_39
.LBB94_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB94_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB94_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB94_15 Depth=1
	movl	$0, -16(%rbp)
.LBB94_17:                              # %for.cond45
                                        #   Parent Loop BB94_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB94_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB94_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB94_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB94_22
.LBB94_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB94_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB94_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB94_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB94_22:                              # %if.end
                                        #   in Loop: Header=BB94_17 Depth=2
	jmp	.LBB94_23
.LBB94_23:                              # %for.inc
                                        #   in Loop: Header=BB94_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_17
.LBB94_24:                              # %for.end
                                        #   in Loop: Header=BB94_15 Depth=1
	jmp	.LBB94_25
.LBB94_25:                              # %for.inc79
                                        #   in Loop: Header=BB94_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_15
.LBB94_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB94_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB94_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB94_27 Depth=1
	movl	$0, -16(%rbp)
.LBB94_29:                              # %for.cond86
                                        #   Parent Loop BB94_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB94_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB94_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB94_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB94_34
.LBB94_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB94_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB94_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB94_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB94_34:                              # %if.end126
                                        #   in Loop: Header=BB94_29 Depth=2
	jmp	.LBB94_35
.LBB94_35:                              # %for.inc127
                                        #   in Loop: Header=BB94_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_29
.LBB94_36:                              # %for.end129
                                        #   in Loop: Header=BB94_27 Depth=1
	jmp	.LBB94_37
.LBB94_37:                              # %for.inc130
                                        #   in Loop: Header=BB94_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_27
.LBB94_38:                              # %for.end132
	jmp	.LBB94_39
.LBB94_39:                              # %if.end133
	jmp	.LBB94_40
.LBB94_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB94_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB94_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB94_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB94_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB94_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB94_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB94_45 Depth=1
	movl	$0, -16(%rbp)
.LBB94_47:                              # %for.cond155
                                        #   Parent Loop BB94_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB94_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB94_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB94_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB94_52
.LBB94_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB94_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB94_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB94_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB94_52:                              # %if.end197
                                        #   in Loop: Header=BB94_47 Depth=2
	jmp	.LBB94_53
.LBB94_53:                              # %for.inc198
                                        #   in Loop: Header=BB94_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_47
.LBB94_54:                              # %for.end200
                                        #   in Loop: Header=BB94_45 Depth=1
	jmp	.LBB94_55
.LBB94_55:                              # %for.inc201
                                        #   in Loop: Header=BB94_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_45
.LBB94_56:                              # %for.end203
	jmp	.LBB94_57
.LBB94_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB94_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB94_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB94_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB94_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB94_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB94_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB94_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB94_63 Depth=1
	movl	$0, -16(%rbp)
.LBB94_65:                              # %for.cond227
                                        #   Parent Loop BB94_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB94_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB94_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB94_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB94_70
.LBB94_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB94_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB94_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB94_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB94_70:                              # %if.end269
                                        #   in Loop: Header=BB94_65 Depth=2
	jmp	.LBB94_71
.LBB94_71:                              # %for.inc270
                                        #   in Loop: Header=BB94_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_65
.LBB94_72:                              # %for.end272
                                        #   in Loop: Header=BB94_63 Depth=1
	jmp	.LBB94_73
.LBB94_73:                              # %for.inc273
                                        #   in Loop: Header=BB94_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_63
.LBB94_74:                              # %for.end275
	jmp	.LBB94_75
.LBB94_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$471829766, -56(%rbp)   # imm = 0x1C1F8D06
	jne	.LBB94_77
.LBB94_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_76
.Lfunc_end94:
	.size	writeMotionInfo2NAL.53, .Lfunc_end94-writeMotionInfo2NAL.53
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.54        # -- Begin function slice_too_big.54
	.p2align	4, 0x90
	.type	slice_too_big.54,@function
slice_too_big.54:                       # @slice_too_big.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2006666004, -52(%rbp)  # imm = 0x779B4B14
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB95_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB95_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB95_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB95_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB95_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_5:                               # %if.end
                                        #   in Loop: Header=BB95_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_7:                               # %if.end8
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB95_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB95_21
.LBB95_9:                               # %if.end11
                                        #   in Loop: Header=BB95_2 Depth=1
	jmp	.LBB95_10
.LBB95_10:                              # %for.inc
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_2
.LBB95_11:                              # %for.end
	jmp	.LBB95_12
.LBB95_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB95_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB95_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB95_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB95_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB95_21
.LBB95_17:                              # %if.end27
                                        #   in Loop: Header=BB95_14 Depth=1
	jmp	.LBB95_18
.LBB95_18:                              # %for.inc28
                                        #   in Loop: Header=BB95_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_14
.LBB95_19:                              # %for.end30
	jmp	.LBB95_20
.LBB95_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB95_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$2006666004, -52(%rbp)  # imm = 0x779B4B14
	jne	.LBB95_23
.LBB95_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_22
.Lfunc_end95:
	.size	slice_too_big.54, .Lfunc_end95-slice_too_big.54
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.55 # -- Begin function writeCBPandLumaCoeff.55
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.55,@function
writeCBPandLumaCoeff.55:                # @writeCBPandLumaCoeff.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$228879050, -108(%rbp)  # imm = 0xDA46ACA
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB96_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB96_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB96_7
.LBB96_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB96_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB96_10
.LBB96_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB96_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB96_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB96_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB96_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB96_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB96_18
.LBB96_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB96_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB96_18
.LBB96_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB96_22
.LBB96_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB96_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB96_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB96_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB96_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB96_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB96_26
.LBB96_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB96_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB96_29
.LBB96_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB96_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB96_30:                              # %if.end93
	jmp	.LBB96_31
.LBB96_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB96_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB96_42
.LBB96_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB96_36
.LBB96_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB96_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB96_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB96_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB96_41
.LBB96_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB96_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB96_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB96_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	$0, -20(%rbp)
.LBB96_45:                              # %for.cond141
                                        #   Parent Loop BB96_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB96_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB96_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end
                                        #   in Loop: Header=BB96_43 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc152
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB96_43
.LBB96_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB96_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB96_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB96_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB96_55:                              # %if.end169
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_56
.LBB96_56:                              # %for.inc170
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_52
.LBB96_57:                              # %for.end172
	jmp	.LBB96_101
.LBB96_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB96_70
.LBB96_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB96_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB96_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB96_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB96_63:                              # %land.end184
                                        #   in Loop: Header=BB96_61 Depth=1
	testb	$1, %al
	jne	.LBB96_64
	jmp	.LBB96_69
.LBB96_64:                              # %for.body186
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB96_67
.LBB96_66:                              # %if.else196
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB96_67:                              # %if.end198
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_61
.LBB96_69:                              # %for.end218
	jmp	.LBB96_70
.LBB96_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB96_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB96_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_74 Depth 2
                                        #       Child Loop BB96_76 Depth 3
                                        #         Child Loop BB96_78 Depth 4
                                        #           Child Loop BB96_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB96_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB96_72 Depth=1
	movl	$0, -56(%rbp)
.LBB96_74:                              # %for.cond226
                                        #   Parent Loop BB96_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_76 Depth 3
                                        #         Child Loop BB96_78 Depth 4
                                        #           Child Loop BB96_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB96_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB96_76:                              # %for.cond229
                                        #   Parent Loop BB96_72 Depth=1
                                        #     Parent Loop BB96_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_78 Depth 4
                                        #           Child Loop BB96_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB96_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB96_78:                              # %for.cond233
                                        #   Parent Loop BB96_72 Depth=1
                                        #     Parent Loop BB96_74 Depth=2
                                        #       Parent Loop BB96_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB96_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB96_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB96_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB96_91
.LBB96_81:                              # %if.else247
                                        #   in Loop: Header=BB96_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB96_82:                              # %for.cond259
                                        #   Parent Loop BB96_72 Depth=1
                                        #     Parent Loop BB96_74 Depth=2
                                        #       Parent Loop BB96_76 Depth=3
                                        #         Parent Loop BB96_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB96_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB96_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB96_84:                              # %land.end263
                                        #   in Loop: Header=BB96_82 Depth=5
	testb	$1, %al
	jne	.LBB96_85
	jmp	.LBB96_90
.LBB96_85:                              # %for.body265
                                        #   in Loop: Header=BB96_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB96_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB96_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB96_88
.LBB96_87:                              # %if.else276
                                        #   in Loop: Header=BB96_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB96_88:                              # %if.end278
                                        #   in Loop: Header=BB96_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB96_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_82
.LBB96_90:                              # %for.end300
                                        #   in Loop: Header=BB96_78 Depth=4
	jmp	.LBB96_91
.LBB96_91:                              # %if.end301
                                        #   in Loop: Header=BB96_78 Depth=4
	jmp	.LBB96_92
.LBB96_92:                              # %for.inc302
                                        #   in Loop: Header=BB96_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_78
.LBB96_93:                              # %for.end304
                                        #   in Loop: Header=BB96_76 Depth=3
	jmp	.LBB96_94
.LBB96_94:                              # %for.inc305
                                        #   in Loop: Header=BB96_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB96_76
.LBB96_95:                              # %for.end307
                                        #   in Loop: Header=BB96_74 Depth=2
	jmp	.LBB96_96
.LBB96_96:                              # %for.inc308
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB96_74
.LBB96_97:                              # %for.end310
                                        #   in Loop: Header=BB96_72 Depth=1
	jmp	.LBB96_98
.LBB96_98:                              # %for.inc311
                                        #   in Loop: Header=BB96_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB96_72
.LBB96_99:                              # %for.end313
	jmp	.LBB96_100
.LBB96_100:                             # %if.end314
	jmp	.LBB96_101
.LBB96_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$228879050, -108(%rbp)  # imm = 0xDA46ACA
	jne	.LBB96_103
.LBB96_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_102
.Lfunc_end96:
	.size	writeCBPandLumaCoeff.55, .Lfunc_end96-writeCBPandLumaCoeff.55
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.56 # -- Begin function writeLumaCoeff4x4_CABAC.56
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.56,@function
writeLumaCoeff4x4_CABAC.56:             # @writeLumaCoeff4x4_CABAC.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$828056902, -52(%rbp)   # imm = 0x315B2546
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB97_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB97_3
.LBB97_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB97_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB97_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB97_6
.LBB97_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB97_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB97_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB97_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB97_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB97_9:                               # %land.end
                                        #   in Loop: Header=BB97_7 Depth=1
	testb	$1, %al
	jne	.LBB97_10
	jmp	.LBB97_15
.LBB97_10:                              # %for.body
                                        #   in Loop: Header=BB97_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB97_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB97_13
.LBB97_12:                              # %cond.false40
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB97_13:                              # %cond.end43
                                        #   in Loop: Header=BB97_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_7
.LBB97_15:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$828056902, -52(%rbp)   # imm = 0x315B2546
	jne	.LBB97_17
.LBB97_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_16
.Lfunc_end97:
	.size	writeLumaCoeff4x4_CABAC.56, .Lfunc_end97-writeLumaCoeff4x4_CABAC.56
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.57 # -- Begin function IntraChromaPrediction.57
	.p2align	4, 0x90
	.type	IntraChromaPrediction.57,@function
IntraChromaPrediction.57:               # @IntraChromaPrediction.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2093296566, -164(%rbp) # imm = 0x7CC52BB6
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB98_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB98_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_8
.LBB98_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB98_8
.LBB98_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB98_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB98_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB98_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB98_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_13
.LBB98_12:                              # %cond.false32
                                        #   in Loop: Header=BB98_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_13
.LBB98_13:                              # %cond.end33
                                        #   in Loop: Header=BB98_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB98_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_9
.LBB98_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB98_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB98_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB98_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_20
.LBB98_19:                              # %cond.false57
                                        #   in Loop: Header=BB98_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_20
.LBB98_20:                              # %cond.end58
                                        #   in Loop: Header=BB98_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_16
.LBB98_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB98_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_25
.LBB98_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB98_25
.LBB98_25:                              # %cond.end75
	movl	%eax, -96(%rbp)
.LBB98_26:                              # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB98_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_28:                              # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB98_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB98_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB98_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB98_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB98_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_37 Depth 2
                                        #       Child Loop BB98_39 Depth 3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
                                        #     Child Loop BB98_138 Depth 2
                                        #     Child Loop BB98_142 Depth 2
                                        #       Child Loop BB98_144 Depth 3
                                        #     Child Loop BB98_153 Depth 2
                                        #     Child Loop BB98_157 Depth 2
                                        #       Child Loop BB98_159 Depth 3
                                        #     Child Loop BB98_170 Depth 2
                                        #     Child Loop BB98_174 Depth 2
                                        #     Child Loop BB98_178 Depth 2
                                        #       Child Loop BB98_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB98_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB98_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB98_37:                              # %for.cond95
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_39 Depth 3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB98_37 Depth=2
	movl	$0, -84(%rbp)
.LBB98_39:                              # %for.cond99
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB98_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB98_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB98_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB98_39 Depth=3
	movq	.LJTI98_0(,%rax,8), %rax
	jmpq	*%rax
.LBB98_42:                              # %sw.bb
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_44:                              # %for.cond124
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB98_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB98_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_44
.LBB98_47:                              # %for.end138
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_48
.LBB98_48:                              # %if.end139
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_50:                              # %for.cond143
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB98_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB98_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_50
.LBB98_53:                              # %for.end162
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_54
.LBB98_54:                              # %if.end163
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_63
.LBB98_57:                              # %if.else
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_62
.LBB98_59:                              # %if.else174
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_61:                              # %if.end180
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_62
.LBB98_62:                              # %if.end181
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_63
.LBB98_63:                              # %if.end182
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_64:                              # %sw.bb183
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_66:                              # %for.cond186
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB98_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB98_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_66
.LBB98_69:                              # %for.end202
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_77
.LBB98_70:                              # %if.else203
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_72:                              # %for.cond207
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB98_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB98_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_72
.LBB98_75:                              # %for.end226
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_76
.LBB98_76:                              # %if.end227
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_77
.LBB98_77:                              # %if.end228
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_82
.LBB98_79:                              # %if.else233
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_81:                              # %if.end239
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_82
.LBB98_82:                              # %if.end240
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_83:                              # %sw.bb241
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_85:                              # %for.cond245
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB98_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB98_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_85
.LBB98_88:                              # %for.end264
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_96
.LBB98_89:                              # %if.else265
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_91:                              # %for.cond268
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB98_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB98_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_91
.LBB98_94:                              # %for.end284
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_95
.LBB98_95:                              # %if.end285
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_96
.LBB98_96:                              # %if.end286
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_101
.LBB98_98:                              # %if.else292
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_100:                             # %if.end297
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_101
.LBB98_101:                             # %if.end298
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_102:                             # %sw.bb299
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_104:                             # %for.cond302
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB98_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB98_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_104
.LBB98_107:                             # %for.end318
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_108
.LBB98_108:                             # %if.end319
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_110:                             # %for.cond323
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB98_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB98_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_110
.LBB98_113:                             # %for.end342
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_114
.LBB98_114:                             # %if.end343
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_123
.LBB98_117:                             # %if.else352
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_122
.LBB98_119:                             # %if.else357
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_121:                             # %if.end363
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_122
.LBB98_122:                             # %if.end364
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_123
.LBB98_123:                             # %if.end365
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_124:                             # %sw.epilog
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_125:                             # %for.cond366
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB98_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_127:                             # %for.cond371
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        #         Parent Loop BB98_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB98_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB98_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_127
.LBB98_130:                             # %for.end386
                                        #   in Loop: Header=BB98_125 Depth=4
	jmp	.LBB98_131
.LBB98_131:                             # %for.inc387
                                        #   in Loop: Header=BB98_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_125
.LBB98_132:                             # %for.end389
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_133
.LBB98_133:                             # %for.inc390
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB98_39
.LBB98_134:                             # %for.end392
                                        #   in Loop: Header=BB98_37 Depth=2
	jmp	.LBB98_135
.LBB98_135:                             # %for.inc393
                                        #   in Loop: Header=BB98_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB98_37
.LBB98_136:                             # %for.end395
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_138:                             # %for.cond398
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB98_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB98_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_138
.LBB98_141:                             # %for.end414
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_142:                             # %for.cond415
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB98_142 Depth=2
	movl	$0, -8(%rbp)
.LBB98_144:                             # %for.cond419
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB98_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB98_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_144
.LBB98_147:                             # %for.end436
                                        #   in Loop: Header=BB98_142 Depth=2
	jmp	.LBB98_148
.LBB98_148:                             # %for.inc437
                                        #   in Loop: Header=BB98_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_142
.LBB98_149:                             # %for.end439
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_150
.LBB98_150:                             # %if.end440
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_153:                             # %for.cond447
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB98_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB98_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_153
.LBB98_156:                             # %for.end468
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_157:                             # %for.cond469
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB98_157 Depth=2
	movl	$0, -8(%rbp)
.LBB98_159:                             # %for.cond473
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB98_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_159
.LBB98_162:                             # %for.end490
                                        #   in Loop: Header=BB98_157 Depth=2
	jmp	.LBB98_163
.LBB98_163:                             # %for.inc491
                                        #   in Loop: Header=BB98_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_157
.LBB98_164:                             # %for.end493
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_165
.LBB98_165:                             # %if.end494
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB98_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB98_170:                             # %for.cond519
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB98_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB98_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB98_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_170
.LBB98_173:                             # %for.end540
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB98_174:                             # %for.cond556
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB98_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB98_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB98_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_174
.LBB98_177:                             # %for.end577
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB98_178:                             # %for.cond606
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB98_178 Depth=2
	movl	$0, -4(%rbp)
.LBB98_180:                             # %for.cond610
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB98_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB98_184
.LBB98_183:                             # %cond.false630
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB98_184:                             # %cond.end643
                                        #   in Loop: Header=BB98_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB98_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB98_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_190
.LBB98_186:                             # %cond.false648
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB98_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB98_189
.LBB98_188:                             # %cond.false666
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB98_189:                             # %cond.end679
                                        #   in Loop: Header=BB98_180 Depth=3
.LBB98_190:                             # %cond.end681
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_180
.LBB98_192:                             # %for.end694
                                        #   in Loop: Header=BB98_178 Depth=2
	jmp	.LBB98_193
.LBB98_193:                             # %for.inc695
                                        #   in Loop: Header=BB98_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_178
.LBB98_194:                             # %for.end697
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_195
.LBB98_195:                             # %if.end698
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_196
.LBB98_196:                             # %for.inc699
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_35
.LBB98_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB98_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_199
.LBB98_202:                             # %for.end712
	movl	$0, -40(%rbp)
.LBB98_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_219 Depth 2
                                        #       Child Loop BB98_221 Depth 3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB98_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB98_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB98_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB98_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_207:                             # %if.end723
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB98_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_217
.LBB98_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB98_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_217
.LBB98_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB98_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB98_218
.LBB98_217:                             # %if.then749
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_218:                             # %if.end750
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB98_219:                             # %for.cond751
                                        #   Parent Loop BB98_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_221 Depth 3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB98_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB98_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB98_221:                             # %for.cond757
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB98_221 Depth=3
	movl	$0, -48(%rbp)
.LBB98_223:                             # %for.cond761
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB98_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_225:                             # %for.cond765
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        #         Parent Loop BB98_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB98_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_227:                             # %for.cond770
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        #         Parent Loop BB98_223 Depth=4
                                        #           Parent Loop BB98_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB98_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB98_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB98_227
.LBB98_230:                             # %for.end803
                                        #   in Loop: Header=BB98_225 Depth=5
	jmp	.LBB98_231
.LBB98_231:                             # %for.inc804
                                        #   in Loop: Header=BB98_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_225
.LBB98_232:                             # %for.end806
                                        #   in Loop: Header=BB98_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB98_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB98_223
.LBB98_234:                             # %for.end810
                                        #   in Loop: Header=BB98_221 Depth=3
	jmp	.LBB98_235
.LBB98_235:                             # %for.inc811
                                        #   in Loop: Header=BB98_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB98_221
.LBB98_236:                             # %for.end813
                                        #   in Loop: Header=BB98_219 Depth=2
	jmp	.LBB98_237
.LBB98_237:                             # %for.inc814
                                        #   in Loop: Header=BB98_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_219
.LBB98_238:                             # %for.end816
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB98_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB98_240:                             # %if.end820
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_241:                             # %for.inc821
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB98_203
.LBB98_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB98_243:                             # %if.end824
	cmpl	$2093296566, -164(%rbp) # imm = 0x7CC52BB6
	jne	.LBB98_245
.LBB98_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_244
.Lfunc_end98:
	.size	IntraChromaPrediction.57, .Lfunc_end98-IntraChromaPrediction.57
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI98_0:
	.quad	.LBB98_42
	.quad	.LBB98_64
	.quad	.LBB98_83
	.quad	.LBB98_102
                                        # -- End function
	.text
	.globl	write_terminating_bit.58 # -- Begin function write_terminating_bit.58
	.p2align	4, 0x90
	.type	write_terminating_bit.58,@function
write_terminating_bit.58:               # @write_terminating_bit.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2033050611, -8(%rbp)   # imm = 0x792DE3F3
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$2033050611, -8(%rbp)   # imm = 0x792DE3F3
	jne	.LBB99_2
.LBB99_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_1
.Lfunc_end99:
	.size	write_terminating_bit.58, .Lfunc_end99-write_terminating_bit.58
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.59 # -- Begin function IntraChromaPrediction4x4.59
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.59,@function
IntraChromaPrediction4x4.59:            # @IntraChromaPrediction4x4.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1842507705, -24(%rbp)  # imm = 0x6DD26FB9
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_3:                              # %for.cond1
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_3
.LBB100_6:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc17
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_8:                              # %for.end19
	cmpl	$1842507705, -24(%rbp)  # imm = 0x6DD26FB9
	jne	.LBB100_10
.LBB100_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_9
.Lfunc_end100:
	.size	IntraChromaPrediction4x4.59, .Lfunc_end100-IntraChromaPrediction4x4.59
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.60              # -- Begin function ZeroRef.60
	.p2align	4, 0x90
	.type	ZeroRef.60,@function
ZeroRef.60:                             # @ZeroRef.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$537265297, -24(%rbp)   # imm = 0x20060491
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB101_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$0, -16(%rbp)
.LBB101_3:                              # %for.cond1
                                        #   Parent Loop BB101_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB101_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB101_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB101_11
.LBB101_6:                              # %if.end
                                        #   in Loop: Header=BB101_3 Depth=2
	jmp	.LBB101_7
.LBB101_7:                              # %for.inc
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_3
.LBB101_8:                              # %for.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_9
.LBB101_9:                              # %for.inc10
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_1
.LBB101_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB101_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$537265297, -24(%rbp)   # imm = 0x20060491
	jne	.LBB101_13
.LBB101_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_12
.Lfunc_end101:
	.size	ZeroRef.60, .Lfunc_end101-ZeroRef.60
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.61 # -- Begin function writeCBPandLumaCoeff.61
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.61,@function
writeCBPandLumaCoeff.61:                # @writeCBPandLumaCoeff.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1396360557, -104(%rbp) # imm = 0x533AC56D
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB102_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_7
.LBB102_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB102_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB102_10
.LBB102_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB102_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB102_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB102_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB102_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB102_18
.LBB102_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB102_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB102_18
.LBB102_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB102_22
.LBB102_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB102_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB102_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB102_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB102_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB102_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_26
.LBB102_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB102_29
.LBB102_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB102_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_30:                             # %if.end93
	jmp	.LBB102_31
.LBB102_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB102_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB102_42
.LBB102_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_36
.LBB102_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB102_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB102_41
.LBB102_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB102_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB102_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	$0, -20(%rbp)
.LBB102_45:                             # %for.cond141
                                        #   Parent Loop BB102_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB102_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB102_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB102_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_45
.LBB102_48:                             # %for.end
                                        #   in Loop: Header=BB102_43 Depth=1
	jmp	.LBB102_49
.LBB102_49:                             # %for.inc152
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_43
.LBB102_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB102_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB102_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB102_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_55:                             # %if.end169
                                        #   in Loop: Header=BB102_52 Depth=1
	jmp	.LBB102_56
.LBB102_56:                             # %for.inc170
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_52
.LBB102_57:                             # %for.end172
	jmp	.LBB102_101
.LBB102_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_70
.LBB102_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB102_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB102_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB102_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB102_63:                             # %land.end184
                                        #   in Loop: Header=BB102_61 Depth=1
	testb	$1, %al
	jne	.LBB102_64
	jmp	.LBB102_69
.LBB102_64:                             # %for.body186
                                        #   in Loop: Header=BB102_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB102_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_67
.LBB102_66:                             # %if.else196
                                        #   in Loop: Header=BB102_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_67:                             # %if.end198
                                        #   in Loop: Header=BB102_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB102_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_61
.LBB102_69:                             # %for.end218
	jmp	.LBB102_70
.LBB102_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB102_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB102_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_74 Depth 2
                                        #       Child Loop BB102_76 Depth 3
                                        #         Child Loop BB102_78 Depth 4
                                        #           Child Loop BB102_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB102_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB102_72 Depth=1
	movl	$0, -52(%rbp)
.LBB102_74:                             # %for.cond226
                                        #   Parent Loop BB102_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_76 Depth 3
                                        #         Child Loop BB102_78 Depth 4
                                        #           Child Loop BB102_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB102_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB102_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB102_76:                             # %for.cond229
                                        #   Parent Loop BB102_72 Depth=1
                                        #     Parent Loop BB102_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_78 Depth 4
                                        #           Child Loop BB102_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB102_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_78:                             # %for.cond233
                                        #   Parent Loop BB102_72 Depth=1
                                        #     Parent Loop BB102_74 Depth=2
                                        #       Parent Loop BB102_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB102_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB102_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_91
.LBB102_81:                             # %if.else247
                                        #   in Loop: Header=BB102_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB102_82:                             # %for.cond259
                                        #   Parent Loop BB102_72 Depth=1
                                        #     Parent Loop BB102_74 Depth=2
                                        #       Parent Loop BB102_76 Depth=3
                                        #         Parent Loop BB102_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB102_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB102_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB102_84:                             # %land.end263
                                        #   in Loop: Header=BB102_82 Depth=5
	testb	$1, %al
	jne	.LBB102_85
	jmp	.LBB102_90
.LBB102_85:                             # %for.body265
                                        #   in Loop: Header=BB102_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB102_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_88
.LBB102_87:                             # %if.else276
                                        #   in Loop: Header=BB102_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_88:                             # %if.end278
                                        #   in Loop: Header=BB102_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB102_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_82
.LBB102_90:                             # %for.end300
                                        #   in Loop: Header=BB102_78 Depth=4
	jmp	.LBB102_91
.LBB102_91:                             # %if.end301
                                        #   in Loop: Header=BB102_78 Depth=4
	jmp	.LBB102_92
.LBB102_92:                             # %for.inc302
                                        #   in Loop: Header=BB102_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_78
.LBB102_93:                             # %for.end304
                                        #   in Loop: Header=BB102_76 Depth=3
	jmp	.LBB102_94
.LBB102_94:                             # %for.inc305
                                        #   in Loop: Header=BB102_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_76
.LBB102_95:                             # %for.end307
                                        #   in Loop: Header=BB102_74 Depth=2
	jmp	.LBB102_96
.LBB102_96:                             # %for.inc308
                                        #   in Loop: Header=BB102_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB102_74
.LBB102_97:                             # %for.end310
                                        #   in Loop: Header=BB102_72 Depth=1
	jmp	.LBB102_98
.LBB102_98:                             # %for.inc311
                                        #   in Loop: Header=BB102_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_72
.LBB102_99:                             # %for.end313
	jmp	.LBB102_100
.LBB102_100:                            # %if.end314
	jmp	.LBB102_101
.LBB102_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1396360557, -104(%rbp) # imm = 0x533AC56D
	jne	.LBB102_103
.LBB102_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_102
.Lfunc_end102:
	.size	writeCBPandLumaCoeff.61, .Lfunc_end102-writeCBPandLumaCoeff.61
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.62         # -- Begin function B8Mode2Value.62
	.p2align	4, 0x90
	.type	B8Mode2Value.62,@function
B8Mode2Value.62:                        # @B8Mode2Value.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1753798731, -24(%rbp)  # imm = 0x6888D84B
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB103_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_3
.LBB103_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB103_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1753798731, -24(%rbp)  # imm = 0x6888D84B
	jne	.LBB103_5
.LBB103_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_4
.Lfunc_end103:
	.size	B8Mode2Value.62, .Lfunc_end103-B8Mode2Value.62
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.63  # -- Begin function writeReferenceFrame.63
	.p2align	4, 0x90
	.type	writeReferenceFrame.63,@function
writeReferenceFrame.63:                 # @writeReferenceFrame.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$816464223, -76(%rbp)   # imm = 0x30AA415F
	movl	%edi, -72(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB104_4
.LBB104_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB104_4
.LBB104_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB104_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB104_7
.LBB104_6:                              # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB104_7:                              # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB104_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB104_18
.LBB104_9:                              # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB104_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB104_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB104_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB104_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB104_15
.LBB104_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB104_15:                             # %if.end33
	jmp	.LBB104_17
.LBB104_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB104_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB104_18:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$816464223, -76(%rbp)   # imm = 0x30AA415F
	jne	.LBB104_20
.LBB104_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_19
.Lfunc_end104:
	.size	writeReferenceFrame.63, .Lfunc_end104-writeReferenceFrame.63
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.64          # -- Begin function predict_nnz.64
	.p2align	4, 0x90
	.type	predict_nnz.64,@function
predict_nnz.64:                         # @predict_nnz.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$357731401, -56(%rbp)   # imm = 0x15528C49
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB105_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB105_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB105_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB105_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB105_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB105_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB105_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB105_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB105_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB105_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB105_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB105_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB105_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$357731401, -56(%rbp)   # imm = 0x15528C49
	jne	.LBB105_16
.LBB105_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_15
.Lfunc_end105:
	.size	predict_nnz.64, .Lfunc_end105-predict_nnz.64
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.65    # -- Begin function LumaPrediction4x4.65
	.p2align	4, 0x90
	.type	LumaPrediction4x4.65,@function
LumaPrediction4x4.65:                   # @LumaPrediction4x4.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1578274213, -104(%rbp) # imm = 0x5E128DA5
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB106_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB106_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB106_6
.LBB106_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB106_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB106_5:                              # %land.end
.LBB106_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB106_10
.LBB106_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB106_10
.LBB106_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB106_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB106_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB106_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB106_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB106_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB106_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB106_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB106_19
.LBB106_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB106_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB106_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB106_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB106_23
.LBB106_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB106_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB106_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB106_26
.LBB106_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB106_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB106_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB106_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB106_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_31:                             # %for.cond85
                                        #   Parent Loop BB106_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB106_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB106_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_31
.LBB106_34:                             # %for.end
                                        #   in Loop: Header=BB106_29 Depth=1
	jmp	.LBB106_35
.LBB106_35:                             # %for.inc125
                                        #   in Loop: Header=BB106_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_29
.LBB106_36:                             # %for.end127
	jmp	.LBB106_57
.LBB106_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB106_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB106_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_41:                             # %for.cond135
                                        #   Parent Loop BB106_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB106_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB106_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_41
.LBB106_44:                             # %for.end161
                                        #   in Loop: Header=BB106_39 Depth=1
	jmp	.LBB106_45
.LBB106_45:                             # %for.inc162
                                        #   in Loop: Header=BB106_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_39
.LBB106_46:                             # %for.end164
	jmp	.LBB106_56
.LBB106_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB106_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_50:                             # %for.cond170
                                        #   Parent Loop BB106_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB106_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB106_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_50
.LBB106_53:                             # %for.end196
                                        #   in Loop: Header=BB106_48 Depth=1
	jmp	.LBB106_54
.LBB106_54:                             # %for.inc197
                                        #   in Loop: Header=BB106_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_48
.LBB106_55:                             # %for.end199
	jmp	.LBB106_56
.LBB106_56:                             # %if.end200
	jmp	.LBB106_57
.LBB106_57:                             # %if.end201
	jmp	.LBB106_89
.LBB106_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB106_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB106_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_62:                             # %for.cond210
                                        #   Parent Loop BB106_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB106_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB106_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_62
.LBB106_65:                             # %for.end226
                                        #   in Loop: Header=BB106_60 Depth=1
	jmp	.LBB106_66
.LBB106_66:                             # %for.inc227
                                        #   in Loop: Header=BB106_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_60
.LBB106_67:                             # %for.end229
	jmp	.LBB106_88
.LBB106_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB106_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB106_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_72:                             # %for.cond238
                                        #   Parent Loop BB106_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB106_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB106_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_72
.LBB106_75:                             # %for.end251
                                        #   in Loop: Header=BB106_70 Depth=1
	jmp	.LBB106_76
.LBB106_76:                             # %for.inc252
                                        #   in Loop: Header=BB106_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_70
.LBB106_77:                             # %for.end254
	jmp	.LBB106_87
.LBB106_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB106_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB106_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_81:                             # %for.cond260
                                        #   Parent Loop BB106_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB106_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB106_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_81
.LBB106_84:                             # %for.end273
                                        #   in Loop: Header=BB106_79 Depth=1
	jmp	.LBB106_85
.LBB106_85:                             # %for.inc274
                                        #   in Loop: Header=BB106_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_79
.LBB106_86:                             # %for.end276
	jmp	.LBB106_87
.LBB106_87:                             # %if.end277
	jmp	.LBB106_88
.LBB106_88:                             # %if.end278
	jmp	.LBB106_89
.LBB106_89:                             # %if.end279
	cmpl	$1578274213, -104(%rbp) # imm = 0x5E128DA5
	jne	.LBB106_91
.LBB106_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_90
.Lfunc_end106:
	.size	LumaPrediction4x4.65, .Lfunc_end106-LumaPrediction4x4.65
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.66    # -- Begin function TransformDecision.66
	.p2align	4, 0x90
	.type	TransformDecision.66,@function
TransformDecision.66:                   # @TransformDecision.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$657226308, -88(%rbp)   # imm = 0x272C7A44
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB107_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB107_3
.LBB107_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB107_3:                              # %if.end
	jmp	.LBB107_4
.LBB107_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_6 Depth 2
                                        #       Child Loop BB107_8 Depth 3
                                        #         Child Loop BB107_10 Depth 4
                                        #           Child Loop BB107_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB107_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB107_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_6:                              # %for.cond3
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_8 Depth 3
                                        #         Child Loop BB107_10 Depth 4
                                        #           Child Loop BB107_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB107_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB107_8:                              # %for.cond8
                                        #   Parent Loop BB107_4 Depth=1
                                        #     Parent Loop BB107_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_10 Depth 4
                                        #           Child Loop BB107_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB107_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB107_10:                             # %for.cond13
                                        #   Parent Loop BB107_4 Depth=1
                                        #     Parent Loop BB107_6 Depth=2
                                        #       Parent Loop BB107_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB107_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB107_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB107_10 Depth=4
	movl	$0, -28(%rbp)
.LBB107_12:                             # %for.cond17
                                        #   Parent Loop BB107_4 Depth=1
                                        #     Parent Loop BB107_6 Depth=2
                                        #       Parent Loop BB107_8 Depth=3
                                        #         Parent Loop BB107_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB107_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB107_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB107_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB107_12
.LBB107_15:                             # %for.end
                                        #   in Loop: Header=BB107_10 Depth=4
	jmp	.LBB107_16
.LBB107_16:                             # %for.inc38
                                        #   in Loop: Header=BB107_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_10
.LBB107_17:                             # %for.end40
                                        #   in Loop: Header=BB107_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB107_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_8
.LBB107_19:                             # %for.end44
                                        #   in Loop: Header=BB107_6 Depth=2
	jmp	.LBB107_20
.LBB107_20:                             # %for.inc45
                                        #   in Loop: Header=BB107_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_6
.LBB107_21:                             # %for.end47
                                        #   in Loop: Header=BB107_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB107_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_4
.LBB107_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB107_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB107_28
.LBB107_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB107_28
.LBB107_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB107_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$657226308, -88(%rbp)   # imm = 0x272C7A44
	jne	.LBB107_30
.LBB107_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_29
.Lfunc_end107:
	.size	TransformDecision.66, .Lfunc_end107-TransformDecision.66
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.67 # -- Begin function OneComponentChromaPrediction4x4.67
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.67,@function
OneComponentChromaPrediction4x4.67:     # @OneComponentChromaPrediction4x4.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1783756243, -116(%rbp) # imm = 0x6A51F5D3
	movq	%rdi, -128(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -56(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB108_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB108_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB108_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB108_6
.LBB108_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB108_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_8
.LBB108_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB108_8:                              # %if.end13
	movl	-84(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB108_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB108_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB108_9 Depth=1
	movl	$0, -28(%rbp)
.LBB108_11:                             # %for.cond20
                                        #   Parent Loop BB108_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB108_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB108_15
.LBB108_14:                             # %cond.false
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB108_15:                             # %cond.end
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_21
.LBB108_17:                             # %cond.false65
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB108_20
.LBB108_19:                             # %cond.false74
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB108_20:                             # %cond.end76
                                        #   in Loop: Header=BB108_11 Depth=2
.LBB108_21:                             # %cond.end78
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB108_24
.LBB108_23:                             # %cond.false84
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB108_24:                             # %cond.end86
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_30
.LBB108_26:                             # %cond.false91
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB108_29
.LBB108_28:                             # %cond.false96
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB108_29:                             # %cond.end98
                                        #   in Loop: Header=BB108_11 Depth=2
.LBB108_30:                             # %cond.end100
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB108_33
.LBB108_32:                             # %cond.false111
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB108_33:                             # %cond.end114
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_39
.LBB108_35:                             # %cond.false119
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB108_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB108_38
.LBB108_37:                             # %cond.false129
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB108_38:                             # %cond.end132
                                        #   in Loop: Header=BB108_11 Depth=2
.LBB108_39:                             # %cond.end134
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB108_42
.LBB108_41:                             # %cond.false141
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB108_42:                             # %cond.end144
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB108_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_48
.LBB108_44:                             # %cond.false149
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB108_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB108_47
.LBB108_46:                             # %cond.false155
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB108_47:                             # %cond.end158
                                        #   in Loop: Header=BB108_11 Depth=2
.LBB108_48:                             # %cond.end160
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	imull	-88(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-88(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-64(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-60(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB108_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB108_11
.LBB108_50:                             # %for.end
                                        #   in Loop: Header=BB108_9 Depth=1
	jmp	.LBB108_51
.LBB108_51:                             # %for.inc198
                                        #   in Loop: Header=BB108_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB108_9
.LBB108_52:                             # %for.end200
	cmpl	$1783756243, -116(%rbp) # imm = 0x6A51F5D3
	jne	.LBB108_54
.LBB108_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_53
.Lfunc_end108:
	.size	OneComponentChromaPrediction4x4.67, .Lfunc_end108-OneComponentChromaPrediction4x4.67
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.68          # -- Begin function predict_nnz.68
	.p2align	4, 0x90
	.type	predict_nnz.68,@function
predict_nnz.68:                         # @predict_nnz.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1595583695, -56(%rbp)  # imm = 0x5F1AACCF
	movl	%edi, -44(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB109_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB109_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB109_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB109_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB109_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB109_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB109_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB109_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB109_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB109_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB109_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB109_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB109_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1595583695, -56(%rbp)  # imm = 0x5F1AACCF
	jne	.LBB109_16
.LBB109_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_15
.Lfunc_end109:
	.size	predict_nnz.68, .Lfunc_end109-predict_nnz.68
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.69  # -- Begin function ChromaPrediction4x4.69
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.69,@function
ChromaPrediction4x4.69:                 # @ChromaPrediction4x4.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1743573640, -72(%rbp)  # imm = 0x67ECD288
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB110_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB110_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB110_6
.LBB110_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB110_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB110_5:                              # %land.end
.LBB110_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB110_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB110_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB110_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB110_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB110_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB110_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB110_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB110_15
.LBB110_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB110_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB110_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB110_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB110_87
.LBB110_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB110_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB110_21
.LBB110_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB110_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB110_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB110_24
.LBB110_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB110_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB110_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB110_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB110_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_29:                             # %for.cond52
                                        #   Parent Loop BB110_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB110_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB110_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_29
.LBB110_32:                             # %for.end
                                        #   in Loop: Header=BB110_27 Depth=1
	jmp	.LBB110_33
.LBB110_33:                             # %for.inc99
                                        #   in Loop: Header=BB110_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_27
.LBB110_34:                             # %for.end101
	jmp	.LBB110_55
.LBB110_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB110_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB110_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_39:                             # %for.cond109
                                        #   Parent Loop BB110_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB110_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB110_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_39
.LBB110_42:                             # %for.end139
                                        #   in Loop: Header=BB110_37 Depth=1
	jmp	.LBB110_43
.LBB110_43:                             # %for.inc140
                                        #   in Loop: Header=BB110_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_37
.LBB110_44:                             # %for.end142
	jmp	.LBB110_54
.LBB110_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB110_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_48:                             # %for.cond148
                                        #   Parent Loop BB110_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB110_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB110_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_48
.LBB110_51:                             # %for.end178
                                        #   in Loop: Header=BB110_46 Depth=1
	jmp	.LBB110_52
.LBB110_52:                             # %for.inc179
                                        #   in Loop: Header=BB110_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_46
.LBB110_53:                             # %for.end181
	jmp	.LBB110_54
.LBB110_54:                             # %if.end182
	jmp	.LBB110_55
.LBB110_55:                             # %if.end183
	jmp	.LBB110_87
.LBB110_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB110_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB110_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_60:                             # %for.cond192
                                        #   Parent Loop BB110_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB110_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB110_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_60
.LBB110_63:                             # %for.end208
                                        #   in Loop: Header=BB110_58 Depth=1
	jmp	.LBB110_64
.LBB110_64:                             # %for.inc209
                                        #   in Loop: Header=BB110_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_58
.LBB110_65:                             # %for.end211
	jmp	.LBB110_86
.LBB110_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB110_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB110_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_70:                             # %for.cond220
                                        #   Parent Loop BB110_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB110_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB110_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_70
.LBB110_73:                             # %for.end233
                                        #   in Loop: Header=BB110_68 Depth=1
	jmp	.LBB110_74
.LBB110_74:                             # %for.inc234
                                        #   in Loop: Header=BB110_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_68
.LBB110_75:                             # %for.end236
	jmp	.LBB110_85
.LBB110_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB110_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_79:                             # %for.cond242
                                        #   Parent Loop BB110_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB110_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB110_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_79
.LBB110_82:                             # %for.end255
                                        #   in Loop: Header=BB110_77 Depth=1
	jmp	.LBB110_83
.LBB110_83:                             # %for.inc256
                                        #   in Loop: Header=BB110_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_77
.LBB110_84:                             # %for.end258
	jmp	.LBB110_85
.LBB110_85:                             # %if.end259
	jmp	.LBB110_86
.LBB110_86:                             # %if.end260
	jmp	.LBB110_87
.LBB110_87:                             # %if.end261
	cmpl	$1743573640, -72(%rbp)  # imm = 0x67ECD288
	jne	.LBB110_89
.LBB110_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_88
.Lfunc_end110:
	.size	ChromaPrediction4x4.69, .Lfunc_end110-ChromaPrediction4x4.69
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.70  # -- Begin function writeCoeff4x4_CAVLC.70
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.70,@function
writeCoeff4x4_CAVLC.70:                 # @writeCoeff4x4_CAVLC.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$914118838, -168(%rbp)  # imm = 0x367C58B6
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB111_22
# %bb.1:                                # %entry
	movq	.LJTI111_0(,%rax,8), %rax
	jmpq	*%rax
.LBB111_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_6
.LBB111_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB111_7
.LBB111_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB111_7:                              # %if.end
	jmp	.LBB111_23
.LBB111_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB111_23
.LBB111_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB111_23
.LBB111_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_14
.LBB111_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB111_15
.LBB111_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB111_15:                             # %if.end67
	jmp	.LBB111_23
.LBB111_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_20
.LBB111_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB111_21
.LBB111_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB111_21:                             # %if.end93
	jmp	.LBB111_23
.LBB111_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB111_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB111_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB111_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB111_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB111_27
.LBB111_26:                             # %cond.false
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB111_27
.LBB111_27:                             # %cond.end
                                        #   in Loop: Header=BB111_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB111_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB111_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB111_29:                             # %land.end
                                        #   in Loop: Header=BB111_24 Depth=1
	testb	$1, %dl
	jne	.LBB111_30
	jmp	.LBB111_41
.LBB111_30:                             # %for.body
                                        #   in Loop: Header=BB111_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB111_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB111_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB111_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB111_33:                             # %if.end110
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB111_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB111_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	$3, -28(%rbp)
.LBB111_36:                             # %if.end117
                                        #   in Loop: Header=BB111_24 Depth=1
	jmp	.LBB111_38
.LBB111_37:                             # %if.else118
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	$0, -28(%rbp)
.LBB111_38:                             # %if.end119
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB111_39:                             # %if.end121
                                        #   in Loop: Header=BB111_24 Depth=1
	jmp	.LBB111_40
.LBB111_40:                             # %for.inc
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_24
.LBB111_41:                             # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB111_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB111_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB111_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB111_46
.LBB111_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB111_46:                             # %cond.end136
	movl	%eax, -96(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB111_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB111_49
.LBB111_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB111_49:                             # %cond.end145
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB111_51
.LBB111_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -96(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB111_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB111_53
# %bb.52:                               # %if.then160
	movl	$0, -80(%rbp)
	jmp	.LBB111_60
.LBB111_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB111_55
# %bb.54:                               # %if.then163
	movl	$1, -80(%rbp)
	jmp	.LBB111_59
.LBB111_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB111_57
# %bb.56:                               # %if.then166
	movl	$2, -80(%rbp)
	jmp	.LBB111_58
.LBB111_57:                             # %if.else167
	movl	$3, -80(%rbp)
.LBB111_58:                             # %if.end168
	jmp	.LBB111_59
.LBB111_59:                             # %if.end169
	jmp	.LBB111_60
.LBB111_60:                             # %if.end170
	jmp	.LBB111_62
.LBB111_61:                             # %if.else171
	movl	$0, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB111_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB111_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB111_65
.LBB111_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB111_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB111_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB111_122
.LBB111_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB111_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB111_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB111_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB111_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB111_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB111_72:                             # %if.end202
                                        #   in Loop: Header=BB111_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB111_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB111_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB111_74:                             # %if.end205
                                        #   in Loop: Header=BB111_69 Depth=1
	jmp	.LBB111_75
.LBB111_75:                             # %for.inc206
                                        #   in Loop: Header=BB111_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_69
.LBB111_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB111_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB111_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB111_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB111_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB111_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB111_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB111_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB111_85
.LBB111_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB111_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB111_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB111_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB111_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB111_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB111_91
.LBB111_90:                             # %if.else249
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB111_91:                             # %if.end252
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	$0, -140(%rbp)
.LBB111_92:                             # %if.end253
                                        #   in Loop: Header=BB111_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB111_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB111_95
.LBB111_94:                             # %if.else257
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB111_95:                             # %if.end259
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB111_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB111_97:                             # %if.end266
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB111_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	$2, -32(%rbp)
.LBB111_100:                            # %if.end273
                                        #   in Loop: Header=BB111_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_86
.LBB111_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB111_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB111_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB111_106
.LBB111_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB111_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB111_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB111_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB111_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB111_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB111_112
.LBB111_111:                            # %if.then318
	jmp	.LBB111_120
.LBB111_112:                            # %if.end319
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB111_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB111_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB111_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	$6, -32(%rbp)
.LBB111_116:                            # %if.end327
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	movl	-92(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB111_117:                            # %if.end341
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_118
.LBB111_118:                            # %for.inc342
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_108
.LBB111_119:                            # %for.end344.loopexit
	jmp	.LBB111_120
.LBB111_120:                            # %for.end344
	jmp	.LBB111_121
.LBB111_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB111_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$914118838, -168(%rbp)  # imm = 0x367C58B6
	jne	.LBB111_124
.LBB111_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_123
.Lfunc_end111:
	.size	writeCoeff4x4_CAVLC.70, .Lfunc_end111-writeCoeff4x4_CAVLC.70
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI111_0:
	.quad	.LBB111_2
	.quad	.LBB111_8
	.quad	.LBB111_9
	.quad	.LBB111_22
	.quad	.LBB111_22
	.quad	.LBB111_22
	.quad	.LBB111_10
	.quad	.LBB111_16
                                        # -- End function
	.text
	.globl	LumaPrediction4x4Bi.71  # -- Begin function LumaPrediction4x4Bi.71
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.71,@function
LumaPrediction4x4Bi.71:                 # @LumaPrediction4x4Bi.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1179170183, -76(%rbp)  # imm = 0x4648B587
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB112_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB112_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB112_6
.LBB112_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB112_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB112_5:                              # %land.end
.LBB112_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB112_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB112_10
.LBB112_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB112_10
.LBB112_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB112_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB112_13
.LBB112_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB112_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB112_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB112_16
.LBB112_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB112_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB112_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB112_19
.LBB112_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB112_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB112_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB112_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_24:                             # %for.cond58
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB112_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB112_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_24
.LBB112_27:                             # %for.end
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_28
.LBB112_28:                             # %for.inc96
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_22
.LBB112_29:                             # %for.end98
	jmp	.LBB112_50
.LBB112_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB112_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_34:                             # %for.cond106
                                        #   Parent Loop BB112_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB112_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB112_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_34
.LBB112_37:                             # %for.end132
                                        #   in Loop: Header=BB112_32 Depth=1
	jmp	.LBB112_38
.LBB112_38:                             # %for.inc133
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_32
.LBB112_39:                             # %for.end135
	jmp	.LBB112_49
.LBB112_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB112_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_43:                             # %for.cond141
                                        #   Parent Loop BB112_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB112_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB112_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_43
.LBB112_46:                             # %for.end167
                                        #   in Loop: Header=BB112_41 Depth=1
	jmp	.LBB112_47
.LBB112_47:                             # %for.inc168
                                        #   in Loop: Header=BB112_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_41
.LBB112_48:                             # %for.end170
	jmp	.LBB112_49
.LBB112_49:                             # %if.end171
	jmp	.LBB112_50
.LBB112_50:                             # %if.end172
	jmp	.LBB112_82
.LBB112_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB112_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB112_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_55:                             # %for.cond181
                                        #   Parent Loop BB112_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB112_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB112_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_55
.LBB112_58:                             # %for.end197
                                        #   in Loop: Header=BB112_53 Depth=1
	jmp	.LBB112_59
.LBB112_59:                             # %for.inc198
                                        #   in Loop: Header=BB112_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_53
.LBB112_60:                             # %for.end200
	jmp	.LBB112_81
.LBB112_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB112_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB112_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_65:                             # %for.cond209
                                        #   Parent Loop BB112_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB112_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB112_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_65
.LBB112_68:                             # %for.end222
                                        #   in Loop: Header=BB112_63 Depth=1
	jmp	.LBB112_69
.LBB112_69:                             # %for.inc223
                                        #   in Loop: Header=BB112_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_63
.LBB112_70:                             # %for.end225
	jmp	.LBB112_80
.LBB112_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB112_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_74:                             # %for.cond231
                                        #   Parent Loop BB112_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB112_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_74
.LBB112_77:                             # %for.end244
                                        #   in Loop: Header=BB112_72 Depth=1
	jmp	.LBB112_78
.LBB112_78:                             # %for.inc245
                                        #   in Loop: Header=BB112_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_72
.LBB112_79:                             # %for.end247
	jmp	.LBB112_80
.LBB112_80:                             # %if.end248
	jmp	.LBB112_81
.LBB112_81:                             # %if.end249
	jmp	.LBB112_82
.LBB112_82:                             # %if.end250
	cmpl	$1179170183, -76(%rbp)  # imm = 0x4648B587
	jne	.LBB112_84
.LBB112_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_83
.Lfunc_end112:
	.size	LumaPrediction4x4Bi.71, .Lfunc_end112-LumaPrediction4x4Bi.71
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.72 # -- Begin function writeLumaCoeff8x8_CABAC.72
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.72,@function
writeLumaCoeff8x8_CABAC.72:             # @writeLumaCoeff8x8_CABAC.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1667740906, -60(%rbp)  # imm = 0x6367B4EA
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB113_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB113_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB113_3:                              # %land.end
                                        #   in Loop: Header=BB113_1 Depth=1
	testb	$1, %al
	jne	.LBB113_4
	jmp	.LBB113_12
.LBB113_4:                              # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB113_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB113_7
.LBB113_6:                              # %cond.false
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB113_7:                              # %cond.end
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB113_10
.LBB113_9:                              # %if.else
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB113_10:                             # %if.end
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_1
.LBB113_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1667740906, -60(%rbp)  # imm = 0x6367B4EA
	jne	.LBB113_14
.LBB113_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_13
.Lfunc_end113:
	.size	writeLumaCoeff8x8_CABAC.72, .Lfunc_end113-writeLumaCoeff8x8_CABAC.72
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.73  # -- Begin function SetModesAndRefframe.73
	.p2align	4, 0x90
	.type	SetModesAndRefframe.73,@function
SetModesAndRefframe.73:                 # @SetModesAndRefframe.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$316808541, -60(%rbp)   # imm = 0x12E21D5D
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB114_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB114_12
.LBB114_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB114_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB114_11
.LBB114_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB114_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB114_10
.LBB114_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB114_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB114_9
.LBB114_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB114_9:                              # %if.end
	jmp	.LBB114_10
.LBB114_10:                             # %if.end86
	jmp	.LBB114_11
.LBB114_11:                             # %if.end87
	jmp	.LBB114_12
.LBB114_12:                             # %if.end88
	cmpl	$316808541, -60(%rbp)   # imm = 0x12E21D5D
	jne	.LBB114_14
.LBB114_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_13
.Lfunc_end114:
	.size	SetModesAndRefframe.73, .Lfunc_end114-SetModesAndRefframe.73
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.74  # -- Begin function writeMotionInfo2NAL.74
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.74,@function
writeMotionInfo2NAL.74:                 # @writeMotionInfo2NAL.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$392665234, -56(%rbp)   # imm = 0x17679892
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB115_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB115_3
.LBB115_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB115_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB115_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB115_6
.LBB115_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB115_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB115_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB115_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB115_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB115_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB115_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB115_39
.LBB115_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB115_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB115_15 Depth=1
	movl	$0, -12(%rbp)
.LBB115_17:                             # %for.cond45
                                        #   Parent Loop BB115_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB115_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB115_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB115_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB115_22
.LBB115_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB115_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB115_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB115_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB115_22:                             # %if.end
                                        #   in Loop: Header=BB115_17 Depth=2
	jmp	.LBB115_23
.LBB115_23:                             # %for.inc
                                        #   in Loop: Header=BB115_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_17
.LBB115_24:                             # %for.end
                                        #   in Loop: Header=BB115_15 Depth=1
	jmp	.LBB115_25
.LBB115_25:                             # %for.inc79
                                        #   in Loop: Header=BB115_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_15
.LBB115_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB115_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB115_27 Depth=1
	movl	$0, -12(%rbp)
.LBB115_29:                             # %for.cond86
                                        #   Parent Loop BB115_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB115_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB115_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB115_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB115_34
.LBB115_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB115_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB115_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB115_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB115_34:                             # %if.end126
                                        #   in Loop: Header=BB115_29 Depth=2
	jmp	.LBB115_35
.LBB115_35:                             # %for.inc127
                                        #   in Loop: Header=BB115_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_29
.LBB115_36:                             # %for.end129
                                        #   in Loop: Header=BB115_27 Depth=1
	jmp	.LBB115_37
.LBB115_37:                             # %for.inc130
                                        #   in Loop: Header=BB115_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_27
.LBB115_38:                             # %for.end132
	jmp	.LBB115_39
.LBB115_39:                             # %if.end133
	jmp	.LBB115_40
.LBB115_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB115_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB115_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB115_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB115_45 Depth=1
	movl	$0, -12(%rbp)
.LBB115_47:                             # %for.cond155
                                        #   Parent Loop BB115_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB115_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB115_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB115_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB115_52
.LBB115_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB115_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB115_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB115_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB115_52:                             # %if.end197
                                        #   in Loop: Header=BB115_47 Depth=2
	jmp	.LBB115_53
.LBB115_53:                             # %for.inc198
                                        #   in Loop: Header=BB115_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_47
.LBB115_54:                             # %for.end200
                                        #   in Loop: Header=BB115_45 Depth=1
	jmp	.LBB115_55
.LBB115_55:                             # %for.inc201
                                        #   in Loop: Header=BB115_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_45
.LBB115_56:                             # %for.end203
	jmp	.LBB115_57
.LBB115_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB115_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB115_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB115_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB115_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB115_63 Depth=1
	movl	$0, -12(%rbp)
.LBB115_65:                             # %for.cond227
                                        #   Parent Loop BB115_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB115_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB115_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB115_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB115_70
.LBB115_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB115_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB115_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB115_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB115_70:                             # %if.end269
                                        #   in Loop: Header=BB115_65 Depth=2
	jmp	.LBB115_71
.LBB115_71:                             # %for.inc270
                                        #   in Loop: Header=BB115_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_65
.LBB115_72:                             # %for.end272
                                        #   in Loop: Header=BB115_63 Depth=1
	jmp	.LBB115_73
.LBB115_73:                             # %for.inc273
                                        #   in Loop: Header=BB115_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_63
.LBB115_74:                             # %for.end275
	jmp	.LBB115_75
.LBB115_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$392665234, -56(%rbp)   # imm = 0x17679892
	jne	.LBB115_77
.LBB115_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_76
.Lfunc_end115:
	.size	writeMotionInfo2NAL.74, .Lfunc_end115-writeMotionInfo2NAL.74
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.75 # -- Begin function LumaResidualCoding8x8.75
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.75,@function
LumaResidualCoding8x8.75:               # @LumaResidualCoding8x8.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$932119784, -128(%rbp)  # imm = 0x378F04E8
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB116_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB116_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB116_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB116_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB116_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_8 Depth 2
                                        #       Child Loop BB116_11 Depth 3
                                        #         Child Loop BB116_13 Depth 4
                                        #       Child Loop BB116_19 Depth 3
                                        #         Child Loop BB116_21 Depth 4
                                        #       Child Loop BB116_29 Depth 3
                                        #         Child Loop BB116_31 Depth 4
                                        #       Child Loop BB116_40 Depth 3
                                        #         Child Loop BB116_42 Depth 4
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
                                        #       Child Loop BB116_67 Depth 3
                                        #         Child Loop BB116_69 Depth 4
                                        #       Child Loop BB116_84 Depth 3
                                        #         Child Loop BB116_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB116_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB116_8:                              # %for.cond9
                                        #   Parent Loop BB116_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_11 Depth 3
                                        #         Child Loop BB116_13 Depth 4
                                        #       Child Loop BB116_19 Depth 3
                                        #         Child Loop BB116_21 Depth 4
                                        #       Child Loop BB116_29 Depth 3
                                        #         Child Loop BB116_31 Depth 4
                                        #       Child Loop BB116_40 Depth 3
                                        #         Child Loop BB116_42 Depth 4
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
                                        #       Child Loop BB116_67 Depth 3
                                        #         Child Loop BB116_69 Depth 4
                                        #       Child Loop BB116_84 Depth 3
                                        #         Child Loop BB116_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB116_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB116_11:                             # %for.cond16
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB116_11 Depth=3
	movl	$0, -12(%rbp)
.LBB116_13:                             # %for.cond20
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB116_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB116_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_13
.LBB116_16:                             # %for.end
                                        #   in Loop: Header=BB116_11 Depth=3
	jmp	.LBB116_17
.LBB116_17:                             # %for.inc37
                                        #   in Loop: Header=BB116_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_11
.LBB116_18:                             # %for.end39
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB116_19:                             # %for.cond41
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB116_19 Depth=3
	movl	$0, -12(%rbp)
.LBB116_21:                             # %for.cond45
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB116_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB116_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_21
.LBB116_24:                             # %for.end65
                                        #   in Loop: Header=BB116_19 Depth=3
	jmp	.LBB116_25
.LBB116_25:                             # %for.inc66
                                        #   in Loop: Header=BB116_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_19
.LBB116_26:                             # %for.end68
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_27
.LBB116_27:                             # %if.end69
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB116_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	$0, -16(%rbp)
.LBB116_29:                             # %for.cond74
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB116_29 Depth=3
	movl	$0, -12(%rbp)
.LBB116_31:                             # %for.cond78
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB116_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB116_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_31
.LBB116_34:                             # %for.end98
                                        #   in Loop: Header=BB116_29 Depth=3
	jmp	.LBB116_35
.LBB116_35:                             # %for.inc99
                                        #   in Loop: Header=BB116_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_29
.LBB116_36:                             # %for.end101
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_37
.LBB116_37:                             # %if.end102
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB116_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	$0, -16(%rbp)
.LBB116_40:                             # %for.cond108
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB116_40 Depth=3
	movl	$0, -12(%rbp)
.LBB116_42:                             # %for.cond112
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB116_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB116_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_42
.LBB116_45:                             # %for.end137
                                        #   in Loop: Header=BB116_40 Depth=3
	jmp	.LBB116_46
.LBB116_46:                             # %for.inc138
                                        #   in Loop: Header=BB116_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_40
.LBB116_47:                             # %for.end140
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB116_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB116_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB116_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB116_52
.LBB116_51:                             # %if.else
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB116_52:                             # %if.end151
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB116_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB116_54:                             # %if.end157
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_55
.LBB116_55:                             # %if.end158
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_65
.LBB116_56:                             # %if.else159
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	$0, -16(%rbp)
.LBB116_57:                             # %for.cond160
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	$0, -12(%rbp)
.LBB116_59:                             # %for.cond164
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB116_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB116_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_59
.LBB116_62:                             # %for.end193
                                        #   in Loop: Header=BB116_57 Depth=3
	jmp	.LBB116_63
.LBB116_63:                             # %for.inc194
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_57
.LBB116_64:                             # %for.end196
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_65
.LBB116_65:                             # %if.end197
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_95
.LBB116_66:                             # %if.else198
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	$0, -16(%rbp)
.LBB116_67:                             # %for.cond199
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB116_67 Depth=3
	movl	$0, -12(%rbp)
.LBB116_69:                             # %for.cond203
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB116_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB116_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB116_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB116_73
.LBB116_72:                             # %if.else300
                                        #   in Loop: Header=BB116_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB116_73:                             # %if.end314
                                        #   in Loop: Header=BB116_69 Depth=4
	jmp	.LBB116_74
.LBB116_74:                             # %for.inc315
                                        #   in Loop: Header=BB116_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_69
.LBB116_75:                             # %for.end317
                                        #   in Loop: Header=BB116_67 Depth=3
	jmp	.LBB116_76
.LBB116_76:                             # %for.inc318
                                        #   in Loop: Header=BB116_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_67
.LBB116_77:                             # %for.end320
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB116_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB116_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB116_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB116_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB116_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB116_83
.LBB116_82:                             # %if.else334
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB116_83:                             # %if.end336
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	$0, -16(%rbp)
.LBB116_84:                             # %for.cond337
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB116_84 Depth=3
	movl	$0, -12(%rbp)
.LBB116_86:                             # %for.cond341
                                        #   Parent Loop BB116_6 Depth=1
                                        #     Parent Loop BB116_8 Depth=2
                                        #       Parent Loop BB116_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB116_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB116_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_86
.LBB116_89:                             # %for.end358
                                        #   in Loop: Header=BB116_84 Depth=3
	jmp	.LBB116_90
.LBB116_90:                             # %for.inc359
                                        #   in Loop: Header=BB116_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_84
.LBB116_91:                             # %for.end361
                                        #   in Loop: Header=BB116_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB116_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB116_93:                             # %if.end368
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_94
.LBB116_94:                             # %if.end369
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_95
.LBB116_95:                             # %if.end370
                                        #   in Loop: Header=BB116_8 Depth=2
	jmp	.LBB116_96
.LBB116_96:                             # %for.inc371
                                        #   in Loop: Header=BB116_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_8
.LBB116_97:                             # %for.end374
                                        #   in Loop: Header=BB116_6 Depth=1
	jmp	.LBB116_98
.LBB116_98:                             # %for.inc375
                                        #   in Loop: Header=BB116_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB116_6
.LBB116_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB116_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB116_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB116_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB116_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB116_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB116_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB116_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB116_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB116_106 Depth=1
	movl	$0, -12(%rbp)
.LBB116_108:                            # %for.cond400
                                        #   Parent Loop BB116_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB116_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB116_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB116_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_108
.LBB116_111:                            # %for.end417
                                        #   in Loop: Header=BB116_106 Depth=1
	jmp	.LBB116_112
.LBB116_112:                            # %for.inc418
                                        #   in Loop: Header=BB116_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_106
.LBB116_113:                            # %for.end420
	jmp	.LBB116_114
.LBB116_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB116_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB116_116:                            # %if.end431
	jmp	.LBB116_117
.LBB116_117:                            # %if.end432
	jmp	.LBB116_118
.LBB116_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB116_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB116_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB116_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB116_145
.LBB116_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_126:                            # %for.cond462
                                        #   Parent Loop BB116_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB116_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB116_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_130
.LBB116_129:                            # %if.else481
                                        #   in Loop: Header=BB116_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB116_130:                            # %if.end486
                                        #   in Loop: Header=BB116_126 Depth=2
	jmp	.LBB116_131
.LBB116_131:                            # %for.inc487
                                        #   in Loop: Header=BB116_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_126
.LBB116_132:                            # %for.end489
                                        #   in Loop: Header=BB116_124 Depth=1
	jmp	.LBB116_133
.LBB116_133:                            # %for.inc490
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_124
.LBB116_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB116_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_138:                            # %for.cond502
                                        #   Parent Loop BB116_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_138
.LBB116_141:                            # %for.end509
                                        #   in Loop: Header=BB116_136 Depth=1
	jmp	.LBB116_142
.LBB116_142:                            # %for.inc510
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_136
.LBB116_143:                            # %for.end512
	jmp	.LBB116_144
.LBB116_144:                            # %if.end513
	jmp	.LBB116_145
.LBB116_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$932119784, -128(%rbp)  # imm = 0x378F04E8
	jne	.LBB116_147
.LBB116_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_146
.Lfunc_end116:
	.size	LumaResidualCoding8x8.75, .Lfunc_end116-LumaResidualCoding8x8.75
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.76 # -- Begin function writeChromaIntraPredMode.76
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.76,@function
writeChromaIntraPredMode.76:            # @writeChromaIntraPredMode.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$333823447, -36(%rbp)   # imm = 0x13E5BDD7
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB117_3
.LBB117_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB117_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$333823447, -36(%rbp)   # imm = 0x13E5BDD7
	jne	.LBB117_5
.LBB117_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_4
.Lfunc_end117:
	.size	writeChromaIntraPredMode.76, .Lfunc_end117-writeChromaIntraPredMode.76
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.77  # -- Begin function ChromaPrediction4x4.77
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.77,@function
ChromaPrediction4x4.77:                 # @ChromaPrediction4x4.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1464846931, -68(%rbp)  # imm = 0x574FCA53
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB118_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB118_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB118_6
.LBB118_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB118_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB118_5:                              # %land.end
.LBB118_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB118_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB118_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB118_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB118_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB118_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB118_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB118_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB118_15
.LBB118_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB118_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB118_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB118_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB118_87
.LBB118_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB118_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB118_21
.LBB118_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB118_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB118_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB118_24
.LBB118_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB118_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB118_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB118_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB118_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_29:                             # %for.cond52
                                        #   Parent Loop BB118_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB118_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB118_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_29
.LBB118_32:                             # %for.end
                                        #   in Loop: Header=BB118_27 Depth=1
	jmp	.LBB118_33
.LBB118_33:                             # %for.inc99
                                        #   in Loop: Header=BB118_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_27
.LBB118_34:                             # %for.end101
	jmp	.LBB118_55
.LBB118_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB118_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB118_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_39:                             # %for.cond109
                                        #   Parent Loop BB118_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB118_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB118_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_39
.LBB118_42:                             # %for.end139
                                        #   in Loop: Header=BB118_37 Depth=1
	jmp	.LBB118_43
.LBB118_43:                             # %for.inc140
                                        #   in Loop: Header=BB118_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_37
.LBB118_44:                             # %for.end142
	jmp	.LBB118_54
.LBB118_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB118_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_48:                             # %for.cond148
                                        #   Parent Loop BB118_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB118_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB118_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_48
.LBB118_51:                             # %for.end178
                                        #   in Loop: Header=BB118_46 Depth=1
	jmp	.LBB118_52
.LBB118_52:                             # %for.inc179
                                        #   in Loop: Header=BB118_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_46
.LBB118_53:                             # %for.end181
	jmp	.LBB118_54
.LBB118_54:                             # %if.end182
	jmp	.LBB118_55
.LBB118_55:                             # %if.end183
	jmp	.LBB118_87
.LBB118_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB118_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB118_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_60:                             # %for.cond192
                                        #   Parent Loop BB118_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB118_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB118_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_60
.LBB118_63:                             # %for.end208
                                        #   in Loop: Header=BB118_58 Depth=1
	jmp	.LBB118_64
.LBB118_64:                             # %for.inc209
                                        #   in Loop: Header=BB118_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_58
.LBB118_65:                             # %for.end211
	jmp	.LBB118_86
.LBB118_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB118_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB118_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_70:                             # %for.cond220
                                        #   Parent Loop BB118_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB118_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB118_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_70
.LBB118_73:                             # %for.end233
                                        #   in Loop: Header=BB118_68 Depth=1
	jmp	.LBB118_74
.LBB118_74:                             # %for.inc234
                                        #   in Loop: Header=BB118_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_68
.LBB118_75:                             # %for.end236
	jmp	.LBB118_85
.LBB118_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB118_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB118_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_79:                             # %for.cond242
                                        #   Parent Loop BB118_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB118_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB118_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_79
.LBB118_82:                             # %for.end255
                                        #   in Loop: Header=BB118_77 Depth=1
	jmp	.LBB118_83
.LBB118_83:                             # %for.inc256
                                        #   in Loop: Header=BB118_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_77
.LBB118_84:                             # %for.end258
	jmp	.LBB118_85
.LBB118_85:                             # %if.end259
	jmp	.LBB118_86
.LBB118_86:                             # %if.end260
	jmp	.LBB118_87
.LBB118_87:                             # %if.end261
	cmpl	$1464846931, -68(%rbp)  # imm = 0x574FCA53
	jne	.LBB118_89
.LBB118_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_88
.Lfunc_end118:
	.size	ChromaPrediction4x4.77, .Lfunc_end118-ChromaPrediction4x4.77
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.78     # -- Begin function start_macroblock.78
	.p2align	4, 0x90
	.type	start_macroblock.78,@function
start_macroblock.78:                    # @start_macroblock.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1560698762, -84(%rbp)  # imm = 0x5D065F8A
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB119_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB119_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB119_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB119_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB119_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB119_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB119_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB119_8:                              # %if.end
                                        #   in Loop: Header=BB119_5 Depth=1
	jmp	.LBB119_9
.LBB119_9:                              # %for.inc
                                        #   in Loop: Header=BB119_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_5
.LBB119_10:                             # %for.end
	jmp	.LBB119_11
.LBB119_11:                             # %if.end19
	jmp	.LBB119_12
.LBB119_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB119_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB119_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB119_16
.LBB119_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB119_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB119_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB119_97
.LBB119_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB119_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_21
.LBB119_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB119_96
.LBB119_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB119_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB119_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB119_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB119_34
.LBB119_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB119_32
.LBB119_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB119_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB119_31
.LBB119_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB119_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB119_33
.LBB119_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB119_33:                             # %if.end112
	jmp	.LBB119_34
.LBB119_34:                             # %if.end113
	jmp	.LBB119_39
.LBB119_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB119_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB119_38
.LBB119_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB119_38:                             # %if.end125
	jmp	.LBB119_39
.LBB119_39:                             # %if.end126
	jmp	.LBB119_47
.LBB119_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB119_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB119_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB119_44
.LBB119_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB119_44:                             # %if.end140
	jmp	.LBB119_46
.LBB119_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB119_46:                             # %if.end145
	jmp	.LBB119_47
.LBB119_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB119_93
.LBB119_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB119_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB119_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB119_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB119_74
.LBB119_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB119_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB119_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB119_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB119_73
.LBB119_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB119_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB119_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB119_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB119_72
.LBB119_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB119_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB119_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB119_71
.LBB119_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB119_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB119_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB119_70:                             # %if.end223
	jmp	.LBB119_71
.LBB119_71:                             # %if.end224
	jmp	.LBB119_72
.LBB119_72:                             # %if.end225
	jmp	.LBB119_73
.LBB119_73:                             # %if.end226
	jmp	.LBB119_74
.LBB119_74:                             # %if.end227
	jmp	.LBB119_75
.LBB119_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB119_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB119_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB119_82
.LBB119_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB119_81:                             # %if.end256
	jmp	.LBB119_82
.LBB119_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB119_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB119_88
.LBB119_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB119_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB119_87
.LBB119_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB119_87:                             # %if.end292
	jmp	.LBB119_88
.LBB119_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB119_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB119_92
.LBB119_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB119_92:                             # %if.end305
	jmp	.LBB119_94
.LBB119_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB119_94:                             # %if.end309
	jmp	.LBB119_95
.LBB119_95:                             # %if.end310
	jmp	.LBB119_96
.LBB119_96:                             # %if.end311
	jmp	.LBB119_97
.LBB119_97:                             # %if.end312
	jmp	.LBB119_102
.LBB119_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB119_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB119_101
.LBB119_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB119_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB119_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB119_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB119_105
.LBB119_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB119_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB119_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB119_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB119_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_110 Depth 2
                                        #       Child Loop BB119_112 Depth 3
                                        #         Child Loop BB119_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB119_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB119_108 Depth=1
	movl	$0, -20(%rbp)
.LBB119_110:                            # %for.cond364
                                        #   Parent Loop BB119_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_112 Depth 3
                                        #         Child Loop BB119_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB119_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB119_110 Depth=2
	movl	$0, -12(%rbp)
.LBB119_112:                            # %for.cond368
                                        #   Parent Loop BB119_108 Depth=1
                                        #     Parent Loop BB119_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB119_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB119_112 Depth=3
	movl	$0, -36(%rbp)
.LBB119_114:                            # %for.cond372
                                        #   Parent Loop BB119_108 Depth=1
                                        #     Parent Loop BB119_110 Depth=2
                                        #       Parent Loop BB119_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB119_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB119_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB119_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_114
.LBB119_117:                            # %for.end388
                                        #   in Loop: Header=BB119_112 Depth=3
	jmp	.LBB119_118
.LBB119_118:                            # %for.inc389
                                        #   in Loop: Header=BB119_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_112
.LBB119_119:                            # %for.end391
                                        #   in Loop: Header=BB119_110 Depth=2
	jmp	.LBB119_120
.LBB119_120:                            # %for.inc392
                                        #   in Loop: Header=BB119_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_110
.LBB119_121:                            # %for.end394
                                        #   in Loop: Header=BB119_108 Depth=1
	jmp	.LBB119_122
.LBB119_122:                            # %for.inc395
                                        #   in Loop: Header=BB119_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_108
.LBB119_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB119_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_126 Depth 2
                                        #       Child Loop BB119_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB119_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB119_124 Depth=1
	movl	$0, -12(%rbp)
.LBB119_126:                            # %for.cond402
                                        #   Parent Loop BB119_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB119_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB119_126 Depth=2
	movl	$0, -16(%rbp)
.LBB119_128:                            # %for.cond406
                                        #   Parent Loop BB119_124 Depth=1
                                        #     Parent Loop BB119_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB119_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB119_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB119_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_128
.LBB119_131:                            # %for.end432
                                        #   in Loop: Header=BB119_126 Depth=2
	jmp	.LBB119_132
.LBB119_132:                            # %for.inc433
                                        #   in Loop: Header=BB119_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_126
.LBB119_133:                            # %for.end435
                                        #   in Loop: Header=BB119_124 Depth=1
	jmp	.LBB119_134
.LBB119_134:                            # %for.inc436
                                        #   in Loop: Header=BB119_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_124
.LBB119_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB119_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_138 Depth 2
                                        #       Child Loop BB119_140 Depth 3
                                        #         Child Loop BB119_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB119_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB119_136 Depth=1
	movl	$0, -20(%rbp)
.LBB119_138:                            # %for.cond443
                                        #   Parent Loop BB119_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_140 Depth 3
                                        #         Child Loop BB119_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB119_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB119_138 Depth=2
	movl	$0, -12(%rbp)
.LBB119_140:                            # %for.cond447
                                        #   Parent Loop BB119_136 Depth=1
                                        #     Parent Loop BB119_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB119_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB119_140 Depth=3
	movl	$0, -36(%rbp)
.LBB119_142:                            # %for.cond451
                                        #   Parent Loop BB119_136 Depth=1
                                        #     Parent Loop BB119_138 Depth=2
                                        #       Parent Loop BB119_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB119_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB119_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB119_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_142
.LBB119_145:                            # %for.end465
                                        #   in Loop: Header=BB119_140 Depth=3
	jmp	.LBB119_146
.LBB119_146:                            # %for.inc466
                                        #   in Loop: Header=BB119_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_140
.LBB119_147:                            # %for.end468
                                        #   in Loop: Header=BB119_138 Depth=2
	jmp	.LBB119_148
.LBB119_148:                            # %for.inc469
                                        #   in Loop: Header=BB119_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_138
.LBB119_149:                            # %for.end471
                                        #   in Loop: Header=BB119_136 Depth=1
	jmp	.LBB119_150
.LBB119_150:                            # %for.inc472
                                        #   in Loop: Header=BB119_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_136
.LBB119_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB119_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB119_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB119_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB119_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_152
.LBB119_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB119_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB119_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB119_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB119_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_156
.LBB119_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB119_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB119_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB119_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB119_166
.LBB119_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB119_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB119_165:                            # %if.end520
	jmp	.LBB119_166
.LBB119_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB119_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB119_168:                            # %if.end536
	cmpl	$1560698762, -84(%rbp)  # imm = 0x5D065F8A
	jne	.LBB119_170
.LBB119_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_169
.Lfunc_end119:
	.size	start_macroblock.78, .Lfunc_end119-start_macroblock.78
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.79 # -- Begin function OneComponentLumaPrediction4x4.79
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.79,@function
OneComponentLumaPrediction4x4.79:       # @OneComponentLumaPrediction4x4.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$412052045, -88(%rbp)   # imm = 0x188F6A4D
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$412052045, -88(%rbp)   # imm = 0x188F6A4D
	jne	.LBB120_2
.LBB120_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_1
.Lfunc_end120:
	.size	OneComponentLumaPrediction4x4.79, .Lfunc_end120-OneComponentLumaPrediction4x4.79
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.80 # -- Begin function IntraChromaPrediction4x4.80
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.80,@function
IntraChromaPrediction4x4.80:            # @IntraChromaPrediction4x4.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$106522681, -20(%rbp)   # imm = 0x6596839
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_3:                              # %for.cond1
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_6:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc17
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_1
.LBB121_8:                              # %for.end19
	cmpl	$106522681, -20(%rbp)   # imm = 0x6596839
	jne	.LBB121_10
.LBB121_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_9
.Lfunc_end121:
	.size	IntraChromaPrediction4x4.80, .Lfunc_end121-IntraChromaPrediction4x4.80
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.81        # -- Begin function slice_too_big.81
	.p2align	4, 0x90
	.type	slice_too_big.81,@function
slice_too_big.81:                       # @slice_too_big.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2105053580, -56(%rbp)  # imm = 0x7D78918C
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB122_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB122_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB122_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB122_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB122_5:                              # %if.end
                                        #   in Loop: Header=BB122_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB122_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB122_7:                              # %if.end8
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB122_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB122_21
.LBB122_9:                              # %if.end11
                                        #   in Loop: Header=BB122_2 Depth=1
	jmp	.LBB122_10
.LBB122_10:                             # %for.inc
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_2
.LBB122_11:                             # %for.end
	jmp	.LBB122_12
.LBB122_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB122_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB122_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB122_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB122_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB122_21
.LBB122_17:                             # %if.end27
                                        #   in Loop: Header=BB122_14 Depth=1
	jmp	.LBB122_18
.LBB122_18:                             # %for.inc28
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_14
.LBB122_19:                             # %for.end30
	jmp	.LBB122_20
.LBB122_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB122_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2105053580, -56(%rbp)  # imm = 0x7D78918C
	jne	.LBB122_23
.LBB122_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_22
.Lfunc_end122:
	.size	slice_too_big.81, .Lfunc_end122-slice_too_big.81
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.82 # -- Begin function writeMotionVector8x8.82
	.p2align	4, 0x90
	.type	writeMotionVector8x8.82,@function
writeMotionVector8x8.82:                # @writeMotionVector8x8.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2055347984, -96(%rbp)  # imm = 0x7A821F10
	movl	%edi, -88(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB123_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB123_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB123_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB123_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB123_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB123_7
.LBB123_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB123_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB123_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB123_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_11 Depth 2
                                        #       Child Loop BB123_13 Depth 3
                                        #         Child Loop BB123_15 Depth 4
                                        #           Child Loop BB123_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB123_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB123_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB123_11:                             # %for.cond22
                                        #   Parent Loop BB123_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_13 Depth 3
                                        #         Child Loop BB123_15 Depth 4
                                        #           Child Loop BB123_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB123_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB123_11 Depth=2
	movl	$0, -12(%rbp)
.LBB123_13:                             # %for.cond25
                                        #   Parent Loop BB123_9 Depth=1
                                        #     Parent Loop BB123_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_15 Depth 4
                                        #           Child Loop BB123_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB123_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB123_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB123_15:                             # %for.cond53
                                        #   Parent Loop BB123_9 Depth=1
                                        #     Parent Loop BB123_11 Depth=2
                                        #       Parent Loop BB123_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB123_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB123_15 Depth=4
	movl	$0, -44(%rbp)
.LBB123_17:                             # %for.cond57
                                        #   Parent Loop BB123_9 Depth=1
                                        #     Parent Loop BB123_11 Depth=2
                                        #       Parent Loop BB123_13 Depth=3
                                        #         Parent Loop BB123_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB123_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB123_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB123_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB123_17
.LBB123_20:                             # %for.end
                                        #   in Loop: Header=BB123_15 Depth=4
	jmp	.LBB123_21
.LBB123_21:                             # %for.inc70
                                        #   in Loop: Header=BB123_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_15
.LBB123_22:                             # %for.end72
                                        #   in Loop: Header=BB123_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB123_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB123_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB123_25
.LBB123_24:                             # %if.else
                                        #   in Loop: Header=BB123_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB123_25:                             # %if.end78
                                        #   in Loop: Header=BB123_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB123_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_13
.LBB123_27:                             # %for.end90
                                        #   in Loop: Header=BB123_11 Depth=2
	jmp	.LBB123_28
.LBB123_28:                             # %for.inc91
                                        #   in Loop: Header=BB123_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_11
.LBB123_29:                             # %for.end93
                                        #   in Loop: Header=BB123_9 Depth=1
	jmp	.LBB123_30
.LBB123_30:                             # %for.inc94
                                        #   in Loop: Header=BB123_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_9
.LBB123_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$2055347984, -96(%rbp)  # imm = 0x7A821F10
	jne	.LBB123_33
.LBB123_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_32
.Lfunc_end123:
	.size	writeMotionVector8x8.82, .Lfunc_end123-writeMotionVector8x8.82
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.83   # -- Begin function LumaResidualCoding.83
	.p2align	4, 0x90
	.type	LumaResidualCoding.83,@function
LumaResidualCoding.83:                  # @LumaResidualCoding.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1178485231, -44(%rbp)  # imm = 0x463E41EF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB124_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_1
.LBB124_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB124_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB124_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB124_33
.LBB124_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB124_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB124_8 Depth=1
	movl	$0, -8(%rbp)
.LBB124_10:                             # %for.cond13
                                        #   Parent Loop BB124_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB124_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB124_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB124_14
.LBB124_13:                             # %if.else
                                        #   in Loop: Header=BB124_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB124_14:                             # %if.end
                                        #   in Loop: Header=BB124_10 Depth=2
	jmp	.LBB124_15
.LBB124_15:                             # %for.inc31
                                        #   in Loop: Header=BB124_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_10
.LBB124_16:                             # %for.end33
                                        #   in Loop: Header=BB124_8 Depth=1
	jmp	.LBB124_17
.LBB124_17:                             # %for.inc34
                                        #   in Loop: Header=BB124_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_8
.LBB124_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB124_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB124_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_22 Depth 2
                                        #       Child Loop BB124_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB124_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB124_22:                             # %for.cond45
                                        #   Parent Loop BB124_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB124_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB124_22 Depth=2
	movl	$0, -8(%rbp)
.LBB124_24:                             # %for.cond48
                                        #   Parent Loop BB124_20 Depth=1
                                        #     Parent Loop BB124_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB124_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB124_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB124_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_24
.LBB124_27:                             # %for.end55
                                        #   in Loop: Header=BB124_22 Depth=2
	jmp	.LBB124_28
.LBB124_28:                             # %for.inc56
                                        #   in Loop: Header=BB124_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_22
.LBB124_29:                             # %for.end58
                                        #   in Loop: Header=BB124_20 Depth=1
	jmp	.LBB124_30
.LBB124_30:                             # %for.inc59
                                        #   in Loop: Header=BB124_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_20
.LBB124_31:                             # %for.end61
	jmp	.LBB124_32
.LBB124_32:                             # %if.end62
	jmp	.LBB124_33
.LBB124_33:                             # %if.end63
	cmpl	$1178485231, -44(%rbp)  # imm = 0x463E41EF
	jne	.LBB124_35
.LBB124_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_34
.Lfunc_end124:
	.size	LumaResidualCoding.83, .Lfunc_end124-LumaResidualCoding.83
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.84 # -- Begin function writeLumaCoeff8x8_CABAC.84
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.84,@function
writeLumaCoeff8x8_CABAC.84:             # @writeLumaCoeff8x8_CABAC.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1388465659, -60(%rbp)  # imm = 0x52C24DFB
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB125_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB125_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB125_3:                              # %land.end
                                        #   in Loop: Header=BB125_1 Depth=1
	testb	$1, %al
	jne	.LBB125_4
	jmp	.LBB125_12
.LBB125_4:                              # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB125_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB125_7
.LBB125_6:                              # %cond.false
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB125_7:                              # %cond.end
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB125_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB125_10
.LBB125_9:                              # %if.else
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB125_10:                             # %if.end
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_1
.LBB125_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1388465659, -60(%rbp)  # imm = 0x52C24DFB
	jne	.LBB125_14
.LBB125_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_13
.Lfunc_end125:
	.size	writeLumaCoeff8x8_CABAC.84, .Lfunc_end125-writeLumaCoeff8x8_CABAC.84
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.85 # -- Begin function writeLumaCoeff4x4_CABAC.85
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.85,@function
writeLumaCoeff4x4_CABAC.85:             # @writeLumaCoeff4x4_CABAC.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1539461460, -52(%rbp)  # imm = 0x5BC25154
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB126_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB126_3
.LBB126_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB126_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB126_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB126_6
.LBB126_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB126_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB126_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB126_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB126_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB126_9:                              # %land.end
                                        #   in Loop: Header=BB126_7 Depth=1
	testb	$1, %al
	jne	.LBB126_10
	jmp	.LBB126_15
.LBB126_10:                             # %for.body
                                        #   in Loop: Header=BB126_7 Depth=1
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB126_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB126_13
.LBB126_12:                             # %cond.false40
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB126_13:                             # %cond.end43
                                        #   in Loop: Header=BB126_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_7
.LBB126_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1539461460, -52(%rbp)  # imm = 0x5BC25154
	jne	.LBB126_17
.LBB126_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_16
.Lfunc_end126:
	.size	writeLumaCoeff4x4_CABAC.85, .Lfunc_end126-writeLumaCoeff4x4_CABAC.85
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.86  # -- Begin function LumaPrediction4x4Bi.86
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.86,@function
LumaPrediction4x4Bi.86:                 # @LumaPrediction4x4Bi.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$158600053, -84(%rbp)   # imm = 0x9740B75
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB127_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB127_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB127_6
.LBB127_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB127_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB127_5:                              # %land.end
.LBB127_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB127_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB127_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB127_10
.LBB127_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB127_10
.LBB127_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB127_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB127_13
.LBB127_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB127_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB127_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB127_16
.LBB127_15:                             # %if.then
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB127_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB127_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB127_19
.LBB127_18:                             # %if.then39
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB127_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB127_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB127_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB127_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_24:                             # %for.cond58
                                        #   Parent Loop BB127_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB127_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB127_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_24
.LBB127_27:                             # %for.end
                                        #   in Loop: Header=BB127_22 Depth=1
	jmp	.LBB127_28
.LBB127_28:                             # %for.inc96
                                        #   in Loop: Header=BB127_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_22
.LBB127_29:                             # %for.end98
	jmp	.LBB127_50
.LBB127_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB127_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB127_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_34:                             # %for.cond106
                                        #   Parent Loop BB127_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB127_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB127_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_34
.LBB127_37:                             # %for.end132
                                        #   in Loop: Header=BB127_32 Depth=1
	jmp	.LBB127_38
.LBB127_38:                             # %for.inc133
                                        #   in Loop: Header=BB127_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_32
.LBB127_39:                             # %for.end135
	jmp	.LBB127_49
.LBB127_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB127_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_43:                             # %for.cond141
                                        #   Parent Loop BB127_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB127_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB127_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_43
.LBB127_46:                             # %for.end167
                                        #   in Loop: Header=BB127_41 Depth=1
	jmp	.LBB127_47
.LBB127_47:                             # %for.inc168
                                        #   in Loop: Header=BB127_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_41
.LBB127_48:                             # %for.end170
	jmp	.LBB127_49
.LBB127_49:                             # %if.end171
	jmp	.LBB127_50
.LBB127_50:                             # %if.end172
	jmp	.LBB127_82
.LBB127_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB127_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB127_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_55:                             # %for.cond181
                                        #   Parent Loop BB127_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB127_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB127_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_55
.LBB127_58:                             # %for.end197
                                        #   in Loop: Header=BB127_53 Depth=1
	jmp	.LBB127_59
.LBB127_59:                             # %for.inc198
                                        #   in Loop: Header=BB127_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_53
.LBB127_60:                             # %for.end200
	jmp	.LBB127_81
.LBB127_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB127_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB127_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_65:                             # %for.cond209
                                        #   Parent Loop BB127_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB127_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB127_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_65
.LBB127_68:                             # %for.end222
                                        #   in Loop: Header=BB127_63 Depth=1
	jmp	.LBB127_69
.LBB127_69:                             # %for.inc223
                                        #   in Loop: Header=BB127_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_63
.LBB127_70:                             # %for.end225
	jmp	.LBB127_80
.LBB127_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB127_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_74:                             # %for.cond231
                                        #   Parent Loop BB127_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB127_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB127_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_74
.LBB127_77:                             # %for.end244
                                        #   in Loop: Header=BB127_72 Depth=1
	jmp	.LBB127_78
.LBB127_78:                             # %for.inc245
                                        #   in Loop: Header=BB127_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_72
.LBB127_79:                             # %for.end247
	jmp	.LBB127_80
.LBB127_80:                             # %if.end248
	jmp	.LBB127_81
.LBB127_81:                             # %if.end249
	jmp	.LBB127_82
.LBB127_82:                             # %if.end250
	cmpl	$158600053, -84(%rbp)   # imm = 0x9740B75
	jne	.LBB127_84
.LBB127_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_83
.Lfunc_end127:
	.size	LumaPrediction4x4Bi.86, .Lfunc_end127-LumaPrediction4x4Bi.86
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.87        # -- Begin function slice_too_big.87
	.p2align	4, 0x90
	.type	slice_too_big.87,@function
slice_too_big.87:                       # @slice_too_big.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$347495091, -56(%rbp)   # imm = 0x14B65AB3
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB128_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB128_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB128_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB128_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB128_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB128_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB128_5:                              # %if.end
                                        #   in Loop: Header=BB128_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB128_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB128_7:                              # %if.end8
                                        #   in Loop: Header=BB128_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB128_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB128_21
.LBB128_9:                              # %if.end11
                                        #   in Loop: Header=BB128_2 Depth=1
	jmp	.LBB128_10
.LBB128_10:                             # %for.inc
                                        #   in Loop: Header=BB128_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_2
.LBB128_11:                             # %for.end
	jmp	.LBB128_12
.LBB128_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB128_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB128_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB128_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB128_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB128_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB128_21
.LBB128_17:                             # %if.end27
                                        #   in Loop: Header=BB128_14 Depth=1
	jmp	.LBB128_18
.LBB128_18:                             # %for.inc28
                                        #   in Loop: Header=BB128_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_14
.LBB128_19:                             # %for.end30
	jmp	.LBB128_20
.LBB128_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB128_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$347495091, -56(%rbp)   # imm = 0x14B65AB3
	jne	.LBB128_23
.LBB128_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_22
.Lfunc_end128:
	.size	slice_too_big.87, .Lfunc_end128-slice_too_big.87
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.88  # -- Begin function ChromaPrediction4x4.88
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.88,@function
ChromaPrediction4x4.88:                 # @ChromaPrediction4x4.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$141716962, -68(%rbp)   # imm = 0x8726DE2
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB129_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB129_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB129_6
.LBB129_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB129_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB129_5:                              # %land.end
.LBB129_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB129_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB129_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB129_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB129_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB129_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB129_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB129_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB129_15
.LBB129_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB129_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB129_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB129_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB129_87
.LBB129_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB129_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB129_21
.LBB129_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB129_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB129_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB129_24
.LBB129_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB129_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB129_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB129_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB129_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_29:                             # %for.cond52
                                        #   Parent Loop BB129_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB129_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB129_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_29
.LBB129_32:                             # %for.end
                                        #   in Loop: Header=BB129_27 Depth=1
	jmp	.LBB129_33
.LBB129_33:                             # %for.inc99
                                        #   in Loop: Header=BB129_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_27
.LBB129_34:                             # %for.end101
	jmp	.LBB129_55
.LBB129_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB129_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB129_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_39:                             # %for.cond109
                                        #   Parent Loop BB129_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB129_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB129_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_39
.LBB129_42:                             # %for.end139
                                        #   in Loop: Header=BB129_37 Depth=1
	jmp	.LBB129_43
.LBB129_43:                             # %for.inc140
                                        #   in Loop: Header=BB129_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_37
.LBB129_44:                             # %for.end142
	jmp	.LBB129_54
.LBB129_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB129_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_48:                             # %for.cond148
                                        #   Parent Loop BB129_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB129_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB129_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_48
.LBB129_51:                             # %for.end178
                                        #   in Loop: Header=BB129_46 Depth=1
	jmp	.LBB129_52
.LBB129_52:                             # %for.inc179
                                        #   in Loop: Header=BB129_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_46
.LBB129_53:                             # %for.end181
	jmp	.LBB129_54
.LBB129_54:                             # %if.end182
	jmp	.LBB129_55
.LBB129_55:                             # %if.end183
	jmp	.LBB129_87
.LBB129_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB129_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB129_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_60:                             # %for.cond192
                                        #   Parent Loop BB129_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB129_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB129_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_60
.LBB129_63:                             # %for.end208
                                        #   in Loop: Header=BB129_58 Depth=1
	jmp	.LBB129_64
.LBB129_64:                             # %for.inc209
                                        #   in Loop: Header=BB129_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_58
.LBB129_65:                             # %for.end211
	jmp	.LBB129_86
.LBB129_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB129_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB129_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_70:                             # %for.cond220
                                        #   Parent Loop BB129_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB129_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB129_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_70
.LBB129_73:                             # %for.end233
                                        #   in Loop: Header=BB129_68 Depth=1
	jmp	.LBB129_74
.LBB129_74:                             # %for.inc234
                                        #   in Loop: Header=BB129_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_68
.LBB129_75:                             # %for.end236
	jmp	.LBB129_85
.LBB129_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB129_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_79:                             # %for.cond242
                                        #   Parent Loop BB129_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB129_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB129_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_79
.LBB129_82:                             # %for.end255
                                        #   in Loop: Header=BB129_77 Depth=1
	jmp	.LBB129_83
.LBB129_83:                             # %for.inc256
                                        #   in Loop: Header=BB129_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_77
.LBB129_84:                             # %for.end258
	jmp	.LBB129_85
.LBB129_85:                             # %if.end259
	jmp	.LBB129_86
.LBB129_86:                             # %if.end260
	jmp	.LBB129_87
.LBB129_87:                             # %if.end261
	cmpl	$141716962, -68(%rbp)   # imm = 0x8726DE2
	jne	.LBB129_89
.LBB129_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_88
.Lfunc_end129:
	.size	ChromaPrediction4x4.88, .Lfunc_end129-ChromaPrediction4x4.88
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.89     # -- Begin function writeChromaCoeff.89
	.p2align	4, 0x90
	.type	writeChromaCoeff.89,@function
writeChromaCoeff.89:                    # @writeChromaCoeff.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1901422956, -84(%rbp)  # imm = 0x7155696C
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB130_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB130_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB130_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB130_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB130_21
.LBB130_5:                              # %if.else
                                        #   in Loop: Header=BB130_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB130_6:                              # %for.cond18
                                        #   Parent Loop BB130_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB130_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB130_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB130_8:                              # %land.end
                                        #   in Loop: Header=BB130_6 Depth=2
	testb	$1, %al
	jne	.LBB130_9
	jmp	.LBB130_20
.LBB130_9:                              # %for.body21
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_12
.LBB130_11:                             # %if.else29
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_12:                             # %if.end
                                        #   in Loop: Header=BB130_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB130_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB130_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB130_15:                             # %lor.end
                                        #   in Loop: Header=BB130_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB130_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB130_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB130_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB130_18:                             # %lor.end45
                                        #   in Loop: Header=BB130_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB130_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_6
.LBB130_20:                             # %for.end
                                        #   in Loop: Header=BB130_2 Depth=1
	jmp	.LBB130_21
.LBB130_21:                             # %if.end58
                                        #   in Loop: Header=BB130_2 Depth=1
	jmp	.LBB130_22
.LBB130_22:                             # %for.inc59
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_2
.LBB130_23:                             # %for.end61
	jmp	.LBB130_24
.LBB130_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB130_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB130_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_28 Depth 2
                                        #       Child Loop BB130_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB130_26 Depth=1
	movl	$0, -36(%rbp)
.LBB130_28:                             # %for.cond69
                                        #   Parent Loop BB130_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB130_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB130_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB130_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB130_47
.LBB130_31:                             # %if.else84
                                        #   in Loop: Header=BB130_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB130_32:                             # %for.cond115
                                        #   Parent Loop BB130_26 Depth=1
                                        #     Parent Loop BB130_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB130_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB130_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB130_34:                             # %land.end121
                                        #   in Loop: Header=BB130_32 Depth=3
	testb	$1, %al
	jne	.LBB130_35
	jmp	.LBB130_46
.LBB130_35:                             # %for.body122
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_38
.LBB130_37:                             # %if.else134
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_38:                             # %if.end136
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB130_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB130_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB130_41:                             # %lor.end149
                                        #   in Loop: Header=BB130_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB130_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB130_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB130_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB130_44:                             # %lor.end164
                                        #   in Loop: Header=BB130_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB130_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_32
.LBB130_46:                             # %for.end189
                                        #   in Loop: Header=BB130_28 Depth=2
	jmp	.LBB130_47
.LBB130_47:                             # %if.end190
                                        #   in Loop: Header=BB130_28 Depth=2
	jmp	.LBB130_48
.LBB130_48:                             # %for.inc191
                                        #   in Loop: Header=BB130_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB130_28
.LBB130_49:                             # %for.end193
                                        #   in Loop: Header=BB130_26 Depth=1
	jmp	.LBB130_50
.LBB130_50:                             # %for.inc194
                                        #   in Loop: Header=BB130_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB130_26
.LBB130_51:                             # %for.end196
	jmp	.LBB130_52
.LBB130_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1901422956, -84(%rbp)  # imm = 0x7155696C
	jne	.LBB130_54
.LBB130_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_53
.Lfunc_end130:
	.size	writeChromaCoeff.89, .Lfunc_end130-writeChromaCoeff.89
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.90         # -- Begin function MBType2Value.90
	.p2align	4, 0x90
	.type	MBType2Value.90,@function
MBType2Value.90:                        # @MBType2Value.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$290963471, -36(%rbp)   # imm = 0x1157C00F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB131_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB131_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB131_4
.LBB131_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB131_26
.LBB131_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB131_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB131_26
.LBB131_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB131_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB131_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB131_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB131_26
.LBB131_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB131_26
.LBB131_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_26
.LBB131_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB131_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB131_26
.LBB131_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB131_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB131_17
.LBB131_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB131_26
.LBB131_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB131_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_26
.LBB131_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB131_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB131_26
.LBB131_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB131_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_26
.LBB131_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB131_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_26
.LBB131_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB131_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$290963471, -36(%rbp)   # imm = 0x1157C00F
	jne	.LBB131_28
.LBB131_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_27
.Lfunc_end131:
	.size	MBType2Value.90, .Lfunc_end131-MBType2Value.90
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.91 # -- Begin function OneComponentLumaPrediction4x4.91
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.91,@function
OneComponentLumaPrediction4x4.91:       # @OneComponentLumaPrediction4x4.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$370251604, -92(%rbp)   # imm = 0x16119754
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$370251604, -92(%rbp)   # imm = 0x16119754
	jne	.LBB132_2
.LBB132_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_1
.Lfunc_end132:
	.size	OneComponentLumaPrediction4x4.91, .Lfunc_end132-OneComponentLumaPrediction4x4.91
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.92 # -- Begin function OneComponentLumaPrediction4x4.92
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.92,@function
OneComponentLumaPrediction4x4.92:       # @OneComponentLumaPrediction4x4.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$588325754, -88(%rbp)   # imm = 0x2311237A
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$588325754, -88(%rbp)   # imm = 0x2311237A
	jne	.LBB133_2
.LBB133_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_1
.Lfunc_end133:
	.size	OneComponentLumaPrediction4x4.92, .Lfunc_end133-OneComponentLumaPrediction4x4.92
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.93 # -- Begin function proceed2nextMacroblock.93
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.93,@function
proceed2nextMacroblock.93:              # @proceed2nextMacroblock.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1544481084, -28(%rbp)  # imm = 0x5C0EE93C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB134_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB134_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB134_9
.LBB134_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB134_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB134_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB134_7
.LBB134_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB134_7:                              # %if.end
	jmp	.LBB134_8
.LBB134_8:                              # %if.end48
	jmp	.LBB134_9
.LBB134_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB134_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB134_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB134_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB134_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB134_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB134_16
.LBB134_15:                             # %if.else86
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB134_16:                             # %if.end94
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB134_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB134_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB134_20
.LBB134_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB134_21
.LBB134_20:                             # %if.then107
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB134_22
.LBB134_21:                             # %if.else114
                                        #   in Loop: Header=BB134_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB134_22:                             # %if.end121
                                        #   in Loop: Header=BB134_12 Depth=1
	jmp	.LBB134_23
.LBB134_23:                             # %if.end122
                                        #   in Loop: Header=BB134_12 Depth=1
	jmp	.LBB134_24
.LBB134_24:                             # %for.inc
                                        #   in Loop: Header=BB134_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_12
.LBB134_25:                             # %for.end
	jmp	.LBB134_34
.LBB134_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB134_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB134_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB134_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB134_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB134_32
.LBB134_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB134_32:                             # %if.end155
	jmp	.LBB134_33
.LBB134_33:                             # %if.end156
	jmp	.LBB134_34
.LBB134_34:                             # %if.end157
	jmp	.LBB134_35
.LBB134_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB134_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB134_38
.LBB134_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB134_38:                             # %if.end167
	cmpl	$1544481084, -28(%rbp)  # imm = 0x5C0EE93C
	jne	.LBB134_40
.LBB134_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_39
.Lfunc_end134:
	.size	proceed2nextMacroblock.93, .Lfunc_end134-proceed2nextMacroblock.93
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.94 # -- Begin function LumaResidualCoding8x8.94
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.94,@function
LumaResidualCoding8x8.94:               # @LumaResidualCoding8x8.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$442067749, -124(%rbp)  # imm = 0x1A596B25
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB135_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB135_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB135_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB135_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB135_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB135_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_8 Depth 2
                                        #       Child Loop BB135_11 Depth 3
                                        #         Child Loop BB135_13 Depth 4
                                        #       Child Loop BB135_19 Depth 3
                                        #         Child Loop BB135_21 Depth 4
                                        #       Child Loop BB135_29 Depth 3
                                        #         Child Loop BB135_31 Depth 4
                                        #       Child Loop BB135_40 Depth 3
                                        #         Child Loop BB135_42 Depth 4
                                        #       Child Loop BB135_57 Depth 3
                                        #         Child Loop BB135_59 Depth 4
                                        #       Child Loop BB135_67 Depth 3
                                        #         Child Loop BB135_69 Depth 4
                                        #       Child Loop BB135_84 Depth 3
                                        #         Child Loop BB135_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB135_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB135_8:                              # %for.cond9
                                        #   Parent Loop BB135_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_11 Depth 3
                                        #         Child Loop BB135_13 Depth 4
                                        #       Child Loop BB135_19 Depth 3
                                        #         Child Loop BB135_21 Depth 4
                                        #       Child Loop BB135_29 Depth 3
                                        #         Child Loop BB135_31 Depth 4
                                        #       Child Loop BB135_40 Depth 3
                                        #         Child Loop BB135_42 Depth 4
                                        #       Child Loop BB135_57 Depth 3
                                        #         Child Loop BB135_59 Depth 4
                                        #       Child Loop BB135_67 Depth 3
                                        #         Child Loop BB135_69 Depth 4
                                        #       Child Loop BB135_84 Depth 3
                                        #         Child Loop BB135_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB135_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB135_11:                             # %for.cond16
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB135_11 Depth=3
	movl	$0, -16(%rbp)
.LBB135_13:                             # %for.cond20
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB135_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB135_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_13
.LBB135_16:                             # %for.end
                                        #   in Loop: Header=BB135_11 Depth=3
	jmp	.LBB135_17
.LBB135_17:                             # %for.inc37
                                        #   in Loop: Header=BB135_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_11
.LBB135_18:                             # %for.end39
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB135_19:                             # %for.cond41
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB135_19 Depth=3
	movl	$0, -16(%rbp)
.LBB135_21:                             # %for.cond45
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB135_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB135_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_21
.LBB135_24:                             # %for.end65
                                        #   in Loop: Header=BB135_19 Depth=3
	jmp	.LBB135_25
.LBB135_25:                             # %for.inc66
                                        #   in Loop: Header=BB135_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_19
.LBB135_26:                             # %for.end68
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_27
.LBB135_27:                             # %if.end69
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB135_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	$0, -12(%rbp)
.LBB135_29:                             # %for.cond74
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB135_29 Depth=3
	movl	$0, -16(%rbp)
.LBB135_31:                             # %for.cond78
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB135_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB135_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_31
.LBB135_34:                             # %for.end98
                                        #   in Loop: Header=BB135_29 Depth=3
	jmp	.LBB135_35
.LBB135_35:                             # %for.inc99
                                        #   in Loop: Header=BB135_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_29
.LBB135_36:                             # %for.end101
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_37
.LBB135_37:                             # %if.end102
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB135_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB135_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	$0, -12(%rbp)
.LBB135_40:                             # %for.cond108
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB135_40 Depth=3
	movl	$0, -16(%rbp)
.LBB135_42:                             # %for.cond112
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB135_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB135_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_42
.LBB135_45:                             # %for.end137
                                        #   in Loop: Header=BB135_40 Depth=3
	jmp	.LBB135_46
.LBB135_46:                             # %for.inc138
                                        #   in Loop: Header=BB135_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_40
.LBB135_47:                             # %for.end140
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB135_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB135_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB135_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB135_52
.LBB135_51:                             # %if.else
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB135_52:                             # %if.end151
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB135_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB135_54:                             # %if.end157
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_55
.LBB135_55:                             # %if.end158
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_65
.LBB135_56:                             # %if.else159
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	$0, -12(%rbp)
.LBB135_57:                             # %for.cond160
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB135_57 Depth=3
	movl	$0, -16(%rbp)
.LBB135_59:                             # %for.cond164
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB135_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB135_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_59
.LBB135_62:                             # %for.end193
                                        #   in Loop: Header=BB135_57 Depth=3
	jmp	.LBB135_63
.LBB135_63:                             # %for.inc194
                                        #   in Loop: Header=BB135_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_57
.LBB135_64:                             # %for.end196
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_65
.LBB135_65:                             # %if.end197
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_95
.LBB135_66:                             # %if.else198
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	$0, -12(%rbp)
.LBB135_67:                             # %for.cond199
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB135_67 Depth=3
	movl	$0, -16(%rbp)
.LBB135_69:                             # %for.cond203
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB135_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB135_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB135_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB135_73
.LBB135_72:                             # %if.else300
                                        #   in Loop: Header=BB135_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB135_73:                             # %if.end314
                                        #   in Loop: Header=BB135_69 Depth=4
	jmp	.LBB135_74
.LBB135_74:                             # %for.inc315
                                        #   in Loop: Header=BB135_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_69
.LBB135_75:                             # %for.end317
                                        #   in Loop: Header=BB135_67 Depth=3
	jmp	.LBB135_76
.LBB135_76:                             # %for.inc318
                                        #   in Loop: Header=BB135_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_67
.LBB135_77:                             # %for.end320
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB135_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB135_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB135_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB135_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB135_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB135_83
.LBB135_82:                             # %if.else334
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB135_83:                             # %if.end336
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	$0, -12(%rbp)
.LBB135_84:                             # %for.cond337
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB135_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB135_84 Depth=3
	movl	$0, -16(%rbp)
.LBB135_86:                             # %for.cond341
                                        #   Parent Loop BB135_6 Depth=1
                                        #     Parent Loop BB135_8 Depth=2
                                        #       Parent Loop BB135_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB135_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB135_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_86
.LBB135_89:                             # %for.end358
                                        #   in Loop: Header=BB135_84 Depth=3
	jmp	.LBB135_90
.LBB135_90:                             # %for.inc359
                                        #   in Loop: Header=BB135_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_84
.LBB135_91:                             # %for.end361
                                        #   in Loop: Header=BB135_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB135_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB135_93:                             # %if.end368
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_94
.LBB135_94:                             # %if.end369
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_95
.LBB135_95:                             # %if.end370
                                        #   in Loop: Header=BB135_8 Depth=2
	jmp	.LBB135_96
.LBB135_96:                             # %for.inc371
                                        #   in Loop: Header=BB135_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB135_8
.LBB135_97:                             # %for.end374
                                        #   in Loop: Header=BB135_6 Depth=1
	jmp	.LBB135_98
.LBB135_98:                             # %for.inc375
                                        #   in Loop: Header=BB135_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_6
.LBB135_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB135_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB135_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB135_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB135_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB135_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB135_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB135_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB135_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB135_106 Depth=1
	movl	$0, -16(%rbp)
.LBB135_108:                            # %for.cond400
                                        #   Parent Loop BB135_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB135_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB135_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB135_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_108
.LBB135_111:                            # %for.end417
                                        #   in Loop: Header=BB135_106 Depth=1
	jmp	.LBB135_112
.LBB135_112:                            # %for.inc418
                                        #   in Loop: Header=BB135_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_106
.LBB135_113:                            # %for.end420
	jmp	.LBB135_114
.LBB135_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB135_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB135_116:                            # %if.end431
	jmp	.LBB135_117
.LBB135_117:                            # %if.end432
	jmp	.LBB135_118
.LBB135_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB135_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB135_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB135_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB135_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB135_145
.LBB135_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB135_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB135_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB135_126:                            # %for.cond462
                                        #   Parent Loop BB135_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB135_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB135_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB135_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB135_130
.LBB135_129:                            # %if.else481
                                        #   in Loop: Header=BB135_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB135_130:                            # %if.end486
                                        #   in Loop: Header=BB135_126 Depth=2
	jmp	.LBB135_131
.LBB135_131:                            # %for.inc487
                                        #   in Loop: Header=BB135_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_126
.LBB135_132:                            # %for.end489
                                        #   in Loop: Header=BB135_124 Depth=1
	jmp	.LBB135_133
.LBB135_133:                            # %for.inc490
                                        #   in Loop: Header=BB135_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_124
.LBB135_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB135_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB135_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB135_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB135_138:                            # %for.cond502
                                        #   Parent Loop BB135_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB135_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB135_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_138
.LBB135_141:                            # %for.end509
                                        #   in Loop: Header=BB135_136 Depth=1
	jmp	.LBB135_142
.LBB135_142:                            # %for.inc510
                                        #   in Loop: Header=BB135_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_136
.LBB135_143:                            # %for.end512
	jmp	.LBB135_144
.LBB135_144:                            # %if.end513
	jmp	.LBB135_145
.LBB135_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$442067749, -124(%rbp)  # imm = 0x1A596B25
	jne	.LBB135_147
.LBB135_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_146
.Lfunc_end135:
	.size	LumaResidualCoding8x8.94, .Lfunc_end135-LumaResidualCoding8x8.94
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.95              # -- Begin function ZeroRef.95
	.p2align	4, 0x90
	.type	ZeroRef.95,@function
ZeroRef.95:                             # @ZeroRef.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$817220323, -24(%rbp)   # imm = 0x30B5CAE3
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB136_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	$0, -12(%rbp)
.LBB136_3:                              # %for.cond1
                                        #   Parent Loop BB136_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB136_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB136_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB136_11
.LBB136_6:                              # %if.end
                                        #   in Loop: Header=BB136_3 Depth=2
	jmp	.LBB136_7
.LBB136_7:                              # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_3
.LBB136_8:                              # %for.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_9
.LBB136_9:                              # %for.inc10
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB136_1
.LBB136_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB136_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$817220323, -24(%rbp)   # imm = 0x30B5CAE3
	jne	.LBB136_13
.LBB136_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_12
.Lfunc_end136:
	.size	ZeroRef.95, .Lfunc_end136-ZeroRef.95
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.96    # -- Begin function LumaPrediction4x4.96
	.p2align	4, 0x90
	.type	LumaPrediction4x4.96,@function
LumaPrediction4x4.96:                   # @LumaPrediction4x4.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1441018557, -104(%rbp) # imm = 0x55E432BD
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB137_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB137_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB137_6
.LBB137_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB137_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB137_5:                              # %land.end
.LBB137_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB137_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB137_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB137_10
.LBB137_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB137_10
.LBB137_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB137_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB137_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB137_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB137_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB137_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB137_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB137_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB137_19
.LBB137_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB137_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB137_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB137_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB137_23
.LBB137_22:                             # %if.then45
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB137_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB137_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB137_26
.LBB137_25:                             # %if.then64
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB137_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB137_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB137_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB137_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_31:                             # %for.cond85
                                        #   Parent Loop BB137_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB137_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB137_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_31
.LBB137_34:                             # %for.end
                                        #   in Loop: Header=BB137_29 Depth=1
	jmp	.LBB137_35
.LBB137_35:                             # %for.inc125
                                        #   in Loop: Header=BB137_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_29
.LBB137_36:                             # %for.end127
	jmp	.LBB137_57
.LBB137_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB137_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB137_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_41:                             # %for.cond135
                                        #   Parent Loop BB137_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB137_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB137_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_41
.LBB137_44:                             # %for.end161
                                        #   in Loop: Header=BB137_39 Depth=1
	jmp	.LBB137_45
.LBB137_45:                             # %for.inc162
                                        #   in Loop: Header=BB137_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_39
.LBB137_46:                             # %for.end164
	jmp	.LBB137_56
.LBB137_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB137_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_50:                             # %for.cond170
                                        #   Parent Loop BB137_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB137_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB137_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_50
.LBB137_53:                             # %for.end196
                                        #   in Loop: Header=BB137_48 Depth=1
	jmp	.LBB137_54
.LBB137_54:                             # %for.inc197
                                        #   in Loop: Header=BB137_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_48
.LBB137_55:                             # %for.end199
	jmp	.LBB137_56
.LBB137_56:                             # %if.end200
	jmp	.LBB137_57
.LBB137_57:                             # %if.end201
	jmp	.LBB137_89
.LBB137_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB137_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB137_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_62:                             # %for.cond210
                                        #   Parent Loop BB137_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB137_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB137_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_62
.LBB137_65:                             # %for.end226
                                        #   in Loop: Header=BB137_60 Depth=1
	jmp	.LBB137_66
.LBB137_66:                             # %for.inc227
                                        #   in Loop: Header=BB137_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_60
.LBB137_67:                             # %for.end229
	jmp	.LBB137_88
.LBB137_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB137_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB137_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_72:                             # %for.cond238
                                        #   Parent Loop BB137_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB137_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB137_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_72
.LBB137_75:                             # %for.end251
                                        #   in Loop: Header=BB137_70 Depth=1
	jmp	.LBB137_76
.LBB137_76:                             # %for.inc252
                                        #   in Loop: Header=BB137_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_70
.LBB137_77:                             # %for.end254
	jmp	.LBB137_87
.LBB137_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB137_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_81:                             # %for.cond260
                                        #   Parent Loop BB137_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB137_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB137_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_81
.LBB137_84:                             # %for.end273
                                        #   in Loop: Header=BB137_79 Depth=1
	jmp	.LBB137_85
.LBB137_85:                             # %for.inc274
                                        #   in Loop: Header=BB137_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_79
.LBB137_86:                             # %for.end276
	jmp	.LBB137_87
.LBB137_87:                             # %if.end277
	jmp	.LBB137_88
.LBB137_88:                             # %if.end278
	jmp	.LBB137_89
.LBB137_89:                             # %if.end279
	cmpl	$1441018557, -104(%rbp) # imm = 0x55E432BD
	jne	.LBB137_91
.LBB137_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_90
.Lfunc_end137:
	.size	LumaPrediction4x4.96, .Lfunc_end137-LumaPrediction4x4.96
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.97         # -- Begin function writeMBLayer.97
	.p2align	4, 0x90
	.type	writeMBLayer.97,@function
writeMBLayer.97:                        # @writeMBLayer.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$159860473, -92(%rbp)   # imm = 0x98746F9
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB138_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB138_3
.LBB138_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB138_3
.LBB138_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB138_9
.LBB138_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB138_8
.LBB138_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB138_8
.LBB138_8:                              # %cond.end14
.LBB138_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB138_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB138_24
.LBB138_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB138_17
	jmp	.LBB138_18
.LBB138_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB138_18
	jmp	.LBB138_17
.LBB138_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB138_17
	jmp	.LBB138_18
.LBB138_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB138_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB138_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB138_23
.LBB138_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB138_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB138_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB138_23:                             # %if.end50
	jmp	.LBB138_24
.LBB138_24:                             # %if.end51
	jmp	.LBB138_25
.LBB138_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB138_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB138_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB138_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB138_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB138_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB138_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB138_35
.LBB138_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB138_38
.LBB138_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB138_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB138_39:                             # %if.end96
	jmp	.LBB138_40
.LBB138_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB138_43
.LBB138_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB138_89
.LBB138_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB138_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB138_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB138_49
.LBB138_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB138_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB138_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB138_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB138_55
.LBB138_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB138_58
.LBB138_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB138_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB138_59:                             # %if.end198
	jmp	.LBB138_60
.LBB138_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB138_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB138_64
.LBB138_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB138_64:                             # %if.end226
	jmp	.LBB138_88
.LBB138_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB138_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB138_76
.LBB138_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB138_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB138_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB138_72:                             # %if.end281
	jmp	.LBB138_73
.LBB138_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB138_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB138_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB138_87
.LBB138_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB138_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB138_77 Depth=1
	movl	$0, -44(%rbp)
.LBB138_79:                             # %for.cond310
                                        #   Parent Loop BB138_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB138_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB138_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB138_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_79
.LBB138_82:                             # %for.end
                                        #   in Loop: Header=BB138_77 Depth=1
	jmp	.LBB138_83
.LBB138_83:                             # %for.inc322
                                        #   in Loop: Header=BB138_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB138_77
.LBB138_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB138_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB138_86:                             # %if.end345
	jmp	.LBB138_87
.LBB138_87:                             # %if.end346
	jmp	.LBB138_88
.LBB138_88:                             # %if.end347
	jmp	.LBB138_89
.LBB138_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB138_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB138_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB138_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB138_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB138_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB138_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB138_98
.LBB138_97:                             # %if.else380
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_98:                             # %if.end382
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB138_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB138_101
.LBB138_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB138_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB138_101:                            # %lor.end415
                                        #   in Loop: Header=BB138_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB138_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_94
.LBB138_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB138_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB138_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB138_114
.LBB138_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB138_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB138_110
.LBB138_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB138_113
.LBB138_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB138_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB138_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB138_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB138_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_120
.LBB138_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB138_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB138_119:                            # %if.end483
	jmp	.LBB138_120
.LBB138_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB138_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB138_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB138_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB138_129
.LBB138_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB138_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB138_128:                            # %if.end516
	jmp	.LBB138_129
.LBB138_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$159860473, -92(%rbp)   # imm = 0x98746F9
	jne	.LBB138_131
.LBB138_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_130
.Lfunc_end138:
	.size	writeMBLayer.97, .Lfunc_end138-writeMBLayer.97
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.98  # -- Begin function writeCoeff4x4_CAVLC.98
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.98,@function
writeCoeff4x4_CAVLC.98:                 # @writeCoeff4x4_CAVLC.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1633139583, -168(%rbp) # imm = 0x6157BB7F
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB139_22
# %bb.1:                                # %entry
	movq	.LJTI139_0(,%rax,8), %rax
	jmpq	*%rax
.LBB139_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB139_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB139_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB139_6
.LBB139_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB139_7
.LBB139_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB139_7:                              # %if.end
	jmp	.LBB139_23
.LBB139_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB139_23
.LBB139_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB139_23
.LBB139_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB139_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB139_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB139_14
.LBB139_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB139_15
.LBB139_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB139_15:                             # %if.end67
	jmp	.LBB139_23
.LBB139_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB139_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB139_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB139_20
.LBB139_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB139_21
.LBB139_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB139_21:                             # %if.end93
	jmp	.LBB139_23
.LBB139_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB139_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB139_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB139_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB139_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB139_27
.LBB139_26:                             # %cond.false
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB139_27
.LBB139_27:                             # %cond.end
                                        #   in Loop: Header=BB139_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB139_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB139_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB139_29:                             # %land.end
                                        #   in Loop: Header=BB139_24 Depth=1
	testb	$1, %dl
	jne	.LBB139_30
	jmp	.LBB139_41
.LBB139_30:                             # %for.body
                                        #   in Loop: Header=BB139_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB139_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB139_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB139_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB139_33:                             # %if.end110
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB139_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB139_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	$3, -32(%rbp)
.LBB139_36:                             # %if.end117
                                        #   in Loop: Header=BB139_24 Depth=1
	jmp	.LBB139_38
.LBB139_37:                             # %if.else118
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	$0, -32(%rbp)
.LBB139_38:                             # %if.end119
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB139_39:                             # %if.end121
                                        #   in Loop: Header=BB139_24 Depth=1
	jmp	.LBB139_40
.LBB139_40:                             # %for.inc
                                        #   in Loop: Header=BB139_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_24
.LBB139_41:                             # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB139_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB139_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB139_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB139_46
.LBB139_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB139_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB139_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB139_49
.LBB139_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB139_49:                             # %cond.end145
	movl	%eax, -104(%rbp)
	movl	-80(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB139_51
.LBB139_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -104(%rbp)
	movl	-80(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB139_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB139_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB139_60
.LBB139_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB139_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB139_59
.LBB139_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB139_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB139_58
.LBB139_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB139_58:                             # %if.end168
	jmp	.LBB139_59
.LBB139_59:                             # %if.end169
	jmp	.LBB139_60
.LBB139_60:                             # %if.end170
	jmp	.LBB139_62
.LBB139_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB139_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB139_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB139_65
.LBB139_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB139_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB139_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB139_122
.LBB139_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB139_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB139_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB139_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB139_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB139_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB139_72:                             # %if.end202
                                        #   in Loop: Header=BB139_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB139_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB139_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB139_74:                             # %if.end205
                                        #   in Loop: Header=BB139_69 Depth=1
	jmp	.LBB139_75
.LBB139_75:                             # %for.inc206
                                        #   in Loop: Header=BB139_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_69
.LBB139_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB139_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB139_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB139_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB139_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB139_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB139_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB139_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB139_85
.LBB139_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB139_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB139_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB139_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB139_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB139_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB139_91
.LBB139_90:                             # %if.else249
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB139_91:                             # %if.end252
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	$0, -144(%rbp)
.LBB139_92:                             # %if.end253
                                        #   in Loop: Header=BB139_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB139_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB139_95
.LBB139_94:                             # %if.else257
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB139_95:                             # %if.end259
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB139_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB139_97:                             # %if.end266
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB139_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB139_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	$2, -28(%rbp)
.LBB139_100:                            # %if.end273
                                        #   in Loop: Header=BB139_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB139_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_86
.LBB139_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB139_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB139_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB139_106
.LBB139_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB139_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB139_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB139_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB139_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB139_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB139_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB139_108 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB139_112
.LBB139_111:                            # %if.then318
	jmp	.LBB139_120
.LBB139_112:                            # %if.end319
                                        #   in Loop: Header=BB139_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB139_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB139_108 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB139_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB139_108 Depth=1
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB139_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB139_108 Depth=1
	movl	$6, -28(%rbp)
.LBB139_116:                            # %if.end327
                                        #   in Loop: Header=BB139_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-88(%rbp), %eax
	movl	-92(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB139_117:                            # %if.end341
                                        #   in Loop: Header=BB139_108 Depth=1
	jmp	.LBB139_118
.LBB139_118:                            # %for.inc342
                                        #   in Loop: Header=BB139_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_108
.LBB139_119:                            # %for.end344.loopexit
	jmp	.LBB139_120
.LBB139_120:                            # %for.end344
	jmp	.LBB139_121
.LBB139_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB139_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1633139583, -168(%rbp) # imm = 0x6157BB7F
	jne	.LBB139_124
.LBB139_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_123
.Lfunc_end139:
	.size	writeCoeff4x4_CAVLC.98, .Lfunc_end139-writeCoeff4x4_CAVLC.98
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI139_0:
	.quad	.LBB139_2
	.quad	.LBB139_8
	.quad	.LBB139_9
	.quad	.LBB139_22
	.quad	.LBB139_22
	.quad	.LBB139_22
	.quad	.LBB139_10
	.quad	.LBB139_16
                                        # -- End function
	.text
	.globl	writeIntra4x4Modes.99   # -- Begin function writeIntra4x4Modes.99
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.99,@function
writeIntra4x4Modes.99:                  # @writeIntra4x4Modes.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1384314464, -76(%rbp)  # imm = 0x5282F660
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_9 Depth 2
                                        #       Child Loop BB140_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB140_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB140_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB140_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB140_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB140_8
.LBB140_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB140_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB140_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB140_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB140_17
.LBB140_8:                              # %if.then
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB140_9:                              # %for.cond24
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB140_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB140_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB140_9 Depth=2
	movl	$0, -12(%rbp)
.LBB140_11:                             # %for.cond27
                                        #   Parent Loop BB140_1 Depth=1
                                        #     Parent Loop BB140_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB140_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB140_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB140_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_11
.LBB140_14:                             # %for.end
                                        #   in Loop: Header=BB140_9 Depth=2
	jmp	.LBB140_15
.LBB140_15:                             # %for.inc42
                                        #   in Loop: Header=BB140_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB140_9
.LBB140_16:                             # %for.end44
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_17
.LBB140_17:                             # %if.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_18
.LBB140_18:                             # %for.inc45
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_1
.LBB140_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB140_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB140_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB140_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB140_23:                             # %if.end57
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB140_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB140_26
.LBB140_25:                             # %if.else
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB140_26:                             # %if.end65
                                        #   in Loop: Header=BB140_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB140_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_20
.LBB140_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1384314464, -76(%rbp)  # imm = 0x5282F660
	jne	.LBB140_30
.LBB140_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_29
.Lfunc_end140:
	.size	writeIntra4x4Modes.99, .Lfunc_end140-writeIntra4x4Modes.99
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.100 # -- Begin function writeCoeff4x4_CAVLC.100
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.100,@function
writeCoeff4x4_CAVLC.100:                # @writeCoeff4x4_CAVLC.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1932763355, -168(%rbp) # imm = 0x7333A0DB
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB141_22
# %bb.1:                                # %entry
	movq	.LJTI141_0(,%rax,8), %rax
	jmpq	*%rax
.LBB141_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB141_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB141_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB141_6
.LBB141_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB141_7
.LBB141_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB141_7:                              # %if.end
	jmp	.LBB141_23
.LBB141_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB141_23
.LBB141_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB141_23
.LBB141_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -100(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB141_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB141_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB141_14
.LBB141_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB141_15
.LBB141_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB141_15:                             # %if.end67
	jmp	.LBB141_23
.LBB141_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB141_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB141_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB141_20
.LBB141_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB141_21
.LBB141_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB141_21:                             # %if.end93
	jmp	.LBB141_23
.LBB141_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB141_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB141_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -100(%rbp)
	je	.LBB141_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB141_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB141_27
.LBB141_26:                             # %cond.false
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB141_27
.LBB141_27:                             # %cond.end
                                        #   in Loop: Header=BB141_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB141_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB141_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB141_29:                             # %land.end
                                        #   in Loop: Header=BB141_24 Depth=1
	testb	$1, %dl
	jne	.LBB141_30
	jmp	.LBB141_41
.LBB141_30:                             # %for.body
                                        #   in Loop: Header=BB141_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB141_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB141_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB141_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB141_33:                             # %if.end110
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB141_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB141_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	$3, -32(%rbp)
.LBB141_36:                             # %if.end117
                                        #   in Loop: Header=BB141_24 Depth=1
	jmp	.LBB141_38
.LBB141_37:                             # %if.else118
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	$0, -32(%rbp)
.LBB141_38:                             # %if.end119
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB141_39:                             # %if.end121
                                        #   in Loop: Header=BB141_24 Depth=1
	jmp	.LBB141_40
.LBB141_40:                             # %for.inc
                                        #   in Loop: Header=BB141_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_24
.LBB141_41:                             # %for.end
	cmpl	$0, -100(%rbp)
	jne	.LBB141_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB141_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB141_46
.LBB141_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB141_46:                             # %cond.end136
	movl	%eax, -96(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB141_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB141_49
.LBB141_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB141_49:                             # %cond.end145
	movl	%eax, -84(%rbp)
	movl	-96(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB141_51
.LBB141_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -96(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-96(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB141_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB141_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB141_60
.LBB141_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB141_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB141_59
.LBB141_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB141_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB141_58
.LBB141_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB141_58:                             # %if.end168
	jmp	.LBB141_59
.LBB141_59:                             # %if.end169
	jmp	.LBB141_60
.LBB141_60:                             # %if.end170
	jmp	.LBB141_62
.LBB141_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB141_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -100(%rbp)
	jne	.LBB141_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB141_65
.LBB141_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB141_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB141_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB141_122
.LBB141_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB141_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB141_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB141_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB141_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB141_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB141_72:                             # %if.end202
                                        #   in Loop: Header=BB141_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB141_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB141_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB141_74:                             # %if.end205
                                        #   in Loop: Header=BB141_69 Depth=1
	jmp	.LBB141_75
.LBB141_75:                             # %for.inc206
                                        #   in Loop: Header=BB141_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_69
.LBB141_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB141_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB141_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB141_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB141_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB141_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB141_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB141_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB141_85
.LBB141_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB141_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB141_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB141_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB141_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB141_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB141_91
.LBB141_90:                             # %if.else249
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB141_91:                             # %if.end252
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	$0, -144(%rbp)
.LBB141_92:                             # %if.end253
                                        #   in Loop: Header=BB141_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB141_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB141_95
.LBB141_94:                             # %if.else257
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB141_95:                             # %if.end259
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB141_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB141_97:                             # %if.end266
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB141_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB141_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	$2, -28(%rbp)
.LBB141_100:                            # %if.end273
                                        #   in Loop: Header=BB141_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB141_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_86
.LBB141_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB141_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -100(%rbp)
	jne	.LBB141_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB141_106
.LBB141_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB141_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB141_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB141_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB141_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB141_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB141_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB141_108 Depth=1
	cmpl	$0, -80(%rbp)
	jne	.LBB141_112
.LBB141_111:                            # %if.then318
	jmp	.LBB141_120
.LBB141_112:                            # %if.end319
                                        #   in Loop: Header=BB141_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB141_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB141_108 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB141_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB141_108 Depth=1
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB141_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB141_108 Depth=1
	movl	$6, -28(%rbp)
.LBB141_116:                            # %if.end327
                                        #   in Loop: Header=BB141_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB141_117:                            # %if.end341
                                        #   in Loop: Header=BB141_108 Depth=1
	jmp	.LBB141_118
.LBB141_118:                            # %for.inc342
                                        #   in Loop: Header=BB141_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_108
.LBB141_119:                            # %for.end344.loopexit
	jmp	.LBB141_120
.LBB141_120:                            # %for.end344
	jmp	.LBB141_121
.LBB141_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB141_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1932763355, -168(%rbp) # imm = 0x7333A0DB
	jne	.LBB141_124
.LBB141_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_123
.Lfunc_end141:
	.size	writeCoeff4x4_CAVLC.100, .Lfunc_end141-writeCoeff4x4_CAVLC.100
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI141_0:
	.quad	.LBB141_2
	.quad	.LBB141_8
	.quad	.LBB141_9
	.quad	.LBB141_22
	.quad	.LBB141_22
	.quad	.LBB141_22
	.quad	.LBB141_10
	.quad	.LBB141_16
                                        # -- End function
	.text
	.globl	proceed2nextMacroblock.101 # -- Begin function proceed2nextMacroblock.101
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.101,@function
proceed2nextMacroblock.101:             # @proceed2nextMacroblock.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1098900912, -28(%rbp)  # imm = 0x417FE5B0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB142_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB142_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB142_9
.LBB142_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB142_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB142_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB142_7
.LBB142_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB142_7:                              # %if.end
	jmp	.LBB142_8
.LBB142_8:                              # %if.end48
	jmp	.LBB142_9
.LBB142_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB142_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB142_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB142_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB142_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB142_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB142_16
.LBB142_15:                             # %if.else86
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB142_16:                             # %if.end94
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB142_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB142_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB142_20
.LBB142_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB142_21
.LBB142_20:                             # %if.then107
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB142_22
.LBB142_21:                             # %if.else114
                                        #   in Loop: Header=BB142_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB142_22:                             # %if.end121
                                        #   in Loop: Header=BB142_12 Depth=1
	jmp	.LBB142_23
.LBB142_23:                             # %if.end122
                                        #   in Loop: Header=BB142_12 Depth=1
	jmp	.LBB142_24
.LBB142_24:                             # %for.inc
                                        #   in Loop: Header=BB142_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_12
.LBB142_25:                             # %for.end
	jmp	.LBB142_34
.LBB142_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB142_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB142_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB142_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB142_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB142_32
.LBB142_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB142_32:                             # %if.end155
	jmp	.LBB142_33
.LBB142_33:                             # %if.end156
	jmp	.LBB142_34
.LBB142_34:                             # %if.end157
	jmp	.LBB142_35
.LBB142_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB142_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB142_38
.LBB142_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB142_38:                             # %if.end167
	cmpl	$1098900912, -28(%rbp)  # imm = 0x417FE5B0
	jne	.LBB142_40
.LBB142_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_39
.Lfunc_end142:
	.size	proceed2nextMacroblock.101, .Lfunc_end142-proceed2nextMacroblock.101
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.102 # -- Begin function writeReferenceFrame.102
	.p2align	4, 0x90
	.type	writeReferenceFrame.102,@function
writeReferenceFrame.102:                # @writeReferenceFrame.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1964898850, -80(%rbp)  # imm = 0x751DFA22
	movl	%edi, -72(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB143_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB143_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB143_4
.LBB143_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB143_4
.LBB143_4:                              # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB143_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB143_7
.LBB143_6:                              # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB143_7:                              # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB143_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB143_18
.LBB143_9:                              # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB143_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB143_11:                             # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB143_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB143_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB143_15
.LBB143_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB143_15:                             # %if.end33
	jmp	.LBB143_17
.LBB143_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB143_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB143_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1964898850, -80(%rbp)  # imm = 0x751DFA22
	jne	.LBB143_20
.LBB143_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_19
.Lfunc_end143:
	.size	writeReferenceFrame.102, .Lfunc_end143-writeReferenceFrame.102
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.103 # -- Begin function terminate_macroblock.103
	.p2align	4, 0x90
	.type	terminate_macroblock.103,@function
terminate_macroblock.103:               # @terminate_macroblock.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$321477832, -108(%rbp)  # imm = 0x13295CC8
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB144_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB144_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB144_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB144_5
.LBB144_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB144_8
.LBB144_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB144_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB144_7:                              # %if.end
	jmp	.LBB144_8
.LBB144_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB144_45
# %bb.9:                                # %if.end18
	movq	.LJTI144_0(,%rax,8), %rax
	jmpq	*%rax
.LBB144_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB144_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB144_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB144_46
.LBB144_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB144_46
.LBB144_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB144_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB144_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB144_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB144_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB144_22
.LBB144_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB144_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB144_21:                             # %if.end64
	jmp	.LBB144_22
.LBB144_22:                             # %if.end65
	jmp	.LBB144_23
.LBB144_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB144_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB144_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB144_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB144_27:                             # %if.end79
	jmp	.LBB144_28
.LBB144_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB144_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB144_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB144_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB144_32:                             # %if.end89
	jmp	.LBB144_33
.LBB144_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB144_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB144_35:                             # %if.end95
	jmp	.LBB144_46
.LBB144_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB144_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB144_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB144_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB144_40:                             # %if.end106
	jmp	.LBB144_41
.LBB144_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB144_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB144_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB144_44:                             # %if.end118
	jmp	.LBB144_46
.LBB144_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB144_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB144_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB144_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB144_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB144_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB144_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB144_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB144_51:                             # %if.end139
                                        #   in Loop: Header=BB144_48 Depth=1
	jmp	.LBB144_52
.LBB144_52:                             # %for.inc
                                        #   in Loop: Header=BB144_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB144_48
.LBB144_53:                             # %for.end
	jmp	.LBB144_54
.LBB144_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB144_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB144_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB144_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB144_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB144_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB144_60:                             # %if.end174
	jmp	.LBB144_62
.LBB144_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB144_62:                             # %if.end188
	jmp	.LBB144_63
.LBB144_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB144_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB144_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB144_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB144_67:                             # %if.end218
	cmpl	$321477832, -108(%rbp)  # imm = 0x13295CC8
	jne	.LBB144_69
.LBB144_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_68
.Lfunc_end144:
	.size	terminate_macroblock.103, .Lfunc_end144-terminate_macroblock.103
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI144_0:
	.quad	.LBB144_10
	.quad	.LBB144_13
	.quad	.LBB144_14
	.quad	.LBB144_36
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.104 # -- Begin function writeMotionVector8x8.104
	.p2align	4, 0x90
	.type	writeMotionVector8x8.104,@function
writeMotionVector8x8.104:               # @writeMotionVector8x8.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1677660279, -84(%rbp)  # imm = 0x63FF1077
	movl	%edi, -96(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB145_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB145_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB145_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB145_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB145_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB145_7
.LBB145_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB145_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB145_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB145_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_11 Depth 2
                                        #       Child Loop BB145_13 Depth 3
                                        #         Child Loop BB145_15 Depth 4
                                        #           Child Loop BB145_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB145_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB145_9 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB145_11:                             # %for.cond22
                                        #   Parent Loop BB145_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB145_13 Depth 3
                                        #         Child Loop BB145_15 Depth 4
                                        #           Child Loop BB145_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB145_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB145_11 Depth=2
	movl	$0, -20(%rbp)
.LBB145_13:                             # %for.cond25
                                        #   Parent Loop BB145_9 Depth=1
                                        #     Parent Loop BB145_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB145_15 Depth 4
                                        #           Child Loop BB145_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB145_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB145_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB145_15:                             # %for.cond53
                                        #   Parent Loop BB145_9 Depth=1
                                        #     Parent Loop BB145_11 Depth=2
                                        #       Parent Loop BB145_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB145_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB145_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB145_15 Depth=4
	movl	$0, -40(%rbp)
.LBB145_17:                             # %for.cond57
                                        #   Parent Loop BB145_9 Depth=1
                                        #     Parent Loop BB145_11 Depth=2
                                        #       Parent Loop BB145_13 Depth=3
                                        #         Parent Loop BB145_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB145_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB145_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB145_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB145_17
.LBB145_20:                             # %for.end
                                        #   in Loop: Header=BB145_15 Depth=4
	jmp	.LBB145_21
.LBB145_21:                             # %for.inc70
                                        #   in Loop: Header=BB145_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB145_15
.LBB145_22:                             # %for.end72
                                        #   in Loop: Header=BB145_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB145_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_25
.LBB145_24:                             # %if.else
                                        #   in Loop: Header=BB145_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_25:                             # %if.end78
                                        #   in Loop: Header=BB145_13 Depth=3
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB145_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_13
.LBB145_27:                             # %for.end90
                                        #   in Loop: Header=BB145_11 Depth=2
	jmp	.LBB145_28
.LBB145_28:                             # %for.inc91
                                        #   in Loop: Header=BB145_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB145_11
.LBB145_29:                             # %for.end93
                                        #   in Loop: Header=BB145_9 Depth=1
	jmp	.LBB145_30
.LBB145_30:                             # %for.inc94
                                        #   in Loop: Header=BB145_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB145_9
.LBB145_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1677660279, -84(%rbp)  # imm = 0x63FF1077
	jne	.LBB145_33
.LBB145_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_32
.Lfunc_end145:
	.size	writeMotionVector8x8.104, .Lfunc_end145-writeMotionVector8x8.104
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.105 # -- Begin function writeLumaCoeff8x8_CABAC.105
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.105,@function
writeLumaCoeff8x8_CABAC.105:            # @writeLumaCoeff8x8_CABAC.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1190051491, -60(%rbp)  # imm = 0x46EEBEA3
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB146_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB146_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB146_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB146_3:                              # %land.end
                                        #   in Loop: Header=BB146_1 Depth=1
	testb	$1, %al
	jne	.LBB146_4
	jmp	.LBB146_12
.LBB146_4:                              # %for.body
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB146_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB146_7
.LBB146_6:                              # %cond.false
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB146_7:                              # %cond.end
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB146_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB146_10
.LBB146_9:                              # %if.else
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB146_10:                             # %if.end
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_1
.LBB146_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1190051491, -60(%rbp)  # imm = 0x46EEBEA3
	jne	.LBB146_14
.LBB146_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_13
.Lfunc_end146:
	.size	writeLumaCoeff8x8_CABAC.105, .Lfunc_end146-writeLumaCoeff8x8_CABAC.105
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.106 # -- Begin function writeMotionVector8x8.106
	.p2align	4, 0x90
	.type	writeMotionVector8x8.106,@function
writeMotionVector8x8.106:               # @writeMotionVector8x8.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1072210074, -80(%rbp)  # imm = 0x3FE8A09A
	movl	%edi, -84(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB147_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB147_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB147_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB147_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB147_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB147_7
.LBB147_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB147_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB147_8:                              # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB147_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_11 Depth 2
                                        #       Child Loop BB147_13 Depth 3
                                        #         Child Loop BB147_15 Depth 4
                                        #           Child Loop BB147_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB147_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB147_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB147_11:                             # %for.cond22
                                        #   Parent Loop BB147_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB147_13 Depth 3
                                        #         Child Loop BB147_15 Depth 4
                                        #           Child Loop BB147_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB147_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB147_11 Depth=2
	movl	$0, -20(%rbp)
.LBB147_13:                             # %for.cond25
                                        #   Parent Loop BB147_9 Depth=1
                                        #     Parent Loop BB147_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB147_15 Depth 4
                                        #           Child Loop BB147_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB147_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB147_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -44(%rbp)
.LBB147_15:                             # %for.cond53
                                        #   Parent Loop BB147_9 Depth=1
                                        #     Parent Loop BB147_11 Depth=2
                                        #       Parent Loop BB147_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB147_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB147_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB147_15 Depth=4
	movl	$0, -40(%rbp)
.LBB147_17:                             # %for.cond57
                                        #   Parent Loop BB147_9 Depth=1
                                        #     Parent Loop BB147_11 Depth=2
                                        #       Parent Loop BB147_13 Depth=3
                                        #         Parent Loop BB147_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB147_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB147_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB147_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB147_17
.LBB147_20:                             # %for.end
                                        #   in Loop: Header=BB147_15 Depth=4
	jmp	.LBB147_21
.LBB147_21:                             # %for.inc70
                                        #   in Loop: Header=BB147_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB147_15
.LBB147_22:                             # %for.end72
                                        #   in Loop: Header=BB147_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB147_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB147_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB147_25
.LBB147_24:                             # %if.else
                                        #   in Loop: Header=BB147_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB147_25:                             # %if.end78
                                        #   in Loop: Header=BB147_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB147_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB147_13
.LBB147_27:                             # %for.end90
                                        #   in Loop: Header=BB147_11 Depth=2
	jmp	.LBB147_28
.LBB147_28:                             # %for.inc91
                                        #   in Loop: Header=BB147_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_11
.LBB147_29:                             # %for.end93
                                        #   in Loop: Header=BB147_9 Depth=1
	jmp	.LBB147_30
.LBB147_30:                             # %for.inc94
                                        #   in Loop: Header=BB147_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_9
.LBB147_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1072210074, -80(%rbp)  # imm = 0x3FE8A09A
	jne	.LBB147_33
.LBB147_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_32
.Lfunc_end147:
	.size	writeMotionVector8x8.106, .Lfunc_end147-writeMotionVector8x8.106
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.107   # -- Begin function TransformDecision.107
	.p2align	4, 0x90
	.type	TransformDecision.107,@function
TransformDecision.107:                  # @TransformDecision.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1899714592, -84(%rbp)  # imm = 0x713B5820
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB148_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB148_3
.LBB148_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB148_3:                              # %if.end
	jmp	.LBB148_4
.LBB148_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_6 Depth 2
                                        #       Child Loop BB148_8 Depth 3
                                        #         Child Loop BB148_10 Depth 4
                                        #           Child Loop BB148_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB148_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB148_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB148_6:                              # %for.cond3
                                        #   Parent Loop BB148_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB148_8 Depth 3
                                        #         Child Loop BB148_10 Depth 4
                                        #           Child Loop BB148_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB148_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB148_8:                              # %for.cond8
                                        #   Parent Loop BB148_4 Depth=1
                                        #     Parent Loop BB148_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB148_10 Depth 4
                                        #           Child Loop BB148_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB148_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB148_10:                             # %for.cond13
                                        #   Parent Loop BB148_4 Depth=1
                                        #     Parent Loop BB148_6 Depth=2
                                        #       Parent Loop BB148_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB148_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB148_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB148_10 Depth=4
	movl	$0, -24(%rbp)
.LBB148_12:                             # %for.cond17
                                        #   Parent Loop BB148_4 Depth=1
                                        #     Parent Loop BB148_6 Depth=2
                                        #       Parent Loop BB148_8 Depth=3
                                        #         Parent Loop BB148_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB148_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB148_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB148_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB148_12
.LBB148_15:                             # %for.end
                                        #   in Loop: Header=BB148_10 Depth=4
	jmp	.LBB148_16
.LBB148_16:                             # %for.inc38
                                        #   in Loop: Header=BB148_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB148_10
.LBB148_17:                             # %for.end40
                                        #   in Loop: Header=BB148_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB148_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB148_8
.LBB148_19:                             # %for.end44
                                        #   in Loop: Header=BB148_6 Depth=2
	jmp	.LBB148_20
.LBB148_20:                             # %for.inc45
                                        #   in Loop: Header=BB148_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB148_6
.LBB148_21:                             # %for.end47
                                        #   in Loop: Header=BB148_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB148_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_4
.LBB148_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB148_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB148_28
.LBB148_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB148_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB148_28
.LBB148_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB148_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1899714592, -84(%rbp)  # imm = 0x713B5820
	jne	.LBB148_30
.LBB148_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_29
.Lfunc_end148:
	.size	TransformDecision.107, .Lfunc_end148-TransformDecision.107
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.108        # -- Begin function B8Mode2Value.108
	.p2align	4, 0x90
	.type	B8Mode2Value.108,@function
B8Mode2Value.108:                       # @B8Mode2Value.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$48775302, -24(%rbp)    # imm = 0x2E84086
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB149_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_3
.LBB149_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB149_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$48775302, -24(%rbp)    # imm = 0x2E84086
	jne	.LBB149_5
.LBB149_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_4
.Lfunc_end149:
	.size	B8Mode2Value.108, .Lfunc_end149-B8Mode2Value.108
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.109   # -- Begin function LumaPrediction4x4.109
	.p2align	4, 0x90
	.type	LumaPrediction4x4.109,@function
LumaPrediction4x4.109:                  # @LumaPrediction4x4.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$817570682, -104(%rbp)  # imm = 0x30BB237A
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB150_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB150_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB150_6
.LBB150_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB150_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB150_5:                              # %land.end
.LBB150_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB150_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB150_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB150_10
.LBB150_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB150_10
.LBB150_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB150_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB150_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB150_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB150_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB150_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -64(%rbp)
	jne	.LBB150_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB150_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB150_19
.LBB150_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB150_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB150_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB150_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB150_23
.LBB150_22:                             # %if.then45
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB150_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB150_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB150_26
.LBB150_25:                             # %if.then64
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB150_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB150_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB150_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB150_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_31:                             # %for.cond85
                                        #   Parent Loop BB150_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB150_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB150_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_31
.LBB150_34:                             # %for.end
                                        #   in Loop: Header=BB150_29 Depth=1
	jmp	.LBB150_35
.LBB150_35:                             # %for.inc125
                                        #   in Loop: Header=BB150_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_29
.LBB150_36:                             # %for.end127
	jmp	.LBB150_57
.LBB150_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB150_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB150_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_41:                             # %for.cond135
                                        #   Parent Loop BB150_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB150_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB150_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_41
.LBB150_44:                             # %for.end161
                                        #   in Loop: Header=BB150_39 Depth=1
	jmp	.LBB150_45
.LBB150_45:                             # %for.inc162
                                        #   in Loop: Header=BB150_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_39
.LBB150_46:                             # %for.end164
	jmp	.LBB150_56
.LBB150_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB150_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_50:                             # %for.cond170
                                        #   Parent Loop BB150_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB150_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB150_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_50
.LBB150_53:                             # %for.end196
                                        #   in Loop: Header=BB150_48 Depth=1
	jmp	.LBB150_54
.LBB150_54:                             # %for.inc197
                                        #   in Loop: Header=BB150_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_48
.LBB150_55:                             # %for.end199
	jmp	.LBB150_56
.LBB150_56:                             # %if.end200
	jmp	.LBB150_57
.LBB150_57:                             # %if.end201
	jmp	.LBB150_89
.LBB150_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB150_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB150_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_62:                             # %for.cond210
                                        #   Parent Loop BB150_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB150_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB150_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_62
.LBB150_65:                             # %for.end226
                                        #   in Loop: Header=BB150_60 Depth=1
	jmp	.LBB150_66
.LBB150_66:                             # %for.inc227
                                        #   in Loop: Header=BB150_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_60
.LBB150_67:                             # %for.end229
	jmp	.LBB150_88
.LBB150_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB150_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB150_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_72:                             # %for.cond238
                                        #   Parent Loop BB150_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB150_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB150_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_72
.LBB150_75:                             # %for.end251
                                        #   in Loop: Header=BB150_70 Depth=1
	jmp	.LBB150_76
.LBB150_76:                             # %for.inc252
                                        #   in Loop: Header=BB150_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_70
.LBB150_77:                             # %for.end254
	jmp	.LBB150_87
.LBB150_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB150_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB150_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_81:                             # %for.cond260
                                        #   Parent Loop BB150_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB150_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB150_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB150_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_81
.LBB150_84:                             # %for.end273
                                        #   in Loop: Header=BB150_79 Depth=1
	jmp	.LBB150_85
.LBB150_85:                             # %for.inc274
                                        #   in Loop: Header=BB150_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_79
.LBB150_86:                             # %for.end276
	jmp	.LBB150_87
.LBB150_87:                             # %if.end277
	jmp	.LBB150_88
.LBB150_88:                             # %if.end278
	jmp	.LBB150_89
.LBB150_89:                             # %if.end279
	cmpl	$817570682, -104(%rbp)  # imm = 0x30BB237A
	jne	.LBB150_91
.LBB150_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_90
.Lfunc_end150:
	.size	LumaPrediction4x4.109, .Lfunc_end150-LumaPrediction4x4.109
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.110 # -- Begin function writeLumaCoeff8x8_CABAC.110
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.110,@function
writeLumaCoeff8x8_CABAC.110:            # @writeLumaCoeff8x8_CABAC.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1960032840, -60(%rbp)  # imm = 0x74D3BA48
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB151_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB151_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB151_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB151_3:                              # %land.end
                                        #   in Loop: Header=BB151_1 Depth=1
	testb	$1, %al
	jne	.LBB151_4
	jmp	.LBB151_12
.LBB151_4:                              # %for.body
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB151_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB151_7
.LBB151_6:                              # %cond.false
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB151_7:                              # %cond.end
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB151_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB151_10
.LBB151_9:                              # %if.else
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB151_10:                             # %if.end
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_1
.LBB151_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1960032840, -60(%rbp)  # imm = 0x74D3BA48
	jne	.LBB151_14
.LBB151_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_13
.Lfunc_end151:
	.size	writeLumaCoeff8x8_CABAC.110, .Lfunc_end151-writeLumaCoeff8x8_CABAC.110
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.111   # -- Begin function TransformDecision.111
	.p2align	4, 0x90
	.type	TransformDecision.111,@function
TransformDecision.111:                  # @TransformDecision.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$74140618, -76(%rbp)    # imm = 0x46B4BCA
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB152_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB152_3
.LBB152_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB152_3:                              # %if.end
	jmp	.LBB152_4
.LBB152_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_6 Depth 2
                                        #       Child Loop BB152_8 Depth 3
                                        #         Child Loop BB152_10 Depth 4
                                        #           Child Loop BB152_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB152_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB152_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB152_6:                              # %for.cond3
                                        #   Parent Loop BB152_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_8 Depth 3
                                        #         Child Loop BB152_10 Depth 4
                                        #           Child Loop BB152_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB152_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB152_8:                              # %for.cond8
                                        #   Parent Loop BB152_4 Depth=1
                                        #     Parent Loop BB152_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB152_10 Depth 4
                                        #           Child Loop BB152_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB152_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB152_10:                             # %for.cond13
                                        #   Parent Loop BB152_4 Depth=1
                                        #     Parent Loop BB152_6 Depth=2
                                        #       Parent Loop BB152_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB152_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB152_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB152_10 Depth=4
	movl	$0, -24(%rbp)
.LBB152_12:                             # %for.cond17
                                        #   Parent Loop BB152_4 Depth=1
                                        #     Parent Loop BB152_6 Depth=2
                                        #       Parent Loop BB152_8 Depth=3
                                        #         Parent Loop BB152_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB152_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB152_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB152_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_12
.LBB152_15:                             # %for.end
                                        #   in Loop: Header=BB152_10 Depth=4
	jmp	.LBB152_16
.LBB152_16:                             # %for.inc38
                                        #   in Loop: Header=BB152_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB152_10
.LBB152_17:                             # %for.end40
                                        #   in Loop: Header=BB152_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB152_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_8
.LBB152_19:                             # %for.end44
                                        #   in Loop: Header=BB152_6 Depth=2
	jmp	.LBB152_20
.LBB152_20:                             # %for.inc45
                                        #   in Loop: Header=BB152_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB152_6
.LBB152_21:                             # %for.end47
                                        #   in Loop: Header=BB152_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB152_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB152_4
.LBB152_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB152_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB152_28
.LBB152_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB152_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB152_28
.LBB152_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB152_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$74140618, -76(%rbp)    # imm = 0x46B4BCA
	jne	.LBB152_30
.LBB152_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_29
.Lfunc_end152:
	.size	TransformDecision.111, .Lfunc_end152-TransformDecision.111
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.112 # -- Begin function SetModesAndRefframe.112
	.p2align	4, 0x90
	.type	SetModesAndRefframe.112,@function
SetModesAndRefframe.112:                # @SetModesAndRefframe.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2078109138, -60(%rbp)  # imm = 0x7BDD6DD2
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB153_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB153_12
.LBB153_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB153_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB153_11
.LBB153_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB153_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB153_10
.LBB153_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB153_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB153_9
.LBB153_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB153_9:                              # %if.end
	jmp	.LBB153_10
.LBB153_10:                             # %if.end86
	jmp	.LBB153_11
.LBB153_11:                             # %if.end87
	jmp	.LBB153_12
.LBB153_12:                             # %if.end88
	cmpl	$2078109138, -60(%rbp)  # imm = 0x7BDD6DD2
	jne	.LBB153_14
.LBB153_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_13
.Lfunc_end153:
	.size	SetModesAndRefframe.112, .Lfunc_end153-SetModesAndRefframe.112
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.113        # -- Begin function writeMBLayer.113
	.p2align	4, 0x90
	.type	writeMBLayer.113,@function
writeMBLayer.113:                       # @writeMBLayer.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$100955488, -100(%rbp)  # imm = 0x6047560
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB154_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB154_3
.LBB154_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB154_3
.LBB154_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB154_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB154_9
.LBB154_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB154_8
.LBB154_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB154_8
.LBB154_8:                              # %cond.end14
.LBB154_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB154_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB154_24
.LBB154_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB154_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB154_17
	jmp	.LBB154_18
.LBB154_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB154_18
	jmp	.LBB154_17
.LBB154_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB154_17
	jmp	.LBB154_18
.LBB154_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB154_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB154_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB154_23
.LBB154_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB154_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB154_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB154_23:                             # %if.end50
	jmp	.LBB154_24
.LBB154_24:                             # %if.end51
	jmp	.LBB154_25
.LBB154_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB154_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB154_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB154_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB154_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB154_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB154_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB154_35
.LBB154_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB154_38
.LBB154_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB154_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB154_39:                             # %if.end96
	jmp	.LBB154_40
.LBB154_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB154_43
.LBB154_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB154_89
.LBB154_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB154_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB154_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB154_49
.LBB154_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB154_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB154_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB154_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB154_55
.LBB154_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB154_58
.LBB154_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB154_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB154_59:                             # %if.end198
	jmp	.LBB154_60
.LBB154_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB154_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB154_64
.LBB154_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB154_64:                             # %if.end226
	jmp	.LBB154_88
.LBB154_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB154_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB154_76
.LBB154_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB154_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB154_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB154_72:                             # %if.end281
	jmp	.LBB154_73
.LBB154_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB154_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB154_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB154_87
.LBB154_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB154_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB154_77 Depth=1
	movl	$0, -44(%rbp)
.LBB154_79:                             # %for.cond310
                                        #   Parent Loop BB154_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB154_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB154_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB154_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB154_79
.LBB154_82:                             # %for.end
                                        #   in Loop: Header=BB154_77 Depth=1
	jmp	.LBB154_83
.LBB154_83:                             # %for.inc322
                                        #   in Loop: Header=BB154_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB154_77
.LBB154_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB154_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB154_86:                             # %if.end345
	jmp	.LBB154_87
.LBB154_87:                             # %if.end346
	jmp	.LBB154_88
.LBB154_88:                             # %if.end347
	jmp	.LBB154_89
.LBB154_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB154_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB154_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB154_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB154_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB154_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB154_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB154_98
.LBB154_97:                             # %if.else380
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_98:                             # %if.end382
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB154_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB154_101
.LBB154_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB154_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB154_101:                            # %lor.end415
                                        #   in Loop: Header=BB154_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB154_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB154_94
.LBB154_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB154_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB154_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB154_114
.LBB154_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB154_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB154_110
.LBB154_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB154_113
.LBB154_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB154_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB154_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB154_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB154_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB154_120
.LBB154_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB154_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB154_119:                            # %if.end483
	jmp	.LBB154_120
.LBB154_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB154_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB154_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB154_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB154_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB154_129
.LBB154_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB154_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB154_128:                            # %if.end516
	jmp	.LBB154_129
.LBB154_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$100955488, -100(%rbp)  # imm = 0x6047560
	jne	.LBB154_131
.LBB154_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_130
.Lfunc_end154:
	.size	writeMBLayer.113, .Lfunc_end154-writeMBLayer.113
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.114 # -- Begin function writeChromaIntraPredMode.114
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.114,@function
writeChromaIntraPredMode.114:           # @writeChromaIntraPredMode.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1260979054, -36(%rbp)  # imm = 0x4B29036E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB155_3
.LBB155_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1260979054, -36(%rbp)  # imm = 0x4B29036E
	jne	.LBB155_5
.LBB155_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_4
.Lfunc_end155:
	.size	writeChromaIntraPredMode.114, .Lfunc_end155-writeChromaIntraPredMode.114
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.115        # -- Begin function B8Mode2Value.115
	.p2align	4, 0x90
	.type	B8Mode2Value.115,@function
B8Mode2Value.115:                       # @B8Mode2Value.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1760299629, -24(%rbp)  # imm = 0x68EC0A6D
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB156_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB156_3
.LBB156_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB156_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1760299629, -24(%rbp)  # imm = 0x68EC0A6D
	jne	.LBB156_5
.LBB156_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_4
.Lfunc_end156:
	.size	B8Mode2Value.115, .Lfunc_end156-B8Mode2Value.115
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.116 # -- Begin function IntraChromaPrediction4x4.116
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.116,@function
IntraChromaPrediction4x4.116:           # @IntraChromaPrediction4x4.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$453418962, -28(%rbp)   # imm = 0x1B069FD2
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB157_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB157_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_3:                              # %for.cond1
                                        #   Parent Loop BB157_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB157_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB157_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB157_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_3
.LBB157_6:                              # %for.end
                                        #   in Loop: Header=BB157_1 Depth=1
	jmp	.LBB157_7
.LBB157_7:                              # %for.inc17
                                        #   in Loop: Header=BB157_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_1
.LBB157_8:                              # %for.end19
	cmpl	$453418962, -28(%rbp)   # imm = 0x1B069FD2
	jne	.LBB157_10
.LBB157_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_9
.Lfunc_end157:
	.size	IntraChromaPrediction4x4.116, .Lfunc_end157-IntraChromaPrediction4x4.116
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.117 # -- Begin function writeCoeff4x4_CAVLC.117
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.117,@function
writeCoeff4x4_CAVLC.117:                # @writeCoeff4x4_CAVLC.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$504095881, -172(%rbp)  # imm = 0x1E0BE489
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB158_22
# %bb.1:                                # %entry
	movq	.LJTI158_0(,%rax,8), %rax
	jmpq	*%rax
.LBB158_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_6
.LBB158_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB158_7
.LBB158_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB158_7:                              # %if.end
	jmp	.LBB158_23
.LBB158_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB158_23
.LBB158_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB158_23
.LBB158_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_14
.LBB158_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB158_15
.LBB158_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB158_15:                             # %if.end67
	jmp	.LBB158_23
.LBB158_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_20
.LBB158_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB158_21
.LBB158_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB158_21:                             # %if.end93
	jmp	.LBB158_23
.LBB158_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB158_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB158_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB158_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB158_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB158_27
.LBB158_26:                             # %cond.false
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB158_27
.LBB158_27:                             # %cond.end
                                        #   in Loop: Header=BB158_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB158_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB158_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB158_29:                             # %land.end
                                        #   in Loop: Header=BB158_24 Depth=1
	testb	$1, %dl
	jne	.LBB158_30
	jmp	.LBB158_41
.LBB158_30:                             # %for.body
                                        #   in Loop: Header=BB158_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB158_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB158_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB158_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB158_33:                             # %if.end110
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB158_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB158_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$3, -32(%rbp)
.LBB158_36:                             # %if.end117
                                        #   in Loop: Header=BB158_24 Depth=1
	jmp	.LBB158_38
.LBB158_37:                             # %if.else118
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$0, -32(%rbp)
.LBB158_38:                             # %if.end119
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB158_39:                             # %if.end121
                                        #   in Loop: Header=BB158_24 Depth=1
	jmp	.LBB158_40
.LBB158_40:                             # %for.inc
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_24
.LBB158_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB158_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB158_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB158_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB158_46
.LBB158_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB158_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB158_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB158_49
.LBB158_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB158_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-104(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB158_51
.LBB158_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-104(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB158_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB158_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB158_60
.LBB158_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB158_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB158_59
.LBB158_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB158_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB158_58
.LBB158_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB158_58:                             # %if.end168
	jmp	.LBB158_59
.LBB158_59:                             # %if.end169
	jmp	.LBB158_60
.LBB158_60:                             # %if.end170
	jmp	.LBB158_62
.LBB158_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB158_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB158_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB158_65
.LBB158_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB158_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB158_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB158_122
.LBB158_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB158_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB158_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB158_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB158_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB158_72:                             # %if.end202
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB158_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB158_74:                             # %if.end205
                                        #   in Loop: Header=BB158_69 Depth=1
	jmp	.LBB158_75
.LBB158_75:                             # %for.inc206
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_69
.LBB158_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB158_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB158_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB158_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB158_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB158_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB158_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB158_85
.LBB158_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB158_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB158_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB158_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB158_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB158_91
.LBB158_90:                             # %if.else249
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB158_91:                             # %if.end252
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	$0, -140(%rbp)
.LBB158_92:                             # %if.end253
                                        #   in Loop: Header=BB158_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB158_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB158_95
.LBB158_94:                             # %if.else257
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB158_95:                             # %if.end259
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB158_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB158_97:                             # %if.end266
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB158_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB158_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	$2, -28(%rbp)
.LBB158_100:                            # %if.end273
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_86
.LBB158_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB158_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB158_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB158_106
.LBB158_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB158_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB158_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB158_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB158_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB158_112
.LBB158_111:                            # %if.then318
	jmp	.LBB158_120
.LBB158_112:                            # %if.end319
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB158_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB158_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB158_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	$6, -28(%rbp)
.LBB158_116:                            # %if.end327
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	movl	-92(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_117:                            # %if.end341
                                        #   in Loop: Header=BB158_108 Depth=1
	jmp	.LBB158_118
.LBB158_118:                            # %for.inc342
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_108
.LBB158_119:                            # %for.end344.loopexit
	jmp	.LBB158_120
.LBB158_120:                            # %for.end344
	jmp	.LBB158_121
.LBB158_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB158_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$504095881, -172(%rbp)  # imm = 0x1E0BE489
	jne	.LBB158_124
.LBB158_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_123
.Lfunc_end158:
	.size	writeCoeff4x4_CAVLC.117, .Lfunc_end158-writeCoeff4x4_CAVLC.117
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI158_0:
	.quad	.LBB158_2
	.quad	.LBB158_8
	.quad	.LBB158_9
	.quad	.LBB158_22
	.quad	.LBB158_22
	.quad	.LBB158_22
	.quad	.LBB158_10
	.quad	.LBB158_16
                                        # -- End function
	.text
	.globl	writeChromaIntraPredMode.118 # -- Begin function writeChromaIntraPredMode.118
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.118,@function
writeChromaIntraPredMode.118:           # @writeChromaIntraPredMode.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1741319382, -36(%rbp)  # imm = 0x67CA6CD6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB159_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB159_3
.LBB159_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB159_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1741319382, -36(%rbp)  # imm = 0x67CA6CD6
	jne	.LBB159_5
.LBB159_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_4
.Lfunc_end159:
	.size	writeChromaIntraPredMode.118, .Lfunc_end159-writeChromaIntraPredMode.118
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.119    # -- Begin function start_macroblock.119
	.p2align	4, 0x90
	.type	start_macroblock.119,@function
start_macroblock.119:                   # @start_macroblock.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$613417897, -84(%rbp)   # imm = 0x249003A9
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB160_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB160_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB160_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB160_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB160_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB160_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB160_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB160_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB160_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB160_8:                              # %if.end
                                        #   in Loop: Header=BB160_5 Depth=1
	jmp	.LBB160_9
.LBB160_9:                              # %for.inc
                                        #   in Loop: Header=BB160_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_5
.LBB160_10:                             # %for.end
	jmp	.LBB160_11
.LBB160_11:                             # %if.end19
	jmp	.LBB160_12
.LBB160_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB160_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB160_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB160_16
.LBB160_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB160_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB160_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB160_97
.LBB160_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB160_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB160_21
.LBB160_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB160_96
.LBB160_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB160_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB160_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB160_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB160_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB160_34
.LBB160_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB160_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB160_32
.LBB160_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB160_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB160_31
.LBB160_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB160_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB160_33
.LBB160_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB160_33:                             # %if.end112
	jmp	.LBB160_34
.LBB160_34:                             # %if.end113
	jmp	.LBB160_39
.LBB160_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB160_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB160_38
.LBB160_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB160_38:                             # %if.end125
	jmp	.LBB160_39
.LBB160_39:                             # %if.end126
	jmp	.LBB160_47
.LBB160_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB160_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB160_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB160_44
.LBB160_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB160_44:                             # %if.end140
	jmp	.LBB160_46
.LBB160_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB160_46:                             # %if.end145
	jmp	.LBB160_47
.LBB160_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB160_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB160_93
.LBB160_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB160_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB160_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB160_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB160_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB160_74
.LBB160_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB160_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB160_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB160_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB160_73
.LBB160_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB160_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB160_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB160_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB160_72
.LBB160_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB160_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB160_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB160_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB160_71
.LBB160_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB160_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB160_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB160_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB160_70:                             # %if.end223
	jmp	.LBB160_71
.LBB160_71:                             # %if.end224
	jmp	.LBB160_72
.LBB160_72:                             # %if.end225
	jmp	.LBB160_73
.LBB160_73:                             # %if.end226
	jmp	.LBB160_74
.LBB160_74:                             # %if.end227
	jmp	.LBB160_75
.LBB160_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB160_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB160_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB160_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB160_82
.LBB160_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB160_81:                             # %if.end256
	jmp	.LBB160_82
.LBB160_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB160_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB160_88
.LBB160_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB160_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB160_87
.LBB160_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB160_87:                             # %if.end292
	jmp	.LBB160_88
.LBB160_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB160_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB160_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB160_92
.LBB160_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB160_92:                             # %if.end305
	jmp	.LBB160_94
.LBB160_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB160_94:                             # %if.end309
	jmp	.LBB160_95
.LBB160_95:                             # %if.end310
	jmp	.LBB160_96
.LBB160_96:                             # %if.end311
	jmp	.LBB160_97
.LBB160_97:                             # %if.end312
	jmp	.LBB160_102
.LBB160_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB160_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB160_101
.LBB160_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB160_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB160_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB160_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB160_105
.LBB160_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB160_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB160_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB160_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB160_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_110 Depth 2
                                        #       Child Loop BB160_112 Depth 3
                                        #         Child Loop BB160_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB160_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	$0, -20(%rbp)
.LBB160_110:                            # %for.cond364
                                        #   Parent Loop BB160_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_112 Depth 3
                                        #         Child Loop BB160_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB160_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB160_110 Depth=2
	movl	$0, -12(%rbp)
.LBB160_112:                            # %for.cond368
                                        #   Parent Loop BB160_108 Depth=1
                                        #     Parent Loop BB160_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB160_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB160_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB160_112 Depth=3
	movl	$0, -36(%rbp)
.LBB160_114:                            # %for.cond372
                                        #   Parent Loop BB160_108 Depth=1
                                        #     Parent Loop BB160_110 Depth=2
                                        #       Parent Loop BB160_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB160_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB160_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB160_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB160_114
.LBB160_117:                            # %for.end388
                                        #   in Loop: Header=BB160_112 Depth=3
	jmp	.LBB160_118
.LBB160_118:                            # %for.inc389
                                        #   in Loop: Header=BB160_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_112
.LBB160_119:                            # %for.end391
                                        #   in Loop: Header=BB160_110 Depth=2
	jmp	.LBB160_120
.LBB160_120:                            # %for.inc392
                                        #   in Loop: Header=BB160_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_110
.LBB160_121:                            # %for.end394
                                        #   in Loop: Header=BB160_108 Depth=1
	jmp	.LBB160_122
.LBB160_122:                            # %for.inc395
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB160_108
.LBB160_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB160_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_126 Depth 2
                                        #       Child Loop BB160_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB160_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB160_124 Depth=1
	movl	$0, -12(%rbp)
.LBB160_126:                            # %for.cond402
                                        #   Parent Loop BB160_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB160_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB160_126 Depth=2
	movl	$0, -16(%rbp)
.LBB160_128:                            # %for.cond406
                                        #   Parent Loop BB160_124 Depth=1
                                        #     Parent Loop BB160_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB160_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB160_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB160_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB160_128
.LBB160_131:                            # %for.end432
                                        #   in Loop: Header=BB160_126 Depth=2
	jmp	.LBB160_132
.LBB160_132:                            # %for.inc433
                                        #   in Loop: Header=BB160_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_126
.LBB160_133:                            # %for.end435
                                        #   in Loop: Header=BB160_124 Depth=1
	jmp	.LBB160_134
.LBB160_134:                            # %for.inc436
                                        #   in Loop: Header=BB160_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_124
.LBB160_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB160_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_138 Depth 2
                                        #       Child Loop BB160_140 Depth 3
                                        #         Child Loop BB160_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB160_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB160_136 Depth=1
	movl	$0, -20(%rbp)
.LBB160_138:                            # %for.cond443
                                        #   Parent Loop BB160_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_140 Depth 3
                                        #         Child Loop BB160_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB160_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB160_138 Depth=2
	movl	$0, -12(%rbp)
.LBB160_140:                            # %for.cond447
                                        #   Parent Loop BB160_136 Depth=1
                                        #     Parent Loop BB160_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB160_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB160_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB160_140 Depth=3
	movl	$0, -36(%rbp)
.LBB160_142:                            # %for.cond451
                                        #   Parent Loop BB160_136 Depth=1
                                        #     Parent Loop BB160_138 Depth=2
                                        #       Parent Loop BB160_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB160_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB160_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB160_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB160_142
.LBB160_145:                            # %for.end465
                                        #   in Loop: Header=BB160_140 Depth=3
	jmp	.LBB160_146
.LBB160_146:                            # %for.inc466
                                        #   in Loop: Header=BB160_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_140
.LBB160_147:                            # %for.end468
                                        #   in Loop: Header=BB160_138 Depth=2
	jmp	.LBB160_148
.LBB160_148:                            # %for.inc469
                                        #   in Loop: Header=BB160_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_138
.LBB160_149:                            # %for.end471
                                        #   in Loop: Header=BB160_136 Depth=1
	jmp	.LBB160_150
.LBB160_150:                            # %for.inc472
                                        #   in Loop: Header=BB160_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB160_136
.LBB160_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB160_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB160_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB160_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB160_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_152
.LBB160_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB160_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB160_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB160_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB160_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_156
.LBB160_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB160_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB160_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB160_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB160_166
.LBB160_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB160_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB160_165:                            # %if.end520
	jmp	.LBB160_166
.LBB160_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB160_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB160_168:                            # %if.end536
	cmpl	$613417897, -84(%rbp)   # imm = 0x249003A9
	jne	.LBB160_170
.LBB160_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_169
.Lfunc_end160:
	.size	start_macroblock.119, .Lfunc_end160-start_macroblock.119
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.120      # -- Begin function find_sad_16x16.120
	.p2align	4, 0x90
	.type	find_sad_16x16.120,@function
find_sad_16x16.120:                     # @find_sad_16x16.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1186244270, -80(%rbp)  # imm = 0x46B4A6AE
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB161_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_1
.LBB161_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB161_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB161_20
.LBB161_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB161_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB161_9
.LBB161_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB161_9
.LBB161_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB161_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB161_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB161_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB161_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB161_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB161_14
.LBB161_13:                             # %cond.false23
                                        #   in Loop: Header=BB161_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB161_14
.LBB161_14:                             # %cond.end24
                                        #   in Loop: Header=BB161_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB161_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_10
.LBB161_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB161_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB161_19
.LBB161_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB161_19
.LBB161_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB161_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB161_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_42 Depth 2
                                        #       Child Loop BB161_44 Depth 3
                                        #     Child Loop BB161_50 Depth 2
                                        #       Child Loop BB161_52 Depth 3
                                        #         Child Loop BB161_54 Depth 4
                                        #         Child Loop BB161_58 Depth 4
                                        #           Child Loop BB161_60 Depth 5
                                        #     Child Loop BB161_72 Depth 2
                                        #       Child Loop BB161_74 Depth 3
                                        #     Child Loop BB161_80 Depth 2
                                        #     Child Loop BB161_84 Depth 2
                                        #       Child Loop BB161_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB161_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB161_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB161_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB161_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB161_32
.LBB161_24:                             # %if.then46
                                        #   in Loop: Header=BB161_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB161_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB161_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB161_28
.LBB161_27:                             # %if.then51
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_95
.LBB161_28:                             # %if.end52
                                        #   in Loop: Header=BB161_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB161_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB161_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_95
.LBB161_31:                             # %if.end57
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_32
.LBB161_32:                             # %if.end58
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB161_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB161_40
.LBB161_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB161_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB161_40
.LBB161_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB161_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB161_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB161_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB161_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB161_41
.LBB161_40:                             # %if.then74
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_94
.LBB161_41:                             # %if.else75
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	$0, -16(%rbp)
.LBB161_42:                             # %for.cond76
                                        #   Parent Loop BB161_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB161_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB161_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB161_42 Depth=2
	movl	$0, -12(%rbp)
.LBB161_44:                             # %for.cond79
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB161_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB161_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB161_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_44
.LBB161_47:                             # %for.end115
                                        #   in Loop: Header=BB161_42 Depth=2
	jmp	.LBB161_48
.LBB161_48:                             # %for.inc116
                                        #   in Loop: Header=BB161_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_42
.LBB161_49:                             # %for.end118
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB161_50:                             # %for.cond119
                                        #   Parent Loop BB161_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB161_52 Depth 3
                                        #         Child Loop BB161_54 Depth 4
                                        #         Child Loop BB161_58 Depth 4
                                        #           Child Loop BB161_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB161_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB161_50 Depth=2
	movl	$0, -24(%rbp)
.LBB161_52:                             # %for.cond123
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB161_54 Depth 4
                                        #         Child Loop BB161_58 Depth 4
                                        #           Child Loop BB161_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB161_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB161_52 Depth=3
	movl	$0, -16(%rbp)
.LBB161_54:                             # %for.cond127
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_50 Depth=2
                                        #       Parent Loop BB161_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB161_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB161_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB161_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_54
.LBB161_57:                             # %for.end237
                                        #   in Loop: Header=BB161_52 Depth=3
	movl	$0, -12(%rbp)
.LBB161_58:                             # %for.cond238
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_50 Depth=2
                                        #       Parent Loop BB161_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB161_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB161_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB161_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB161_60:                             # %for.cond346
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_50 Depth=2
                                        #       Parent Loop BB161_52 Depth=3
                                        #         Parent Loop BB161_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB161_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB161_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB161_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB161_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB161_63:                             # %if.end363
                                        #   in Loop: Header=BB161_60 Depth=5
	jmp	.LBB161_64
.LBB161_64:                             # %for.inc364
                                        #   in Loop: Header=BB161_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_60
.LBB161_65:                             # %for.end366
                                        #   in Loop: Header=BB161_58 Depth=4
	jmp	.LBB161_66
.LBB161_66:                             # %for.inc367
                                        #   in Loop: Header=BB161_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_58
.LBB161_67:                             # %for.end369
                                        #   in Loop: Header=BB161_52 Depth=3
	jmp	.LBB161_68
.LBB161_68:                             # %for.inc370
                                        #   in Loop: Header=BB161_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB161_52
.LBB161_69:                             # %for.end372
                                        #   in Loop: Header=BB161_50 Depth=2
	jmp	.LBB161_70
.LBB161_70:                             # %for.inc373
                                        #   in Loop: Header=BB161_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_50
.LBB161_71:                             # %for.end375
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	$0, -16(%rbp)
.LBB161_72:                             # %for.cond376
                                        #   Parent Loop BB161_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB161_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB161_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB161_72 Depth=2
	movl	$0, -12(%rbp)
.LBB161_74:                             # %for.cond380
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB161_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB161_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB161_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_74
.LBB161_77:                             # %for.end397
                                        #   in Loop: Header=BB161_72 Depth=2
	jmp	.LBB161_78
.LBB161_78:                             # %for.inc398
                                        #   in Loop: Header=BB161_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_72
.LBB161_79:                             # %for.end400
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	$0, -16(%rbp)
.LBB161_80:                             # %for.cond401
                                        #   Parent Loop BB161_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB161_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB161_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB161_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_80
.LBB161_83:                             # %for.end463
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	$0, -12(%rbp)
.LBB161_84:                             # %for.cond464
                                        #   Parent Loop BB161_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB161_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB161_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB161_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB161_86:                             # %for.cond524
                                        #   Parent Loop BB161_21 Depth=1
                                        #     Parent Loop BB161_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB161_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB161_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB161_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB161_86
.LBB161_89:                             # %for.end536
                                        #   in Loop: Header=BB161_84 Depth=2
	jmp	.LBB161_90
.LBB161_90:                             # %for.inc537
                                        #   in Loop: Header=BB161_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_84
.LBB161_91:                             # %for.end539
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB161_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB161_93:                             # %if.end543
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_94
.LBB161_94:                             # %if.end544
                                        #   in Loop: Header=BB161_21 Depth=1
	jmp	.LBB161_95
.LBB161_95:                             # %for.inc545
                                        #   in Loop: Header=BB161_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB161_21
.LBB161_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1186244270, -80(%rbp)  # imm = 0x46B4A6AE
	jne	.LBB161_98
.LBB161_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_97
.Lfunc_end161:
	.size	find_sad_16x16.120, .Lfunc_end161-find_sad_16x16.120
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.121  # -- Begin function writeIntra4x4Modes.121
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.121,@function
writeIntra4x4Modes.121:                 # @writeIntra4x4Modes.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$614493802, -76(%rbp)   # imm = 0x24A06E6A
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB162_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_9 Depth 2
                                        #       Child Loop BB162_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB162_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB162_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB162_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB162_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB162_8
.LBB162_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB162_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB162_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB162_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB162_17
.LBB162_8:                              # %if.then
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -28(%rbp)
.LBB162_9:                              # %for.cond24
                                        #   Parent Loop BB162_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB162_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB162_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB162_9 Depth=2
	movl	$0, -12(%rbp)
.LBB162_11:                             # %for.cond27
                                        #   Parent Loop BB162_1 Depth=1
                                        #     Parent Loop BB162_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB162_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB162_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB162_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB162_11
.LBB162_14:                             # %for.end
                                        #   in Loop: Header=BB162_9 Depth=2
	jmp	.LBB162_15
.LBB162_15:                             # %for.inc42
                                        #   in Loop: Header=BB162_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB162_9
.LBB162_16:                             # %for.end44
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_17
.LBB162_17:                             # %if.end
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_18
.LBB162_18:                             # %for.inc45
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB162_1
.LBB162_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB162_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB162_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB162_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB162_23:                             # %if.end57
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB162_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB162_26
.LBB162_25:                             # %if.else
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB162_26:                             # %if.end65
                                        #   in Loop: Header=BB162_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB162_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB162_20
.LBB162_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$614493802, -76(%rbp)   # imm = 0x24A06E6A
	jne	.LBB162_30
.LBB162_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_29
.Lfunc_end162:
	.size	writeIntra4x4Modes.121, .Lfunc_end162-writeIntra4x4Modes.121
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.122  # -- Begin function writeIntra4x4Modes.122
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.122,@function
writeIntra4x4Modes.122:                 # @writeIntra4x4Modes.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1358461110, -84(%rbp)  # imm = 0x50F878B6
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB163_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_9 Depth 2
                                        #       Child Loop BB163_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB163_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB163_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB163_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB163_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB163_8
.LBB163_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB163_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB163_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB163_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB163_17
.LBB163_8:                              # %if.then
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB163_9:                              # %for.cond24
                                        #   Parent Loop BB163_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB163_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB163_9 Depth=2
	movl	$0, -12(%rbp)
.LBB163_11:                             # %for.cond27
                                        #   Parent Loop BB163_1 Depth=1
                                        #     Parent Loop BB163_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB163_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB163_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB163_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_11
.LBB163_14:                             # %for.end
                                        #   in Loop: Header=BB163_9 Depth=2
	jmp	.LBB163_15
.LBB163_15:                             # %for.inc42
                                        #   in Loop: Header=BB163_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB163_9
.LBB163_16:                             # %for.end44
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_17
.LBB163_17:                             # %if.end
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_18
.LBB163_18:                             # %for.inc45
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_1
.LBB163_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB163_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB163_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB163_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB163_23:                             # %if.end57
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB163_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB163_26
.LBB163_25:                             # %if.else
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB163_26:                             # %if.end65
                                        #   in Loop: Header=BB163_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB163_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_20
.LBB163_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1358461110, -84(%rbp)  # imm = 0x50F878B6
	jne	.LBB163_30
.LBB163_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_29
.Lfunc_end163:
	.size	writeIntra4x4Modes.122, .Lfunc_end163-writeIntra4x4Modes.122
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.123  # -- Begin function writeIntra4x4Modes.123
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.123,@function
writeIntra4x4Modes.123:                 # @writeIntra4x4Modes.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$2007396720, -80(%rbp)  # imm = 0x77A67170
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB164_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_9 Depth 2
                                        #       Child Loop BB164_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB164_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB164_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB164_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB164_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB164_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB164_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB164_8
.LBB164_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB164_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB164_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB164_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB164_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB164_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB164_17
.LBB164_8:                              # %if.then
                                        #   in Loop: Header=BB164_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -28(%rbp)
.LBB164_9:                              # %for.cond24
                                        #   Parent Loop BB164_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB164_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB164_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB164_9 Depth=2
	movl	$0, -12(%rbp)
.LBB164_11:                             # %for.cond27
                                        #   Parent Loop BB164_1 Depth=1
                                        #     Parent Loop BB164_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB164_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB164_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB164_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB164_11
.LBB164_14:                             # %for.end
                                        #   in Loop: Header=BB164_9 Depth=2
	jmp	.LBB164_15
.LBB164_15:                             # %for.inc42
                                        #   in Loop: Header=BB164_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB164_9
.LBB164_16:                             # %for.end44
                                        #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_17
.LBB164_17:                             # %if.end
                                        #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_18
.LBB164_18:                             # %for.inc45
                                        #   in Loop: Header=BB164_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB164_1
.LBB164_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB164_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB164_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB164_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_23:                             # %if.end57
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB164_26
.LBB164_25:                             # %if.else
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB164_26:                             # %if.end65
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB164_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB164_20
.LBB164_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$2007396720, -80(%rbp)  # imm = 0x77A67170
	jne	.LBB164_30
.LBB164_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_29
.Lfunc_end164:
	.size	writeIntra4x4Modes.123, .Lfunc_end164-writeIntra4x4Modes.123
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.124 # -- Begin function IntraChromaPrediction4x4.124
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.124,@function
IntraChromaPrediction4x4.124:           # @IntraChromaPrediction4x4.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$992587379, -28(%rbp)   # imm = 0x3B29AE73
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB165_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB165_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB165_3:                              # %for.cond1
                                        #   Parent Loop BB165_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB165_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB165_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB165_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_3
.LBB165_6:                              # %for.end
                                        #   in Loop: Header=BB165_1 Depth=1
	jmp	.LBB165_7
.LBB165_7:                              # %for.inc17
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_1
.LBB165_8:                              # %for.end19
	cmpl	$992587379, -28(%rbp)   # imm = 0x3B29AE73
	jne	.LBB165_10
.LBB165_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_9
.Lfunc_end165:
	.size	IntraChromaPrediction4x4.124, .Lfunc_end165-IntraChromaPrediction4x4.124
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.125  # -- Begin function predict_nnz_chroma.125
	.p2align	4, 0x90
	.type	predict_nnz_chroma.125,@function
predict_nnz_chroma.125:                 # @predict_nnz_chroma.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$215834159, -64(%rbp)   # imm = 0xCDD5E2F
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB166_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB166_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB166_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB166_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB166_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB166_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB166_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB166_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB166_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB166_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB166_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB166_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB166_13:                             # %if.end57
	jmp	.LBB166_27
.LBB166_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB166_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB166_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB166_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB166_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB166_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB166_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB166_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB166_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB166_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB166_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB166_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB166_26:                             # %if.end124
	jmp	.LBB166_27
.LBB166_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB166_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB166_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$215834159, -64(%rbp)   # imm = 0xCDD5E2F
	jne	.LBB166_31
.LBB166_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_30
.Lfunc_end166:
	.size	predict_nnz_chroma.125, .Lfunc_end166-predict_nnz_chroma.125
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.126       # -- Begin function slice_too_big.126
	.p2align	4, 0x90
	.type	slice_too_big.126,@function
slice_too_big.126:                      # @slice_too_big.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1180160214, -56(%rbp)  # imm = 0x4657D0D6
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB167_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB167_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB167_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB167_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB167_5:                              # %if.end
                                        #   in Loop: Header=BB167_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB167_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB167_7:                              # %if.end8
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB167_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB167_21
.LBB167_9:                              # %if.end11
                                        #   in Loop: Header=BB167_2 Depth=1
	jmp	.LBB167_10
.LBB167_10:                             # %for.inc
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_2
.LBB167_11:                             # %for.end
	jmp	.LBB167_12
.LBB167_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB167_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB167_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB167_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB167_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB167_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB167_21
.LBB167_17:                             # %if.end27
                                        #   in Loop: Header=BB167_14 Depth=1
	jmp	.LBB167_18
.LBB167_18:                             # %for.inc28
                                        #   in Loop: Header=BB167_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_14
.LBB167_19:                             # %for.end30
	jmp	.LBB167_20
.LBB167_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB167_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1180160214, -56(%rbp)  # imm = 0x4657D0D6
	jne	.LBB167_23
.LBB167_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_22
.Lfunc_end167:
	.size	slice_too_big.126, .Lfunc_end167-slice_too_big.126
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.127         # -- Begin function predict_nnz.127
	.p2align	4, 0x90
	.type	predict_nnz.127,@function
predict_nnz.127:                        # @predict_nnz.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1046107081, -56(%rbp)  # imm = 0x3E5A53C9
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB168_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB168_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB168_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB168_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB168_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB168_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB168_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB168_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB168_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB168_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB168_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB168_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB168_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB168_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1046107081, -56(%rbp)  # imm = 0x3E5A53C9
	jne	.LBB168_16
.LBB168_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_15
.Lfunc_end168:
	.size	predict_nnz.127, .Lfunc_end168-predict_nnz.127
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.128 # -- Begin function LumaPrediction4x4Bi.128
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.128,@function
LumaPrediction4x4Bi.128:                # @LumaPrediction4x4Bi.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$2062543764, -84(%rbp)  # imm = 0x7AEFEB94
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB169_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB169_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB169_6
.LBB169_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB169_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB169_5:                              # %land.end
.LBB169_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB169_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB169_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB169_10
.LBB169_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB169_10
.LBB169_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB169_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB169_13
.LBB169_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB169_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB169_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB169_16
.LBB169_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB169_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB169_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB169_19
.LBB169_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB169_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB169_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB169_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB169_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_24:                             # %for.cond58
                                        #   Parent Loop BB169_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB169_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB169_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_24
.LBB169_27:                             # %for.end
                                        #   in Loop: Header=BB169_22 Depth=1
	jmp	.LBB169_28
.LBB169_28:                             # %for.inc96
                                        #   in Loop: Header=BB169_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_22
.LBB169_29:                             # %for.end98
	jmp	.LBB169_50
.LBB169_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB169_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB169_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_34:                             # %for.cond106
                                        #   Parent Loop BB169_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB169_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB169_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_34
.LBB169_37:                             # %for.end132
                                        #   in Loop: Header=BB169_32 Depth=1
	jmp	.LBB169_38
.LBB169_38:                             # %for.inc133
                                        #   in Loop: Header=BB169_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_32
.LBB169_39:                             # %for.end135
	jmp	.LBB169_49
.LBB169_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB169_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_43:                             # %for.cond141
                                        #   Parent Loop BB169_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB169_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB169_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_43
.LBB169_46:                             # %for.end167
                                        #   in Loop: Header=BB169_41 Depth=1
	jmp	.LBB169_47
.LBB169_47:                             # %for.inc168
                                        #   in Loop: Header=BB169_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_41
.LBB169_48:                             # %for.end170
	jmp	.LBB169_49
.LBB169_49:                             # %if.end171
	jmp	.LBB169_50
.LBB169_50:                             # %if.end172
	jmp	.LBB169_82
.LBB169_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB169_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB169_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_55:                             # %for.cond181
                                        #   Parent Loop BB169_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB169_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB169_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_55
.LBB169_58:                             # %for.end197
                                        #   in Loop: Header=BB169_53 Depth=1
	jmp	.LBB169_59
.LBB169_59:                             # %for.inc198
                                        #   in Loop: Header=BB169_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_53
.LBB169_60:                             # %for.end200
	jmp	.LBB169_81
.LBB169_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB169_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB169_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_65:                             # %for.cond209
                                        #   Parent Loop BB169_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB169_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB169_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_65
.LBB169_68:                             # %for.end222
                                        #   in Loop: Header=BB169_63 Depth=1
	jmp	.LBB169_69
.LBB169_69:                             # %for.inc223
                                        #   in Loop: Header=BB169_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_63
.LBB169_70:                             # %for.end225
	jmp	.LBB169_80
.LBB169_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB169_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB169_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB169_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB169_74:                             # %for.cond231
                                        #   Parent Loop BB169_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB169_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB169_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB169_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_74
.LBB169_77:                             # %for.end244
                                        #   in Loop: Header=BB169_72 Depth=1
	jmp	.LBB169_78
.LBB169_78:                             # %for.inc245
                                        #   in Loop: Header=BB169_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_72
.LBB169_79:                             # %for.end247
	jmp	.LBB169_80
.LBB169_80:                             # %if.end248
	jmp	.LBB169_81
.LBB169_81:                             # %if.end249
	jmp	.LBB169_82
.LBB169_82:                             # %if.end250
	cmpl	$2062543764, -84(%rbp)  # imm = 0x7AEFEB94
	jne	.LBB169_84
.LBB169_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_83
.Lfunc_end169:
	.size	LumaPrediction4x4Bi.128, .Lfunc_end169-LumaPrediction4x4Bi.128
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.129 # -- Begin function proceed2nextMacroblock.129
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.129,@function
proceed2nextMacroblock.129:             # @proceed2nextMacroblock.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$364935786, -28(%rbp)   # imm = 0x15C07A6A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB170_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB170_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB170_9
.LBB170_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB170_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB170_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB170_7
.LBB170_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB170_7:                              # %if.end
	jmp	.LBB170_8
.LBB170_8:                              # %if.end48
	jmp	.LBB170_9
.LBB170_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB170_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB170_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB170_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB170_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB170_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB170_16
.LBB170_15:                             # %if.else86
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB170_16:                             # %if.end94
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB170_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB170_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB170_20
.LBB170_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB170_21
.LBB170_20:                             # %if.then107
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB170_22
.LBB170_21:                             # %if.else114
                                        #   in Loop: Header=BB170_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB170_22:                             # %if.end121
                                        #   in Loop: Header=BB170_12 Depth=1
	jmp	.LBB170_23
.LBB170_23:                             # %if.end122
                                        #   in Loop: Header=BB170_12 Depth=1
	jmp	.LBB170_24
.LBB170_24:                             # %for.inc
                                        #   in Loop: Header=BB170_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_12
.LBB170_25:                             # %for.end
	jmp	.LBB170_34
.LBB170_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB170_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB170_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB170_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB170_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB170_32
.LBB170_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB170_32:                             # %if.end155
	jmp	.LBB170_33
.LBB170_33:                             # %if.end156
	jmp	.LBB170_34
.LBB170_34:                             # %if.end157
	jmp	.LBB170_35
.LBB170_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB170_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB170_38
.LBB170_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB170_38:                             # %if.end167
	cmpl	$364935786, -28(%rbp)   # imm = 0x15C07A6A
	jne	.LBB170_40
.LBB170_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_39
.Lfunc_end170:
	.size	proceed2nextMacroblock.129, .Lfunc_end170-proceed2nextMacroblock.129
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.130 # -- Begin function writeChromaIntraPredMode.130
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.130,@function
writeChromaIntraPredMode.130:           # @writeChromaIntraPredMode.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$2103526556, -36(%rbp)  # imm = 0x7D61449C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_3
.LBB171_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$2103526556, -36(%rbp)  # imm = 0x7D61449C
	jne	.LBB171_5
.LBB171_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_4
.Lfunc_end171:
	.size	writeChromaIntraPredMode.130, .Lfunc_end171-writeChromaIntraPredMode.130
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.131 # -- Begin function writeChromaIntraPredMode.131
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.131,@function
writeChromaIntraPredMode.131:           # @writeChromaIntraPredMode.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1321750972, -36(%rbp)  # imm = 0x4EC851BC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB172_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB172_3
.LBB172_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB172_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1321750972, -36(%rbp)  # imm = 0x4EC851BC
	jne	.LBB172_5
.LBB172_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_4
.Lfunc_end172:
	.size	writeChromaIntraPredMode.131, .Lfunc_end172-writeChromaIntraPredMode.131
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.132   # -- Begin function TransformDecision.132
	.p2align	4, 0x90
	.type	TransformDecision.132,@function
TransformDecision.132:                  # @TransformDecision.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1306527211, -76(%rbp)  # imm = 0x4DE005EB
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB173_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB173_3
.LBB173_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB173_3:                              # %if.end
	jmp	.LBB173_4
.LBB173_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_6 Depth 2
                                        #       Child Loop BB173_8 Depth 3
                                        #         Child Loop BB173_10 Depth 4
                                        #           Child Loop BB173_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB173_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB173_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB173_6:                              # %for.cond3
                                        #   Parent Loop BB173_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB173_8 Depth 3
                                        #         Child Loop BB173_10 Depth 4
                                        #           Child Loop BB173_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB173_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB173_8:                              # %for.cond8
                                        #   Parent Loop BB173_4 Depth=1
                                        #     Parent Loop BB173_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_10 Depth 4
                                        #           Child Loop BB173_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB173_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB173_10:                             # %for.cond13
                                        #   Parent Loop BB173_4 Depth=1
                                        #     Parent Loop BB173_6 Depth=2
                                        #       Parent Loop BB173_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB173_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB173_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB173_10 Depth=4
	movl	$0, -24(%rbp)
.LBB173_12:                             # %for.cond17
                                        #   Parent Loop BB173_4 Depth=1
                                        #     Parent Loop BB173_6 Depth=2
                                        #       Parent Loop BB173_8 Depth=3
                                        #         Parent Loop BB173_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB173_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB173_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB173_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB173_12
.LBB173_15:                             # %for.end
                                        #   in Loop: Header=BB173_10 Depth=4
	jmp	.LBB173_16
.LBB173_16:                             # %for.inc38
                                        #   in Loop: Header=BB173_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB173_10
.LBB173_17:                             # %for.end40
                                        #   in Loop: Header=BB173_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB173_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_8
.LBB173_19:                             # %for.end44
                                        #   in Loop: Header=BB173_6 Depth=2
	jmp	.LBB173_20
.LBB173_20:                             # %for.inc45
                                        #   in Loop: Header=BB173_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_6
.LBB173_21:                             # %for.end47
                                        #   in Loop: Header=BB173_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB173_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_4
.LBB173_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB173_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB173_28
.LBB173_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB173_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB173_28
.LBB173_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB173_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1306527211, -76(%rbp)  # imm = 0x4DE005EB
	jne	.LBB173_30
.LBB173_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_29
.Lfunc_end173:
	.size	TransformDecision.132, .Lfunc_end173-TransformDecision.132
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.133      # -- Begin function find_sad_16x16.133
	.p2align	4, 0x90
	.type	find_sad_16x16.133,@function
find_sad_16x16.133:                     # @find_sad_16x16.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1662588868, -80(%rbp)  # imm = 0x631917C4
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB174_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB174_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_1
.LBB174_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB174_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB174_20
.LBB174_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB174_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB174_9
.LBB174_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB174_9
.LBB174_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB174_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB174_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB174_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB174_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB174_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB174_14
.LBB174_13:                             # %cond.false23
                                        #   in Loop: Header=BB174_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB174_14
.LBB174_14:                             # %cond.end24
                                        #   in Loop: Header=BB174_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB174_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_10
.LBB174_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB174_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB174_19
.LBB174_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB174_19
.LBB174_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB174_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB174_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_42 Depth 2
                                        #       Child Loop BB174_44 Depth 3
                                        #     Child Loop BB174_50 Depth 2
                                        #       Child Loop BB174_52 Depth 3
                                        #         Child Loop BB174_54 Depth 4
                                        #         Child Loop BB174_58 Depth 4
                                        #           Child Loop BB174_60 Depth 5
                                        #     Child Loop BB174_72 Depth 2
                                        #       Child Loop BB174_74 Depth 3
                                        #     Child Loop BB174_80 Depth 2
                                        #     Child Loop BB174_84 Depth 2
                                        #       Child Loop BB174_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB174_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB174_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB174_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB174_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB174_32
.LBB174_24:                             # %if.then46
                                        #   in Loop: Header=BB174_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB174_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB174_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB174_28
.LBB174_27:                             # %if.then51
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_95
.LBB174_28:                             # %if.end52
                                        #   in Loop: Header=BB174_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB174_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB174_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_95
.LBB174_31:                             # %if.end57
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_32
.LBB174_32:                             # %if.end58
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB174_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB174_40
.LBB174_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB174_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB174_40
.LBB174_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB174_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB174_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB174_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB174_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB174_41
.LBB174_40:                             # %if.then74
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_94
.LBB174_41:                             # %if.else75
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -16(%rbp)
.LBB174_42:                             # %for.cond76
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB174_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB174_42 Depth=2
	movl	$0, -12(%rbp)
.LBB174_44:                             # %for.cond79
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB174_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB174_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB174_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_44
.LBB174_47:                             # %for.end115
                                        #   in Loop: Header=BB174_42 Depth=2
	jmp	.LBB174_48
.LBB174_48:                             # %for.inc116
                                        #   in Loop: Header=BB174_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_42
.LBB174_49:                             # %for.end118
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB174_50:                             # %for.cond119
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_52 Depth 3
                                        #         Child Loop BB174_54 Depth 4
                                        #         Child Loop BB174_58 Depth 4
                                        #           Child Loop BB174_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB174_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB174_50 Depth=2
	movl	$0, -24(%rbp)
.LBB174_52:                             # %for.cond123
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_54 Depth 4
                                        #         Child Loop BB174_58 Depth 4
                                        #           Child Loop BB174_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB174_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB174_52 Depth=3
	movl	$0, -16(%rbp)
.LBB174_54:                             # %for.cond127
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_50 Depth=2
                                        #       Parent Loop BB174_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB174_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB174_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_54
.LBB174_57:                             # %for.end237
                                        #   in Loop: Header=BB174_52 Depth=3
	movl	$0, -12(%rbp)
.LBB174_58:                             # %for.cond238
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_50 Depth=2
                                        #       Parent Loop BB174_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB174_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB174_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB174_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB174_60:                             # %for.cond346
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_50 Depth=2
                                        #       Parent Loop BB174_52 Depth=3
                                        #         Parent Loop BB174_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB174_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB174_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB174_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB174_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB174_63:                             # %if.end363
                                        #   in Loop: Header=BB174_60 Depth=5
	jmp	.LBB174_64
.LBB174_64:                             # %for.inc364
                                        #   in Loop: Header=BB174_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_60
.LBB174_65:                             # %for.end366
                                        #   in Loop: Header=BB174_58 Depth=4
	jmp	.LBB174_66
.LBB174_66:                             # %for.inc367
                                        #   in Loop: Header=BB174_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_58
.LBB174_67:                             # %for.end369
                                        #   in Loop: Header=BB174_52 Depth=3
	jmp	.LBB174_68
.LBB174_68:                             # %for.inc370
                                        #   in Loop: Header=BB174_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB174_52
.LBB174_69:                             # %for.end372
                                        #   in Loop: Header=BB174_50 Depth=2
	jmp	.LBB174_70
.LBB174_70:                             # %for.inc373
                                        #   in Loop: Header=BB174_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_50
.LBB174_71:                             # %for.end375
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -16(%rbp)
.LBB174_72:                             # %for.cond376
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB174_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB174_72 Depth=2
	movl	$0, -12(%rbp)
.LBB174_74:                             # %for.cond380
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB174_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB174_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB174_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_74
.LBB174_77:                             # %for.end397
                                        #   in Loop: Header=BB174_72 Depth=2
	jmp	.LBB174_78
.LBB174_78:                             # %for.inc398
                                        #   in Loop: Header=BB174_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_72
.LBB174_79:                             # %for.end400
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -16(%rbp)
.LBB174_80:                             # %for.cond401
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB174_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB174_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB174_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_80
.LBB174_83:                             # %for.end463
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -12(%rbp)
.LBB174_84:                             # %for.cond464
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB174_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB174_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB174_86:                             # %for.cond524
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB174_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB174_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB174_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_86
.LBB174_89:                             # %for.end536
                                        #   in Loop: Header=BB174_84 Depth=2
	jmp	.LBB174_90
.LBB174_90:                             # %for.inc537
                                        #   in Loop: Header=BB174_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_84
.LBB174_91:                             # %for.end539
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB174_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB174_93:                             # %if.end543
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_94
.LBB174_94:                             # %if.end544
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_95
.LBB174_95:                             # %for.inc545
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB174_21
.LBB174_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1662588868, -80(%rbp)  # imm = 0x631917C4
	jne	.LBB174_98
.LBB174_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_97
.Lfunc_end174:
	.size	find_sad_16x16.133, .Lfunc_end174-find_sad_16x16.133
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.134   # -- Begin function TransformDecision.134
	.p2align	4, 0x90
	.type	TransformDecision.134,@function
TransformDecision.134:                  # @TransformDecision.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$763754848, -84(%rbp)   # imm = 0x2D85F960
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB175_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB175_3
.LBB175_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB175_3:                              # %if.end
	jmp	.LBB175_4
.LBB175_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_6 Depth 2
                                        #       Child Loop BB175_8 Depth 3
                                        #         Child Loop BB175_10 Depth 4
                                        #           Child Loop BB175_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB175_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB175_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB175_6:                              # %for.cond3
                                        #   Parent Loop BB175_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_8 Depth 3
                                        #         Child Loop BB175_10 Depth 4
                                        #           Child Loop BB175_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB175_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB175_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB175_8:                              # %for.cond8
                                        #   Parent Loop BB175_4 Depth=1
                                        #     Parent Loop BB175_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_10 Depth 4
                                        #           Child Loop BB175_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB175_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB175_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB175_10:                             # %for.cond13
                                        #   Parent Loop BB175_4 Depth=1
                                        #     Parent Loop BB175_6 Depth=2
                                        #       Parent Loop BB175_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB175_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB175_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB175_10 Depth=4
	movl	$0, -24(%rbp)
.LBB175_12:                             # %for.cond17
                                        #   Parent Loop BB175_4 Depth=1
                                        #     Parent Loop BB175_6 Depth=2
                                        #       Parent Loop BB175_8 Depth=3
                                        #         Parent Loop BB175_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB175_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB175_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB175_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB175_12
.LBB175_15:                             # %for.end
                                        #   in Loop: Header=BB175_10 Depth=4
	jmp	.LBB175_16
.LBB175_16:                             # %for.inc38
                                        #   in Loop: Header=BB175_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB175_10
.LBB175_17:                             # %for.end40
                                        #   in Loop: Header=BB175_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB175_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_8
.LBB175_19:                             # %for.end44
                                        #   in Loop: Header=BB175_6 Depth=2
	jmp	.LBB175_20
.LBB175_20:                             # %for.inc45
                                        #   in Loop: Header=BB175_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_6
.LBB175_21:                             # %for.end47
                                        #   in Loop: Header=BB175_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB175_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_4
.LBB175_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB175_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB175_28
.LBB175_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB175_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB175_28
.LBB175_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB175_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$763754848, -84(%rbp)   # imm = 0x2D85F960
	jne	.LBB175_30
.LBB175_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_29
.Lfunc_end175:
	.size	TransformDecision.134, .Lfunc_end175-TransformDecision.134
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.135 # -- Begin function terminate_macroblock.135
	.p2align	4, 0x90
	.type	terminate_macroblock.135,@function
terminate_macroblock.135:               # @terminate_macroblock.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$223034927, -112(%rbp)  # imm = 0xD4B3E2F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB176_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB176_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB176_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB176_5
.LBB176_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB176_8
.LBB176_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB176_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB176_7:                              # %if.end
	jmp	.LBB176_8
.LBB176_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB176_45
# %bb.9:                                # %if.end18
	movq	.LJTI176_0(,%rax,8), %rax
	jmpq	*%rax
.LBB176_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB176_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB176_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB176_46
.LBB176_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB176_46
.LBB176_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB176_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB176_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB176_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB176_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB176_22
.LBB176_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB176_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB176_21:                             # %if.end64
	jmp	.LBB176_22
.LBB176_22:                             # %if.end65
	jmp	.LBB176_23
.LBB176_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB176_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB176_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB176_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB176_27:                             # %if.end79
	jmp	.LBB176_28
.LBB176_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB176_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB176_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB176_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB176_32:                             # %if.end89
	jmp	.LBB176_33
.LBB176_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB176_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB176_35:                             # %if.end95
	jmp	.LBB176_46
.LBB176_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB176_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB176_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB176_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB176_40:                             # %if.end106
	jmp	.LBB176_41
.LBB176_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB176_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB176_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB176_44:                             # %if.end118
	jmp	.LBB176_46
.LBB176_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB176_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB176_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB176_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB176_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB176_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB176_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB176_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB176_51:                             # %if.end139
                                        #   in Loop: Header=BB176_48 Depth=1
	jmp	.LBB176_52
.LBB176_52:                             # %for.inc
                                        #   in Loop: Header=BB176_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB176_48
.LBB176_53:                             # %for.end
	jmp	.LBB176_54
.LBB176_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB176_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB176_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB176_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB176_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB176_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB176_60:                             # %if.end174
	jmp	.LBB176_62
.LBB176_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB176_62:                             # %if.end188
	jmp	.LBB176_63
.LBB176_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB176_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB176_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB176_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB176_67:                             # %if.end218
	cmpl	$223034927, -112(%rbp)  # imm = 0xD4B3E2F
	jne	.LBB176_69
.LBB176_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_68
.Lfunc_end176:
	.size	terminate_macroblock.135, .Lfunc_end176-terminate_macroblock.135
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI176_0:
	.quad	.LBB176_10
	.quad	.LBB176_13
	.quad	.LBB176_14
	.quad	.LBB176_36
                                        # -- End function
	.text
	.globl	predict_nnz.136         # -- Begin function predict_nnz.136
	.p2align	4, 0x90
	.type	predict_nnz.136,@function
predict_nnz.136:                        # @predict_nnz.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2140650409, -56(%rbp)  # imm = 0x7F97BBA9
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB177_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB177_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB177_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB177_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB177_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB177_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB177_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB177_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB177_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB177_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB177_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB177_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB177_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB177_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$2140650409, -56(%rbp)  # imm = 0x7F97BBA9
	jne	.LBB177_16
.LBB177_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_15
.Lfunc_end177:
	.size	predict_nnz.136, .Lfunc_end177-predict_nnz.136
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.137         # -- Begin function predict_nnz.137
	.p2align	4, 0x90
	.type	predict_nnz.137,@function
predict_nnz.137:                        # @predict_nnz.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$375842276, -56(%rbp)   # imm = 0x1666E5E4
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB178_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB178_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB178_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB178_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB178_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB178_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB178_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB178_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB178_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB178_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB178_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB178_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB178_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB178_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$375842276, -56(%rbp)   # imm = 0x1666E5E4
	jne	.LBB178_16
.LBB178_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_15
.Lfunc_end178:
	.size	predict_nnz.137, .Lfunc_end178-predict_nnz.137
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.138 # -- Begin function writeCBPandLumaCoeff.138
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.138,@function
writeCBPandLumaCoeff.138:               # @writeCBPandLumaCoeff.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1761633332, -100(%rbp) # imm = 0x69006434
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB179_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB179_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB179_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB179_7
.LBB179_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB179_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB179_10
.LBB179_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB179_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB179_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB179_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB179_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB179_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB179_18
.LBB179_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB179_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB179_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB179_18
.LBB179_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB179_22
.LBB179_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB179_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB179_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB179_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB179_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB179_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB179_26
.LBB179_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB179_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB179_29
.LBB179_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB179_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB179_30:                             # %if.end93
	jmp	.LBB179_31
.LBB179_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB179_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB179_42
.LBB179_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB179_36
.LBB179_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB179_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB179_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB179_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB179_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB179_41
.LBB179_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB179_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB179_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB179_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB179_43 Depth=1
	movl	$0, -20(%rbp)
.LBB179_45:                             # %for.cond141
                                        #   Parent Loop BB179_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB179_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB179_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB179_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB179_45
.LBB179_48:                             # %for.end
                                        #   in Loop: Header=BB179_43 Depth=1
	jmp	.LBB179_49
.LBB179_49:                             # %for.inc152
                                        #   in Loop: Header=BB179_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_43
.LBB179_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB179_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB179_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB179_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB179_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB179_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB179_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB179_55:                             # %if.end169
                                        #   in Loop: Header=BB179_52 Depth=1
	jmp	.LBB179_56
.LBB179_56:                             # %for.inc170
                                        #   in Loop: Header=BB179_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB179_52
.LBB179_57:                             # %for.end172
	jmp	.LBB179_101
.LBB179_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB179_70
.LBB179_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB179_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB179_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB179_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB179_63:                             # %land.end184
                                        #   in Loop: Header=BB179_61 Depth=1
	testb	$1, %al
	jne	.LBB179_64
	jmp	.LBB179_69
.LBB179_64:                             # %for.body186
                                        #   in Loop: Header=BB179_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB179_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB179_67
.LBB179_66:                             # %if.else196
                                        #   in Loop: Header=BB179_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB179_67:                             # %if.end198
                                        #   in Loop: Header=BB179_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB179_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB179_61
.LBB179_69:                             # %for.end218
	jmp	.LBB179_70
.LBB179_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB179_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB179_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_74 Depth 2
                                        #       Child Loop BB179_76 Depth 3
                                        #         Child Loop BB179_78 Depth 4
                                        #           Child Loop BB179_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB179_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB179_72 Depth=1
	movl	$0, -52(%rbp)
.LBB179_74:                             # %for.cond226
                                        #   Parent Loop BB179_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_76 Depth 3
                                        #         Child Loop BB179_78 Depth 4
                                        #           Child Loop BB179_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB179_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB179_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB179_76:                             # %for.cond229
                                        #   Parent Loop BB179_72 Depth=1
                                        #     Parent Loop BB179_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB179_78 Depth 4
                                        #           Child Loop BB179_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB179_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB179_78:                             # %for.cond233
                                        #   Parent Loop BB179_72 Depth=1
                                        #     Parent Loop BB179_74 Depth=2
                                        #       Parent Loop BB179_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB179_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB179_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB179_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB179_91
.LBB179_81:                             # %if.else247
                                        #   in Loop: Header=BB179_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB179_82:                             # %for.cond259
                                        #   Parent Loop BB179_72 Depth=1
                                        #     Parent Loop BB179_74 Depth=2
                                        #       Parent Loop BB179_76 Depth=3
                                        #         Parent Loop BB179_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB179_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB179_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB179_84:                             # %land.end263
                                        #   in Loop: Header=BB179_82 Depth=5
	testb	$1, %al
	jne	.LBB179_85
	jmp	.LBB179_90
.LBB179_85:                             # %for.body265
                                        #   in Loop: Header=BB179_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB179_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB179_88
.LBB179_87:                             # %if.else276
                                        #   in Loop: Header=BB179_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB179_88:                             # %if.end278
                                        #   in Loop: Header=BB179_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB179_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB179_82
.LBB179_90:                             # %for.end300
                                        #   in Loop: Header=BB179_78 Depth=4
	jmp	.LBB179_91
.LBB179_91:                             # %if.end301
                                        #   in Loop: Header=BB179_78 Depth=4
	jmp	.LBB179_92
.LBB179_92:                             # %for.inc302
                                        #   in Loop: Header=BB179_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB179_78
.LBB179_93:                             # %for.end304
                                        #   in Loop: Header=BB179_76 Depth=3
	jmp	.LBB179_94
.LBB179_94:                             # %for.inc305
                                        #   in Loop: Header=BB179_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_76
.LBB179_95:                             # %for.end307
                                        #   in Loop: Header=BB179_74 Depth=2
	jmp	.LBB179_96
.LBB179_96:                             # %for.inc308
                                        #   in Loop: Header=BB179_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB179_74
.LBB179_97:                             # %for.end310
                                        #   in Loop: Header=BB179_72 Depth=1
	jmp	.LBB179_98
.LBB179_98:                             # %for.inc311
                                        #   in Loop: Header=BB179_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB179_72
.LBB179_99:                             # %for.end313
	jmp	.LBB179_100
.LBB179_100:                            # %if.end314
	jmp	.LBB179_101
.LBB179_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1761633332, -100(%rbp) # imm = 0x69006434
	jne	.LBB179_103
.LBB179_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_102
.Lfunc_end179:
	.size	writeCBPandLumaCoeff.138, .Lfunc_end179-writeCBPandLumaCoeff.138
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.139 # -- Begin function ChromaPrediction4x4.139
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.139,@function
ChromaPrediction4x4.139:                # @ChromaPrediction4x4.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1819423200, -72(%rbp)  # imm = 0x6C7231E0
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB180_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB180_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB180_6
.LBB180_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB180_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB180_5:                              # %land.end
.LBB180_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB180_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB180_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB180_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB180_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB180_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB180_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB180_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB180_15
.LBB180_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB180_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB180_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB180_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB180_87
.LBB180_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB180_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB180_21
.LBB180_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB180_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB180_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB180_24
.LBB180_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB180_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB180_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB180_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB180_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_29:                             # %for.cond52
                                        #   Parent Loop BB180_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB180_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB180_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_29
.LBB180_32:                             # %for.end
                                        #   in Loop: Header=BB180_27 Depth=1
	jmp	.LBB180_33
.LBB180_33:                             # %for.inc99
                                        #   in Loop: Header=BB180_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_27
.LBB180_34:                             # %for.end101
	jmp	.LBB180_55
.LBB180_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB180_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB180_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_39:                             # %for.cond109
                                        #   Parent Loop BB180_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB180_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB180_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_39
.LBB180_42:                             # %for.end139
                                        #   in Loop: Header=BB180_37 Depth=1
	jmp	.LBB180_43
.LBB180_43:                             # %for.inc140
                                        #   in Loop: Header=BB180_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_37
.LBB180_44:                             # %for.end142
	jmp	.LBB180_54
.LBB180_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB180_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_48:                             # %for.cond148
                                        #   Parent Loop BB180_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB180_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB180_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_48
.LBB180_51:                             # %for.end178
                                        #   in Loop: Header=BB180_46 Depth=1
	jmp	.LBB180_52
.LBB180_52:                             # %for.inc179
                                        #   in Loop: Header=BB180_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_46
.LBB180_53:                             # %for.end181
	jmp	.LBB180_54
.LBB180_54:                             # %if.end182
	jmp	.LBB180_55
.LBB180_55:                             # %if.end183
	jmp	.LBB180_87
.LBB180_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB180_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB180_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_60:                             # %for.cond192
                                        #   Parent Loop BB180_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB180_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB180_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_60
.LBB180_63:                             # %for.end208
                                        #   in Loop: Header=BB180_58 Depth=1
	jmp	.LBB180_64
.LBB180_64:                             # %for.inc209
                                        #   in Loop: Header=BB180_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_58
.LBB180_65:                             # %for.end211
	jmp	.LBB180_86
.LBB180_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB180_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB180_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_70:                             # %for.cond220
                                        #   Parent Loop BB180_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB180_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB180_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_70
.LBB180_73:                             # %for.end233
                                        #   in Loop: Header=BB180_68 Depth=1
	jmp	.LBB180_74
.LBB180_74:                             # %for.inc234
                                        #   in Loop: Header=BB180_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_68
.LBB180_75:                             # %for.end236
	jmp	.LBB180_85
.LBB180_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB180_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB180_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB180_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB180_79:                             # %for.cond242
                                        #   Parent Loop BB180_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB180_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB180_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB180_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_79
.LBB180_82:                             # %for.end255
                                        #   in Loop: Header=BB180_77 Depth=1
	jmp	.LBB180_83
.LBB180_83:                             # %for.inc256
                                        #   in Loop: Header=BB180_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_77
.LBB180_84:                             # %for.end258
	jmp	.LBB180_85
.LBB180_85:                             # %if.end259
	jmp	.LBB180_86
.LBB180_86:                             # %if.end260
	jmp	.LBB180_87
.LBB180_87:                             # %if.end261
	cmpl	$1819423200, -72(%rbp)  # imm = 0x6C7231E0
	jne	.LBB180_89
.LBB180_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_88
.Lfunc_end180:
	.size	ChromaPrediction4x4.139, .Lfunc_end180-ChromaPrediction4x4.139
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.140 # -- Begin function LumaPrediction4x4Bi.140
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.140,@function
LumaPrediction4x4Bi.140:                # @LumaPrediction4x4Bi.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$904355673, -80(%rbp)   # imm = 0x35E75F59
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB181_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB181_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB181_6
.LBB181_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB181_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB181_5:                              # %land.end
.LBB181_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB181_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB181_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB181_10
.LBB181_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB181_10
.LBB181_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB181_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB181_13
.LBB181_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB181_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB181_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB181_16
.LBB181_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB181_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB181_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB181_19
.LBB181_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB181_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB181_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB181_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB181_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_24:                             # %for.cond58
                                        #   Parent Loop BB181_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB181_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB181_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_24
.LBB181_27:                             # %for.end
                                        #   in Loop: Header=BB181_22 Depth=1
	jmp	.LBB181_28
.LBB181_28:                             # %for.inc96
                                        #   in Loop: Header=BB181_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_22
.LBB181_29:                             # %for.end98
	jmp	.LBB181_50
.LBB181_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB181_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB181_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_34:                             # %for.cond106
                                        #   Parent Loop BB181_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB181_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB181_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_34
.LBB181_37:                             # %for.end132
                                        #   in Loop: Header=BB181_32 Depth=1
	jmp	.LBB181_38
.LBB181_38:                             # %for.inc133
                                        #   in Loop: Header=BB181_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_32
.LBB181_39:                             # %for.end135
	jmp	.LBB181_49
.LBB181_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB181_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_43:                             # %for.cond141
                                        #   Parent Loop BB181_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB181_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB181_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_43
.LBB181_46:                             # %for.end167
                                        #   in Loop: Header=BB181_41 Depth=1
	jmp	.LBB181_47
.LBB181_47:                             # %for.inc168
                                        #   in Loop: Header=BB181_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_41
.LBB181_48:                             # %for.end170
	jmp	.LBB181_49
.LBB181_49:                             # %if.end171
	jmp	.LBB181_50
.LBB181_50:                             # %if.end172
	jmp	.LBB181_82
.LBB181_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB181_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB181_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_55:                             # %for.cond181
                                        #   Parent Loop BB181_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB181_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB181_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_55
.LBB181_58:                             # %for.end197
                                        #   in Loop: Header=BB181_53 Depth=1
	jmp	.LBB181_59
.LBB181_59:                             # %for.inc198
                                        #   in Loop: Header=BB181_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_53
.LBB181_60:                             # %for.end200
	jmp	.LBB181_81
.LBB181_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB181_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB181_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_65:                             # %for.cond209
                                        #   Parent Loop BB181_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB181_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB181_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_65
.LBB181_68:                             # %for.end222
                                        #   in Loop: Header=BB181_63 Depth=1
	jmp	.LBB181_69
.LBB181_69:                             # %for.inc223
                                        #   in Loop: Header=BB181_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_63
.LBB181_70:                             # %for.end225
	jmp	.LBB181_80
.LBB181_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB181_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB181_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB181_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB181_74:                             # %for.cond231
                                        #   Parent Loop BB181_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB181_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB181_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB181_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_74
.LBB181_77:                             # %for.end244
                                        #   in Loop: Header=BB181_72 Depth=1
	jmp	.LBB181_78
.LBB181_78:                             # %for.inc245
                                        #   in Loop: Header=BB181_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_72
.LBB181_79:                             # %for.end247
	jmp	.LBB181_80
.LBB181_80:                             # %if.end248
	jmp	.LBB181_81
.LBB181_81:                             # %if.end249
	jmp	.LBB181_82
.LBB181_82:                             # %if.end250
	cmpl	$904355673, -80(%rbp)   # imm = 0x35E75F59
	jne	.LBB181_84
.LBB181_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_83
.Lfunc_end181:
	.size	LumaPrediction4x4Bi.140, .Lfunc_end181-LumaPrediction4x4Bi.140
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.141        # -- Begin function MBType2Value.141
	.p2align	4, 0x90
	.type	MBType2Value.141,@function
MBType2Value.141:                       # @MBType2Value.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$536140574, -36(%rbp)   # imm = 0x1FF4DB1E
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB182_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB182_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB182_4
.LBB182_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB182_26
.LBB182_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB182_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB182_26
.LBB182_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB182_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB182_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB182_26
.LBB182_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB182_26
.LBB182_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_26
.LBB182_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB182_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB182_26
.LBB182_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB182_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB182_17
.LBB182_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB182_26
.LBB182_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB182_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_26
.LBB182_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB182_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB182_26
.LBB182_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB182_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_26
.LBB182_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB182_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_26
.LBB182_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB182_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$536140574, -36(%rbp)   # imm = 0x1FF4DB1E
	jne	.LBB182_28
.LBB182_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_27
.Lfunc_end182:
	.size	MBType2Value.141, .Lfunc_end182-MBType2Value.141
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.142 # -- Begin function writeLumaCoeff8x8_CABAC.142
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.142,@function
writeLumaCoeff8x8_CABAC.142:            # @writeLumaCoeff8x8_CABAC.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1351450062, -60(%rbp)  # imm = 0x508D7DCE
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB183_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB183_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB183_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB183_3:                              # %land.end
                                        #   in Loop: Header=BB183_1 Depth=1
	testb	$1, %al
	jne	.LBB183_4
	jmp	.LBB183_12
.LBB183_4:                              # %for.body
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB183_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB183_7
.LBB183_6:                              # %cond.false
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB183_7:                              # %cond.end
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB183_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB183_10
.LBB183_9:                              # %if.else
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB183_10:                             # %if.end
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_1
.LBB183_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1351450062, -60(%rbp)  # imm = 0x508D7DCE
	jne	.LBB183_14
.LBB183_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_13
.Lfunc_end183:
	.size	writeLumaCoeff8x8_CABAC.142, .Lfunc_end183-writeLumaCoeff8x8_CABAC.142
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.143 # -- Begin function SetModesAndRefframe.143
	.p2align	4, 0x90
	.type	SetModesAndRefframe.143,@function
SetModesAndRefframe.143:                # @SetModesAndRefframe.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$721315097, -60(%rbp)   # imm = 0x2AFE6519
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB184_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB184_12
.LBB184_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB184_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB184_11
.LBB184_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB184_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB184_10
.LBB184_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB184_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB184_9
.LBB184_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB184_9:                              # %if.end
	jmp	.LBB184_10
.LBB184_10:                             # %if.end86
	jmp	.LBB184_11
.LBB184_11:                             # %if.end87
	jmp	.LBB184_12
.LBB184_12:                             # %if.end88
	cmpl	$721315097, -60(%rbp)   # imm = 0x2AFE6519
	jne	.LBB184_14
.LBB184_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_13
.Lfunc_end184:
	.size	SetModesAndRefframe.143, .Lfunc_end184-SetModesAndRefframe.143
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.144 # -- Begin function terminate_macroblock.144
	.p2align	4, 0x90
	.type	terminate_macroblock.144,@function
terminate_macroblock.144:               # @terminate_macroblock.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1194681766, -108(%rbp) # imm = 0x473565A6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB185_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB185_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB185_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB185_5
.LBB185_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB185_8
.LBB185_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB185_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB185_7:                              # %if.end
	jmp	.LBB185_8
.LBB185_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB185_45
# %bb.9:                                # %if.end18
	movq	.LJTI185_0(,%rax,8), %rax
	jmpq	*%rax
.LBB185_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB185_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB185_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB185_46
.LBB185_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB185_46
.LBB185_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB185_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB185_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB185_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB185_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB185_22
.LBB185_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB185_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB185_21:                             # %if.end64
	jmp	.LBB185_22
.LBB185_22:                             # %if.end65
	jmp	.LBB185_23
.LBB185_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB185_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB185_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB185_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB185_27:                             # %if.end79
	jmp	.LBB185_28
.LBB185_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB185_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB185_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB185_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB185_32:                             # %if.end89
	jmp	.LBB185_33
.LBB185_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB185_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB185_35:                             # %if.end95
	jmp	.LBB185_46
.LBB185_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB185_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB185_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB185_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB185_40:                             # %if.end106
	jmp	.LBB185_41
.LBB185_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB185_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB185_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB185_44:                             # %if.end118
	jmp	.LBB185_46
.LBB185_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB185_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB185_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB185_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB185_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB185_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB185_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB185_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB185_51:                             # %if.end139
                                        #   in Loop: Header=BB185_48 Depth=1
	jmp	.LBB185_52
.LBB185_52:                             # %for.inc
                                        #   in Loop: Header=BB185_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB185_48
.LBB185_53:                             # %for.end
	jmp	.LBB185_54
.LBB185_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB185_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB185_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB185_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB185_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB185_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB185_60:                             # %if.end174
	jmp	.LBB185_62
.LBB185_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB185_62:                             # %if.end188
	jmp	.LBB185_63
.LBB185_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB185_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB185_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB185_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB185_67:                             # %if.end218
	cmpl	$1194681766, -108(%rbp) # imm = 0x473565A6
	jne	.LBB185_69
.LBB185_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_68
.Lfunc_end185:
	.size	terminate_macroblock.144, .Lfunc_end185-terminate_macroblock.144
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI185_0:
	.quad	.LBB185_10
	.quad	.LBB185_13
	.quad	.LBB185_14
	.quad	.LBB185_36
                                        # -- End function
	.text
	.globl	writeMotionInfo2NAL.145 # -- Begin function writeMotionInfo2NAL.145
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.145,@function
writeMotionInfo2NAL.145:                # @writeMotionInfo2NAL.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$226782405, -56(%rbp)   # imm = 0xD846CC5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB186_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB186_3
.LBB186_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB186_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB186_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB186_6
.LBB186_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB186_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB186_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB186_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB186_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB186_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB186_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB186_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB186_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB186_39
.LBB186_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB186_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB186_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB186_15 Depth=1
	movl	$0, -12(%rbp)
.LBB186_17:                             # %for.cond45
                                        #   Parent Loop BB186_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB186_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB186_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB186_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB186_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB186_22
.LBB186_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB186_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB186_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB186_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB186_22:                             # %if.end
                                        #   in Loop: Header=BB186_17 Depth=2
	jmp	.LBB186_23
.LBB186_23:                             # %for.inc
                                        #   in Loop: Header=BB186_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_17
.LBB186_24:                             # %for.end
                                        #   in Loop: Header=BB186_15 Depth=1
	jmp	.LBB186_25
.LBB186_25:                             # %for.inc79
                                        #   in Loop: Header=BB186_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_15
.LBB186_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB186_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB186_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB186_27 Depth=1
	movl	$0, -12(%rbp)
.LBB186_29:                             # %for.cond86
                                        #   Parent Loop BB186_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB186_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB186_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB186_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB186_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB186_34
.LBB186_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB186_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB186_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB186_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB186_34:                             # %if.end126
                                        #   in Loop: Header=BB186_29 Depth=2
	jmp	.LBB186_35
.LBB186_35:                             # %for.inc127
                                        #   in Loop: Header=BB186_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_29
.LBB186_36:                             # %for.end129
                                        #   in Loop: Header=BB186_27 Depth=1
	jmp	.LBB186_37
.LBB186_37:                             # %for.inc130
                                        #   in Loop: Header=BB186_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_27
.LBB186_38:                             # %for.end132
	jmp	.LBB186_39
.LBB186_39:                             # %if.end133
	jmp	.LBB186_40
.LBB186_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB186_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB186_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB186_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB186_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB186_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB186_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB186_45 Depth=1
	movl	$0, -12(%rbp)
.LBB186_47:                             # %for.cond155
                                        #   Parent Loop BB186_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB186_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB186_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB186_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB186_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB186_52
.LBB186_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB186_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB186_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB186_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB186_52:                             # %if.end197
                                        #   in Loop: Header=BB186_47 Depth=2
	jmp	.LBB186_53
.LBB186_53:                             # %for.inc198
                                        #   in Loop: Header=BB186_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_47
.LBB186_54:                             # %for.end200
                                        #   in Loop: Header=BB186_45 Depth=1
	jmp	.LBB186_55
.LBB186_55:                             # %for.inc201
                                        #   in Loop: Header=BB186_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_45
.LBB186_56:                             # %for.end203
	jmp	.LBB186_57
.LBB186_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB186_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB186_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB186_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB186_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB186_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB186_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB186_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB186_63 Depth=1
	movl	$0, -12(%rbp)
.LBB186_65:                             # %for.cond227
                                        #   Parent Loop BB186_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB186_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB186_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB186_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB186_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB186_70
.LBB186_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB186_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB186_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB186_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB186_70:                             # %if.end269
                                        #   in Loop: Header=BB186_65 Depth=2
	jmp	.LBB186_71
.LBB186_71:                             # %for.inc270
                                        #   in Loop: Header=BB186_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_65
.LBB186_72:                             # %for.end272
                                        #   in Loop: Header=BB186_63 Depth=1
	jmp	.LBB186_73
.LBB186_73:                             # %for.inc273
                                        #   in Loop: Header=BB186_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_63
.LBB186_74:                             # %for.end275
	jmp	.LBB186_75
.LBB186_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$226782405, -56(%rbp)   # imm = 0xD846CC5
	jne	.LBB186_77
.LBB186_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_76
.Lfunc_end186:
	.size	writeMotionInfo2NAL.145, .Lfunc_end186-writeMotionInfo2NAL.145
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.146   # -- Begin function TransformDecision.146
	.p2align	4, 0x90
	.type	TransformDecision.146,@function
TransformDecision.146:                  # @TransformDecision.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1448172177, -88(%rbp)  # imm = 0x56515A91
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB187_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB187_3
.LBB187_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB187_3:                              # %if.end
	jmp	.LBB187_4
.LBB187_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_6 Depth 2
                                        #       Child Loop BB187_8 Depth 3
                                        #         Child Loop BB187_10 Depth 4
                                        #           Child Loop BB187_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB187_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB187_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB187_6:                              # %for.cond3
                                        #   Parent Loop BB187_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB187_8 Depth 3
                                        #         Child Loop BB187_10 Depth 4
                                        #           Child Loop BB187_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB187_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB187_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB187_8:                              # %for.cond8
                                        #   Parent Loop BB187_4 Depth=1
                                        #     Parent Loop BB187_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB187_10 Depth 4
                                        #           Child Loop BB187_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB187_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB187_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB187_10:                             # %for.cond13
                                        #   Parent Loop BB187_4 Depth=1
                                        #     Parent Loop BB187_6 Depth=2
                                        #       Parent Loop BB187_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB187_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB187_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB187_10 Depth=4
	movl	$0, -28(%rbp)
.LBB187_12:                             # %for.cond17
                                        #   Parent Loop BB187_4 Depth=1
                                        #     Parent Loop BB187_6 Depth=2
                                        #       Parent Loop BB187_8 Depth=3
                                        #         Parent Loop BB187_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB187_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB187_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB187_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB187_12
.LBB187_15:                             # %for.end
                                        #   in Loop: Header=BB187_10 Depth=4
	jmp	.LBB187_16
.LBB187_16:                             # %for.inc38
                                        #   in Loop: Header=BB187_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB187_10
.LBB187_17:                             # %for.end40
                                        #   in Loop: Header=BB187_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB187_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB187_8
.LBB187_19:                             # %for.end44
                                        #   in Loop: Header=BB187_6 Depth=2
	jmp	.LBB187_20
.LBB187_20:                             # %for.inc45
                                        #   in Loop: Header=BB187_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB187_6
.LBB187_21:                             # %for.end47
                                        #   in Loop: Header=BB187_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB187_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_4
.LBB187_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB187_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB187_28
.LBB187_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB187_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB187_28
.LBB187_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB187_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1448172177, -88(%rbp)  # imm = 0x56515A91
	jne	.LBB187_30
.LBB187_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_29
.Lfunc_end187:
	.size	TransformDecision.146, .Lfunc_end187-TransformDecision.146
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.147 # -- Begin function terminate_macroblock.147
	.p2align	4, 0x90
	.type	terminate_macroblock.147,@function
terminate_macroblock.147:               # @terminate_macroblock.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$952680782, -112(%rbp)  # imm = 0x38C8C14E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB188_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB188_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB188_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB188_5
.LBB188_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB188_8
.LBB188_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB188_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB188_7:                              # %if.end
	jmp	.LBB188_8
.LBB188_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB188_45
# %bb.9:                                # %if.end18
	movq	.LJTI188_0(,%rax,8), %rax
	jmpq	*%rax
.LBB188_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB188_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB188_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB188_46
.LBB188_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB188_46
.LBB188_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB188_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB188_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB188_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB188_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB188_22
.LBB188_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB188_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB188_21:                             # %if.end64
	jmp	.LBB188_22
.LBB188_22:                             # %if.end65
	jmp	.LBB188_23
.LBB188_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB188_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB188_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB188_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB188_27:                             # %if.end79
	jmp	.LBB188_28
.LBB188_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB188_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB188_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB188_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB188_32:                             # %if.end89
	jmp	.LBB188_33
.LBB188_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB188_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB188_35:                             # %if.end95
	jmp	.LBB188_46
.LBB188_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB188_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB188_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB188_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB188_40:                             # %if.end106
	jmp	.LBB188_41
.LBB188_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB188_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB188_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB188_44:                             # %if.end118
	jmp	.LBB188_46
.LBB188_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB188_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB188_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB188_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB188_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB188_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB188_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB188_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB188_51:                             # %if.end139
                                        #   in Loop: Header=BB188_48 Depth=1
	jmp	.LBB188_52
.LBB188_52:                             # %for.inc
                                        #   in Loop: Header=BB188_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB188_48
.LBB188_53:                             # %for.end
	jmp	.LBB188_54
.LBB188_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB188_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB188_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB188_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB188_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB188_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB188_60:                             # %if.end174
	jmp	.LBB188_62
.LBB188_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB188_62:                             # %if.end188
	jmp	.LBB188_63
.LBB188_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB188_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB188_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB188_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB188_67:                             # %if.end218
	cmpl	$952680782, -112(%rbp)  # imm = 0x38C8C14E
	jne	.LBB188_69
.LBB188_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_68
.Lfunc_end188:
	.size	terminate_macroblock.147, .Lfunc_end188-terminate_macroblock.147
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI188_0:
	.quad	.LBB188_10
	.quad	.LBB188_13
	.quad	.LBB188_14
	.quad	.LBB188_36
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.148 # -- Begin function SetModesAndRefframe.148
	.p2align	4, 0x90
	.type	SetModesAndRefframe.148,@function
SetModesAndRefframe.148:                # @SetModesAndRefframe.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2117484758, -60(%rbp)  # imm = 0x7E3640D6
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB189_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB189_12
.LBB189_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB189_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB189_11
.LBB189_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB189_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB189_10
.LBB189_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB189_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB189_9
.LBB189_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB189_9:                              # %if.end
	jmp	.LBB189_10
.LBB189_10:                             # %if.end86
	jmp	.LBB189_11
.LBB189_11:                             # %if.end87
	jmp	.LBB189_12
.LBB189_12:                             # %if.end88
	cmpl	$2117484758, -60(%rbp)  # imm = 0x7E3640D6
	jne	.LBB189_14
.LBB189_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_13
.Lfunc_end189:
	.size	SetModesAndRefframe.148, .Lfunc_end189-SetModesAndRefframe.148
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.149   # -- Begin function writeLumaCoeff8x8.149
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.149,@function
writeLumaCoeff8x8.149:                  # @writeLumaCoeff8x8.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$834196475, -36(%rbp)   # imm = 0x31B8D3FB
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB190_2
# %bb.1:                                # %if.then
	jmp	.LBB190_2
.LBB190_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB190_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB190_15
.LBB190_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB190_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB190_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB190_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB190_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB190_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB190_10
.LBB190_9:                              # %cond.false
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB190_10:                             # %cond.end
                                        #   in Loop: Header=BB190_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB190_12
.LBB190_11:                             # %if.else
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB190_12:                             # %if.end17
                                        #   in Loop: Header=BB190_5 Depth=1
	jmp	.LBB190_13
.LBB190_13:                             # %for.inc
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB190_5
.LBB190_14:                             # %for.end
	jmp	.LBB190_19
.LBB190_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB190_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB190_18
.LBB190_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB190_18:                             # %if.end27
	jmp	.LBB190_19
.LBB190_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$834196475, -36(%rbp)   # imm = 0x31B8D3FB
	jne	.LBB190_21
.LBB190_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_20
.Lfunc_end190:
	.size	writeLumaCoeff8x8.149, .Lfunc_end190-writeLumaCoeff8x8.149
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.150      # -- Begin function find_sad_16x16.150
	.p2align	4, 0x90
	.type	find_sad_16x16.150,@function
find_sad_16x16.150:                     # @find_sad_16x16.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1644908857, -80(%rbp)  # imm = 0x620B5139
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB191_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB191_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_1
.LBB191_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB191_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB191_20
.LBB191_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB191_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB191_9
.LBB191_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB191_9
.LBB191_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB191_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB191_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB191_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB191_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB191_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB191_14
.LBB191_13:                             # %cond.false23
                                        #   in Loop: Header=BB191_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB191_14
.LBB191_14:                             # %cond.end24
                                        #   in Loop: Header=BB191_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB191_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_10
.LBB191_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB191_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB191_19
.LBB191_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB191_19
.LBB191_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB191_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB191_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_42 Depth 2
                                        #       Child Loop BB191_44 Depth 3
                                        #     Child Loop BB191_50 Depth 2
                                        #       Child Loop BB191_52 Depth 3
                                        #         Child Loop BB191_54 Depth 4
                                        #         Child Loop BB191_58 Depth 4
                                        #           Child Loop BB191_60 Depth 5
                                        #     Child Loop BB191_72 Depth 2
                                        #       Child Loop BB191_74 Depth 3
                                        #     Child Loop BB191_80 Depth 2
                                        #     Child Loop BB191_84 Depth 2
                                        #       Child Loop BB191_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB191_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB191_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB191_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB191_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB191_32
.LBB191_24:                             # %if.then46
                                        #   in Loop: Header=BB191_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB191_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB191_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB191_28
.LBB191_27:                             # %if.then51
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_95
.LBB191_28:                             # %if.end52
                                        #   in Loop: Header=BB191_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB191_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB191_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_95
.LBB191_31:                             # %if.end57
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_32
.LBB191_32:                             # %if.end58
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB191_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB191_40
.LBB191_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB191_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB191_40
.LBB191_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB191_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB191_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB191_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB191_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB191_41
.LBB191_40:                             # %if.then74
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_94
.LBB191_41:                             # %if.else75
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	$0, -16(%rbp)
.LBB191_42:                             # %for.cond76
                                        #   Parent Loop BB191_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB191_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB191_42 Depth=2
	movl	$0, -12(%rbp)
.LBB191_44:                             # %for.cond79
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB191_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB191_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB191_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_44
.LBB191_47:                             # %for.end115
                                        #   in Loop: Header=BB191_42 Depth=2
	jmp	.LBB191_48
.LBB191_48:                             # %for.inc116
                                        #   in Loop: Header=BB191_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_42
.LBB191_49:                             # %for.end118
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB191_50:                             # %for.cond119
                                        #   Parent Loop BB191_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_52 Depth 3
                                        #         Child Loop BB191_54 Depth 4
                                        #         Child Loop BB191_58 Depth 4
                                        #           Child Loop BB191_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB191_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB191_50 Depth=2
	movl	$0, -20(%rbp)
.LBB191_52:                             # %for.cond123
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_54 Depth 4
                                        #         Child Loop BB191_58 Depth 4
                                        #           Child Loop BB191_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB191_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB191_52 Depth=3
	movl	$0, -16(%rbp)
.LBB191_54:                             # %for.cond127
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_50 Depth=2
                                        #       Parent Loop BB191_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB191_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB191_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB191_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_54
.LBB191_57:                             # %for.end237
                                        #   in Loop: Header=BB191_52 Depth=3
	movl	$0, -12(%rbp)
.LBB191_58:                             # %for.cond238
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_50 Depth=2
                                        #       Parent Loop BB191_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB191_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB191_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB191_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB191_60:                             # %for.cond346
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_50 Depth=2
                                        #       Parent Loop BB191_52 Depth=3
                                        #         Parent Loop BB191_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB191_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB191_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB191_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB191_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB191_63:                             # %if.end363
                                        #   in Loop: Header=BB191_60 Depth=5
	jmp	.LBB191_64
.LBB191_64:                             # %for.inc364
                                        #   in Loop: Header=BB191_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_60
.LBB191_65:                             # %for.end366
                                        #   in Loop: Header=BB191_58 Depth=4
	jmp	.LBB191_66
.LBB191_66:                             # %for.inc367
                                        #   in Loop: Header=BB191_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_58
.LBB191_67:                             # %for.end369
                                        #   in Loop: Header=BB191_52 Depth=3
	jmp	.LBB191_68
.LBB191_68:                             # %for.inc370
                                        #   in Loop: Header=BB191_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_52
.LBB191_69:                             # %for.end372
                                        #   in Loop: Header=BB191_50 Depth=2
	jmp	.LBB191_70
.LBB191_70:                             # %for.inc373
                                        #   in Loop: Header=BB191_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB191_50
.LBB191_71:                             # %for.end375
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	$0, -16(%rbp)
.LBB191_72:                             # %for.cond376
                                        #   Parent Loop BB191_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB191_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB191_72 Depth=2
	movl	$0, -12(%rbp)
.LBB191_74:                             # %for.cond380
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB191_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB191_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB191_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_74
.LBB191_77:                             # %for.end397
                                        #   in Loop: Header=BB191_72 Depth=2
	jmp	.LBB191_78
.LBB191_78:                             # %for.inc398
                                        #   in Loop: Header=BB191_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_72
.LBB191_79:                             # %for.end400
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	$0, -16(%rbp)
.LBB191_80:                             # %for.cond401
                                        #   Parent Loop BB191_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB191_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB191_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB191_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_80
.LBB191_83:                             # %for.end463
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	$0, -12(%rbp)
.LBB191_84:                             # %for.cond464
                                        #   Parent Loop BB191_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB191_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB191_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB191_86:                             # %for.cond524
                                        #   Parent Loop BB191_21 Depth=1
                                        #     Parent Loop BB191_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB191_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB191_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB191_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_86
.LBB191_89:                             # %for.end536
                                        #   in Loop: Header=BB191_84 Depth=2
	jmp	.LBB191_90
.LBB191_90:                             # %for.inc537
                                        #   in Loop: Header=BB191_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_84
.LBB191_91:                             # %for.end539
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB191_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_93:                             # %if.end543
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_94
.LBB191_94:                             # %if.end544
                                        #   in Loop: Header=BB191_21 Depth=1
	jmp	.LBB191_95
.LBB191_95:                             # %for.inc545
                                        #   in Loop: Header=BB191_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB191_21
.LBB191_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1644908857, -80(%rbp)  # imm = 0x620B5139
	jne	.LBB191_98
.LBB191_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_97
.Lfunc_end191:
	.size	find_sad_16x16.150, .Lfunc_end191-find_sad_16x16.150
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.151 # -- Begin function LumaPrediction4x4Bi.151
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.151,@function
LumaPrediction4x4Bi.151:                # @LumaPrediction4x4Bi.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1041334365, -76(%rbp)  # imm = 0x3E11805D
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB192_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB192_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB192_6
.LBB192_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB192_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB192_5:                              # %land.end
.LBB192_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB192_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB192_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB192_10
.LBB192_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB192_10
.LBB192_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB192_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB192_13
.LBB192_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB192_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB192_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB192_16
.LBB192_15:                             # %if.then
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB192_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB192_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB192_19
.LBB192_18:                             # %if.then39
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB192_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB192_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB192_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB192_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_24:                             # %for.cond58
                                        #   Parent Loop BB192_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB192_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB192_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_24
.LBB192_27:                             # %for.end
                                        #   in Loop: Header=BB192_22 Depth=1
	jmp	.LBB192_28
.LBB192_28:                             # %for.inc96
                                        #   in Loop: Header=BB192_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_22
.LBB192_29:                             # %for.end98
	jmp	.LBB192_50
.LBB192_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB192_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB192_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_34:                             # %for.cond106
                                        #   Parent Loop BB192_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB192_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB192_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_34
.LBB192_37:                             # %for.end132
                                        #   in Loop: Header=BB192_32 Depth=1
	jmp	.LBB192_38
.LBB192_38:                             # %for.inc133
                                        #   in Loop: Header=BB192_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_32
.LBB192_39:                             # %for.end135
	jmp	.LBB192_49
.LBB192_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB192_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_43:                             # %for.cond141
                                        #   Parent Loop BB192_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB192_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB192_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_43
.LBB192_46:                             # %for.end167
                                        #   in Loop: Header=BB192_41 Depth=1
	jmp	.LBB192_47
.LBB192_47:                             # %for.inc168
                                        #   in Loop: Header=BB192_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_41
.LBB192_48:                             # %for.end170
	jmp	.LBB192_49
.LBB192_49:                             # %if.end171
	jmp	.LBB192_50
.LBB192_50:                             # %if.end172
	jmp	.LBB192_82
.LBB192_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB192_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB192_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_55:                             # %for.cond181
                                        #   Parent Loop BB192_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB192_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB192_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_55
.LBB192_58:                             # %for.end197
                                        #   in Loop: Header=BB192_53 Depth=1
	jmp	.LBB192_59
.LBB192_59:                             # %for.inc198
                                        #   in Loop: Header=BB192_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_53
.LBB192_60:                             # %for.end200
	jmp	.LBB192_81
.LBB192_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB192_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB192_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_65:                             # %for.cond209
                                        #   Parent Loop BB192_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB192_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB192_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_65
.LBB192_68:                             # %for.end222
                                        #   in Loop: Header=BB192_63 Depth=1
	jmp	.LBB192_69
.LBB192_69:                             # %for.inc223
                                        #   in Loop: Header=BB192_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_63
.LBB192_70:                             # %for.end225
	jmp	.LBB192_80
.LBB192_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB192_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB192_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB192_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB192_74:                             # %for.cond231
                                        #   Parent Loop BB192_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB192_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB192_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB192_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_74
.LBB192_77:                             # %for.end244
                                        #   in Loop: Header=BB192_72 Depth=1
	jmp	.LBB192_78
.LBB192_78:                             # %for.inc245
                                        #   in Loop: Header=BB192_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_72
.LBB192_79:                             # %for.end247
	jmp	.LBB192_80
.LBB192_80:                             # %if.end248
	jmp	.LBB192_81
.LBB192_81:                             # %if.end249
	jmp	.LBB192_82
.LBB192_82:                             # %if.end250
	cmpl	$1041334365, -76(%rbp)  # imm = 0x3E11805D
	jne	.LBB192_84
.LBB192_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_83
.Lfunc_end192:
	.size	LumaPrediction4x4Bi.151, .Lfunc_end192-LumaPrediction4x4Bi.151
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.152 # -- Begin function ChromaPrediction4x4.152
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.152,@function
ChromaPrediction4x4.152:                # @ChromaPrediction4x4.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1332128264, -68(%rbp)  # imm = 0x4F66AA08
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB193_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB193_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB193_6
.LBB193_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB193_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB193_5:                              # %land.end
.LBB193_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB193_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB193_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB193_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB193_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB193_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB193_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB193_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB193_15
.LBB193_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB193_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB193_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB193_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB193_87
.LBB193_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB193_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB193_21
.LBB193_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB193_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB193_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB193_24
.LBB193_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB193_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB193_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB193_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB193_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_29:                             # %for.cond52
                                        #   Parent Loop BB193_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB193_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB193_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_29
.LBB193_32:                             # %for.end
                                        #   in Loop: Header=BB193_27 Depth=1
	jmp	.LBB193_33
.LBB193_33:                             # %for.inc99
                                        #   in Loop: Header=BB193_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_27
.LBB193_34:                             # %for.end101
	jmp	.LBB193_55
.LBB193_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB193_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB193_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_39:                             # %for.cond109
                                        #   Parent Loop BB193_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB193_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB193_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_39
.LBB193_42:                             # %for.end139
                                        #   in Loop: Header=BB193_37 Depth=1
	jmp	.LBB193_43
.LBB193_43:                             # %for.inc140
                                        #   in Loop: Header=BB193_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_37
.LBB193_44:                             # %for.end142
	jmp	.LBB193_54
.LBB193_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB193_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_48:                             # %for.cond148
                                        #   Parent Loop BB193_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB193_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB193_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_48
.LBB193_51:                             # %for.end178
                                        #   in Loop: Header=BB193_46 Depth=1
	jmp	.LBB193_52
.LBB193_52:                             # %for.inc179
                                        #   in Loop: Header=BB193_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_46
.LBB193_53:                             # %for.end181
	jmp	.LBB193_54
.LBB193_54:                             # %if.end182
	jmp	.LBB193_55
.LBB193_55:                             # %if.end183
	jmp	.LBB193_87
.LBB193_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB193_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB193_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_60:                             # %for.cond192
                                        #   Parent Loop BB193_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB193_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB193_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_60
.LBB193_63:                             # %for.end208
                                        #   in Loop: Header=BB193_58 Depth=1
	jmp	.LBB193_64
.LBB193_64:                             # %for.inc209
                                        #   in Loop: Header=BB193_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_58
.LBB193_65:                             # %for.end211
	jmp	.LBB193_86
.LBB193_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB193_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB193_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_70:                             # %for.cond220
                                        #   Parent Loop BB193_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB193_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB193_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_70
.LBB193_73:                             # %for.end233
                                        #   in Loop: Header=BB193_68 Depth=1
	jmp	.LBB193_74
.LBB193_74:                             # %for.inc234
                                        #   in Loop: Header=BB193_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_68
.LBB193_75:                             # %for.end236
	jmp	.LBB193_85
.LBB193_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB193_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB193_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_79:                             # %for.cond242
                                        #   Parent Loop BB193_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB193_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB193_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB193_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_79
.LBB193_82:                             # %for.end255
                                        #   in Loop: Header=BB193_77 Depth=1
	jmp	.LBB193_83
.LBB193_83:                             # %for.inc256
                                        #   in Loop: Header=BB193_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_77
.LBB193_84:                             # %for.end258
	jmp	.LBB193_85
.LBB193_85:                             # %if.end259
	jmp	.LBB193_86
.LBB193_86:                             # %if.end260
	jmp	.LBB193_87
.LBB193_87:                             # %if.end261
	cmpl	$1332128264, -68(%rbp)  # imm = 0x4F66AA08
	jne	.LBB193_89
.LBB193_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_88
.Lfunc_end193:
	.size	ChromaPrediction4x4.152, .Lfunc_end193-ChromaPrediction4x4.152
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.153  # -- Begin function predict_nnz_chroma.153
	.p2align	4, 0x90
	.type	predict_nnz_chroma.153,@function
predict_nnz_chroma.153:                 # @predict_nnz_chroma.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$2074652555, -64(%rbp)  # imm = 0x7BA8AF8B
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB194_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB194_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB194_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB194_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB194_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB194_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB194_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB194_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB194_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB194_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB194_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB194_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB194_13:                             # %if.end57
	jmp	.LBB194_27
.LBB194_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB194_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB194_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB194_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB194_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB194_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB194_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB194_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB194_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB194_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB194_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB194_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB194_26:                             # %if.end124
	jmp	.LBB194_27
.LBB194_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB194_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB194_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$2074652555, -64(%rbp)  # imm = 0x7BA8AF8B
	jne	.LBB194_31
.LBB194_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_30
.Lfunc_end194:
	.size	predict_nnz_chroma.153, .Lfunc_end194-predict_nnz_chroma.153
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.154 # -- Begin function writeMotionVector8x8.154
	.p2align	4, 0x90
	.type	writeMotionVector8x8.154,@function
writeMotionVector8x8.154:               # @writeMotionVector8x8.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2143585139, -100(%rbp) # imm = 0x7FC48373
	movl	%edi, -96(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB195_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB195_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB195_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB195_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB195_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB195_7
.LBB195_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB195_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB195_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB195_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_11 Depth 2
                                        #       Child Loop BB195_13 Depth 3
                                        #         Child Loop BB195_15 Depth 4
                                        #           Child Loop BB195_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB195_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB195_9 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB195_11:                             # %for.cond22
                                        #   Parent Loop BB195_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_13 Depth 3
                                        #         Child Loop BB195_15 Depth 4
                                        #           Child Loop BB195_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB195_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB195_11 Depth=2
	movl	$0, -12(%rbp)
.LBB195_13:                             # %for.cond25
                                        #   Parent Loop BB195_9 Depth=1
                                        #     Parent Loop BB195_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB195_15 Depth 4
                                        #           Child Loop BB195_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB195_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB195_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -40(%rbp)
.LBB195_15:                             # %for.cond53
                                        #   Parent Loop BB195_9 Depth=1
                                        #     Parent Loop BB195_11 Depth=2
                                        #       Parent Loop BB195_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB195_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB195_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB195_15 Depth=4
	movl	$0, -44(%rbp)
.LBB195_17:                             # %for.cond57
                                        #   Parent Loop BB195_9 Depth=1
                                        #     Parent Loop BB195_11 Depth=2
                                        #       Parent Loop BB195_13 Depth=3
                                        #         Parent Loop BB195_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB195_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB195_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB195_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB195_17
.LBB195_20:                             # %for.end
                                        #   in Loop: Header=BB195_15 Depth=4
	jmp	.LBB195_21
.LBB195_21:                             # %for.inc70
                                        #   in Loop: Header=BB195_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB195_15
.LBB195_22:                             # %for.end72
                                        #   in Loop: Header=BB195_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB195_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB195_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB195_25
.LBB195_24:                             # %if.else
                                        #   in Loop: Header=BB195_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB195_25:                             # %if.end78
                                        #   in Loop: Header=BB195_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB195_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_13
.LBB195_27:                             # %for.end90
                                        #   in Loop: Header=BB195_11 Depth=2
	jmp	.LBB195_28
.LBB195_28:                             # %for.inc91
                                        #   in Loop: Header=BB195_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_11
.LBB195_29:                             # %for.end93
                                        #   in Loop: Header=BB195_9 Depth=1
	jmp	.LBB195_30
.LBB195_30:                             # %for.inc94
                                        #   in Loop: Header=BB195_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_9
.LBB195_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$2143585139, -100(%rbp) # imm = 0x7FC48373
	jne	.LBB195_33
.LBB195_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_32
.Lfunc_end195:
	.size	writeMotionVector8x8.154, .Lfunc_end195-writeMotionVector8x8.154
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.155 # -- Begin function write_terminating_bit.155
	.p2align	4, 0x90
	.type	write_terminating_bit.155,@function
write_terminating_bit.155:              # @write_terminating_bit.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1604528424, -8(%rbp)   # imm = 0x5FA32928
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1604528424, -8(%rbp)   # imm = 0x5FA32928
	jne	.LBB196_2
.LBB196_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_1
.Lfunc_end196:
	.size	write_terminating_bit.155, .Lfunc_end196-write_terminating_bit.155
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.156        # -- Begin function writeMBLayer.156
	.p2align	4, 0x90
	.type	writeMBLayer.156,@function
writeMBLayer.156:                       # @writeMBLayer.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$774599342, -100(%rbp)  # imm = 0x2E2B72AE
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB197_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB197_3
.LBB197_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB197_3
.LBB197_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB197_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB197_9
.LBB197_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB197_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB197_8
.LBB197_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB197_8
.LBB197_8:                              # %cond.end14
.LBB197_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB197_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB197_24
.LBB197_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB197_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB197_17
	jmp	.LBB197_18
.LBB197_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB197_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB197_18
	jmp	.LBB197_17
.LBB197_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB197_17
	jmp	.LBB197_18
.LBB197_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB197_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB197_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB197_23
.LBB197_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB197_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB197_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB197_23:                             # %if.end50
	jmp	.LBB197_24
.LBB197_24:                             # %if.end51
	jmp	.LBB197_25
.LBB197_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB197_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB197_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB197_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB197_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB197_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB197_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB197_35
.LBB197_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB197_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB197_38
.LBB197_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB197_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_39:                             # %if.end96
	jmp	.LBB197_40
.LBB197_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB197_43
.LBB197_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB197_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB197_89
.LBB197_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB197_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB197_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB197_49
.LBB197_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB197_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB197_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB197_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB197_55
.LBB197_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB197_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB197_58
.LBB197_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB197_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_59:                             # %if.end198
	jmp	.LBB197_60
.LBB197_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB197_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB197_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB197_64
.LBB197_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_64:                             # %if.end226
	jmp	.LBB197_88
.LBB197_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB197_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB197_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB197_76
.LBB197_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB197_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB197_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_72:                             # %if.end281
	jmp	.LBB197_73
.LBB197_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB197_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB197_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB197_87
.LBB197_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB197_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB197_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB197_77 Depth=1
	movl	$0, -44(%rbp)
.LBB197_79:                             # %for.cond310
                                        #   Parent Loop BB197_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB197_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB197_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB197_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB197_79
.LBB197_82:                             # %for.end
                                        #   in Loop: Header=BB197_77 Depth=1
	jmp	.LBB197_83
.LBB197_83:                             # %for.inc322
                                        #   in Loop: Header=BB197_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB197_77
.LBB197_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB197_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB197_86:                             # %if.end345
	jmp	.LBB197_87
.LBB197_87:                             # %if.end346
	jmp	.LBB197_88
.LBB197_88:                             # %if.end347
	jmp	.LBB197_89
.LBB197_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB197_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB197_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB197_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB197_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB197_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB197_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB197_98
.LBB197_97:                             # %if.else380
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB197_98:                             # %if.end382
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB197_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB197_101
.LBB197_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB197_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB197_101:                            # %lor.end415
                                        #   in Loop: Header=BB197_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB197_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB197_94
.LBB197_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB197_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB197_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB197_114
.LBB197_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB197_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB197_110
.LBB197_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB197_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB197_113
.LBB197_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB197_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB197_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB197_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_120
.LBB197_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB197_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB197_119:                            # %if.end483
	jmp	.LBB197_120
.LBB197_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB197_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB197_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB197_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB197_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB197_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB197_129
.LBB197_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB197_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB197_128:                            # %if.end516
	jmp	.LBB197_129
.LBB197_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$774599342, -100(%rbp)  # imm = 0x2E2B72AE
	jne	.LBB197_131
.LBB197_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_130
.Lfunc_end197:
	.size	writeMBLayer.156, .Lfunc_end197-writeMBLayer.156
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.157 # -- Begin function writeMotionVector8x8.157
	.p2align	4, 0x90
	.type	writeMotionVector8x8.157,@function
writeMotionVector8x8.157:               # @writeMotionVector8x8.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$478586086, -80(%rbp)   # imm = 0x1C86A4E6
	movl	%edi, -92(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB198_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB198_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB198_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB198_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB198_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB198_7
.LBB198_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB198_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB198_8:                              # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB198_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_11 Depth 2
                                        #       Child Loop BB198_13 Depth 3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB198_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB198_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB198_11:                             # %for.cond22
                                        #   Parent Loop BB198_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_13 Depth 3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB198_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB198_11 Depth=2
	movl	$0, -12(%rbp)
.LBB198_13:                             # %for.cond25
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB198_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB198_15:                             # %for.cond53
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        #       Parent Loop BB198_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB198_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB198_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB198_15 Depth=4
	movl	$0, -40(%rbp)
.LBB198_17:                             # %for.cond57
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        #       Parent Loop BB198_13 Depth=3
                                        #         Parent Loop BB198_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB198_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB198_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB198_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB198_17
.LBB198_20:                             # %for.end
                                        #   in Loop: Header=BB198_15 Depth=4
	jmp	.LBB198_21
.LBB198_21:                             # %for.inc70
                                        #   in Loop: Header=BB198_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB198_15
.LBB198_22:                             # %for.end72
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB198_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB198_25
.LBB198_24:                             # %if.else
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB198_25:                             # %if.end78
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_13
.LBB198_27:                             # %for.end90
                                        #   in Loop: Header=BB198_11 Depth=2
	jmp	.LBB198_28
.LBB198_28:                             # %for.inc91
                                        #   in Loop: Header=BB198_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_11
.LBB198_29:                             # %for.end93
                                        #   in Loop: Header=BB198_9 Depth=1
	jmp	.LBB198_30
.LBB198_30:                             # %for.inc94
                                        #   in Loop: Header=BB198_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB198_9
.LBB198_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$478586086, -80(%rbp)   # imm = 0x1C86A4E6
	jne	.LBB198_33
.LBB198_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_32
.Lfunc_end198:
	.size	writeMotionVector8x8.157, .Lfunc_end198-writeMotionVector8x8.157
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.158   # -- Begin function LumaPrediction4x4.158
	.p2align	4, 0x90
	.type	LumaPrediction4x4.158,@function
LumaPrediction4x4.158:                  # @LumaPrediction4x4.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$733844573, -100(%rbp)  # imm = 0x2BBD945D
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB199_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB199_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB199_6
.LBB199_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB199_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB199_5:                              # %land.end
.LBB199_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB199_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB199_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB199_10
.LBB199_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB199_10
.LBB199_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB199_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB199_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB199_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB199_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB199_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB199_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB199_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB199_19
.LBB199_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB199_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB199_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB199_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB199_23
.LBB199_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB199_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB199_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB199_26
.LBB199_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB199_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB199_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB199_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB199_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_31:                             # %for.cond85
                                        #   Parent Loop BB199_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB199_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB199_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_31
.LBB199_34:                             # %for.end
                                        #   in Loop: Header=BB199_29 Depth=1
	jmp	.LBB199_35
.LBB199_35:                             # %for.inc125
                                        #   in Loop: Header=BB199_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_29
.LBB199_36:                             # %for.end127
	jmp	.LBB199_57
.LBB199_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB199_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB199_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_41:                             # %for.cond135
                                        #   Parent Loop BB199_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB199_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB199_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_41
.LBB199_44:                             # %for.end161
                                        #   in Loop: Header=BB199_39 Depth=1
	jmp	.LBB199_45
.LBB199_45:                             # %for.inc162
                                        #   in Loop: Header=BB199_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_39
.LBB199_46:                             # %for.end164
	jmp	.LBB199_56
.LBB199_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB199_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_50:                             # %for.cond170
                                        #   Parent Loop BB199_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB199_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB199_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_50
.LBB199_53:                             # %for.end196
                                        #   in Loop: Header=BB199_48 Depth=1
	jmp	.LBB199_54
.LBB199_54:                             # %for.inc197
                                        #   in Loop: Header=BB199_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_48
.LBB199_55:                             # %for.end199
	jmp	.LBB199_56
.LBB199_56:                             # %if.end200
	jmp	.LBB199_57
.LBB199_57:                             # %if.end201
	jmp	.LBB199_89
.LBB199_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB199_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB199_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_62:                             # %for.cond210
                                        #   Parent Loop BB199_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB199_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB199_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_62
.LBB199_65:                             # %for.end226
                                        #   in Loop: Header=BB199_60 Depth=1
	jmp	.LBB199_66
.LBB199_66:                             # %for.inc227
                                        #   in Loop: Header=BB199_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_60
.LBB199_67:                             # %for.end229
	jmp	.LBB199_88
.LBB199_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB199_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB199_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_72:                             # %for.cond238
                                        #   Parent Loop BB199_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB199_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB199_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_72
.LBB199_75:                             # %for.end251
                                        #   in Loop: Header=BB199_70 Depth=1
	jmp	.LBB199_76
.LBB199_76:                             # %for.inc252
                                        #   in Loop: Header=BB199_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_70
.LBB199_77:                             # %for.end254
	jmp	.LBB199_87
.LBB199_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB199_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB199_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB199_81:                             # %for.cond260
                                        #   Parent Loop BB199_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB199_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB199_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB199_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_81
.LBB199_84:                             # %for.end273
                                        #   in Loop: Header=BB199_79 Depth=1
	jmp	.LBB199_85
.LBB199_85:                             # %for.inc274
                                        #   in Loop: Header=BB199_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_79
.LBB199_86:                             # %for.end276
	jmp	.LBB199_87
.LBB199_87:                             # %if.end277
	jmp	.LBB199_88
.LBB199_88:                             # %if.end278
	jmp	.LBB199_89
.LBB199_89:                             # %if.end279
	cmpl	$733844573, -100(%rbp)  # imm = 0x2BBD945D
	jne	.LBB199_91
.LBB199_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_90
.Lfunc_end199:
	.size	LumaPrediction4x4.158, .Lfunc_end199-LumaPrediction4x4.158
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.159 # -- Begin function writeLumaCoeff8x8_CABAC.159
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.159,@function
writeLumaCoeff8x8_CABAC.159:            # @writeLumaCoeff8x8_CABAC.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1303312015, -60(%rbp)  # imm = 0x4DAEF68F
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB200_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB200_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB200_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB200_3:                              # %land.end
                                        #   in Loop: Header=BB200_1 Depth=1
	testb	$1, %al
	jne	.LBB200_4
	jmp	.LBB200_12
.LBB200_4:                              # %for.body
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB200_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB200_7
.LBB200_6:                              # %cond.false
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB200_7:                              # %cond.end
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB200_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB200_10
.LBB200_9:                              # %if.else
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB200_10:                             # %if.end
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB200_1
.LBB200_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1303312015, -60(%rbp)  # imm = 0x4DAEF68F
	jne	.LBB200_14
.LBB200_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_13
.Lfunc_end200:
	.size	writeLumaCoeff8x8_CABAC.159, .Lfunc_end200-writeLumaCoeff8x8_CABAC.159
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.160    # -- Begin function writeChromaCoeff.160
	.p2align	4, 0x90
	.type	writeChromaCoeff.160,@function
writeChromaCoeff.160:                   # @writeChromaCoeff.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1616783336, -80(%rbp)  # imm = 0x605E27E8
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB201_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB201_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB201_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB201_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB201_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB201_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB201_21
.LBB201_5:                              # %if.else
                                        #   in Loop: Header=BB201_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB201_6:                              # %for.cond18
                                        #   Parent Loop BB201_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB201_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB201_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB201_8:                              # %land.end
                                        #   in Loop: Header=BB201_6 Depth=2
	testb	$1, %al
	jne	.LBB201_9
	jmp	.LBB201_20
.LBB201_9:                              # %for.body21
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB201_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB201_12
.LBB201_11:                             # %if.else29
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB201_12:                             # %if.end
                                        #   in Loop: Header=BB201_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB201_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB201_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB201_15:                             # %lor.end
                                        #   in Loop: Header=BB201_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB201_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB201_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB201_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB201_18:                             # %lor.end45
                                        #   in Loop: Header=BB201_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB201_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB201_6
.LBB201_20:                             # %for.end
                                        #   in Loop: Header=BB201_2 Depth=1
	jmp	.LBB201_21
.LBB201_21:                             # %if.end58
                                        #   in Loop: Header=BB201_2 Depth=1
	jmp	.LBB201_22
.LBB201_22:                             # %for.inc59
                                        #   in Loop: Header=BB201_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB201_2
.LBB201_23:                             # %for.end61
	jmp	.LBB201_24
.LBB201_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB201_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB201_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_28 Depth 2
                                        #       Child Loop BB201_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB201_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB201_26 Depth=1
	movl	$0, -32(%rbp)
.LBB201_28:                             # %for.cond69
                                        #   Parent Loop BB201_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB201_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB201_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB201_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB201_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB201_47
.LBB201_31:                             # %if.else84
                                        #   in Loop: Header=BB201_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB201_32:                             # %for.cond115
                                        #   Parent Loop BB201_26 Depth=1
                                        #     Parent Loop BB201_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB201_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB201_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB201_34:                             # %land.end121
                                        #   in Loop: Header=BB201_32 Depth=3
	testb	$1, %al
	jne	.LBB201_35
	jmp	.LBB201_46
.LBB201_35:                             # %for.body122
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB201_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB201_38
.LBB201_37:                             # %if.else134
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB201_38:                             # %if.end136
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB201_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB201_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB201_41:                             # %lor.end149
                                        #   in Loop: Header=BB201_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB201_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB201_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB201_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB201_44:                             # %lor.end164
                                        #   in Loop: Header=BB201_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB201_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB201_32
.LBB201_46:                             # %for.end189
                                        #   in Loop: Header=BB201_28 Depth=2
	jmp	.LBB201_47
.LBB201_47:                             # %if.end190
                                        #   in Loop: Header=BB201_28 Depth=2
	jmp	.LBB201_48
.LBB201_48:                             # %for.inc191
                                        #   in Loop: Header=BB201_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB201_28
.LBB201_49:                             # %for.end193
                                        #   in Loop: Header=BB201_26 Depth=1
	jmp	.LBB201_50
.LBB201_50:                             # %for.inc194
                                        #   in Loop: Header=BB201_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB201_26
.LBB201_51:                             # %for.end196
	jmp	.LBB201_52
.LBB201_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1616783336, -80(%rbp)  # imm = 0x605E27E8
	jne	.LBB201_54
.LBB201_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_53
.Lfunc_end201:
	.size	writeChromaCoeff.160, .Lfunc_end201-writeChromaCoeff.160
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.161         # -- Begin function predict_nnz.161
	.p2align	4, 0x90
	.type	predict_nnz.161,@function
predict_nnz.161:                        # @predict_nnz.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1728541116, -56(%rbp)  # imm = 0x670771BC
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB202_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB202_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB202_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB202_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB202_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB202_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB202_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB202_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB202_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB202_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB202_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB202_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB202_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB202_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1728541116, -56(%rbp)  # imm = 0x670771BC
	jne	.LBB202_16
.LBB202_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_15
.Lfunc_end202:
	.size	predict_nnz.161, .Lfunc_end202-predict_nnz.161
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.162 # -- Begin function SetModesAndRefframe.162
	.p2align	4, 0x90
	.type	SetModesAndRefframe.162,@function
SetModesAndRefframe.162:                # @SetModesAndRefframe.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$951512573, -60(%rbp)   # imm = 0x38B6EDFD
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB203_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_12
.LBB203_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB203_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_11
.LBB203_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB203_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_10
.LBB203_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB203_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB203_9
.LBB203_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_9:                              # %if.end
	jmp	.LBB203_10
.LBB203_10:                             # %if.end86
	jmp	.LBB203_11
.LBB203_11:                             # %if.end87
	jmp	.LBB203_12
.LBB203_12:                             # %if.end88
	cmpl	$951512573, -60(%rbp)   # imm = 0x38B6EDFD
	jne	.LBB203_14
.LBB203_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_13
.Lfunc_end203:
	.size	SetModesAndRefframe.162, .Lfunc_end203-SetModesAndRefframe.162
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.163  # -- Begin function writeIntra4x4Modes.163
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.163,@function
writeIntra4x4Modes.163:                 # @writeIntra4x4Modes.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$444028239, -72(%rbp)   # imm = 0x1A77554F
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB204_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_9 Depth 2
                                        #       Child Loop BB204_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB204_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB204_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB204_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB204_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB204_8
.LBB204_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB204_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB204_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB204_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB204_17
.LBB204_8:                              # %if.then
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -28(%rbp)
.LBB204_9:                              # %for.cond24
                                        #   Parent Loop BB204_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB204_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB204_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB204_9 Depth=2
	movl	$0, -12(%rbp)
.LBB204_11:                             # %for.cond27
                                        #   Parent Loop BB204_1 Depth=1
                                        #     Parent Loop BB204_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB204_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB204_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB204_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_11
.LBB204_14:                             # %for.end
                                        #   in Loop: Header=BB204_9 Depth=2
	jmp	.LBB204_15
.LBB204_15:                             # %for.inc42
                                        #   in Loop: Header=BB204_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB204_9
.LBB204_16:                             # %for.end44
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_17
.LBB204_17:                             # %if.end
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_18
.LBB204_18:                             # %for.inc45
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_1
.LBB204_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB204_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB204_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB204_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_23:                             # %if.end57
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB204_26
.LBB204_25:                             # %if.else
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB204_26:                             # %if.end65
                                        #   in Loop: Header=BB204_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB204_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_20
.LBB204_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$444028239, -72(%rbp)   # imm = 0x1A77554F
	jne	.LBB204_30
.LBB204_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_29
.Lfunc_end204:
	.size	writeIntra4x4Modes.163, .Lfunc_end204-writeIntra4x4Modes.163
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.164      # -- Begin function find_sad_16x16.164
	.p2align	4, 0x90
	.type	find_sad_16x16.164,@function
find_sad_16x16.164:                     # @find_sad_16x16.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$758509106, -80(%rbp)   # imm = 0x2D35EE32
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB205_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB205_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB205_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB205_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_1
.LBB205_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB205_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB205_20
.LBB205_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB205_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB205_9
.LBB205_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB205_9
.LBB205_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB205_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB205_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB205_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB205_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB205_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB205_14
.LBB205_13:                             # %cond.false23
                                        #   in Loop: Header=BB205_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB205_14
.LBB205_14:                             # %cond.end24
                                        #   in Loop: Header=BB205_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB205_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_10
.LBB205_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB205_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB205_19
.LBB205_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB205_19
.LBB205_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB205_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB205_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_42 Depth 2
                                        #       Child Loop BB205_44 Depth 3
                                        #     Child Loop BB205_50 Depth 2
                                        #       Child Loop BB205_52 Depth 3
                                        #         Child Loop BB205_54 Depth 4
                                        #         Child Loop BB205_58 Depth 4
                                        #           Child Loop BB205_60 Depth 5
                                        #     Child Loop BB205_72 Depth 2
                                        #       Child Loop BB205_74 Depth 3
                                        #     Child Loop BB205_80 Depth 2
                                        #     Child Loop BB205_84 Depth 2
                                        #       Child Loop BB205_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB205_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB205_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB205_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB205_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB205_32
.LBB205_24:                             # %if.then46
                                        #   in Loop: Header=BB205_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB205_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB205_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB205_28
.LBB205_27:                             # %if.then51
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_95
.LBB205_28:                             # %if.end52
                                        #   in Loop: Header=BB205_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB205_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB205_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_95
.LBB205_31:                             # %if.end57
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_32
.LBB205_32:                             # %if.end58
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB205_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB205_40
.LBB205_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB205_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB205_40
.LBB205_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB205_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB205_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB205_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB205_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB205_41
.LBB205_40:                             # %if.then74
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_94
.LBB205_41:                             # %if.else75
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	$0, -16(%rbp)
.LBB205_42:                             # %for.cond76
                                        #   Parent Loop BB205_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB205_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB205_42 Depth=2
	movl	$0, -12(%rbp)
.LBB205_44:                             # %for.cond79
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB205_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB205_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB205_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_44
.LBB205_47:                             # %for.end115
                                        #   in Loop: Header=BB205_42 Depth=2
	jmp	.LBB205_48
.LBB205_48:                             # %for.inc116
                                        #   in Loop: Header=BB205_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_42
.LBB205_49:                             # %for.end118
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB205_50:                             # %for.cond119
                                        #   Parent Loop BB205_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_52 Depth 3
                                        #         Child Loop BB205_54 Depth 4
                                        #         Child Loop BB205_58 Depth 4
                                        #           Child Loop BB205_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB205_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB205_50 Depth=2
	movl	$0, -24(%rbp)
.LBB205_52:                             # %for.cond123
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_54 Depth 4
                                        #         Child Loop BB205_58 Depth 4
                                        #           Child Loop BB205_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB205_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB205_52 Depth=3
	movl	$0, -16(%rbp)
.LBB205_54:                             # %for.cond127
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_50 Depth=2
                                        #       Parent Loop BB205_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB205_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB205_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_54
.LBB205_57:                             # %for.end237
                                        #   in Loop: Header=BB205_52 Depth=3
	movl	$0, -12(%rbp)
.LBB205_58:                             # %for.cond238
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_50 Depth=2
                                        #       Parent Loop BB205_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB205_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB205_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB205_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB205_60:                             # %for.cond346
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_50 Depth=2
                                        #       Parent Loop BB205_52 Depth=3
                                        #         Parent Loop BB205_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB205_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB205_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB205_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB205_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB205_63:                             # %if.end363
                                        #   in Loop: Header=BB205_60 Depth=5
	jmp	.LBB205_64
.LBB205_64:                             # %for.inc364
                                        #   in Loop: Header=BB205_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_60
.LBB205_65:                             # %for.end366
                                        #   in Loop: Header=BB205_58 Depth=4
	jmp	.LBB205_66
.LBB205_66:                             # %for.inc367
                                        #   in Loop: Header=BB205_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_58
.LBB205_67:                             # %for.end369
                                        #   in Loop: Header=BB205_52 Depth=3
	jmp	.LBB205_68
.LBB205_68:                             # %for.inc370
                                        #   in Loop: Header=BB205_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB205_52
.LBB205_69:                             # %for.end372
                                        #   in Loop: Header=BB205_50 Depth=2
	jmp	.LBB205_70
.LBB205_70:                             # %for.inc373
                                        #   in Loop: Header=BB205_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB205_50
.LBB205_71:                             # %for.end375
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	$0, -16(%rbp)
.LBB205_72:                             # %for.cond376
                                        #   Parent Loop BB205_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB205_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB205_72 Depth=2
	movl	$0, -12(%rbp)
.LBB205_74:                             # %for.cond380
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB205_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB205_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB205_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_74
.LBB205_77:                             # %for.end397
                                        #   in Loop: Header=BB205_72 Depth=2
	jmp	.LBB205_78
.LBB205_78:                             # %for.inc398
                                        #   in Loop: Header=BB205_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_72
.LBB205_79:                             # %for.end400
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	$0, -16(%rbp)
.LBB205_80:                             # %for.cond401
                                        #   Parent Loop BB205_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB205_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB205_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB205_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_80
.LBB205_83:                             # %for.end463
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	$0, -12(%rbp)
.LBB205_84:                             # %for.cond464
                                        #   Parent Loop BB205_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB205_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB205_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB205_86:                             # %for.cond524
                                        #   Parent Loop BB205_21 Depth=1
                                        #     Parent Loop BB205_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB205_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB205_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB205_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_86
.LBB205_89:                             # %for.end536
                                        #   in Loop: Header=BB205_84 Depth=2
	jmp	.LBB205_90
.LBB205_90:                             # %for.inc537
                                        #   in Loop: Header=BB205_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_84
.LBB205_91:                             # %for.end539
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB205_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB205_93:                             # %if.end543
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_94
.LBB205_94:                             # %if.end544
                                        #   in Loop: Header=BB205_21 Depth=1
	jmp	.LBB205_95
.LBB205_95:                             # %for.inc545
                                        #   in Loop: Header=BB205_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB205_21
.LBB205_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$758509106, -80(%rbp)   # imm = 0x2D35EE32
	jne	.LBB205_98
.LBB205_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_97
.Lfunc_end205:
	.size	find_sad_16x16.164, .Lfunc_end205-find_sad_16x16.164
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.165 # -- Begin function writeChromaIntraPredMode.165
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.165,@function
writeChromaIntraPredMode.165:           # @writeChromaIntraPredMode.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1420837102, -36(%rbp)  # imm = 0x54B040EE
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB206_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB206_3
.LBB206_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB206_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1420837102, -36(%rbp)  # imm = 0x54B040EE
	jne	.LBB206_5
.LBB206_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_4
.Lfunc_end206:
	.size	writeChromaIntraPredMode.165, .Lfunc_end206-writeChromaIntraPredMode.165
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.166 # -- Begin function IntraChromaPrediction.166
	.p2align	4, 0x90
	.type	IntraChromaPrediction.166,@function
IntraChromaPrediction.166:              # @IntraChromaPrediction.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$122296452, -164(%rbp)  # imm = 0x74A1884
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB207_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_1
.LBB207_4:                              # %for.end
	movl	-124(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB207_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB207_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB207_8
.LBB207_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB207_8
.LBB207_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB207_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB207_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB207_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB207_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB207_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB207_13
.LBB207_12:                             # %cond.false32
                                        #   in Loop: Header=BB207_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB207_13
.LBB207_13:                             # %cond.end33
                                        #   in Loop: Header=BB207_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB207_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_9
.LBB207_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB207_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB207_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB207_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB207_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB207_20
.LBB207_19:                             # %cond.false57
                                        #   in Loop: Header=BB207_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB207_20
.LBB207_20:                             # %cond.end58
                                        #   in Loop: Header=BB207_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB207_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_16
.LBB207_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB207_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB207_25
.LBB207_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB207_25
.LBB207_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB207_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB207_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB207_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB207_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB207_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB207_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB207_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_37 Depth 2
                                        #       Child Loop BB207_39 Depth 3
                                        #         Child Loop BB207_104 Depth 4
                                        #         Child Loop BB207_110 Depth 4
                                        #         Child Loop BB207_85 Depth 4
                                        #         Child Loop BB207_91 Depth 4
                                        #         Child Loop BB207_66 Depth 4
                                        #         Child Loop BB207_72 Depth 4
                                        #         Child Loop BB207_44 Depth 4
                                        #         Child Loop BB207_50 Depth 4
                                        #         Child Loop BB207_125 Depth 4
                                        #           Child Loop BB207_127 Depth 5
                                        #     Child Loop BB207_138 Depth 2
                                        #     Child Loop BB207_142 Depth 2
                                        #       Child Loop BB207_144 Depth 3
                                        #     Child Loop BB207_153 Depth 2
                                        #     Child Loop BB207_157 Depth 2
                                        #       Child Loop BB207_159 Depth 3
                                        #     Child Loop BB207_170 Depth 2
                                        #     Child Loop BB207_174 Depth 2
                                        #     Child Loop BB207_178 Depth 2
                                        #       Child Loop BB207_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB207_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB207_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB207_37:                             # %for.cond95
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_39 Depth 3
                                        #         Child Loop BB207_104 Depth 4
                                        #         Child Loop BB207_110 Depth 4
                                        #         Child Loop BB207_85 Depth 4
                                        #         Child Loop BB207_91 Depth 4
                                        #         Child Loop BB207_66 Depth 4
                                        #         Child Loop BB207_72 Depth 4
                                        #         Child Loop BB207_44 Depth 4
                                        #         Child Loop BB207_50 Depth 4
                                        #         Child Loop BB207_125 Depth 4
                                        #           Child Loop BB207_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB207_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB207_37 Depth=2
	movl	$0, -84(%rbp)
.LBB207_39:                             # %for.cond99
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB207_104 Depth 4
                                        #         Child Loop BB207_110 Depth 4
                                        #         Child Loop BB207_85 Depth 4
                                        #         Child Loop BB207_91 Depth 4
                                        #         Child Loop BB207_66 Depth 4
                                        #         Child Loop BB207_72 Depth 4
                                        #         Child Loop BB207_44 Depth 4
                                        #         Child Loop BB207_50 Depth 4
                                        #         Child Loop BB207_125 Depth 4
                                        #           Child Loop BB207_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB207_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB207_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB207_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB207_39 Depth=3
	movq	.LJTI207_0(,%rax,8), %rax
	jmpq	*%rax
.LBB207_42:                             # %sw.bb
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_44:                             # %for.cond124
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB207_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB207_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_44
.LBB207_47:                             # %for.end138
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_48
.LBB207_48:                             # %if.end139
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB207_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_50:                             # %for.cond143
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB207_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB207_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_50
.LBB207_53:                             # %for.end162
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_54
.LBB207_54:                             # %if.end163
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB207_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_63
.LBB207_57:                             # %if.else
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_62
.LBB207_59:                             # %if.else174
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB207_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB207_61:                             # %if.end180
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_62
.LBB207_62:                             # %if.end181
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_63
.LBB207_63:                             # %if.end182
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_124
.LBB207_64:                             # %sw.bb183
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_66:                             # %for.cond186
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB207_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB207_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_66
.LBB207_69:                             # %for.end202
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_77
.LBB207_70:                             # %if.else203
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB207_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_72:                             # %for.cond207
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB207_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB207_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_72
.LBB207_75:                             # %for.end226
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_76
.LBB207_76:                             # %if.end227
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_77
.LBB207_77:                             # %if.end228
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_82
.LBB207_79:                             # %if.else233
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB207_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB207_81:                             # %if.end239
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_82
.LBB207_82:                             # %if.end240
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_124
.LBB207_83:                             # %sw.bb241
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB207_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_85:                             # %for.cond245
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB207_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB207_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_85
.LBB207_88:                             # %for.end264
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_96
.LBB207_89:                             # %if.else265
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_91:                             # %for.cond268
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB207_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB207_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_91
.LBB207_94:                             # %for.end284
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_95
.LBB207_95:                             # %if.end285
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_96
.LBB207_96:                             # %if.end286
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB207_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_101
.LBB207_98:                             # %if.else292
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB207_100:                            # %if.end297
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_101
.LBB207_101:                            # %if.end298
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_124
.LBB207_102:                            # %sw.bb299
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_104:                            # %for.cond302
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB207_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB207_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_104
.LBB207_107:                            # %for.end318
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_108
.LBB207_108:                            # %if.end319
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB207_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_110:                            # %for.cond323
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB207_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB207_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_110
.LBB207_113:                            # %for.end342
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_114
.LBB207_114:                            # %if.end343
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB207_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_123
.LBB207_117:                            # %if.else352
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB207_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_122
.LBB207_119:                            # %if.else357
                                        #   in Loop: Header=BB207_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB207_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB207_121:                            # %if.end363
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_122
.LBB207_122:                            # %if.end364
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_123
.LBB207_123:                            # %if.end365
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_124
.LBB207_124:                            # %sw.epilog
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_125:                            # %for.cond366
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB207_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB207_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_127:                            # %for.cond371
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_37 Depth=2
                                        #       Parent Loop BB207_39 Depth=3
                                        #         Parent Loop BB207_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB207_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB207_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_127
.LBB207_130:                            # %for.end386
                                        #   in Loop: Header=BB207_125 Depth=4
	jmp	.LBB207_131
.LBB207_131:                            # %for.inc387
                                        #   in Loop: Header=BB207_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_125
.LBB207_132:                            # %for.end389
                                        #   in Loop: Header=BB207_39 Depth=3
	jmp	.LBB207_133
.LBB207_133:                            # %for.inc390
                                        #   in Loop: Header=BB207_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB207_39
.LBB207_134:                            # %for.end392
                                        #   in Loop: Header=BB207_37 Depth=2
	jmp	.LBB207_135
.LBB207_135:                            # %for.inc393
                                        #   in Loop: Header=BB207_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB207_37
.LBB207_136:                            # %for.end395
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB207_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	$0, -4(%rbp)
.LBB207_138:                            # %for.cond398
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB207_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB207_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB207_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_138
.LBB207_141:                            # %for.end414
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	$0, -4(%rbp)
.LBB207_142:                            # %for.cond415
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB207_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB207_142 Depth=2
	movl	$0, -8(%rbp)
.LBB207_144:                            # %for.cond419
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB207_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB207_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_144
.LBB207_147:                            # %for.end436
                                        #   in Loop: Header=BB207_142 Depth=2
	jmp	.LBB207_148
.LBB207_148:                            # %for.inc437
                                        #   in Loop: Header=BB207_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_142
.LBB207_149:                            # %for.end439
                                        #   in Loop: Header=BB207_35 Depth=1
	jmp	.LBB207_150
.LBB207_150:                            # %if.end440
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB207_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB207_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	$0, -4(%rbp)
.LBB207_153:                            # %for.cond447
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB207_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB207_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_153
.LBB207_156:                            # %for.end468
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	$0, -4(%rbp)
.LBB207_157:                            # %for.cond469
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB207_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB207_157 Depth=2
	movl	$0, -8(%rbp)
.LBB207_159:                            # %for.cond473
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB207_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB207_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_159
.LBB207_162:                            # %for.end490
                                        #   in Loop: Header=BB207_157 Depth=2
	jmp	.LBB207_163
.LBB207_163:                            # %for.inc491
                                        #   in Loop: Header=BB207_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_157
.LBB207_164:                            # %for.end493
                                        #   in Loop: Header=BB207_35 Depth=1
	jmp	.LBB207_165
.LBB207_165:                            # %if.end494
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB207_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB207_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB207_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB207_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB207_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB207_170:                            # %for.cond519
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB207_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB207_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB207_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_170
.LBB207_173:                            # %for.end540
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB207_174:                            # %for.cond556
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB207_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB207_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB207_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_174
.LBB207_177:                            # %for.end577
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB207_178:                            # %for.cond606
                                        #   Parent Loop BB207_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB207_178 Depth=2
	movl	$0, -4(%rbp)
.LBB207_180:                            # %for.cond610
                                        #   Parent Loop BB207_35 Depth=1
                                        #     Parent Loop BB207_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB207_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB207_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB207_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB207_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB207_184
.LBB207_183:                            # %cond.false630
                                        #   in Loop: Header=BB207_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB207_184:                            # %cond.end643
                                        #   in Loop: Header=BB207_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB207_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB207_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB207_190
.LBB207_186:                            # %cond.false648
                                        #   in Loop: Header=BB207_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB207_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB207_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB207_189
.LBB207_188:                            # %cond.false666
                                        #   in Loop: Header=BB207_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB207_189:                            # %cond.end679
                                        #   in Loop: Header=BB207_180 Depth=3
.LBB207_190:                            # %cond.end681
                                        #   in Loop: Header=BB207_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB207_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_180
.LBB207_192:                            # %for.end694
                                        #   in Loop: Header=BB207_178 Depth=2
	jmp	.LBB207_193
.LBB207_193:                            # %for.inc695
                                        #   in Loop: Header=BB207_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_178
.LBB207_194:                            # %for.end697
                                        #   in Loop: Header=BB207_35 Depth=1
	jmp	.LBB207_195
.LBB207_195:                            # %if.end698
                                        #   in Loop: Header=BB207_35 Depth=1
	jmp	.LBB207_196
.LBB207_196:                            # %for.inc699
                                        #   in Loop: Header=BB207_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB207_35
.LBB207_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB207_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB207_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB207_199 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB207_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_199
.LBB207_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB207_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_219 Depth 2
                                        #       Child Loop BB207_221 Depth 3
                                        #         Child Loop BB207_223 Depth 4
                                        #           Child Loop BB207_225 Depth 5
                                        #             Child Loop BB207_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB207_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB207_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB207_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB207_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB207_203 Depth=1
	jmp	.LBB207_241
.LBB207_207:                            # %if.end723
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB207_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB207_217
.LBB207_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB207_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB207_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB207_217
.LBB207_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB207_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB207_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB207_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB207_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB207_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB207_218
.LBB207_217:                            # %if.then749
                                        #   in Loop: Header=BB207_203 Depth=1
	jmp	.LBB207_241
.LBB207_218:                            # %if.end750
                                        #   in Loop: Header=BB207_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB207_219:                            # %for.cond751
                                        #   Parent Loop BB207_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_221 Depth 3
                                        #         Child Loop BB207_223 Depth 4
                                        #           Child Loop BB207_225 Depth 5
                                        #             Child Loop BB207_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB207_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB207_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB207_221:                            # %for.cond757
                                        #   Parent Loop BB207_203 Depth=1
                                        #     Parent Loop BB207_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB207_223 Depth 4
                                        #           Child Loop BB207_225 Depth 5
                                        #             Child Loop BB207_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB207_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB207_221 Depth=3
	movl	$0, -48(%rbp)
.LBB207_223:                            # %for.cond761
                                        #   Parent Loop BB207_203 Depth=1
                                        #     Parent Loop BB207_219 Depth=2
                                        #       Parent Loop BB207_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB207_225 Depth 5
                                        #             Child Loop BB207_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB207_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB207_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_225:                            # %for.cond765
                                        #   Parent Loop BB207_203 Depth=1
                                        #     Parent Loop BB207_219 Depth=2
                                        #       Parent Loop BB207_221 Depth=3
                                        #         Parent Loop BB207_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB207_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB207_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_227:                            # %for.cond770
                                        #   Parent Loop BB207_203 Depth=1
                                        #     Parent Loop BB207_219 Depth=2
                                        #       Parent Loop BB207_221 Depth=3
                                        #         Parent Loop BB207_223 Depth=4
                                        #           Parent Loop BB207_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB207_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB207_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB207_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB207_227
.LBB207_230:                            # %for.end803
                                        #   in Loop: Header=BB207_225 Depth=5
	jmp	.LBB207_231
.LBB207_231:                            # %for.inc804
                                        #   in Loop: Header=BB207_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_225
.LBB207_232:                            # %for.end806
                                        #   in Loop: Header=BB207_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB207_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB207_223
.LBB207_234:                            # %for.end810
                                        #   in Loop: Header=BB207_221 Depth=3
	jmp	.LBB207_235
.LBB207_235:                            # %for.inc811
                                        #   in Loop: Header=BB207_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB207_221
.LBB207_236:                            # %for.end813
                                        #   in Loop: Header=BB207_219 Depth=2
	jmp	.LBB207_237
.LBB207_237:                            # %for.inc814
                                        #   in Loop: Header=BB207_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB207_219
.LBB207_238:                            # %for.end816
                                        #   in Loop: Header=BB207_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB207_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB207_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB207_240:                            # %if.end820
                                        #   in Loop: Header=BB207_203 Depth=1
	jmp	.LBB207_241
.LBB207_241:                            # %for.inc821
                                        #   in Loop: Header=BB207_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB207_203
.LBB207_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB207_243:                            # %if.end824
	cmpl	$122296452, -164(%rbp)  # imm = 0x74A1884
	jne	.LBB207_245
.LBB207_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_244
.Lfunc_end207:
	.size	IntraChromaPrediction.166, .Lfunc_end207-IntraChromaPrediction.166
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI207_0:
	.quad	.LBB207_42
	.quad	.LBB207_64
	.quad	.LBB207_83
	.quad	.LBB207_102
                                        # -- End function
	.text
	.globl	writeCBPandLumaCoeff.167 # -- Begin function writeCBPandLumaCoeff.167
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.167,@function
writeCBPandLumaCoeff.167:               # @writeCBPandLumaCoeff.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$858579362, -104(%rbp)  # imm = 0x332CE1A2
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB208_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB208_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB208_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB208_7
.LBB208_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB208_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB208_10
.LBB208_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB208_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB208_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB208_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB208_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB208_18
.LBB208_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB208_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB208_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB208_18
.LBB208_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB208_22
.LBB208_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB208_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB208_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB208_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB208_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB208_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB208_26
.LBB208_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB208_29
.LBB208_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB208_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB208_30:                             # %if.end93
	jmp	.LBB208_31
.LBB208_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB208_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB208_42
.LBB208_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB208_36
.LBB208_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB208_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB208_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB208_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB208_41
.LBB208_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB208_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB208_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB208_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB208_43 Depth=1
	movl	$0, -20(%rbp)
.LBB208_45:                             # %for.cond141
                                        #   Parent Loop BB208_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB208_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB208_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB208_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_45
.LBB208_48:                             # %for.end
                                        #   in Loop: Header=BB208_43 Depth=1
	jmp	.LBB208_49
.LBB208_49:                             # %for.inc152
                                        #   in Loop: Header=BB208_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB208_43
.LBB208_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB208_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB208_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB208_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB208_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB208_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB208_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB208_55:                             # %if.end169
                                        #   in Loop: Header=BB208_52 Depth=1
	jmp	.LBB208_56
.LBB208_56:                             # %for.inc170
                                        #   in Loop: Header=BB208_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_52
.LBB208_57:                             # %for.end172
	jmp	.LBB208_101
.LBB208_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB208_70
.LBB208_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB208_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB208_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB208_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB208_63:                             # %land.end184
                                        #   in Loop: Header=BB208_61 Depth=1
	testb	$1, %al
	jne	.LBB208_64
	jmp	.LBB208_69
.LBB208_64:                             # %for.body186
                                        #   in Loop: Header=BB208_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB208_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB208_67
.LBB208_66:                             # %if.else196
                                        #   in Loop: Header=BB208_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_67:                             # %if.end198
                                        #   in Loop: Header=BB208_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB208_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB208_61
.LBB208_69:                             # %for.end218
	jmp	.LBB208_70
.LBB208_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB208_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB208_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_74 Depth 2
                                        #       Child Loop BB208_76 Depth 3
                                        #         Child Loop BB208_78 Depth 4
                                        #           Child Loop BB208_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB208_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB208_72 Depth=1
	movl	$0, -60(%rbp)
.LBB208_74:                             # %for.cond226
                                        #   Parent Loop BB208_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB208_76 Depth 3
                                        #         Child Loop BB208_78 Depth 4
                                        #           Child Loop BB208_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB208_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB208_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB208_76:                             # %for.cond229
                                        #   Parent Loop BB208_72 Depth=1
                                        #     Parent Loop BB208_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_78 Depth 4
                                        #           Child Loop BB208_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB208_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB208_78:                             # %for.cond233
                                        #   Parent Loop BB208_72 Depth=1
                                        #     Parent Loop BB208_74 Depth=2
                                        #       Parent Loop BB208_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB208_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB208_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB208_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB208_91
.LBB208_81:                             # %if.else247
                                        #   in Loop: Header=BB208_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB208_82:                             # %for.cond259
                                        #   Parent Loop BB208_72 Depth=1
                                        #     Parent Loop BB208_74 Depth=2
                                        #       Parent Loop BB208_76 Depth=3
                                        #         Parent Loop BB208_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB208_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB208_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB208_84:                             # %land.end263
                                        #   in Loop: Header=BB208_82 Depth=5
	testb	$1, %al
	jne	.LBB208_85
	jmp	.LBB208_90
.LBB208_85:                             # %for.body265
                                        #   in Loop: Header=BB208_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB208_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB208_88
.LBB208_87:                             # %if.else276
                                        #   in Loop: Header=BB208_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_88:                             # %if.end278
                                        #   in Loop: Header=BB208_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB208_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB208_82
.LBB208_90:                             # %for.end300
                                        #   in Loop: Header=BB208_78 Depth=4
	jmp	.LBB208_91
.LBB208_91:                             # %if.end301
                                        #   in Loop: Header=BB208_78 Depth=4
	jmp	.LBB208_92
.LBB208_92:                             # %for.inc302
                                        #   in Loop: Header=BB208_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_78
.LBB208_93:                             # %for.end304
                                        #   in Loop: Header=BB208_76 Depth=3
	jmp	.LBB208_94
.LBB208_94:                             # %for.inc305
                                        #   in Loop: Header=BB208_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB208_76
.LBB208_95:                             # %for.end307
                                        #   in Loop: Header=BB208_74 Depth=2
	jmp	.LBB208_96
.LBB208_96:                             # %for.inc308
                                        #   in Loop: Header=BB208_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB208_74
.LBB208_97:                             # %for.end310
                                        #   in Loop: Header=BB208_72 Depth=1
	jmp	.LBB208_98
.LBB208_98:                             # %for.inc311
                                        #   in Loop: Header=BB208_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB208_72
.LBB208_99:                             # %for.end313
	jmp	.LBB208_100
.LBB208_100:                            # %if.end314
	jmp	.LBB208_101
.LBB208_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$858579362, -104(%rbp)  # imm = 0x332CE1A2
	jne	.LBB208_103
.LBB208_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_102
.Lfunc_end208:
	.size	writeCBPandLumaCoeff.167, .Lfunc_end208-writeCBPandLumaCoeff.167
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.168   # -- Begin function writeLumaCoeff8x8.168
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.168,@function
writeLumaCoeff8x8.168:                  # @writeLumaCoeff8x8.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$661931221, -36(%rbp)   # imm = 0x277444D5
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB209_2
# %bb.1:                                # %if.then
	jmp	.LBB209_2
.LBB209_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB209_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB209_15
.LBB209_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB209_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB209_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB209_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB209_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB209_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB209_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB209_10
.LBB209_9:                              # %cond.false
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB209_10:                             # %cond.end
                                        #   in Loop: Header=BB209_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_12
.LBB209_11:                             # %if.else
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB209_12:                             # %if.end17
                                        #   in Loop: Header=BB209_5 Depth=1
	jmp	.LBB209_13
.LBB209_13:                             # %for.inc
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_5
.LBB209_14:                             # %for.end
	jmp	.LBB209_19
.LBB209_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB209_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_18
.LBB209_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB209_18:                             # %if.end27
	jmp	.LBB209_19
.LBB209_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$661931221, -36(%rbp)   # imm = 0x277444D5
	jne	.LBB209_21
.LBB209_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_20
.Lfunc_end209:
	.size	writeLumaCoeff8x8.168, .Lfunc_end209-writeLumaCoeff8x8.168
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.169    # -- Begin function start_macroblock.169
	.p2align	4, 0x90
	.type	start_macroblock.169,@function
start_macroblock.169:                   # @start_macroblock.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$380213006, -84(%rbp)   # imm = 0x16A9970E
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB210_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB210_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB210_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB210_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB210_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB210_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB210_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB210_8:                              # %if.end
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_9
.LBB210_9:                              # %for.inc
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_5
.LBB210_10:                             # %for.end
	jmp	.LBB210_11
.LBB210_11:                             # %if.end19
	jmp	.LBB210_12
.LBB210_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB210_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB210_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB210_16
.LBB210_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB210_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB210_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB210_97
.LBB210_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB210_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB210_21
.LBB210_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB210_96
.LBB210_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB210_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB210_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB210_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB210_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB210_34
.LBB210_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB210_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB210_32
.LBB210_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB210_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB210_31
.LBB210_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB210_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB210_33
.LBB210_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB210_33:                             # %if.end112
	jmp	.LBB210_34
.LBB210_34:                             # %if.end113
	jmp	.LBB210_39
.LBB210_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB210_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB210_38
.LBB210_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB210_38:                             # %if.end125
	jmp	.LBB210_39
.LBB210_39:                             # %if.end126
	jmp	.LBB210_47
.LBB210_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB210_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB210_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB210_44
.LBB210_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB210_44:                             # %if.end140
	jmp	.LBB210_46
.LBB210_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB210_46:                             # %if.end145
	jmp	.LBB210_47
.LBB210_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB210_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB210_93
.LBB210_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB210_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB210_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB210_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB210_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB210_74
.LBB210_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB210_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB210_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB210_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB210_73
.LBB210_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB210_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB210_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB210_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB210_72
.LBB210_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB210_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB210_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB210_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB210_71
.LBB210_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB210_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB210_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB210_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB210_70:                             # %if.end223
	jmp	.LBB210_71
.LBB210_71:                             # %if.end224
	jmp	.LBB210_72
.LBB210_72:                             # %if.end225
	jmp	.LBB210_73
.LBB210_73:                             # %if.end226
	jmp	.LBB210_74
.LBB210_74:                             # %if.end227
	jmp	.LBB210_75
.LBB210_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB210_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB210_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB210_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB210_82
.LBB210_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB210_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB210_81:                             # %if.end256
	jmp	.LBB210_82
.LBB210_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB210_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB210_88
.LBB210_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB210_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB210_87
.LBB210_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB210_87:                             # %if.end292
	jmp	.LBB210_88
.LBB210_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB210_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB210_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB210_92
.LBB210_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB210_92:                             # %if.end305
	jmp	.LBB210_94
.LBB210_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB210_94:                             # %if.end309
	jmp	.LBB210_95
.LBB210_95:                             # %if.end310
	jmp	.LBB210_96
.LBB210_96:                             # %if.end311
	jmp	.LBB210_97
.LBB210_97:                             # %if.end312
	jmp	.LBB210_102
.LBB210_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB210_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB210_101
.LBB210_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB210_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB210_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB210_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB210_105
.LBB210_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB210_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB210_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB210_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB210_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_110 Depth 2
                                        #       Child Loop BB210_112 Depth 3
                                        #         Child Loop BB210_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB210_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB210_108 Depth=1
	movl	$0, -20(%rbp)
.LBB210_110:                            # %for.cond364
                                        #   Parent Loop BB210_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_112 Depth 3
                                        #         Child Loop BB210_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB210_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB210_110 Depth=2
	movl	$0, -12(%rbp)
.LBB210_112:                            # %for.cond368
                                        #   Parent Loop BB210_108 Depth=1
                                        #     Parent Loop BB210_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB210_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB210_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB210_112 Depth=3
	movl	$0, -36(%rbp)
.LBB210_114:                            # %for.cond372
                                        #   Parent Loop BB210_108 Depth=1
                                        #     Parent Loop BB210_110 Depth=2
                                        #       Parent Loop BB210_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB210_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB210_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB210_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB210_114
.LBB210_117:                            # %for.end388
                                        #   in Loop: Header=BB210_112 Depth=3
	jmp	.LBB210_118
.LBB210_118:                            # %for.inc389
                                        #   in Loop: Header=BB210_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_112
.LBB210_119:                            # %for.end391
                                        #   in Loop: Header=BB210_110 Depth=2
	jmp	.LBB210_120
.LBB210_120:                            # %for.inc392
                                        #   in Loop: Header=BB210_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB210_110
.LBB210_121:                            # %for.end394
                                        #   in Loop: Header=BB210_108 Depth=1
	jmp	.LBB210_122
.LBB210_122:                            # %for.inc395
                                        #   in Loop: Header=BB210_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_108
.LBB210_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB210_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_126 Depth 2
                                        #       Child Loop BB210_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB210_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB210_124 Depth=1
	movl	$0, -12(%rbp)
.LBB210_126:                            # %for.cond402
                                        #   Parent Loop BB210_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB210_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB210_126 Depth=2
	movl	$0, -16(%rbp)
.LBB210_128:                            # %for.cond406
                                        #   Parent Loop BB210_124 Depth=1
                                        #     Parent Loop BB210_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB210_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB210_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB210_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_128
.LBB210_131:                            # %for.end432
                                        #   in Loop: Header=BB210_126 Depth=2
	jmp	.LBB210_132
.LBB210_132:                            # %for.inc433
                                        #   in Loop: Header=BB210_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_126
.LBB210_133:                            # %for.end435
                                        #   in Loop: Header=BB210_124 Depth=1
	jmp	.LBB210_134
.LBB210_134:                            # %for.inc436
                                        #   in Loop: Header=BB210_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB210_124
.LBB210_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB210_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_138 Depth 2
                                        #       Child Loop BB210_140 Depth 3
                                        #         Child Loop BB210_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB210_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB210_136 Depth=1
	movl	$0, -20(%rbp)
.LBB210_138:                            # %for.cond443
                                        #   Parent Loop BB210_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_140 Depth 3
                                        #         Child Loop BB210_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB210_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB210_138 Depth=2
	movl	$0, -12(%rbp)
.LBB210_140:                            # %for.cond447
                                        #   Parent Loop BB210_136 Depth=1
                                        #     Parent Loop BB210_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB210_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB210_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB210_140 Depth=3
	movl	$0, -36(%rbp)
.LBB210_142:                            # %for.cond451
                                        #   Parent Loop BB210_136 Depth=1
                                        #     Parent Loop BB210_138 Depth=2
                                        #       Parent Loop BB210_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB210_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB210_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB210_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB210_142
.LBB210_145:                            # %for.end465
                                        #   in Loop: Header=BB210_140 Depth=3
	jmp	.LBB210_146
.LBB210_146:                            # %for.inc466
                                        #   in Loop: Header=BB210_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_140
.LBB210_147:                            # %for.end468
                                        #   in Loop: Header=BB210_138 Depth=2
	jmp	.LBB210_148
.LBB210_148:                            # %for.inc469
                                        #   in Loop: Header=BB210_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB210_138
.LBB210_149:                            # %for.end471
                                        #   in Loop: Header=BB210_136 Depth=1
	jmp	.LBB210_150
.LBB210_150:                            # %for.inc472
                                        #   in Loop: Header=BB210_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_136
.LBB210_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB210_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB210_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB210_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB210_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_152
.LBB210_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB210_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB210_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB210_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB210_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_156
.LBB210_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB210_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB210_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB210_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB210_166
.LBB210_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB210_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB210_165:                            # %if.end520
	jmp	.LBB210_166
.LBB210_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB210_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB210_168:                            # %if.end536
	cmpl	$380213006, -84(%rbp)   # imm = 0x16A9970E
	jne	.LBB210_170
.LBB210_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_169
.Lfunc_end210:
	.size	start_macroblock.169, .Lfunc_end210-start_macroblock.169
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.170 # -- Begin function writeCoeff4x4_CAVLC.170
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.170,@function
writeCoeff4x4_CAVLC.170:                # @writeCoeff4x4_CAVLC.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$123712036, -168(%rbp)  # imm = 0x75FB224
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB211_22
# %bb.1:                                # %entry
	movq	.LJTI211_0(,%rax,8), %rax
	jmpq	*%rax
.LBB211_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB211_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB211_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB211_6
.LBB211_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB211_7
.LBB211_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB211_7:                              # %if.end
	jmp	.LBB211_23
.LBB211_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB211_23
.LBB211_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB211_23
.LBB211_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB211_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB211_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB211_14
.LBB211_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB211_15
.LBB211_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB211_15:                             # %if.end67
	jmp	.LBB211_23
.LBB211_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB211_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB211_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB211_20
.LBB211_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB211_21
.LBB211_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB211_21:                             # %if.end93
	jmp	.LBB211_23
.LBB211_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB211_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB211_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB211_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB211_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB211_27
.LBB211_26:                             # %cond.false
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB211_27
.LBB211_27:                             # %cond.end
                                        #   in Loop: Header=BB211_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB211_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB211_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB211_29:                             # %land.end
                                        #   in Loop: Header=BB211_24 Depth=1
	testb	$1, %dl
	jne	.LBB211_30
	jmp	.LBB211_41
.LBB211_30:                             # %for.body
                                        #   in Loop: Header=BB211_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB211_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB211_24 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB211_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	-100(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB211_33:                             # %if.end110
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB211_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB211_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	$3, -28(%rbp)
.LBB211_36:                             # %if.end117
                                        #   in Loop: Header=BB211_24 Depth=1
	jmp	.LBB211_38
.LBB211_37:                             # %if.else118
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	$0, -28(%rbp)
.LBB211_38:                             # %if.end119
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB211_39:                             # %if.end121
                                        #   in Loop: Header=BB211_24 Depth=1
	jmp	.LBB211_40
.LBB211_40:                             # %for.inc
                                        #   in Loop: Header=BB211_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_24
.LBB211_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB211_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB211_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB211_46
.LBB211_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB211_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB211_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB211_49
.LBB211_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB211_49:                             # %cond.end145
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB211_51
.LBB211_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB211_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB211_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB211_60
.LBB211_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB211_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB211_59
.LBB211_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB211_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB211_58
.LBB211_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB211_58:                             # %if.end168
	jmp	.LBB211_59
.LBB211_59:                             # %if.end169
	jmp	.LBB211_60
.LBB211_60:                             # %if.end170
	jmp	.LBB211_62
.LBB211_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB211_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB211_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB211_65
.LBB211_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB211_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB211_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB211_122
.LBB211_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB211_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB211_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB211_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB211_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB211_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB211_72:                             # %if.end202
                                        #   in Loop: Header=BB211_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB211_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB211_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB211_74:                             # %if.end205
                                        #   in Loop: Header=BB211_69 Depth=1
	jmp	.LBB211_75
.LBB211_75:                             # %for.inc206
                                        #   in Loop: Header=BB211_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_69
.LBB211_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB211_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB211_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB211_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB211_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB211_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB211_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB211_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB211_85
.LBB211_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB211_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB211_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB211_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB211_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB211_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB211_91
.LBB211_90:                             # %if.else249
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB211_91:                             # %if.end252
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	$0, -140(%rbp)
.LBB211_92:                             # %if.end253
                                        #   in Loop: Header=BB211_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB211_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB211_95
.LBB211_94:                             # %if.else257
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB211_95:                             # %if.end259
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB211_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB211_97:                             # %if.end266
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB211_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB211_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	$2, -32(%rbp)
.LBB211_100:                            # %if.end273
                                        #   in Loop: Header=BB211_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB211_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_86
.LBB211_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB211_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB211_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB211_106
.LBB211_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB211_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB211_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB211_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB211_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB211_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB211_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB211_108 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB211_112
.LBB211_111:                            # %if.then318
	jmp	.LBB211_120
.LBB211_112:                            # %if.end319
                                        #   in Loop: Header=BB211_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB211_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB211_108 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB211_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB211_108 Depth=1
	movl	-104(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB211_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB211_108 Depth=1
	movl	$6, -32(%rbp)
.LBB211_116:                            # %if.end327
                                        #   in Loop: Header=BB211_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-100(%rbp), %eax
	movl	-104(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB211_117:                            # %if.end341
                                        #   in Loop: Header=BB211_108 Depth=1
	jmp	.LBB211_118
.LBB211_118:                            # %for.inc342
                                        #   in Loop: Header=BB211_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_108
.LBB211_119:                            # %for.end344.loopexit
	jmp	.LBB211_120
.LBB211_120:                            # %for.end344
	jmp	.LBB211_121
.LBB211_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB211_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$123712036, -168(%rbp)  # imm = 0x75FB224
	jne	.LBB211_124
.LBB211_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_123
.Lfunc_end211:
	.size	writeCoeff4x4_CAVLC.170, .Lfunc_end211-writeCoeff4x4_CAVLC.170
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI211_0:
	.quad	.LBB211_2
	.quad	.LBB211_8
	.quad	.LBB211_9
	.quad	.LBB211_22
	.quad	.LBB211_22
	.quad	.LBB211_22
	.quad	.LBB211_10
	.quad	.LBB211_16
                                        # -- End function
	.text
	.globl	LumaPrediction4x4.171   # -- Begin function LumaPrediction4x4.171
	.p2align	4, 0x90
	.type	LumaPrediction4x4.171,@function
LumaPrediction4x4.171:                  # @LumaPrediction4x4.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$917576906, -104(%rbp)  # imm = 0x36B11CCA
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB212_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB212_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB212_6
.LBB212_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB212_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB212_5:                              # %land.end
.LBB212_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB212_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB212_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB212_10
.LBB212_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB212_10
.LBB212_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB212_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB212_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB212_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB212_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB212_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB212_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB212_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB212_19
.LBB212_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB212_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB212_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB212_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB212_23
.LBB212_22:                             # %if.then45
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB212_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB212_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB212_26
.LBB212_25:                             # %if.then64
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB212_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB212_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB212_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB212_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_31:                             # %for.cond85
                                        #   Parent Loop BB212_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB212_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB212_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_31
.LBB212_34:                             # %for.end
                                        #   in Loop: Header=BB212_29 Depth=1
	jmp	.LBB212_35
.LBB212_35:                             # %for.inc125
                                        #   in Loop: Header=BB212_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_29
.LBB212_36:                             # %for.end127
	jmp	.LBB212_57
.LBB212_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB212_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB212_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_41:                             # %for.cond135
                                        #   Parent Loop BB212_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB212_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB212_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_41
.LBB212_44:                             # %for.end161
                                        #   in Loop: Header=BB212_39 Depth=1
	jmp	.LBB212_45
.LBB212_45:                             # %for.inc162
                                        #   in Loop: Header=BB212_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_39
.LBB212_46:                             # %for.end164
	jmp	.LBB212_56
.LBB212_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB212_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_50:                             # %for.cond170
                                        #   Parent Loop BB212_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB212_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB212_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_50
.LBB212_53:                             # %for.end196
                                        #   in Loop: Header=BB212_48 Depth=1
	jmp	.LBB212_54
.LBB212_54:                             # %for.inc197
                                        #   in Loop: Header=BB212_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_48
.LBB212_55:                             # %for.end199
	jmp	.LBB212_56
.LBB212_56:                             # %if.end200
	jmp	.LBB212_57
.LBB212_57:                             # %if.end201
	jmp	.LBB212_89
.LBB212_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB212_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB212_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_62:                             # %for.cond210
                                        #   Parent Loop BB212_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB212_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB212_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_62
.LBB212_65:                             # %for.end226
                                        #   in Loop: Header=BB212_60 Depth=1
	jmp	.LBB212_66
.LBB212_66:                             # %for.inc227
                                        #   in Loop: Header=BB212_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_60
.LBB212_67:                             # %for.end229
	jmp	.LBB212_88
.LBB212_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB212_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB212_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_72:                             # %for.cond238
                                        #   Parent Loop BB212_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB212_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB212_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_72
.LBB212_75:                             # %for.end251
                                        #   in Loop: Header=BB212_70 Depth=1
	jmp	.LBB212_76
.LBB212_76:                             # %for.inc252
                                        #   in Loop: Header=BB212_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_70
.LBB212_77:                             # %for.end254
	jmp	.LBB212_87
.LBB212_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB212_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB212_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB212_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB212_81:                             # %for.cond260
                                        #   Parent Loop BB212_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB212_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB212_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_81
.LBB212_84:                             # %for.end273
                                        #   in Loop: Header=BB212_79 Depth=1
	jmp	.LBB212_85
.LBB212_85:                             # %for.inc274
                                        #   in Loop: Header=BB212_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_79
.LBB212_86:                             # %for.end276
	jmp	.LBB212_87
.LBB212_87:                             # %if.end277
	jmp	.LBB212_88
.LBB212_88:                             # %if.end278
	jmp	.LBB212_89
.LBB212_89:                             # %if.end279
	cmpl	$917576906, -104(%rbp)  # imm = 0x36B11CCA
	jne	.LBB212_91
.LBB212_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_90
.Lfunc_end212:
	.size	LumaPrediction4x4.171, .Lfunc_end212-LumaPrediction4x4.171
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.172        # -- Begin function MBType2Value.172
	.p2align	4, 0x90
	.type	MBType2Value.172,@function
MBType2Value.172:                       # @MBType2Value.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$350644984, -36(%rbp)   # imm = 0x14E66AF8
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB213_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB213_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB213_4
.LBB213_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB213_26
.LBB213_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB213_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB213_26
.LBB213_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB213_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB213_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB213_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB213_26
.LBB213_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB213_26
.LBB213_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_26
.LBB213_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB213_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB213_26
.LBB213_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB213_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB213_17
.LBB213_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB213_26
.LBB213_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB213_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_26
.LBB213_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB213_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB213_26
.LBB213_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB213_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_26
.LBB213_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB213_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_26
.LBB213_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB213_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$350644984, -36(%rbp)   # imm = 0x14E66AF8
	jne	.LBB213_28
.LBB213_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_27
.Lfunc_end213:
	.size	MBType2Value.172, .Lfunc_end213-MBType2Value.172
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.173 # -- Begin function LumaResidualCoding8x8.173
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.173,@function
LumaResidualCoding8x8.173:              # @LumaResidualCoding8x8.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$769531181, -116(%rbp)  # imm = 0x2DDE1D2D
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB214_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -64(%rbp)
	jne	.LBB214_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB214_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB214_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB214_5:                              # %if.end
	movl	$0, -80(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB214_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_8 Depth 2
                                        #       Child Loop BB214_11 Depth 3
                                        #         Child Loop BB214_13 Depth 4
                                        #       Child Loop BB214_19 Depth 3
                                        #         Child Loop BB214_21 Depth 4
                                        #       Child Loop BB214_29 Depth 3
                                        #         Child Loop BB214_31 Depth 4
                                        #       Child Loop BB214_40 Depth 3
                                        #         Child Loop BB214_42 Depth 4
                                        #       Child Loop BB214_57 Depth 3
                                        #         Child Loop BB214_59 Depth 4
                                        #       Child Loop BB214_67 Depth 3
                                        #         Child Loop BB214_69 Depth 4
                                        #       Child Loop BB214_84 Depth 3
                                        #         Child Loop BB214_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB214_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB214_8:                              # %for.cond9
                                        #   Parent Loop BB214_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB214_11 Depth 3
                                        #         Child Loop BB214_13 Depth 4
                                        #       Child Loop BB214_19 Depth 3
                                        #         Child Loop BB214_21 Depth 4
                                        #       Child Loop BB214_29 Depth 3
                                        #         Child Loop BB214_31 Depth 4
                                        #       Child Loop BB214_40 Depth 3
                                        #         Child Loop BB214_42 Depth 4
                                        #       Child Loop BB214_57 Depth 3
                                        #         Child Loop BB214_59 Depth 4
                                        #       Child Loop BB214_67 Depth 3
                                        #         Child Loop BB214_69 Depth 4
                                        #       Child Loop BB214_84 Depth 3
                                        #         Child Loop BB214_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB214_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB214_11:                             # %for.cond16
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB214_11 Depth=3
	movl	$0, -16(%rbp)
.LBB214_13:                             # %for.cond20
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB214_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB214_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_13
.LBB214_16:                             # %for.end
                                        #   in Loop: Header=BB214_11 Depth=3
	jmp	.LBB214_17
.LBB214_17:                             # %for.inc37
                                        #   in Loop: Header=BB214_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_11
.LBB214_18:                             # %for.end39
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB214_19:                             # %for.cond41
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB214_19 Depth=3
	movl	$0, -16(%rbp)
.LBB214_21:                             # %for.cond45
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB214_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB214_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_21
.LBB214_24:                             # %for.end65
                                        #   in Loop: Header=BB214_19 Depth=3
	jmp	.LBB214_25
.LBB214_25:                             # %for.inc66
                                        #   in Loop: Header=BB214_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_19
.LBB214_26:                             # %for.end68
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_27
.LBB214_27:                             # %if.end69
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB214_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	$0, -12(%rbp)
.LBB214_29:                             # %for.cond74
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB214_29 Depth=3
	movl	$0, -16(%rbp)
.LBB214_31:                             # %for.cond78
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB214_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB214_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_31
.LBB214_34:                             # %for.end98
                                        #   in Loop: Header=BB214_29 Depth=3
	jmp	.LBB214_35
.LBB214_35:                             # %for.inc99
                                        #   in Loop: Header=BB214_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_29
.LBB214_36:                             # %for.end101
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_37
.LBB214_37:                             # %if.end102
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB214_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB214_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	$0, -12(%rbp)
.LBB214_40:                             # %for.cond108
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB214_40 Depth=3
	movl	$0, -16(%rbp)
.LBB214_42:                             # %for.cond112
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB214_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB214_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_42
.LBB214_45:                             # %for.end137
                                        #   in Loop: Header=BB214_40 Depth=3
	jmp	.LBB214_46
.LBB214_46:                             # %for.inc138
                                        #   in Loop: Header=BB214_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_40
.LBB214_47:                             # %for.end140
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB214_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB214_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB214_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB214_52
.LBB214_51:                             # %if.else
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB214_52:                             # %if.end151
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB214_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB214_54:                             # %if.end157
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_55
.LBB214_55:                             # %if.end158
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_65
.LBB214_56:                             # %if.else159
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	$0, -12(%rbp)
.LBB214_57:                             # %for.cond160
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB214_57 Depth=3
	movl	$0, -16(%rbp)
.LBB214_59:                             # %for.cond164
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB214_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB214_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_59
.LBB214_62:                             # %for.end193
                                        #   in Loop: Header=BB214_57 Depth=3
	jmp	.LBB214_63
.LBB214_63:                             # %for.inc194
                                        #   in Loop: Header=BB214_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_57
.LBB214_64:                             # %for.end196
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_65
.LBB214_65:                             # %if.end197
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_95
.LBB214_66:                             # %if.else198
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	$0, -12(%rbp)
.LBB214_67:                             # %for.cond199
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB214_67 Depth=3
	movl	$0, -16(%rbp)
.LBB214_69:                             # %for.cond203
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB214_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB214_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB214_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB214_73
.LBB214_72:                             # %if.else300
                                        #   in Loop: Header=BB214_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB214_73:                             # %if.end314
                                        #   in Loop: Header=BB214_69 Depth=4
	jmp	.LBB214_74
.LBB214_74:                             # %for.inc315
                                        #   in Loop: Header=BB214_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_69
.LBB214_75:                             # %for.end317
                                        #   in Loop: Header=BB214_67 Depth=3
	jmp	.LBB214_76
.LBB214_76:                             # %for.inc318
                                        #   in Loop: Header=BB214_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_67
.LBB214_77:                             # %for.end320
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB214_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB214_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB214_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB214_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB214_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB214_83
.LBB214_82:                             # %if.else334
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB214_83:                             # %if.end336
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	$0, -12(%rbp)
.LBB214_84:                             # %for.cond337
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB214_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB214_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB214_84 Depth=3
	movl	$0, -16(%rbp)
.LBB214_86:                             # %for.cond341
                                        #   Parent Loop BB214_6 Depth=1
                                        #     Parent Loop BB214_8 Depth=2
                                        #       Parent Loop BB214_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB214_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB214_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB214_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_86
.LBB214_89:                             # %for.end358
                                        #   in Loop: Header=BB214_84 Depth=3
	jmp	.LBB214_90
.LBB214_90:                             # %for.inc359
                                        #   in Loop: Header=BB214_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_84
.LBB214_91:                             # %for.end361
                                        #   in Loop: Header=BB214_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB214_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB214_93:                             # %if.end368
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_94
.LBB214_94:                             # %if.end369
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_95
.LBB214_95:                             # %if.end370
                                        #   in Loop: Header=BB214_8 Depth=2
	jmp	.LBB214_96
.LBB214_96:                             # %for.inc371
                                        #   in Loop: Header=BB214_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB214_8
.LBB214_97:                             # %for.end374
                                        #   in Loop: Header=BB214_6 Depth=1
	jmp	.LBB214_98
.LBB214_98:                             # %for.inc375
                                        #   in Loop: Header=BB214_6 Depth=1
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB214_6
.LBB214_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB214_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB214_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB214_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB214_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB214_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB214_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB214_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB214_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB214_106 Depth=1
	movl	$0, -16(%rbp)
.LBB214_108:                            # %for.cond400
                                        #   Parent Loop BB214_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB214_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB214_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB214_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_108
.LBB214_111:                            # %for.end417
                                        #   in Loop: Header=BB214_106 Depth=1
	jmp	.LBB214_112
.LBB214_112:                            # %for.inc418
                                        #   in Loop: Header=BB214_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_106
.LBB214_113:                            # %for.end420
	jmp	.LBB214_114
.LBB214_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB214_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB214_116:                            # %if.end431
	jmp	.LBB214_117
.LBB214_117:                            # %if.end432
	jmp	.LBB214_118
.LBB214_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB214_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB214_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB214_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB214_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB214_145
.LBB214_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB214_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB214_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB214_126:                            # %for.cond462
                                        #   Parent Loop BB214_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB214_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB214_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB214_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB214_130
.LBB214_129:                            # %if.else481
                                        #   in Loop: Header=BB214_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB214_130:                            # %if.end486
                                        #   in Loop: Header=BB214_126 Depth=2
	jmp	.LBB214_131
.LBB214_131:                            # %for.inc487
                                        #   in Loop: Header=BB214_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_126
.LBB214_132:                            # %for.end489
                                        #   in Loop: Header=BB214_124 Depth=1
	jmp	.LBB214_133
.LBB214_133:                            # %for.inc490
                                        #   in Loop: Header=BB214_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_124
.LBB214_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB214_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB214_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB214_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB214_138:                            # %for.cond502
                                        #   Parent Loop BB214_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB214_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB214_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB214_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_138
.LBB214_141:                            # %for.end509
                                        #   in Loop: Header=BB214_136 Depth=1
	jmp	.LBB214_142
.LBB214_142:                            # %for.inc510
                                        #   in Loop: Header=BB214_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_136
.LBB214_143:                            # %for.end512
	jmp	.LBB214_144
.LBB214_144:                            # %if.end513
	jmp	.LBB214_145
.LBB214_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$769531181, -116(%rbp)  # imm = 0x2DDE1D2D
	jne	.LBB214_147
.LBB214_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_146
.Lfunc_end214:
	.size	LumaResidualCoding8x8.173, .Lfunc_end214-LumaResidualCoding8x8.173
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.174         # -- Begin function predict_nnz.174
	.p2align	4, 0x90
	.type	predict_nnz.174,@function
predict_nnz.174:                        # @predict_nnz.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1164538983, -56(%rbp)  # imm = 0x45697467
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB215_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB215_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB215_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB215_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB215_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB215_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB215_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB215_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB215_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB215_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB215_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB215_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB215_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB215_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1164538983, -56(%rbp)  # imm = 0x45697467
	jne	.LBB215_16
.LBB215_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_15
.Lfunc_end215:
	.size	predict_nnz.174, .Lfunc_end215-predict_nnz.174
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.175 # -- Begin function LumaResidualCoding8x8.175
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.175,@function
LumaResidualCoding8x8.175:              # @LumaResidualCoding8x8.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$2117809872, -124(%rbp) # imm = 0x7E3B36D0
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB216_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB216_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB216_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB216_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB216_5:                              # %if.end
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB216_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_8 Depth 2
                                        #       Child Loop BB216_11 Depth 3
                                        #         Child Loop BB216_13 Depth 4
                                        #       Child Loop BB216_19 Depth 3
                                        #         Child Loop BB216_21 Depth 4
                                        #       Child Loop BB216_29 Depth 3
                                        #         Child Loop BB216_31 Depth 4
                                        #       Child Loop BB216_40 Depth 3
                                        #         Child Loop BB216_42 Depth 4
                                        #       Child Loop BB216_57 Depth 3
                                        #         Child Loop BB216_59 Depth 4
                                        #       Child Loop BB216_67 Depth 3
                                        #         Child Loop BB216_69 Depth 4
                                        #       Child Loop BB216_84 Depth 3
                                        #         Child Loop BB216_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB216_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB216_8:                              # %for.cond9
                                        #   Parent Loop BB216_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_11 Depth 3
                                        #         Child Loop BB216_13 Depth 4
                                        #       Child Loop BB216_19 Depth 3
                                        #         Child Loop BB216_21 Depth 4
                                        #       Child Loop BB216_29 Depth 3
                                        #         Child Loop BB216_31 Depth 4
                                        #       Child Loop BB216_40 Depth 3
                                        #         Child Loop BB216_42 Depth 4
                                        #       Child Loop BB216_57 Depth 3
                                        #         Child Loop BB216_59 Depth 4
                                        #       Child Loop BB216_67 Depth 3
                                        #         Child Loop BB216_69 Depth 4
                                        #       Child Loop BB216_84 Depth 3
                                        #         Child Loop BB216_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB216_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB216_11:                             # %for.cond16
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB216_11 Depth=3
	movl	$0, -16(%rbp)
.LBB216_13:                             # %for.cond20
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB216_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB216_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_13
.LBB216_16:                             # %for.end
                                        #   in Loop: Header=BB216_11 Depth=3
	jmp	.LBB216_17
.LBB216_17:                             # %for.inc37
                                        #   in Loop: Header=BB216_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_11
.LBB216_18:                             # %for.end39
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB216_19:                             # %for.cond41
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB216_19 Depth=3
	movl	$0, -16(%rbp)
.LBB216_21:                             # %for.cond45
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB216_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB216_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_21
.LBB216_24:                             # %for.end65
                                        #   in Loop: Header=BB216_19 Depth=3
	jmp	.LBB216_25
.LBB216_25:                             # %for.inc66
                                        #   in Loop: Header=BB216_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_19
.LBB216_26:                             # %for.end68
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_27
.LBB216_27:                             # %if.end69
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB216_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	$0, -12(%rbp)
.LBB216_29:                             # %for.cond74
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB216_29 Depth=3
	movl	$0, -16(%rbp)
.LBB216_31:                             # %for.cond78
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB216_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB216_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_31
.LBB216_34:                             # %for.end98
                                        #   in Loop: Header=BB216_29 Depth=3
	jmp	.LBB216_35
.LBB216_35:                             # %for.inc99
                                        #   in Loop: Header=BB216_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_29
.LBB216_36:                             # %for.end101
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_37
.LBB216_37:                             # %if.end102
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB216_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB216_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	$0, -12(%rbp)
.LBB216_40:                             # %for.cond108
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB216_40 Depth=3
	movl	$0, -16(%rbp)
.LBB216_42:                             # %for.cond112
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB216_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB216_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_42
.LBB216_45:                             # %for.end137
                                        #   in Loop: Header=BB216_40 Depth=3
	jmp	.LBB216_46
.LBB216_46:                             # %for.inc138
                                        #   in Loop: Header=BB216_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_40
.LBB216_47:                             # %for.end140
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB216_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB216_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB216_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB216_52
.LBB216_51:                             # %if.else
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB216_52:                             # %if.end151
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB216_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB216_54:                             # %if.end157
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_55
.LBB216_55:                             # %if.end158
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_65
.LBB216_56:                             # %if.else159
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	$0, -12(%rbp)
.LBB216_57:                             # %for.cond160
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB216_57 Depth=3
	movl	$0, -16(%rbp)
.LBB216_59:                             # %for.cond164
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB216_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB216_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_59
.LBB216_62:                             # %for.end193
                                        #   in Loop: Header=BB216_57 Depth=3
	jmp	.LBB216_63
.LBB216_63:                             # %for.inc194
                                        #   in Loop: Header=BB216_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_57
.LBB216_64:                             # %for.end196
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_65
.LBB216_65:                             # %if.end197
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_95
.LBB216_66:                             # %if.else198
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	$0, -12(%rbp)
.LBB216_67:                             # %for.cond199
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB216_67 Depth=3
	movl	$0, -16(%rbp)
.LBB216_69:                             # %for.cond203
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB216_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB216_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB216_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB216_73
.LBB216_72:                             # %if.else300
                                        #   in Loop: Header=BB216_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB216_73:                             # %if.end314
                                        #   in Loop: Header=BB216_69 Depth=4
	jmp	.LBB216_74
.LBB216_74:                             # %for.inc315
                                        #   in Loop: Header=BB216_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_69
.LBB216_75:                             # %for.end317
                                        #   in Loop: Header=BB216_67 Depth=3
	jmp	.LBB216_76
.LBB216_76:                             # %for.inc318
                                        #   in Loop: Header=BB216_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_67
.LBB216_77:                             # %for.end320
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB216_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB216_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB216_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB216_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB216_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB216_83
.LBB216_82:                             # %if.else334
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB216_83:                             # %if.end336
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	$0, -12(%rbp)
.LBB216_84:                             # %for.cond337
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB216_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB216_84 Depth=3
	movl	$0, -16(%rbp)
.LBB216_86:                             # %for.cond341
                                        #   Parent Loop BB216_6 Depth=1
                                        #     Parent Loop BB216_8 Depth=2
                                        #       Parent Loop BB216_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB216_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB216_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_86
.LBB216_89:                             # %for.end358
                                        #   in Loop: Header=BB216_84 Depth=3
	jmp	.LBB216_90
.LBB216_90:                             # %for.inc359
                                        #   in Loop: Header=BB216_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_84
.LBB216_91:                             # %for.end361
                                        #   in Loop: Header=BB216_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB216_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB216_93:                             # %if.end368
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_94
.LBB216_94:                             # %if.end369
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_95
.LBB216_95:                             # %if.end370
                                        #   in Loop: Header=BB216_8 Depth=2
	jmp	.LBB216_96
.LBB216_96:                             # %for.inc371
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB216_8
.LBB216_97:                             # %for.end374
                                        #   in Loop: Header=BB216_6 Depth=1
	jmp	.LBB216_98
.LBB216_98:                             # %for.inc375
                                        #   in Loop: Header=BB216_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB216_6
.LBB216_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB216_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB216_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB216_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB216_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB216_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB216_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB216_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB216_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB216_106 Depth=1
	movl	$0, -16(%rbp)
.LBB216_108:                            # %for.cond400
                                        #   Parent Loop BB216_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB216_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB216_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB216_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_108
.LBB216_111:                            # %for.end417
                                        #   in Loop: Header=BB216_106 Depth=1
	jmp	.LBB216_112
.LBB216_112:                            # %for.inc418
                                        #   in Loop: Header=BB216_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_106
.LBB216_113:                            # %for.end420
	jmp	.LBB216_114
.LBB216_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB216_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB216_116:                            # %if.end431
	jmp	.LBB216_117
.LBB216_117:                            # %if.end432
	jmp	.LBB216_118
.LBB216_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB216_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB216_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB216_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB216_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB216_145
.LBB216_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB216_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB216_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB216_126:                            # %for.cond462
                                        #   Parent Loop BB216_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB216_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB216_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB216_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB216_130
.LBB216_129:                            # %if.else481
                                        #   in Loop: Header=BB216_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB216_130:                            # %if.end486
                                        #   in Loop: Header=BB216_126 Depth=2
	jmp	.LBB216_131
.LBB216_131:                            # %for.inc487
                                        #   in Loop: Header=BB216_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_126
.LBB216_132:                            # %for.end489
                                        #   in Loop: Header=BB216_124 Depth=1
	jmp	.LBB216_133
.LBB216_133:                            # %for.inc490
                                        #   in Loop: Header=BB216_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_124
.LBB216_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB216_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB216_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB216_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB216_138:                            # %for.cond502
                                        #   Parent Loop BB216_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB216_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB216_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB216_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_138
.LBB216_141:                            # %for.end509
                                        #   in Loop: Header=BB216_136 Depth=1
	jmp	.LBB216_142
.LBB216_142:                            # %for.inc510
                                        #   in Loop: Header=BB216_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_136
.LBB216_143:                            # %for.end512
	jmp	.LBB216_144
.LBB216_144:                            # %if.end513
	jmp	.LBB216_145
.LBB216_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$2117809872, -124(%rbp) # imm = 0x7E3B36D0
	jne	.LBB216_147
.LBB216_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_146
.Lfunc_end216:
	.size	LumaResidualCoding8x8.175, .Lfunc_end216-LumaResidualCoding8x8.175
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.176 # -- Begin function writeReferenceFrame.176
	.p2align	4, 0x90
	.type	writeReferenceFrame.176,@function
writeReferenceFrame.176:                # @writeReferenceFrame.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$522152226, -68(%rbp)   # imm = 0x1F1F6922
	movl	%edi, -76(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB217_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB217_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB217_4
.LBB217_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB217_4
.LBB217_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB217_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB217_7
.LBB217_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB217_7:                              # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB217_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB217_18
.LBB217_9:                              # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB217_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB217_11:                             # %if.end21
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB217_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB217_15
.LBB217_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB217_15:                             # %if.end33
	jmp	.LBB217_17
.LBB217_16:                             # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB217_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB217_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$522152226, -68(%rbp)   # imm = 0x1F1F6922
	jne	.LBB217_20
.LBB217_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_19
.Lfunc_end217:
	.size	writeReferenceFrame.176, .Lfunc_end217-writeReferenceFrame.176
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.177 # -- Begin function writeChromaIntraPredMode.177
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.177,@function
writeChromaIntraPredMode.177:           # @writeChromaIntraPredMode.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1941644164, -36(%rbp)  # imm = 0x73BB2384
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB218_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB218_3
.LBB218_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB218_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1941644164, -36(%rbp)  # imm = 0x73BB2384
	jne	.LBB218_5
.LBB218_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_4
.Lfunc_end218:
	.size	writeChromaIntraPredMode.177, .Lfunc_end218-writeChromaIntraPredMode.177
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.178 # -- Begin function OneComponentLumaPrediction4x4.178
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.178,@function
OneComponentLumaPrediction4x4.178:      # @OneComponentLumaPrediction4x4.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$349020614, -84(%rbp)   # imm = 0x14CDA1C6
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$349020614, -84(%rbp)   # imm = 0x14CDA1C6
	jne	.LBB219_2
.LBB219_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_1
.Lfunc_end219:
	.size	OneComponentLumaPrediction4x4.178, .Lfunc_end219-OneComponentLumaPrediction4x4.178
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.179        # -- Begin function BType2CtxRef.179
	.p2align	4, 0x90
	.type	BType2CtxRef.179,@function
BType2CtxRef.179:                       # @BType2CtxRef.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2066659983, -20(%rbp)  # imm = 0x7B2EBA8F
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB220_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB220_3
.LBB220_2:                              # %if.else
	movl	$1, -12(%rbp)
.LBB220_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2066659983, -20(%rbp)  # imm = 0x7B2EBA8F
	jne	.LBB220_5
.LBB220_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_4
.Lfunc_end220:
	.size	BType2CtxRef.179, .Lfunc_end220-BType2CtxRef.179
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.180 # -- Begin function LumaResidualCoding8x8.180
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.180,@function
LumaResidualCoding8x8.180:              # @LumaResidualCoding8x8.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$371349593, -116(%rbp)  # imm = 0x16225859
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB221_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB221_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB221_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB221_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB221_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB221_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_8 Depth 2
                                        #       Child Loop BB221_11 Depth 3
                                        #         Child Loop BB221_13 Depth 4
                                        #       Child Loop BB221_19 Depth 3
                                        #         Child Loop BB221_21 Depth 4
                                        #       Child Loop BB221_29 Depth 3
                                        #         Child Loop BB221_31 Depth 4
                                        #       Child Loop BB221_40 Depth 3
                                        #         Child Loop BB221_42 Depth 4
                                        #       Child Loop BB221_57 Depth 3
                                        #         Child Loop BB221_59 Depth 4
                                        #       Child Loop BB221_67 Depth 3
                                        #         Child Loop BB221_69 Depth 4
                                        #       Child Loop BB221_84 Depth 3
                                        #         Child Loop BB221_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB221_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB221_8:                              # %for.cond9
                                        #   Parent Loop BB221_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB221_11 Depth 3
                                        #         Child Loop BB221_13 Depth 4
                                        #       Child Loop BB221_19 Depth 3
                                        #         Child Loop BB221_21 Depth 4
                                        #       Child Loop BB221_29 Depth 3
                                        #         Child Loop BB221_31 Depth 4
                                        #       Child Loop BB221_40 Depth 3
                                        #         Child Loop BB221_42 Depth 4
                                        #       Child Loop BB221_57 Depth 3
                                        #         Child Loop BB221_59 Depth 4
                                        #       Child Loop BB221_67 Depth 3
                                        #         Child Loop BB221_69 Depth 4
                                        #       Child Loop BB221_84 Depth 3
                                        #         Child Loop BB221_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB221_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB221_11:                             # %for.cond16
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB221_11 Depth=3
	movl	$0, -16(%rbp)
.LBB221_13:                             # %for.cond20
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB221_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB221_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_13
.LBB221_16:                             # %for.end
                                        #   in Loop: Header=BB221_11 Depth=3
	jmp	.LBB221_17
.LBB221_17:                             # %for.inc37
                                        #   in Loop: Header=BB221_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_11
.LBB221_18:                             # %for.end39
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB221_19:                             # %for.cond41
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB221_19 Depth=3
	movl	$0, -16(%rbp)
.LBB221_21:                             # %for.cond45
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB221_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB221_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_21
.LBB221_24:                             # %for.end65
                                        #   in Loop: Header=BB221_19 Depth=3
	jmp	.LBB221_25
.LBB221_25:                             # %for.inc66
                                        #   in Loop: Header=BB221_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_19
.LBB221_26:                             # %for.end68
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_27
.LBB221_27:                             # %if.end69
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB221_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	$0, -12(%rbp)
.LBB221_29:                             # %for.cond74
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB221_29 Depth=3
	movl	$0, -16(%rbp)
.LBB221_31:                             # %for.cond78
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB221_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB221_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_31
.LBB221_34:                             # %for.end98
                                        #   in Loop: Header=BB221_29 Depth=3
	jmp	.LBB221_35
.LBB221_35:                             # %for.inc99
                                        #   in Loop: Header=BB221_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_29
.LBB221_36:                             # %for.end101
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_37
.LBB221_37:                             # %if.end102
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB221_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB221_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	$0, -12(%rbp)
.LBB221_40:                             # %for.cond108
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB221_40 Depth=3
	movl	$0, -16(%rbp)
.LBB221_42:                             # %for.cond112
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB221_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB221_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_42
.LBB221_45:                             # %for.end137
                                        #   in Loop: Header=BB221_40 Depth=3
	jmp	.LBB221_46
.LBB221_46:                             # %for.inc138
                                        #   in Loop: Header=BB221_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_40
.LBB221_47:                             # %for.end140
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB221_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB221_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB221_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB221_52
.LBB221_51:                             # %if.else
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB221_52:                             # %if.end151
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB221_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB221_54:                             # %if.end157
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_55
.LBB221_55:                             # %if.end158
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_65
.LBB221_56:                             # %if.else159
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	$0, -12(%rbp)
.LBB221_57:                             # %for.cond160
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB221_57 Depth=3
	movl	$0, -16(%rbp)
.LBB221_59:                             # %for.cond164
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB221_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB221_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_59
.LBB221_62:                             # %for.end193
                                        #   in Loop: Header=BB221_57 Depth=3
	jmp	.LBB221_63
.LBB221_63:                             # %for.inc194
                                        #   in Loop: Header=BB221_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_57
.LBB221_64:                             # %for.end196
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_65
.LBB221_65:                             # %if.end197
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_95
.LBB221_66:                             # %if.else198
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	$0, -12(%rbp)
.LBB221_67:                             # %for.cond199
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB221_67 Depth=3
	movl	$0, -16(%rbp)
.LBB221_69:                             # %for.cond203
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB221_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB221_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB221_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB221_73
.LBB221_72:                             # %if.else300
                                        #   in Loop: Header=BB221_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB221_73:                             # %if.end314
                                        #   in Loop: Header=BB221_69 Depth=4
	jmp	.LBB221_74
.LBB221_74:                             # %for.inc315
                                        #   in Loop: Header=BB221_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_69
.LBB221_75:                             # %for.end317
                                        #   in Loop: Header=BB221_67 Depth=3
	jmp	.LBB221_76
.LBB221_76:                             # %for.inc318
                                        #   in Loop: Header=BB221_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_67
.LBB221_77:                             # %for.end320
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB221_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB221_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB221_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB221_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB221_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB221_83
.LBB221_82:                             # %if.else334
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB221_83:                             # %if.end336
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	$0, -12(%rbp)
.LBB221_84:                             # %for.cond337
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB221_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB221_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB221_84 Depth=3
	movl	$0, -16(%rbp)
.LBB221_86:                             # %for.cond341
                                        #   Parent Loop BB221_6 Depth=1
                                        #     Parent Loop BB221_8 Depth=2
                                        #       Parent Loop BB221_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB221_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB221_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB221_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_86
.LBB221_89:                             # %for.end358
                                        #   in Loop: Header=BB221_84 Depth=3
	jmp	.LBB221_90
.LBB221_90:                             # %for.inc359
                                        #   in Loop: Header=BB221_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_84
.LBB221_91:                             # %for.end361
                                        #   in Loop: Header=BB221_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB221_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB221_93:                             # %if.end368
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_94
.LBB221_94:                             # %if.end369
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_95
.LBB221_95:                             # %if.end370
                                        #   in Loop: Header=BB221_8 Depth=2
	jmp	.LBB221_96
.LBB221_96:                             # %for.inc371
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB221_8
.LBB221_97:                             # %for.end374
                                        #   in Loop: Header=BB221_6 Depth=1
	jmp	.LBB221_98
.LBB221_98:                             # %for.inc375
                                        #   in Loop: Header=BB221_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB221_6
.LBB221_99:                             # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB221_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB221_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -64(%rbp)
	jne	.LBB221_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB221_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB221_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB221_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB221_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB221_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB221_106 Depth=1
	movl	$0, -16(%rbp)
.LBB221_108:                            # %for.cond400
                                        #   Parent Loop BB221_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB221_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB221_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB221_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_108
.LBB221_111:                            # %for.end417
                                        #   in Loop: Header=BB221_106 Depth=1
	jmp	.LBB221_112
.LBB221_112:                            # %for.inc418
                                        #   in Loop: Header=BB221_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_106
.LBB221_113:                            # %for.end420
	jmp	.LBB221_114
.LBB221_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB221_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB221_116:                            # %if.end431
	jmp	.LBB221_117
.LBB221_117:                            # %if.end432
	jmp	.LBB221_118
.LBB221_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB221_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -64(%rbp)
	jne	.LBB221_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB221_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB221_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB221_145
.LBB221_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB221_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB221_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB221_126:                            # %for.cond462
                                        #   Parent Loop BB221_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB221_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB221_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB221_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB221_130
.LBB221_129:                            # %if.else481
                                        #   in Loop: Header=BB221_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB221_130:                            # %if.end486
                                        #   in Loop: Header=BB221_126 Depth=2
	jmp	.LBB221_131
.LBB221_131:                            # %for.inc487
                                        #   in Loop: Header=BB221_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_126
.LBB221_132:                            # %for.end489
                                        #   in Loop: Header=BB221_124 Depth=1
	jmp	.LBB221_133
.LBB221_133:                            # %for.inc490
                                        #   in Loop: Header=BB221_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_124
.LBB221_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB221_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB221_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB221_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB221_138:                            # %for.cond502
                                        #   Parent Loop BB221_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB221_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB221_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB221_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_138
.LBB221_141:                            # %for.end509
                                        #   in Loop: Header=BB221_136 Depth=1
	jmp	.LBB221_142
.LBB221_142:                            # %for.inc510
                                        #   in Loop: Header=BB221_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB221_136
.LBB221_143:                            # %for.end512
	jmp	.LBB221_144
.LBB221_144:                            # %if.end513
	jmp	.LBB221_145
.LBB221_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$371349593, -116(%rbp)  # imm = 0x16225859
	jne	.LBB221_147
.LBB221_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_146
.Lfunc_end221:
	.size	LumaResidualCoding8x8.180, .Lfunc_end221-LumaResidualCoding8x8.180
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.181    # -- Begin function writeChromaCoeff.181
	.p2align	4, 0x90
	.type	writeChromaCoeff.181,@function
writeChromaCoeff.181:                   # @writeChromaCoeff.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1469409580, -80(%rbp)  # imm = 0x5795692C
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB222_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB222_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB222_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB222_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB222_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB222_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB222_21
.LBB222_5:                              # %if.else
                                        #   in Loop: Header=BB222_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB222_6:                              # %for.cond18
                                        #   Parent Loop BB222_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB222_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB222_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB222_8:                              # %land.end
                                        #   in Loop: Header=BB222_6 Depth=2
	testb	$1, %al
	jne	.LBB222_9
	jmp	.LBB222_20
.LBB222_9:                              # %for.body21
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB222_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB222_12
.LBB222_11:                             # %if.else29
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB222_12:                             # %if.end
                                        #   in Loop: Header=BB222_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB222_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB222_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB222_15:                             # %lor.end
                                        #   in Loop: Header=BB222_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB222_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB222_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB222_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB222_18:                             # %lor.end45
                                        #   in Loop: Header=BB222_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB222_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB222_6
.LBB222_20:                             # %for.end
                                        #   in Loop: Header=BB222_2 Depth=1
	jmp	.LBB222_21
.LBB222_21:                             # %if.end58
                                        #   in Loop: Header=BB222_2 Depth=1
	jmp	.LBB222_22
.LBB222_22:                             # %for.inc59
                                        #   in Loop: Header=BB222_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB222_2
.LBB222_23:                             # %for.end61
	jmp	.LBB222_24
.LBB222_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB222_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB222_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_28 Depth 2
                                        #       Child Loop BB222_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB222_26 Depth=1
	movl	$0, -28(%rbp)
.LBB222_28:                             # %for.cond69
                                        #   Parent Loop BB222_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB222_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB222_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB222_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB222_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB222_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB222_47
.LBB222_31:                             # %if.else84
                                        #   in Loop: Header=BB222_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB222_32:                             # %for.cond115
                                        #   Parent Loop BB222_26 Depth=1
                                        #     Parent Loop BB222_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB222_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB222_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB222_34:                             # %land.end121
                                        #   in Loop: Header=BB222_32 Depth=3
	testb	$1, %al
	jne	.LBB222_35
	jmp	.LBB222_46
.LBB222_35:                             # %for.body122
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB222_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB222_38
.LBB222_37:                             # %if.else134
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB222_38:                             # %if.end136
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB222_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB222_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB222_41:                             # %lor.end149
                                        #   in Loop: Header=BB222_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB222_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB222_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB222_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB222_44:                             # %lor.end164
                                        #   in Loop: Header=BB222_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB222_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB222_32
.LBB222_46:                             # %for.end189
                                        #   in Loop: Header=BB222_28 Depth=2
	jmp	.LBB222_47
.LBB222_47:                             # %if.end190
                                        #   in Loop: Header=BB222_28 Depth=2
	jmp	.LBB222_48
.LBB222_48:                             # %for.inc191
                                        #   in Loop: Header=BB222_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB222_28
.LBB222_49:                             # %for.end193
                                        #   in Loop: Header=BB222_26 Depth=1
	jmp	.LBB222_50
.LBB222_50:                             # %for.inc194
                                        #   in Loop: Header=BB222_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB222_26
.LBB222_51:                             # %for.end196
	jmp	.LBB222_52
.LBB222_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1469409580, -80(%rbp)  # imm = 0x5795692C
	jne	.LBB222_54
.LBB222_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_53
.Lfunc_end222:
	.size	writeChromaCoeff.181, .Lfunc_end222-writeChromaCoeff.181
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.182    # -- Begin function start_macroblock.182
	.p2align	4, 0x90
	.type	start_macroblock.182,@function
start_macroblock.182:                   # @start_macroblock.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1740760595, -88(%rbp)  # imm = 0x67C1E613
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB223_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB223_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB223_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB223_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB223_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB223_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB223_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB223_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB223_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB223_8:                              # %if.end
                                        #   in Loop: Header=BB223_5 Depth=1
	jmp	.LBB223_9
.LBB223_9:                              # %for.inc
                                        #   in Loop: Header=BB223_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_5
.LBB223_10:                             # %for.end
	jmp	.LBB223_11
.LBB223_11:                             # %if.end19
	jmp	.LBB223_12
.LBB223_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB223_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB223_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB223_16
.LBB223_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB223_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB223_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB223_97
.LBB223_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB223_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB223_21
.LBB223_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB223_96
.LBB223_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB223_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB223_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB223_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB223_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB223_34
.LBB223_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB223_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB223_32
.LBB223_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB223_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB223_31
.LBB223_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB223_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB223_33
.LBB223_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB223_33:                             # %if.end112
	jmp	.LBB223_34
.LBB223_34:                             # %if.end113
	jmp	.LBB223_39
.LBB223_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB223_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB223_38
.LBB223_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB223_38:                             # %if.end125
	jmp	.LBB223_39
.LBB223_39:                             # %if.end126
	jmp	.LBB223_47
.LBB223_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB223_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB223_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB223_44
.LBB223_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB223_44:                             # %if.end140
	jmp	.LBB223_46
.LBB223_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB223_46:                             # %if.end145
	jmp	.LBB223_47
.LBB223_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB223_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB223_93
.LBB223_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB223_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB223_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB223_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB223_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB223_74
.LBB223_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB223_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB223_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB223_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB223_73
.LBB223_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB223_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB223_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB223_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB223_72
.LBB223_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB223_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB223_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB223_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB223_71
.LBB223_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB223_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB223_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB223_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB223_70:                             # %if.end223
	jmp	.LBB223_71
.LBB223_71:                             # %if.end224
	jmp	.LBB223_72
.LBB223_72:                             # %if.end225
	jmp	.LBB223_73
.LBB223_73:                             # %if.end226
	jmp	.LBB223_74
.LBB223_74:                             # %if.end227
	jmp	.LBB223_75
.LBB223_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB223_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB223_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB223_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB223_82
.LBB223_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB223_81:                             # %if.end256
	jmp	.LBB223_82
.LBB223_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB223_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB223_88
.LBB223_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB223_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB223_87
.LBB223_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB223_87:                             # %if.end292
	jmp	.LBB223_88
.LBB223_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB223_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB223_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB223_92
.LBB223_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB223_92:                             # %if.end305
	jmp	.LBB223_94
.LBB223_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB223_94:                             # %if.end309
	jmp	.LBB223_95
.LBB223_95:                             # %if.end310
	jmp	.LBB223_96
.LBB223_96:                             # %if.end311
	jmp	.LBB223_97
.LBB223_97:                             # %if.end312
	jmp	.LBB223_102
.LBB223_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB223_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB223_101
.LBB223_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB223_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB223_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB223_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB223_105
.LBB223_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB223_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB223_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB223_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB223_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_110 Depth 2
                                        #       Child Loop BB223_112 Depth 3
                                        #         Child Loop BB223_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB223_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB223_108 Depth=1
	movl	$0, -16(%rbp)
.LBB223_110:                            # %for.cond364
                                        #   Parent Loop BB223_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB223_112 Depth 3
                                        #         Child Loop BB223_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB223_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB223_110 Depth=2
	movl	$0, -12(%rbp)
.LBB223_112:                            # %for.cond368
                                        #   Parent Loop BB223_108 Depth=1
                                        #     Parent Loop BB223_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB223_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB223_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB223_112 Depth=3
	movl	$0, -36(%rbp)
.LBB223_114:                            # %for.cond372
                                        #   Parent Loop BB223_108 Depth=1
                                        #     Parent Loop BB223_110 Depth=2
                                        #       Parent Loop BB223_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB223_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB223_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB223_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB223_114
.LBB223_117:                            # %for.end388
                                        #   in Loop: Header=BB223_112 Depth=3
	jmp	.LBB223_118
.LBB223_118:                            # %for.inc389
                                        #   in Loop: Header=BB223_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_112
.LBB223_119:                            # %for.end391
                                        #   in Loop: Header=BB223_110 Depth=2
	jmp	.LBB223_120
.LBB223_120:                            # %for.inc392
                                        #   in Loop: Header=BB223_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB223_110
.LBB223_121:                            # %for.end394
                                        #   in Loop: Header=BB223_108 Depth=1
	jmp	.LBB223_122
.LBB223_122:                            # %for.inc395
                                        #   in Loop: Header=BB223_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB223_108
.LBB223_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB223_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_126 Depth 2
                                        #       Child Loop BB223_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB223_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB223_124 Depth=1
	movl	$0, -12(%rbp)
.LBB223_126:                            # %for.cond402
                                        #   Parent Loop BB223_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB223_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB223_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB223_126 Depth=2
	movl	$0, -20(%rbp)
.LBB223_128:                            # %for.cond406
                                        #   Parent Loop BB223_124 Depth=1
                                        #     Parent Loop BB223_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB223_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB223_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB223_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB223_128
.LBB223_131:                            # %for.end432
                                        #   in Loop: Header=BB223_126 Depth=2
	jmp	.LBB223_132
.LBB223_132:                            # %for.inc433
                                        #   in Loop: Header=BB223_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_126
.LBB223_133:                            # %for.end435
                                        #   in Loop: Header=BB223_124 Depth=1
	jmp	.LBB223_134
.LBB223_134:                            # %for.inc436
                                        #   in Loop: Header=BB223_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB223_124
.LBB223_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB223_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_138 Depth 2
                                        #       Child Loop BB223_140 Depth 3
                                        #         Child Loop BB223_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB223_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB223_136 Depth=1
	movl	$0, -16(%rbp)
.LBB223_138:                            # %for.cond443
                                        #   Parent Loop BB223_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB223_140 Depth 3
                                        #         Child Loop BB223_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB223_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB223_138 Depth=2
	movl	$0, -12(%rbp)
.LBB223_140:                            # %for.cond447
                                        #   Parent Loop BB223_136 Depth=1
                                        #     Parent Loop BB223_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB223_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB223_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB223_140 Depth=3
	movl	$0, -36(%rbp)
.LBB223_142:                            # %for.cond451
                                        #   Parent Loop BB223_136 Depth=1
                                        #     Parent Loop BB223_138 Depth=2
                                        #       Parent Loop BB223_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB223_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB223_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB223_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB223_142
.LBB223_145:                            # %for.end465
                                        #   in Loop: Header=BB223_140 Depth=3
	jmp	.LBB223_146
.LBB223_146:                            # %for.inc466
                                        #   in Loop: Header=BB223_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_140
.LBB223_147:                            # %for.end468
                                        #   in Loop: Header=BB223_138 Depth=2
	jmp	.LBB223_148
.LBB223_148:                            # %for.inc469
                                        #   in Loop: Header=BB223_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB223_138
.LBB223_149:                            # %for.end471
                                        #   in Loop: Header=BB223_136 Depth=1
	jmp	.LBB223_150
.LBB223_150:                            # %for.inc472
                                        #   in Loop: Header=BB223_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB223_136
.LBB223_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB223_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB223_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB223_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB223_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_152
.LBB223_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB223_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB223_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB223_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB223_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_156
.LBB223_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB223_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB223_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB223_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB223_166
.LBB223_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB223_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB223_165:                            # %if.end520
	jmp	.LBB223_166
.LBB223_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB223_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB223_168:                            # %if.end536
	cmpl	$1740760595, -88(%rbp)  # imm = 0x67C1E613
	jne	.LBB223_170
.LBB223_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_169
.Lfunc_end223:
	.size	start_macroblock.182, .Lfunc_end223-start_macroblock.182
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.183 # -- Begin function OneComponentChromaPrediction4x4.183
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.183,@function
OneComponentChromaPrediction4x4.183:    # @OneComponentChromaPrediction4x4.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1339821410, -112(%rbp) # imm = 0x4FDC0D62
	movq	%rdi, -144(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB224_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB224_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB224_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB224_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB224_6
.LBB224_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB224_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB224_8
.LBB224_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB224_8:                              # %if.end13
	movl	-56(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB224_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB224_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB224_9 Depth=1
	movl	$0, -32(%rbp)
.LBB224_11:                             # %for.cond20
                                        #   Parent Loop BB224_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB224_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-32(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_15
.LBB224_14:                             # %cond.false
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB224_15:                             # %cond.end
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_21
.LBB224_17:                             # %cond.false65
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_20
.LBB224_19:                             # %cond.false74
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB224_20:                             # %cond.end76
                                        #   in Loop: Header=BB224_11 Depth=2
.LBB224_21:                             # %cond.end78
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB224_24
.LBB224_23:                             # %cond.false84
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB224_24:                             # %cond.end86
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_30
.LBB224_26:                             # %cond.false91
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB224_29
.LBB224_28:                             # %cond.false96
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB224_29:                             # %cond.end98
                                        #   in Loop: Header=BB224_11 Depth=2
.LBB224_30:                             # %cond.end100
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_33
.LBB224_32:                             # %cond.false111
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB224_33:                             # %cond.end114
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_39
.LBB224_35:                             # %cond.false119
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB224_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_38
.LBB224_37:                             # %cond.false129
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB224_38:                             # %cond.end132
                                        #   in Loop: Header=BB224_11 Depth=2
.LBB224_39:                             # %cond.end134
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB224_42
.LBB224_41:                             # %cond.false141
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB224_42:                             # %cond.end144
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB224_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_48
.LBB224_44:                             # %cond.false149
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB224_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB224_47
.LBB224_46:                             # %cond.false155
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB224_47:                             # %cond.end158
                                        #   in Loop: Header=BB224_11 Depth=2
.LBB224_48:                             # %cond.end160
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-64(%rbp), %eax
	imull	-88(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-88(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-64(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB224_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB224_11
.LBB224_50:                             # %for.end
                                        #   in Loop: Header=BB224_9 Depth=1
	jmp	.LBB224_51
.LBB224_51:                             # %for.inc198
                                        #   in Loop: Header=BB224_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB224_9
.LBB224_52:                             # %for.end200
	cmpl	$1339821410, -112(%rbp) # imm = 0x4FDC0D62
	jne	.LBB224_54
.LBB224_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_53
.Lfunc_end224:
	.size	OneComponentChromaPrediction4x4.183, .Lfunc_end224-OneComponentChromaPrediction4x4.183
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.184 # -- Begin function writeCoeff4x4_CAVLC.184
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.184,@function
writeCoeff4x4_CAVLC.184:                # @writeCoeff4x4_CAVLC.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1397139025, -172(%rbp) # imm = 0x5346A651
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB225_22
# %bb.1:                                # %entry
	movq	.LJTI225_0(,%rax,8), %rax
	jmpq	*%rax
.LBB225_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB225_6
.LBB225_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB225_7
.LBB225_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB225_7:                              # %if.end
	jmp	.LBB225_23
.LBB225_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB225_23
.LBB225_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB225_23
.LBB225_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB225_14
.LBB225_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB225_15
.LBB225_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB225_15:                             # %if.end67
	jmp	.LBB225_23
.LBB225_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB225_20
.LBB225_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB225_21
.LBB225_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB225_21:                             # %if.end93
	jmp	.LBB225_23
.LBB225_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB225_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB225_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -96(%rbp)
	je	.LBB225_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB225_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB225_27
.LBB225_26:                             # %cond.false
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB225_27
.LBB225_27:                             # %cond.end
                                        #   in Loop: Header=BB225_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB225_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB225_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB225_29:                             # %land.end
                                        #   in Loop: Header=BB225_24 Depth=1
	testb	$1, %dl
	jne	.LBB225_30
	jmp	.LBB225_41
.LBB225_30:                             # %for.body
                                        #   in Loop: Header=BB225_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB225_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB225_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB225_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB225_33:                             # %if.end110
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB225_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB225_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	$3, -28(%rbp)
.LBB225_36:                             # %if.end117
                                        #   in Loop: Header=BB225_24 Depth=1
	jmp	.LBB225_38
.LBB225_37:                             # %if.else118
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	$0, -28(%rbp)
.LBB225_38:                             # %if.end119
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB225_39:                             # %if.end121
                                        #   in Loop: Header=BB225_24 Depth=1
	jmp	.LBB225_40
.LBB225_40:                             # %for.inc
                                        #   in Loop: Header=BB225_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB225_24
.LBB225_41:                             # %for.end
	cmpl	$0, -96(%rbp)
	jne	.LBB225_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB225_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB225_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB225_46
.LBB225_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB225_46:                             # %cond.end136
	movl	%eax, -88(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB225_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB225_49
.LBB225_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB225_49:                             # %cond.end145
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB225_51
.LBB225_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB225_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB225_53
# %bb.52:                               # %if.then160
	movl	$0, -80(%rbp)
	jmp	.LBB225_60
.LBB225_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB225_55
# %bb.54:                               # %if.then163
	movl	$1, -80(%rbp)
	jmp	.LBB225_59
.LBB225_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB225_57
# %bb.56:                               # %if.then166
	movl	$2, -80(%rbp)
	jmp	.LBB225_58
.LBB225_57:                             # %if.else167
	movl	$3, -80(%rbp)
.LBB225_58:                             # %if.end168
	jmp	.LBB225_59
.LBB225_59:                             # %if.end169
	jmp	.LBB225_60
.LBB225_60:                             # %if.end170
	jmp	.LBB225_62
.LBB225_61:                             # %if.else171
	movl	$0, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB225_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB225_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB225_65
.LBB225_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB225_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB225_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB225_122
.LBB225_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB225_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB225_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB225_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB225_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB225_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB225_72:                             # %if.end202
                                        #   in Loop: Header=BB225_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB225_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB225_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB225_74:                             # %if.end205
                                        #   in Loop: Header=BB225_69 Depth=1
	jmp	.LBB225_75
.LBB225_75:                             # %for.inc206
                                        #   in Loop: Header=BB225_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB225_69
.LBB225_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB225_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB225_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB225_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB225_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB225_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB225_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB225_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB225_85
.LBB225_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB225_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB225_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB225_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB225_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB225_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB225_91
.LBB225_90:                             # %if.else249
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB225_91:                             # %if.end252
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	$0, -144(%rbp)
.LBB225_92:                             # %if.end253
                                        #   in Loop: Header=BB225_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB225_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB225_95
.LBB225_94:                             # %if.else257
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB225_95:                             # %if.end259
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB225_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB225_97:                             # %if.end266
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB225_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB225_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	$2, -32(%rbp)
.LBB225_100:                            # %if.end273
                                        #   in Loop: Header=BB225_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB225_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB225_86
.LBB225_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB225_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB225_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB225_106
.LBB225_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB225_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB225_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB225_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB225_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB225_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB225_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB225_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB225_112
.LBB225_111:                            # %if.then318
	jmp	.LBB225_120
.LBB225_112:                            # %if.end319
                                        #   in Loop: Header=BB225_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB225_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB225_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB225_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB225_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB225_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB225_108 Depth=1
	movl	$6, -32(%rbp)
.LBB225_116:                            # %if.end327
                                        #   in Loop: Header=BB225_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB225_117:                            # %if.end341
                                        #   in Loop: Header=BB225_108 Depth=1
	jmp	.LBB225_118
.LBB225_118:                            # %for.inc342
                                        #   in Loop: Header=BB225_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB225_108
.LBB225_119:                            # %for.end344.loopexit
	jmp	.LBB225_120
.LBB225_120:                            # %for.end344
	jmp	.LBB225_121
.LBB225_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB225_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1397139025, -172(%rbp) # imm = 0x5346A651
	jne	.LBB225_124
.LBB225_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_123
.Lfunc_end225:
	.size	writeCoeff4x4_CAVLC.184, .Lfunc_end225-writeCoeff4x4_CAVLC.184
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI225_0:
	.quad	.LBB225_2
	.quad	.LBB225_8
	.quad	.LBB225_9
	.quad	.LBB225_22
	.quad	.LBB225_22
	.quad	.LBB225_22
	.quad	.LBB225_10
	.quad	.LBB225_16
                                        # -- End function
	.text
	.globl	write_terminating_bit.185 # -- Begin function write_terminating_bit.185
	.p2align	4, 0x90
	.type	write_terminating_bit.185,@function
write_terminating_bit.185:              # @write_terminating_bit.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1396413790, -8(%rbp)   # imm = 0x533B955E
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1396413790, -8(%rbp)   # imm = 0x533B955E
	jne	.LBB226_2
.LBB226_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_1
.Lfunc_end226:
	.size	write_terminating_bit.185, .Lfunc_end226-write_terminating_bit.185
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.186  # -- Begin function writeIntra4x4Modes.186
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.186,@function
writeIntra4x4Modes.186:                 # @writeIntra4x4Modes.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$741983423, -80(%rbp)   # imm = 0x2C39C4BF
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB227_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_9 Depth 2
                                        #       Child Loop BB227_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB227_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB227_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB227_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB227_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB227_8
.LBB227_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB227_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB227_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB227_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB227_17
.LBB227_8:                              # %if.then
                                        #   in Loop: Header=BB227_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB227_9:                              # %for.cond24
                                        #   Parent Loop BB227_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB227_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB227_9 Depth=2
	movl	$0, -12(%rbp)
.LBB227_11:                             # %for.cond27
                                        #   Parent Loop BB227_1 Depth=1
                                        #     Parent Loop BB227_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB227_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB227_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB227_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_11
.LBB227_14:                             # %for.end
                                        #   in Loop: Header=BB227_9 Depth=2
	jmp	.LBB227_15
.LBB227_15:                             # %for.inc42
                                        #   in Loop: Header=BB227_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB227_9
.LBB227_16:                             # %for.end44
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_17
.LBB227_17:                             # %if.end
                                        #   in Loop: Header=BB227_1 Depth=1
	jmp	.LBB227_18
.LBB227_18:                             # %for.inc45
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB227_1
.LBB227_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB227_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB227_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB227_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB227_23:                             # %if.end57
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB227_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB227_26
.LBB227_25:                             # %if.else
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB227_26:                             # %if.end65
                                        #   in Loop: Header=BB227_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB227_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_20
.LBB227_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$741983423, -80(%rbp)   # imm = 0x2C39C4BF
	jne	.LBB227_30
.LBB227_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_29
.Lfunc_end227:
	.size	writeIntra4x4Modes.186, .Lfunc_end227-writeIntra4x4Modes.186
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.187         # -- Begin function predict_nnz.187
	.p2align	4, 0x90
	.type	predict_nnz.187,@function
predict_nnz.187:                        # @predict_nnz.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2100046607, -56(%rbp)  # imm = 0x7D2C2B0F
	movl	%edi, -44(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB228_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB228_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB228_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB228_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB228_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB228_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB228_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB228_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB228_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB228_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB228_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB228_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB228_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB228_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$2100046607, -56(%rbp)  # imm = 0x7D2C2B0F
	jne	.LBB228_16
.LBB228_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_15
.Lfunc_end228:
	.size	predict_nnz.187, .Lfunc_end228-predict_nnz.187
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.188 # -- Begin function LumaPrediction4x4Bi.188
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.188,@function
LumaPrediction4x4Bi.188:                # @LumaPrediction4x4Bi.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$579746050, -76(%rbp)   # imm = 0x228E3902
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB229_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB229_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB229_6
.LBB229_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB229_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB229_5:                              # %land.end
.LBB229_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB229_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB229_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB229_10
.LBB229_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB229_10
.LBB229_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB229_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB229_13
.LBB229_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB229_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB229_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB229_16
.LBB229_15:                             # %if.then
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB229_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB229_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB229_19
.LBB229_18:                             # %if.then39
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB229_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB229_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB229_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB229_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_24:                             # %for.cond58
                                        #   Parent Loop BB229_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB229_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB229_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_24
.LBB229_27:                             # %for.end
                                        #   in Loop: Header=BB229_22 Depth=1
	jmp	.LBB229_28
.LBB229_28:                             # %for.inc96
                                        #   in Loop: Header=BB229_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_22
.LBB229_29:                             # %for.end98
	jmp	.LBB229_50
.LBB229_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB229_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB229_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_34:                             # %for.cond106
                                        #   Parent Loop BB229_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_34
.LBB229_37:                             # %for.end132
                                        #   in Loop: Header=BB229_32 Depth=1
	jmp	.LBB229_38
.LBB229_38:                             # %for.inc133
                                        #   in Loop: Header=BB229_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_32
.LBB229_39:                             # %for.end135
	jmp	.LBB229_49
.LBB229_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB229_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_43:                             # %for.cond141
                                        #   Parent Loop BB229_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB229_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB229_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_43
.LBB229_46:                             # %for.end167
                                        #   in Loop: Header=BB229_41 Depth=1
	jmp	.LBB229_47
.LBB229_47:                             # %for.inc168
                                        #   in Loop: Header=BB229_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_41
.LBB229_48:                             # %for.end170
	jmp	.LBB229_49
.LBB229_49:                             # %if.end171
	jmp	.LBB229_50
.LBB229_50:                             # %if.end172
	jmp	.LBB229_82
.LBB229_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB229_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB229_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_55:                             # %for.cond181
                                        #   Parent Loop BB229_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB229_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB229_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_55
.LBB229_58:                             # %for.end197
                                        #   in Loop: Header=BB229_53 Depth=1
	jmp	.LBB229_59
.LBB229_59:                             # %for.inc198
                                        #   in Loop: Header=BB229_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_53
.LBB229_60:                             # %for.end200
	jmp	.LBB229_81
.LBB229_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB229_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB229_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_65:                             # %for.cond209
                                        #   Parent Loop BB229_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB229_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB229_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_65
.LBB229_68:                             # %for.end222
                                        #   in Loop: Header=BB229_63 Depth=1
	jmp	.LBB229_69
.LBB229_69:                             # %for.inc223
                                        #   in Loop: Header=BB229_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_63
.LBB229_70:                             # %for.end225
	jmp	.LBB229_80
.LBB229_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB229_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB229_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB229_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB229_74:                             # %for.cond231
                                        #   Parent Loop BB229_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB229_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB229_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB229_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_74
.LBB229_77:                             # %for.end244
                                        #   in Loop: Header=BB229_72 Depth=1
	jmp	.LBB229_78
.LBB229_78:                             # %for.inc245
                                        #   in Loop: Header=BB229_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_72
.LBB229_79:                             # %for.end247
	jmp	.LBB229_80
.LBB229_80:                             # %if.end248
	jmp	.LBB229_81
.LBB229_81:                             # %if.end249
	jmp	.LBB229_82
.LBB229_82:                             # %if.end250
	cmpl	$579746050, -76(%rbp)   # imm = 0x228E3902
	jne	.LBB229_84
.LBB229_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_83
.Lfunc_end229:
	.size	LumaPrediction4x4Bi.188, .Lfunc_end229-LumaPrediction4x4Bi.188
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.189    # -- Begin function writeChromaCoeff.189
	.p2align	4, 0x90
	.type	writeChromaCoeff.189,@function
writeChromaCoeff.189:                   # @writeChromaCoeff.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1627100139, -80(%rbp)  # imm = 0x60FB93EB
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB230_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB230_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB230_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB230_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB230_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB230_21
.LBB230_5:                              # %if.else
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB230_6:                              # %for.cond18
                                        #   Parent Loop BB230_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB230_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB230_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB230_8:                              # %land.end
                                        #   in Loop: Header=BB230_6 Depth=2
	testb	$1, %al
	jne	.LBB230_9
	jmp	.LBB230_20
.LBB230_9:                              # %for.body21
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB230_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB230_12
.LBB230_11:                             # %if.else29
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB230_12:                             # %if.end
                                        #   in Loop: Header=BB230_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB230_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB230_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB230_15:                             # %lor.end
                                        #   in Loop: Header=BB230_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB230_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB230_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB230_18:                             # %lor.end45
                                        #   in Loop: Header=BB230_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB230_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB230_6
.LBB230_20:                             # %for.end
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_21
.LBB230_21:                             # %if.end58
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_22
.LBB230_22:                             # %for.inc59
                                        #   in Loop: Header=BB230_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB230_2
.LBB230_23:                             # %for.end61
	jmp	.LBB230_24
.LBB230_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB230_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB230_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_28 Depth 2
                                        #       Child Loop BB230_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB230_26 Depth=1
	movl	$0, -36(%rbp)
.LBB230_28:                             # %for.cond69
                                        #   Parent Loop BB230_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB230_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB230_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB230_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB230_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB230_47
.LBB230_31:                             # %if.else84
                                        #   in Loop: Header=BB230_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB230_32:                             # %for.cond115
                                        #   Parent Loop BB230_26 Depth=1
                                        #     Parent Loop BB230_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB230_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB230_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB230_34:                             # %land.end121
                                        #   in Loop: Header=BB230_32 Depth=3
	testb	$1, %al
	jne	.LBB230_35
	jmp	.LBB230_46
.LBB230_35:                             # %for.body122
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB230_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB230_38
.LBB230_37:                             # %if.else134
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB230_38:                             # %if.end136
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB230_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB230_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB230_41:                             # %lor.end149
                                        #   in Loop: Header=BB230_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB230_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB230_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB230_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB230_44:                             # %lor.end164
                                        #   in Loop: Header=BB230_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB230_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB230_32
.LBB230_46:                             # %for.end189
                                        #   in Loop: Header=BB230_28 Depth=2
	jmp	.LBB230_47
.LBB230_47:                             # %if.end190
                                        #   in Loop: Header=BB230_28 Depth=2
	jmp	.LBB230_48
.LBB230_48:                             # %for.inc191
                                        #   in Loop: Header=BB230_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_28
.LBB230_49:                             # %for.end193
                                        #   in Loop: Header=BB230_26 Depth=1
	jmp	.LBB230_50
.LBB230_50:                             # %for.inc194
                                        #   in Loop: Header=BB230_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB230_26
.LBB230_51:                             # %for.end196
	jmp	.LBB230_52
.LBB230_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1627100139, -80(%rbp)  # imm = 0x60FB93EB
	jne	.LBB230_54
.LBB230_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_53
.Lfunc_end230:
	.size	writeChromaCoeff.189, .Lfunc_end230-writeChromaCoeff.189
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.190 # -- Begin function OneComponentLumaPrediction4x4.190
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.190,@function
OneComponentLumaPrediction4x4.190:      # @OneComponentLumaPrediction4x4.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1753763465, -84(%rbp)  # imm = 0x68884E89
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1753763465, -84(%rbp)  # imm = 0x68884E89
	jne	.LBB231_2
.LBB231_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_1
.Lfunc_end231:
	.size	OneComponentLumaPrediction4x4.190, .Lfunc_end231-OneComponentLumaPrediction4x4.190
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.191 # -- Begin function OneComponentLumaPrediction4x4.191
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.191,@function
OneComponentLumaPrediction4x4.191:      # @OneComponentLumaPrediction4x4.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$863676282, -88(%rbp)   # imm = 0x337AA77A
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$863676282, -88(%rbp)   # imm = 0x337AA77A
	jne	.LBB232_2
.LBB232_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_1
.Lfunc_end232:
	.size	OneComponentLumaPrediction4x4.191, .Lfunc_end232-OneComponentLumaPrediction4x4.191
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.192    # -- Begin function start_macroblock.192
	.p2align	4, 0x90
	.type	start_macroblock.192,@function
start_macroblock.192:                   # @start_macroblock.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$487183131, -84(%rbp)   # imm = 0x1D09D31B
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB233_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB233_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB233_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB233_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB233_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB233_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB233_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB233_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB233_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB233_8:                              # %if.end
                                        #   in Loop: Header=BB233_5 Depth=1
	jmp	.LBB233_9
.LBB233_9:                              # %for.inc
                                        #   in Loop: Header=BB233_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_5
.LBB233_10:                             # %for.end
	jmp	.LBB233_11
.LBB233_11:                             # %if.end19
	jmp	.LBB233_12
.LBB233_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB233_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB233_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB233_16
.LBB233_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB233_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB233_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB233_97
.LBB233_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB233_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB233_21
.LBB233_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB233_96
.LBB233_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB233_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB233_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB233_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB233_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB233_34
.LBB233_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB233_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB233_32
.LBB233_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB233_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB233_31
.LBB233_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB233_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB233_33
.LBB233_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB233_33:                             # %if.end112
	jmp	.LBB233_34
.LBB233_34:                             # %if.end113
	jmp	.LBB233_39
.LBB233_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB233_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB233_38
.LBB233_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB233_38:                             # %if.end125
	jmp	.LBB233_39
.LBB233_39:                             # %if.end126
	jmp	.LBB233_47
.LBB233_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB233_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB233_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB233_44
.LBB233_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB233_44:                             # %if.end140
	jmp	.LBB233_46
.LBB233_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB233_46:                             # %if.end145
	jmp	.LBB233_47
.LBB233_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB233_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB233_93
.LBB233_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB233_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB233_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB233_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB233_74
.LBB233_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB233_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB233_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB233_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB233_73
.LBB233_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB233_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB233_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB233_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB233_72
.LBB233_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB233_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB233_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB233_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB233_71
.LBB233_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB233_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB233_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB233_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB233_70:                             # %if.end223
	jmp	.LBB233_71
.LBB233_71:                             # %if.end224
	jmp	.LBB233_72
.LBB233_72:                             # %if.end225
	jmp	.LBB233_73
.LBB233_73:                             # %if.end226
	jmp	.LBB233_74
.LBB233_74:                             # %if.end227
	jmp	.LBB233_75
.LBB233_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB233_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB233_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB233_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB233_82
.LBB233_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB233_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB233_81:                             # %if.end256
	jmp	.LBB233_82
.LBB233_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB233_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB233_88
.LBB233_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB233_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB233_87
.LBB233_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB233_87:                             # %if.end292
	jmp	.LBB233_88
.LBB233_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB233_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB233_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB233_92
.LBB233_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB233_92:                             # %if.end305
	jmp	.LBB233_94
.LBB233_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB233_94:                             # %if.end309
	jmp	.LBB233_95
.LBB233_95:                             # %if.end310
	jmp	.LBB233_96
.LBB233_96:                             # %if.end311
	jmp	.LBB233_97
.LBB233_97:                             # %if.end312
	jmp	.LBB233_102
.LBB233_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB233_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB233_101
.LBB233_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB233_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB233_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB233_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB233_105
.LBB233_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB233_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB233_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB233_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB233_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_110 Depth 2
                                        #       Child Loop BB233_112 Depth 3
                                        #         Child Loop BB233_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB233_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB233_108 Depth=1
	movl	$0, -16(%rbp)
.LBB233_110:                            # %for.cond364
                                        #   Parent Loop BB233_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB233_112 Depth 3
                                        #         Child Loop BB233_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB233_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB233_110 Depth=2
	movl	$0, -12(%rbp)
.LBB233_112:                            # %for.cond368
                                        #   Parent Loop BB233_108 Depth=1
                                        #     Parent Loop BB233_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB233_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB233_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB233_112 Depth=3
	movl	$0, -36(%rbp)
.LBB233_114:                            # %for.cond372
                                        #   Parent Loop BB233_108 Depth=1
                                        #     Parent Loop BB233_110 Depth=2
                                        #       Parent Loop BB233_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB233_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB233_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB233_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB233_114
.LBB233_117:                            # %for.end388
                                        #   in Loop: Header=BB233_112 Depth=3
	jmp	.LBB233_118
.LBB233_118:                            # %for.inc389
                                        #   in Loop: Header=BB233_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_112
.LBB233_119:                            # %for.end391
                                        #   in Loop: Header=BB233_110 Depth=2
	jmp	.LBB233_120
.LBB233_120:                            # %for.inc392
                                        #   in Loop: Header=BB233_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_110
.LBB233_121:                            # %for.end394
                                        #   in Loop: Header=BB233_108 Depth=1
	jmp	.LBB233_122
.LBB233_122:                            # %for.inc395
                                        #   in Loop: Header=BB233_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB233_108
.LBB233_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB233_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_126 Depth 2
                                        #       Child Loop BB233_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB233_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB233_124 Depth=1
	movl	$0, -12(%rbp)
.LBB233_126:                            # %for.cond402
                                        #   Parent Loop BB233_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB233_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB233_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB233_126 Depth=2
	movl	$0, -20(%rbp)
.LBB233_128:                            # %for.cond406
                                        #   Parent Loop BB233_124 Depth=1
                                        #     Parent Loop BB233_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB233_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB233_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB233_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB233_128
.LBB233_131:                            # %for.end432
                                        #   in Loop: Header=BB233_126 Depth=2
	jmp	.LBB233_132
.LBB233_132:                            # %for.inc433
                                        #   in Loop: Header=BB233_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_126
.LBB233_133:                            # %for.end435
                                        #   in Loop: Header=BB233_124 Depth=1
	jmp	.LBB233_134
.LBB233_134:                            # %for.inc436
                                        #   in Loop: Header=BB233_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_124
.LBB233_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB233_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_138 Depth 2
                                        #       Child Loop BB233_140 Depth 3
                                        #         Child Loop BB233_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB233_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB233_136 Depth=1
	movl	$0, -16(%rbp)
.LBB233_138:                            # %for.cond443
                                        #   Parent Loop BB233_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB233_140 Depth 3
                                        #         Child Loop BB233_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB233_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB233_138 Depth=2
	movl	$0, -12(%rbp)
.LBB233_140:                            # %for.cond447
                                        #   Parent Loop BB233_136 Depth=1
                                        #     Parent Loop BB233_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB233_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB233_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB233_140 Depth=3
	movl	$0, -36(%rbp)
.LBB233_142:                            # %for.cond451
                                        #   Parent Loop BB233_136 Depth=1
                                        #     Parent Loop BB233_138 Depth=2
                                        #       Parent Loop BB233_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB233_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB233_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB233_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB233_142
.LBB233_145:                            # %for.end465
                                        #   in Loop: Header=BB233_140 Depth=3
	jmp	.LBB233_146
.LBB233_146:                            # %for.inc466
                                        #   in Loop: Header=BB233_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_140
.LBB233_147:                            # %for.end468
                                        #   in Loop: Header=BB233_138 Depth=2
	jmp	.LBB233_148
.LBB233_148:                            # %for.inc469
                                        #   in Loop: Header=BB233_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_138
.LBB233_149:                            # %for.end471
                                        #   in Loop: Header=BB233_136 Depth=1
	jmp	.LBB233_150
.LBB233_150:                            # %for.inc472
                                        #   in Loop: Header=BB233_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB233_136
.LBB233_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB233_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB233_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB233_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB233_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_152
.LBB233_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB233_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB233_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB233_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB233_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_156
.LBB233_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB233_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB233_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB233_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB233_166
.LBB233_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB233_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB233_165:                            # %if.end520
	jmp	.LBB233_166
.LBB233_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB233_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB233_168:                            # %if.end536
	cmpl	$487183131, -84(%rbp)   # imm = 0x1D09D31B
	jne	.LBB233_170
.LBB233_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_169
.Lfunc_end233:
	.size	start_macroblock.192, .Lfunc_end233-start_macroblock.192
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.193 # -- Begin function write_one_macroblock.193
	.p2align	4, 0x90
	.type	write_one_macroblock.193,@function
write_one_macroblock.193:               # @write_one_macroblock.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1057553839, -32(%rbp)  # imm = 0x3F08FDAF
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB234_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB234_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB234_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB234_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB234_6
.LBB234_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB234_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB234_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB234_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB234_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB234_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB234_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB234_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB234_22
.LBB234_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB234_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB234_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB234_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB234_14 Depth=1
	movl	$0, -24(%rbp)
.LBB234_16:                             # %for.cond24
                                        #   Parent Loop BB234_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB234_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB234_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB234_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB234_16
.LBB234_19:                             # %for.end
                                        #   in Loop: Header=BB234_14 Depth=1
	jmp	.LBB234_20
.LBB234_20:                             # %for.inc35
                                        #   in Loop: Header=BB234_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB234_14
.LBB234_21:                             # %for.end37
	jmp	.LBB234_22
.LBB234_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB234_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB234_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB234_30
.LBB234_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB234_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB234_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB234_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB234_29:                             # %if.end59
	jmp	.LBB234_30
.LBB234_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB234_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB234_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1057553839, -32(%rbp)  # imm = 0x3F08FDAF
	jne	.LBB234_34
.LBB234_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_33
.Lfunc_end234:
	.size	write_one_macroblock.193, .Lfunc_end234-write_one_macroblock.193
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.194       # -- Begin function slice_too_big.194
	.p2align	4, 0x90
	.type	slice_too_big.194,@function
slice_too_big.194:                      # @slice_too_big.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1181790197, -56(%rbp)  # imm = 0x4670AFF5
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB235_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB235_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB235_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB235_5:                              # %if.end
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB235_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB235_7:                              # %if.end8
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB235_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB235_21
.LBB235_9:                              # %if.end11
                                        #   in Loop: Header=BB235_2 Depth=1
	jmp	.LBB235_10
.LBB235_10:                             # %for.inc
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_2
.LBB235_11:                             # %for.end
	jmp	.LBB235_12
.LBB235_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB235_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB235_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB235_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB235_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB235_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB235_21
.LBB235_17:                             # %if.end27
                                        #   in Loop: Header=BB235_14 Depth=1
	jmp	.LBB235_18
.LBB235_18:                             # %for.inc28
                                        #   in Loop: Header=BB235_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_14
.LBB235_19:                             # %for.end30
	jmp	.LBB235_20
.LBB235_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB235_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1181790197, -56(%rbp)  # imm = 0x4670AFF5
	jne	.LBB235_23
.LBB235_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_22
.Lfunc_end235:
	.size	slice_too_big.194, .Lfunc_end235-slice_too_big.194
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.195 # -- Begin function terminate_macroblock.195
	.p2align	4, 0x90
	.type	terminate_macroblock.195,@function
terminate_macroblock.195:               # @terminate_macroblock.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$424693707, -112(%rbp)  # imm = 0x19504FCB
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB236_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB236_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB236_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB236_5
.LBB236_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB236_8
.LBB236_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB236_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB236_7:                              # %if.end
	jmp	.LBB236_8
.LBB236_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB236_45
# %bb.9:                                # %if.end18
	movq	.LJTI236_0(,%rax,8), %rax
	jmpq	*%rax
.LBB236_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB236_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB236_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB236_46
.LBB236_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB236_46
.LBB236_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB236_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB236_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB236_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB236_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB236_22
.LBB236_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB236_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB236_21:                             # %if.end64
	jmp	.LBB236_22
.LBB236_22:                             # %if.end65
	jmp	.LBB236_23
.LBB236_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB236_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB236_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB236_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB236_27:                             # %if.end79
	jmp	.LBB236_28
.LBB236_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB236_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB236_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB236_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB236_32:                             # %if.end89
	jmp	.LBB236_33
.LBB236_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB236_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB236_35:                             # %if.end95
	jmp	.LBB236_46
.LBB236_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB236_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB236_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB236_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB236_40:                             # %if.end106
	jmp	.LBB236_41
.LBB236_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB236_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB236_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB236_44:                             # %if.end118
	jmp	.LBB236_46
.LBB236_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB236_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB236_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB236_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB236_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB236_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB236_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB236_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB236_51:                             # %if.end139
                                        #   in Loop: Header=BB236_48 Depth=1
	jmp	.LBB236_52
.LBB236_52:                             # %for.inc
                                        #   in Loop: Header=BB236_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB236_48
.LBB236_53:                             # %for.end
	jmp	.LBB236_54
.LBB236_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB236_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB236_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB236_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB236_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB236_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB236_60:                             # %if.end174
	jmp	.LBB236_62
.LBB236_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB236_62:                             # %if.end188
	jmp	.LBB236_63
.LBB236_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB236_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB236_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB236_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB236_67:                             # %if.end218
	cmpl	$424693707, -112(%rbp)  # imm = 0x19504FCB
	jne	.LBB236_69
.LBB236_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_68
.Lfunc_end236:
	.size	terminate_macroblock.195, .Lfunc_end236-terminate_macroblock.195
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI236_0:
	.quad	.LBB236_10
	.quad	.LBB236_13
	.quad	.LBB236_14
	.quad	.LBB236_36
                                        # -- End function
	.text
	.globl	ChromaResidualCoding.196 # -- Begin function ChromaResidualCoding.196
	.p2align	4, 0x90
	.type	ChromaResidualCoding.196,@function
ChromaResidualCoding.196:               # @ChromaResidualCoding.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$205257133, -68(%rbp)   # imm = 0xC3BF9AD
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB237_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB237_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB237_3:                              # %lor.end
.LBB237_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB237_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_7 Depth 2
                                        #       Child Loop BB237_9 Depth 3
                                        #     Child Loop BB237_16 Depth 2
                                        #       Child Loop BB237_18 Depth 3
                                        #     Child Loop BB237_33 Depth 2
                                        #       Child Loop BB237_35 Depth 3
                                        #     Child Loop BB237_43 Depth 2
                                        #       Child Loop BB237_45 Depth 3
                                        #     Child Loop BB237_58 Depth 2
                                        #       Child Loop BB237_60 Depth 3
                                        #     Child Loop BB237_87 Depth 2
                                        #       Child Loop BB237_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB237_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB237_7:                              # %for.cond5
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB237_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB237_7 Depth=2
	movl	$0, -20(%rbp)
.LBB237_9:                              # %for.cond8
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB237_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB237_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB237_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_9
.LBB237_12:                             # %for.end
                                        #   in Loop: Header=BB237_7 Depth=2
	jmp	.LBB237_13
.LBB237_13:                             # %for.inc18
                                        #   in Loop: Header=BB237_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_7
.LBB237_14:                             # %for.end20
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB237_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -8(%rbp)
.LBB237_16:                             # %for.cond21
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB237_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB237_16 Depth=2
	movl	$0, -4(%rbp)
.LBB237_18:                             # %for.cond26
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB237_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB237_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB237_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB237_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB237_25
.LBB237_21:                             # %if.else
                                        #   in Loop: Header=BB237_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB237_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB237_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB237_24
.LBB237_23:                             # %if.else52
                                        #   in Loop: Header=BB237_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB237_24:                             # %if.end
                                        #   in Loop: Header=BB237_18 Depth=3
	jmp	.LBB237_25
.LBB237_25:                             # %if.end57
                                        #   in Loop: Header=BB237_18 Depth=3
	jmp	.LBB237_26
.LBB237_26:                             # %for.inc58
                                        #   in Loop: Header=BB237_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_18
.LBB237_27:                             # %for.end59
                                        #   in Loop: Header=BB237_16 Depth=2
	jmp	.LBB237_28
.LBB237_28:                             # %for.inc60
                                        #   in Loop: Header=BB237_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_16
.LBB237_29:                             # %for.end62
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_74
.LBB237_30:                             # %if.else63
                                        #   in Loop: Header=BB237_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB237_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB237_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -8(%rbp)
.LBB237_33:                             # %for.cond69
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB237_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB237_33 Depth=2
	movl	$0, -4(%rbp)
.LBB237_35:                             # %for.cond73
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB237_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB237_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB237_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_35
.LBB237_38:                             # %for.end83
                                        #   in Loop: Header=BB237_33 Depth=2
	jmp	.LBB237_39
.LBB237_39:                             # %for.inc84
                                        #   in Loop: Header=BB237_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_33
.LBB237_40:                             # %for.end86
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_73
.LBB237_41:                             # %if.else87
                                        #   in Loop: Header=BB237_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB237_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -8(%rbp)
.LBB237_43:                             # %for.cond90
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB237_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB237_43 Depth=2
	movl	$0, -4(%rbp)
.LBB237_45:                             # %for.cond95
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB237_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB237_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB237_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB237_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB237_52
.LBB237_48:                             # %if.else119
                                        #   in Loop: Header=BB237_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB237_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB237_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB237_51
.LBB237_50:                             # %if.else127
                                        #   in Loop: Header=BB237_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB237_51:                             # %if.end132
                                        #   in Loop: Header=BB237_45 Depth=3
	jmp	.LBB237_52
.LBB237_52:                             # %if.end133
                                        #   in Loop: Header=BB237_45 Depth=3
	jmp	.LBB237_53
.LBB237_53:                             # %for.inc134
                                        #   in Loop: Header=BB237_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_45
.LBB237_54:                             # %for.end136
                                        #   in Loop: Header=BB237_43 Depth=2
	jmp	.LBB237_55
.LBB237_55:                             # %for.inc137
                                        #   in Loop: Header=BB237_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_43
.LBB237_56:                             # %for.end139
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_72
.LBB237_57:                             # %if.else140
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -8(%rbp)
.LBB237_58:                             # %for.cond141
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB237_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB237_58 Depth=2
	movl	$0, -4(%rbp)
.LBB237_60:                             # %for.cond146
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB237_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB237_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB237_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB237_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB237_67
.LBB237_63:                             # %if.else175
                                        #   in Loop: Header=BB237_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB237_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB237_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB237_66
.LBB237_65:                             # %if.else188
                                        #   in Loop: Header=BB237_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB237_66:                             # %if.end198
                                        #   in Loop: Header=BB237_60 Depth=3
	jmp	.LBB237_67
.LBB237_67:                             # %if.end199
                                        #   in Loop: Header=BB237_60 Depth=3
	jmp	.LBB237_68
.LBB237_68:                             # %for.inc200
                                        #   in Loop: Header=BB237_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_60
.LBB237_69:                             # %for.end202
                                        #   in Loop: Header=BB237_58 Depth=2
	jmp	.LBB237_70
.LBB237_70:                             # %for.inc203
                                        #   in Loop: Header=BB237_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_58
.LBB237_71:                             # %for.end205
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_72
.LBB237_72:                             # %if.end206
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_73
.LBB237_73:                             # %if.end207
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_74
.LBB237_74:                             # %if.end208
                                        #   in Loop: Header=BB237_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB237_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB237_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB237_100
.LBB237_77:                             # %if.else215
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB237_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB237_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB237_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB237_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB237_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB237_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB237_84
.LBB237_83:                             # %if.then247
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB237_85
.LBB237_84:                             # %if.else249
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB237_85:                             # %if.end251
                                        #   in Loop: Header=BB237_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB237_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	$0, -8(%rbp)
.LBB237_87:                             # %for.cond255
                                        #   Parent Loop BB237_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB237_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB237_87 Depth=2
	movl	$0, -4(%rbp)
.LBB237_89:                             # %for.cond260
                                        #   Parent Loop BB237_5 Depth=1
                                        #     Parent Loop BB237_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB237_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB237_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB237_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB237_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB237_93
.LBB237_92:                             # %if.else277
                                        #   in Loop: Header=BB237_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB237_93:                             # %if.end287
                                        #   in Loop: Header=BB237_89 Depth=3
	jmp	.LBB237_94
.LBB237_94:                             # %for.inc288
                                        #   in Loop: Header=BB237_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_89
.LBB237_95:                             # %for.end290
                                        #   in Loop: Header=BB237_87 Depth=2
	jmp	.LBB237_96
.LBB237_96:                             # %for.inc291
                                        #   in Loop: Header=BB237_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_87
.LBB237_97:                             # %for.end293
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_98
.LBB237_98:                             # %if.end294
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_99
.LBB237_99:                             # %if.end295
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_100
.LBB237_100:                            # %if.end296
                                        #   in Loop: Header=BB237_5 Depth=1
	jmp	.LBB237_101
.LBB237_101:                            # %for.inc297
                                        #   in Loop: Header=BB237_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_5
.LBB237_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB237_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB237_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB237_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB237_104 Depth=1
	movl	$0, -4(%rbp)
.LBB237_106:                            # %for.cond312
                                        #   Parent Loop BB237_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB237_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB237_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_110
.LBB237_109:                            # %cond.false
                                        #   in Loop: Header=BB237_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB237_110:                            # %cond.end
                                        #   in Loop: Header=BB237_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB237_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB237_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB237_116
.LBB237_112:                            # %cond.false358
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB237_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_115
.LBB237_114:                            # %cond.false367
                                        #   in Loop: Header=BB237_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB237_115:                            # %cond.end373
                                        #   in Loop: Header=BB237_106 Depth=2
.LBB237_116:                            # %cond.end375
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB237_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB237_119
.LBB237_118:                            # %cond.false394
                                        #   in Loop: Header=BB237_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB237_119:                            # %cond.end400
                                        #   in Loop: Header=BB237_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB237_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB237_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB237_125
.LBB237_121:                            # %cond.false406
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB237_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_124
.LBB237_123:                            # %cond.false415
                                        #   in Loop: Header=BB237_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB237_124:                            # %cond.end421
                                        #   in Loop: Header=BB237_106 Depth=2
.LBB237_125:                            # %cond.end423
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB237_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB237_128
.LBB237_127:                            # %cond.false443
                                        #   in Loop: Header=BB237_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB237_128:                            # %cond.end449
                                        #   in Loop: Header=BB237_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB237_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB237_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB237_134
.LBB237_130:                            # %cond.false455
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB237_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB237_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_133
.LBB237_132:                            # %cond.false464
                                        #   in Loop: Header=BB237_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB237_133:                            # %cond.end470
                                        #   in Loop: Header=BB237_106 Depth=2
.LBB237_134:                            # %cond.end472
                                        #   in Loop: Header=BB237_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB237_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_106
.LBB237_136:                            # %for.end487
                                        #   in Loop: Header=BB237_104 Depth=1
	jmp	.LBB237_137
.LBB237_137:                            # %for.inc488
                                        #   in Loop: Header=BB237_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_104
.LBB237_138:                            # %for.end490
	jmp	.LBB237_139
.LBB237_139:                            # %if.end491
	cmpl	$205257133, -68(%rbp)   # imm = 0xC3BF9AD
	jne	.LBB237_141
.LBB237_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_140
.Lfunc_end237:
	.size	ChromaResidualCoding.196, .Lfunc_end237-ChromaResidualCoding.196
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.197 # -- Begin function IntraChromaPrediction4x4.197
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.197,@function
IntraChromaPrediction4x4.197:           # @IntraChromaPrediction4x4.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1496704767, -20(%rbp)  # imm = 0x5935E6FF
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB238_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB238_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB238_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB238_3:                              # %for.cond1
                                        #   Parent Loop BB238_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB238_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB238_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB238_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB238_3
.LBB238_6:                              # %for.end
                                        #   in Loop: Header=BB238_1 Depth=1
	jmp	.LBB238_7
.LBB238_7:                              # %for.inc17
                                        #   in Loop: Header=BB238_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB238_1
.LBB238_8:                              # %for.end19
	cmpl	$1496704767, -20(%rbp)  # imm = 0x5935E6FF
	jne	.LBB238_10
.LBB238_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_9
.Lfunc_end238:
	.size	IntraChromaPrediction4x4.197, .Lfunc_end238-IntraChromaPrediction4x4.197
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.198        # -- Begin function B8Mode2Value.198
	.p2align	4, 0x90
	.type	B8Mode2Value.198,@function
B8Mode2Value.198:                       # @B8Mode2Value.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$394192435, -20(%rbp)   # imm = 0x177EE633
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB239_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_3
.LBB239_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB239_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$394192435, -20(%rbp)   # imm = 0x177EE633
	jne	.LBB239_5
.LBB239_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_4
.Lfunc_end239:
	.size	B8Mode2Value.198, .Lfunc_end239-B8Mode2Value.198
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.199 # -- Begin function OneComponentLumaPrediction4x4.199
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.199,@function
OneComponentLumaPrediction4x4.199:      # @OneComponentLumaPrediction4x4.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$540358488, -84(%rbp)   # imm = 0x20353758
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$540358488, -84(%rbp)   # imm = 0x20353758
	jne	.LBB240_2
.LBB240_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_1
.Lfunc_end240:
	.size	OneComponentLumaPrediction4x4.199, .Lfunc_end240-OneComponentLumaPrediction4x4.199
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.200    # -- Begin function start_macroblock.200
	.p2align	4, 0x90
	.type	start_macroblock.200,@function
start_macroblock.200:                   # @start_macroblock.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1871241897, -88(%rbp)  # imm = 0x6F88E2A9
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB241_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB241_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB241_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB241_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB241_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB241_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB241_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB241_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB241_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB241_8:                              # %if.end
                                        #   in Loop: Header=BB241_5 Depth=1
	jmp	.LBB241_9
.LBB241_9:                              # %for.inc
                                        #   in Loop: Header=BB241_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_5
.LBB241_10:                             # %for.end
	jmp	.LBB241_11
.LBB241_11:                             # %if.end19
	jmp	.LBB241_12
.LBB241_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB241_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB241_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB241_16
.LBB241_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB241_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB241_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB241_97
.LBB241_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB241_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB241_21
.LBB241_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB241_96
.LBB241_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB241_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB241_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB241_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB241_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB241_34
.LBB241_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB241_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB241_32
.LBB241_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB241_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB241_31
.LBB241_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB241_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB241_33
.LBB241_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB241_33:                             # %if.end112
	jmp	.LBB241_34
.LBB241_34:                             # %if.end113
	jmp	.LBB241_39
.LBB241_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB241_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB241_38
.LBB241_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB241_38:                             # %if.end125
	jmp	.LBB241_39
.LBB241_39:                             # %if.end126
	jmp	.LBB241_47
.LBB241_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB241_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB241_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB241_44
.LBB241_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB241_44:                             # %if.end140
	jmp	.LBB241_46
.LBB241_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB241_46:                             # %if.end145
	jmp	.LBB241_47
.LBB241_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB241_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB241_93
.LBB241_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB241_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB241_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB241_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB241_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB241_74
.LBB241_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB241_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB241_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB241_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB241_73
.LBB241_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB241_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB241_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB241_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB241_72
.LBB241_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB241_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB241_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB241_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB241_71
.LBB241_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB241_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB241_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB241_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB241_70:                             # %if.end223
	jmp	.LBB241_71
.LBB241_71:                             # %if.end224
	jmp	.LBB241_72
.LBB241_72:                             # %if.end225
	jmp	.LBB241_73
.LBB241_73:                             # %if.end226
	jmp	.LBB241_74
.LBB241_74:                             # %if.end227
	jmp	.LBB241_75
.LBB241_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB241_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB241_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB241_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB241_82
.LBB241_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB241_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB241_81:                             # %if.end256
	jmp	.LBB241_82
.LBB241_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB241_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB241_88
.LBB241_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB241_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB241_87
.LBB241_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB241_87:                             # %if.end292
	jmp	.LBB241_88
.LBB241_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB241_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB241_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB241_92
.LBB241_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB241_92:                             # %if.end305
	jmp	.LBB241_94
.LBB241_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB241_94:                             # %if.end309
	jmp	.LBB241_95
.LBB241_95:                             # %if.end310
	jmp	.LBB241_96
.LBB241_96:                             # %if.end311
	jmp	.LBB241_97
.LBB241_97:                             # %if.end312
	jmp	.LBB241_102
.LBB241_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB241_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB241_101
.LBB241_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB241_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB241_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB241_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB241_105
.LBB241_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB241_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB241_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB241_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB241_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_110 Depth 2
                                        #       Child Loop BB241_112 Depth 3
                                        #         Child Loop BB241_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB241_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB241_108 Depth=1
	movl	$0, -16(%rbp)
.LBB241_110:                            # %for.cond364
                                        #   Parent Loop BB241_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB241_112 Depth 3
                                        #         Child Loop BB241_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB241_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB241_110 Depth=2
	movl	$0, -12(%rbp)
.LBB241_112:                            # %for.cond368
                                        #   Parent Loop BB241_108 Depth=1
                                        #     Parent Loop BB241_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB241_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB241_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB241_112 Depth=3
	movl	$0, -36(%rbp)
.LBB241_114:                            # %for.cond372
                                        #   Parent Loop BB241_108 Depth=1
                                        #     Parent Loop BB241_110 Depth=2
                                        #       Parent Loop BB241_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB241_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB241_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB241_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB241_114
.LBB241_117:                            # %for.end388
                                        #   in Loop: Header=BB241_112 Depth=3
	jmp	.LBB241_118
.LBB241_118:                            # %for.inc389
                                        #   in Loop: Header=BB241_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_112
.LBB241_119:                            # %for.end391
                                        #   in Loop: Header=BB241_110 Depth=2
	jmp	.LBB241_120
.LBB241_120:                            # %for.inc392
                                        #   in Loop: Header=BB241_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB241_110
.LBB241_121:                            # %for.end394
                                        #   in Loop: Header=BB241_108 Depth=1
	jmp	.LBB241_122
.LBB241_122:                            # %for.inc395
                                        #   in Loop: Header=BB241_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_108
.LBB241_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB241_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_126 Depth 2
                                        #       Child Loop BB241_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB241_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB241_124 Depth=1
	movl	$0, -12(%rbp)
.LBB241_126:                            # %for.cond402
                                        #   Parent Loop BB241_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB241_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB241_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB241_126 Depth=2
	movl	$0, -20(%rbp)
.LBB241_128:                            # %for.cond406
                                        #   Parent Loop BB241_124 Depth=1
                                        #     Parent Loop BB241_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB241_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB241_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB241_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_128
.LBB241_131:                            # %for.end432
                                        #   in Loop: Header=BB241_126 Depth=2
	jmp	.LBB241_132
.LBB241_132:                            # %for.inc433
                                        #   in Loop: Header=BB241_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_126
.LBB241_133:                            # %for.end435
                                        #   in Loop: Header=BB241_124 Depth=1
	jmp	.LBB241_134
.LBB241_134:                            # %for.inc436
                                        #   in Loop: Header=BB241_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB241_124
.LBB241_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB241_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_138 Depth 2
                                        #       Child Loop BB241_140 Depth 3
                                        #         Child Loop BB241_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB241_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB241_136 Depth=1
	movl	$0, -16(%rbp)
.LBB241_138:                            # %for.cond443
                                        #   Parent Loop BB241_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB241_140 Depth 3
                                        #         Child Loop BB241_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB241_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB241_138 Depth=2
	movl	$0, -12(%rbp)
.LBB241_140:                            # %for.cond447
                                        #   Parent Loop BB241_136 Depth=1
                                        #     Parent Loop BB241_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB241_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB241_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB241_140 Depth=3
	movl	$0, -36(%rbp)
.LBB241_142:                            # %for.cond451
                                        #   Parent Loop BB241_136 Depth=1
                                        #     Parent Loop BB241_138 Depth=2
                                        #       Parent Loop BB241_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB241_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB241_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB241_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB241_142
.LBB241_145:                            # %for.end465
                                        #   in Loop: Header=BB241_140 Depth=3
	jmp	.LBB241_146
.LBB241_146:                            # %for.inc466
                                        #   in Loop: Header=BB241_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_140
.LBB241_147:                            # %for.end468
                                        #   in Loop: Header=BB241_138 Depth=2
	jmp	.LBB241_148
.LBB241_148:                            # %for.inc469
                                        #   in Loop: Header=BB241_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB241_138
.LBB241_149:                            # %for.end471
                                        #   in Loop: Header=BB241_136 Depth=1
	jmp	.LBB241_150
.LBB241_150:                            # %for.inc472
                                        #   in Loop: Header=BB241_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_136
.LBB241_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB241_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB241_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB241_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB241_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_152
.LBB241_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB241_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB241_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB241_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB241_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_156
.LBB241_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB241_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB241_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB241_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB241_166
.LBB241_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB241_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB241_165:                            # %if.end520
	jmp	.LBB241_166
.LBB241_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB241_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB241_168:                            # %if.end536
	cmpl	$1871241897, -88(%rbp)  # imm = 0x6F88E2A9
	jne	.LBB241_170
.LBB241_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_169
.Lfunc_end241:
	.size	start_macroblock.200, .Lfunc_end241-start_macroblock.200
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.201 # -- Begin function ChromaPrediction4x4.201
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.201,@function
ChromaPrediction4x4.201:                # @ChromaPrediction4x4.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1272097588, -72(%rbp)  # imm = 0x4BD2AB34
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB242_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB242_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB242_6
.LBB242_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB242_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB242_5:                              # %land.end
.LBB242_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB242_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB242_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB242_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB242_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB242_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB242_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB242_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB242_15
.LBB242_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB242_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB242_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB242_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB242_87
.LBB242_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB242_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB242_21
.LBB242_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB242_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB242_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB242_24
.LBB242_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB242_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB242_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB242_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB242_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_29:                             # %for.cond52
                                        #   Parent Loop BB242_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB242_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB242_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_29
.LBB242_32:                             # %for.end
                                        #   in Loop: Header=BB242_27 Depth=1
	jmp	.LBB242_33
.LBB242_33:                             # %for.inc99
                                        #   in Loop: Header=BB242_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_27
.LBB242_34:                             # %for.end101
	jmp	.LBB242_55
.LBB242_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB242_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB242_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_39:                             # %for.cond109
                                        #   Parent Loop BB242_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB242_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB242_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_39
.LBB242_42:                             # %for.end139
                                        #   in Loop: Header=BB242_37 Depth=1
	jmp	.LBB242_43
.LBB242_43:                             # %for.inc140
                                        #   in Loop: Header=BB242_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_37
.LBB242_44:                             # %for.end142
	jmp	.LBB242_54
.LBB242_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB242_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_48:                             # %for.cond148
                                        #   Parent Loop BB242_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB242_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB242_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_48
.LBB242_51:                             # %for.end178
                                        #   in Loop: Header=BB242_46 Depth=1
	jmp	.LBB242_52
.LBB242_52:                             # %for.inc179
                                        #   in Loop: Header=BB242_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_46
.LBB242_53:                             # %for.end181
	jmp	.LBB242_54
.LBB242_54:                             # %if.end182
	jmp	.LBB242_55
.LBB242_55:                             # %if.end183
	jmp	.LBB242_87
.LBB242_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB242_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB242_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_60:                             # %for.cond192
                                        #   Parent Loop BB242_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB242_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB242_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_60
.LBB242_63:                             # %for.end208
                                        #   in Loop: Header=BB242_58 Depth=1
	jmp	.LBB242_64
.LBB242_64:                             # %for.inc209
                                        #   in Loop: Header=BB242_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_58
.LBB242_65:                             # %for.end211
	jmp	.LBB242_86
.LBB242_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB242_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB242_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_70:                             # %for.cond220
                                        #   Parent Loop BB242_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB242_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB242_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_70
.LBB242_73:                             # %for.end233
                                        #   in Loop: Header=BB242_68 Depth=1
	jmp	.LBB242_74
.LBB242_74:                             # %for.inc234
                                        #   in Loop: Header=BB242_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_68
.LBB242_75:                             # %for.end236
	jmp	.LBB242_85
.LBB242_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB242_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB242_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB242_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB242_79:                             # %for.cond242
                                        #   Parent Loop BB242_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB242_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB242_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB242_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_79
.LBB242_82:                             # %for.end255
                                        #   in Loop: Header=BB242_77 Depth=1
	jmp	.LBB242_83
.LBB242_83:                             # %for.inc256
                                        #   in Loop: Header=BB242_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_77
.LBB242_84:                             # %for.end258
	jmp	.LBB242_85
.LBB242_85:                             # %if.end259
	jmp	.LBB242_86
.LBB242_86:                             # %if.end260
	jmp	.LBB242_87
.LBB242_87:                             # %if.end261
	cmpl	$1272097588, -72(%rbp)  # imm = 0x4BD2AB34
	jne	.LBB242_89
.LBB242_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_88
.Lfunc_end242:
	.size	ChromaPrediction4x4.201, .Lfunc_end242-ChromaPrediction4x4.201
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.202 # -- Begin function terminate_macroblock.202
	.p2align	4, 0x90
	.type	terminate_macroblock.202,@function
terminate_macroblock.202:               # @terminate_macroblock.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$120195583, -108(%rbp)  # imm = 0x72A09FF
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB243_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB243_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB243_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB243_5
.LBB243_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB243_8
.LBB243_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB243_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB243_7:                              # %if.end
	jmp	.LBB243_8
.LBB243_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB243_45
# %bb.9:                                # %if.end18
	movq	.LJTI243_0(,%rax,8), %rax
	jmpq	*%rax
.LBB243_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB243_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB243_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB243_46
.LBB243_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB243_46
.LBB243_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB243_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB243_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB243_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB243_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB243_22
.LBB243_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB243_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB243_21:                             # %if.end64
	jmp	.LBB243_22
.LBB243_22:                             # %if.end65
	jmp	.LBB243_23
.LBB243_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB243_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB243_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB243_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB243_27:                             # %if.end79
	jmp	.LBB243_28
.LBB243_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB243_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB243_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB243_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB243_32:                             # %if.end89
	jmp	.LBB243_33
.LBB243_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB243_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB243_35:                             # %if.end95
	jmp	.LBB243_46
.LBB243_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB243_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB243_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB243_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB243_40:                             # %if.end106
	jmp	.LBB243_41
.LBB243_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB243_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB243_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB243_44:                             # %if.end118
	jmp	.LBB243_46
.LBB243_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB243_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB243_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB243_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB243_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB243_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB243_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB243_51:                             # %if.end139
                                        #   in Loop: Header=BB243_48 Depth=1
	jmp	.LBB243_52
.LBB243_52:                             # %for.inc
                                        #   in Loop: Header=BB243_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB243_48
.LBB243_53:                             # %for.end
	jmp	.LBB243_54
.LBB243_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB243_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB243_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB243_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB243_60:                             # %if.end174
	jmp	.LBB243_62
.LBB243_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB243_62:                             # %if.end188
	jmp	.LBB243_63
.LBB243_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB243_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB243_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB243_67:                             # %if.end218
	cmpl	$120195583, -108(%rbp)  # imm = 0x72A09FF
	jne	.LBB243_69
.LBB243_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_68
.Lfunc_end243:
	.size	terminate_macroblock.202, .Lfunc_end243-terminate_macroblock.202
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI243_0:
	.quad	.LBB243_10
	.quad	.LBB243_13
	.quad	.LBB243_14
	.quad	.LBB243_36
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8_CABAC.203 # -- Begin function writeLumaCoeff8x8_CABAC.203
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.203,@function
writeLumaCoeff8x8_CABAC.203:            # @writeLumaCoeff8x8_CABAC.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$428247630, -60(%rbp)   # imm = 0x19868A4E
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB244_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB244_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB244_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB244_3:                              # %land.end
                                        #   in Loop: Header=BB244_1 Depth=1
	testb	$1, %al
	jne	.LBB244_4
	jmp	.LBB244_12
.LBB244_4:                              # %for.body
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB244_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB244_7
.LBB244_6:                              # %cond.false
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB244_7:                              # %cond.end
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB244_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB244_10
.LBB244_9:                              # %if.else
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB244_10:                             # %if.end
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_1
.LBB244_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$428247630, -60(%rbp)   # imm = 0x19868A4E
	jne	.LBB244_14
.LBB244_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_13
.Lfunc_end244:
	.size	writeLumaCoeff8x8_CABAC.203, .Lfunc_end244-writeLumaCoeff8x8_CABAC.203
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.204 # -- Begin function writeMotionVector8x8.204
	.p2align	4, 0x90
	.type	writeMotionVector8x8.204,@function
writeMotionVector8x8.204:               # @writeMotionVector8x8.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$192248942, -88(%rbp)   # imm = 0xB757C6E
	movl	%edi, -100(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -96(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB245_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB245_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB245_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB245_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB245_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB245_7
.LBB245_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB245_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB245_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB245_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_11 Depth 2
                                        #       Child Loop BB245_13 Depth 3
                                        #         Child Loop BB245_15 Depth 4
                                        #           Child Loop BB245_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB245_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB245_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB245_11:                             # %for.cond22
                                        #   Parent Loop BB245_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_13 Depth 3
                                        #         Child Loop BB245_15 Depth 4
                                        #           Child Loop BB245_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB245_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB245_11 Depth=2
	movl	$0, -12(%rbp)
.LBB245_13:                             # %for.cond25
                                        #   Parent Loop BB245_9 Depth=1
                                        #     Parent Loop BB245_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB245_15 Depth 4
                                        #           Child Loop BB245_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB245_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB245_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB245_15:                             # %for.cond53
                                        #   Parent Loop BB245_9 Depth=1
                                        #     Parent Loop BB245_11 Depth=2
                                        #       Parent Loop BB245_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB245_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB245_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB245_15 Depth=4
	movl	$0, -44(%rbp)
.LBB245_17:                             # %for.cond57
                                        #   Parent Loop BB245_9 Depth=1
                                        #     Parent Loop BB245_11 Depth=2
                                        #       Parent Loop BB245_13 Depth=3
                                        #         Parent Loop BB245_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB245_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB245_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB245_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB245_17
.LBB245_20:                             # %for.end
                                        #   in Loop: Header=BB245_15 Depth=4
	jmp	.LBB245_21
.LBB245_21:                             # %for.inc70
                                        #   in Loop: Header=BB245_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB245_15
.LBB245_22:                             # %for.end72
                                        #   in Loop: Header=BB245_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB245_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB245_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB245_25
.LBB245_24:                             # %if.else
                                        #   in Loop: Header=BB245_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB245_25:                             # %if.end78
                                        #   in Loop: Header=BB245_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB245_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_13
.LBB245_27:                             # %for.end90
                                        #   in Loop: Header=BB245_11 Depth=2
	jmp	.LBB245_28
.LBB245_28:                             # %for.inc91
                                        #   in Loop: Header=BB245_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB245_11
.LBB245_29:                             # %for.end93
                                        #   in Loop: Header=BB245_9 Depth=1
	jmp	.LBB245_30
.LBB245_30:                             # %for.inc94
                                        #   in Loop: Header=BB245_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_9
.LBB245_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$192248942, -88(%rbp)   # imm = 0xB757C6E
	jne	.LBB245_33
.LBB245_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_32
.Lfunc_end245:
	.size	writeMotionVector8x8.204, .Lfunc_end245-writeMotionVector8x8.204
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.205 # -- Begin function write_one_macroblock.205
	.p2align	4, 0x90
	.type	write_one_macroblock.205,@function
write_one_macroblock.205:               # @write_one_macroblock.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$990917533, -32(%rbp)   # imm = 0x3B10339D
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB246_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB246_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB246_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB246_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB246_6
.LBB246_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB246_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB246_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB246_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB246_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB246_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB246_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB246_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB246_22
.LBB246_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB246_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB246_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB246_14 Depth=1
	movl	$0, -20(%rbp)
.LBB246_16:                             # %for.cond24
                                        #   Parent Loop BB246_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB246_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB246_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB246_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB246_16
.LBB246_19:                             # %for.end
                                        #   in Loop: Header=BB246_14 Depth=1
	jmp	.LBB246_20
.LBB246_20:                             # %for.inc35
                                        #   in Loop: Header=BB246_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB246_14
.LBB246_21:                             # %for.end37
	jmp	.LBB246_22
.LBB246_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB246_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB246_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB246_30
.LBB246_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB246_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB246_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB246_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB246_29:                             # %if.end59
	jmp	.LBB246_30
.LBB246_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB246_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB246_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$990917533, -32(%rbp)   # imm = 0x3B10339D
	jne	.LBB246_34
.LBB246_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_33
.Lfunc_end246:
	.size	write_one_macroblock.205, .Lfunc_end246-write_one_macroblock.205
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.206 # -- Begin function IntraChromaPrediction4x4.206
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.206,@function
IntraChromaPrediction4x4.206:           # @IntraChromaPrediction4x4.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1790580192, -20(%rbp)  # imm = 0x6ABA15E0
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB247_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB247_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_3:                              # %for.cond1
                                        #   Parent Loop BB247_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB247_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB247_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB247_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_3
.LBB247_6:                              # %for.end
                                        #   in Loop: Header=BB247_1 Depth=1
	jmp	.LBB247_7
.LBB247_7:                              # %for.inc17
                                        #   in Loop: Header=BB247_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_1
.LBB247_8:                              # %for.end19
	cmpl	$1790580192, -20(%rbp)  # imm = 0x6ABA15E0
	jne	.LBB247_10
.LBB247_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_9
.Lfunc_end247:
	.size	IntraChromaPrediction4x4.206, .Lfunc_end247-IntraChromaPrediction4x4.206
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.207 # -- Begin function terminate_macroblock.207
	.p2align	4, 0x90
	.type	terminate_macroblock.207,@function
terminate_macroblock.207:               # @terminate_macroblock.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$706450990, -108(%rbp)  # imm = 0x2A1B962E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB248_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB248_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB248_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB248_5
.LBB248_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB248_8
.LBB248_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB248_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB248_7:                              # %if.end
	jmp	.LBB248_8
.LBB248_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB248_45
# %bb.9:                                # %if.end18
	movq	.LJTI248_0(,%rax,8), %rax
	jmpq	*%rax
.LBB248_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB248_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB248_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB248_46
.LBB248_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB248_46
.LBB248_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB248_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB248_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB248_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB248_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB248_22
.LBB248_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB248_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB248_21:                             # %if.end64
	jmp	.LBB248_22
.LBB248_22:                             # %if.end65
	jmp	.LBB248_23
.LBB248_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB248_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB248_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB248_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB248_27:                             # %if.end79
	jmp	.LBB248_28
.LBB248_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB248_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB248_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB248_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB248_32:                             # %if.end89
	jmp	.LBB248_33
.LBB248_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB248_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB248_35:                             # %if.end95
	jmp	.LBB248_46
.LBB248_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB248_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB248_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB248_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB248_40:                             # %if.end106
	jmp	.LBB248_41
.LBB248_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB248_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB248_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB248_44:                             # %if.end118
	jmp	.LBB248_46
.LBB248_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB248_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB248_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB248_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB248_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB248_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB248_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB248_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB248_51:                             # %if.end139
                                        #   in Loop: Header=BB248_48 Depth=1
	jmp	.LBB248_52
.LBB248_52:                             # %for.inc
                                        #   in Loop: Header=BB248_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB248_48
.LBB248_53:                             # %for.end
	jmp	.LBB248_54
.LBB248_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB248_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB248_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB248_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB248_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB248_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB248_60:                             # %if.end174
	jmp	.LBB248_62
.LBB248_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB248_62:                             # %if.end188
	jmp	.LBB248_63
.LBB248_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB248_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB248_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB248_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB248_67:                             # %if.end218
	cmpl	$706450990, -108(%rbp)  # imm = 0x2A1B962E
	jne	.LBB248_69
.LBB248_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_68
.Lfunc_end248:
	.size	terminate_macroblock.207, .Lfunc_end248-terminate_macroblock.207
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI248_0:
	.quad	.LBB248_10
	.quad	.LBB248_13
	.quad	.LBB248_14
	.quad	.LBB248_36
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.208 # -- Begin function IntraChromaPrediction.208
	.p2align	4, 0x90
	.type	IntraChromaPrediction.208,@function
IntraChromaPrediction.208:              # @IntraChromaPrediction.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$938071302, -164(%rbp)  # imm = 0x37E9D506
	movq	%rdi, -176(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB249_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB249_1 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB249_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_1
.LBB249_4:                              # %for.end
	movl	-128(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB249_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB249_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB249_8
.LBB249_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB249_8
.LBB249_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB249_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB249_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB249_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB249_13
.LBB249_12:                             # %cond.false32
                                        #   in Loop: Header=BB249_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB249_13
.LBB249_13:                             # %cond.end33
                                        #   in Loop: Header=BB249_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_9
.LBB249_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB249_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB249_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB249_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB249_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB249_20
.LBB249_19:                             # %cond.false57
                                        #   in Loop: Header=BB249_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB249_20
.LBB249_20:                             # %cond.end58
                                        #   in Loop: Header=BB249_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB249_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_16
.LBB249_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB249_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB249_25
.LBB249_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB249_25
.LBB249_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB249_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB249_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB249_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB249_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB249_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB249_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB249_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB249_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB249_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB249_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_37 Depth 2
                                        #       Child Loop BB249_39 Depth 3
                                        #         Child Loop BB249_104 Depth 4
                                        #         Child Loop BB249_110 Depth 4
                                        #         Child Loop BB249_85 Depth 4
                                        #         Child Loop BB249_91 Depth 4
                                        #         Child Loop BB249_66 Depth 4
                                        #         Child Loop BB249_72 Depth 4
                                        #         Child Loop BB249_44 Depth 4
                                        #         Child Loop BB249_50 Depth 4
                                        #         Child Loop BB249_125 Depth 4
                                        #           Child Loop BB249_127 Depth 5
                                        #     Child Loop BB249_138 Depth 2
                                        #     Child Loop BB249_142 Depth 2
                                        #       Child Loop BB249_144 Depth 3
                                        #     Child Loop BB249_153 Depth 2
                                        #     Child Loop BB249_157 Depth 2
                                        #       Child Loop BB249_159 Depth 3
                                        #     Child Loop BB249_170 Depth 2
                                        #     Child Loop BB249_174 Depth 2
                                        #     Child Loop BB249_178 Depth 2
                                        #       Child Loop BB249_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB249_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB249_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB249_37:                             # %for.cond95
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_39 Depth 3
                                        #         Child Loop BB249_104 Depth 4
                                        #         Child Loop BB249_110 Depth 4
                                        #         Child Loop BB249_85 Depth 4
                                        #         Child Loop BB249_91 Depth 4
                                        #         Child Loop BB249_66 Depth 4
                                        #         Child Loop BB249_72 Depth 4
                                        #         Child Loop BB249_44 Depth 4
                                        #         Child Loop BB249_50 Depth 4
                                        #         Child Loop BB249_125 Depth 4
                                        #           Child Loop BB249_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB249_37 Depth=2
	movl	$0, -88(%rbp)
.LBB249_39:                             # %for.cond99
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB249_104 Depth 4
                                        #         Child Loop BB249_110 Depth 4
                                        #         Child Loop BB249_85 Depth 4
                                        #         Child Loop BB249_91 Depth 4
                                        #         Child Loop BB249_66 Depth 4
                                        #         Child Loop BB249_72 Depth 4
                                        #         Child Loop BB249_44 Depth 4
                                        #         Child Loop BB249_50 Depth 4
                                        #         Child Loop BB249_125 Depth 4
                                        #           Child Loop BB249_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB249_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB249_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB249_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB249_39 Depth=3
	movq	.LJTI249_0(,%rax,8), %rax
	jmpq	*%rax
.LBB249_42:                             # %sw.bb
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_44:                             # %for.cond124
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB249_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB249_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_44
.LBB249_47:                             # %for.end138
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_48
.LBB249_48:                             # %if.end139
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB249_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_50:                             # %for.cond143
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB249_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB249_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_50
.LBB249_53:                             # %for.end162
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_54
.LBB249_54:                             # %if.end163
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB249_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_63
.LBB249_57:                             # %if.else
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_62
.LBB249_59:                             # %if.else174
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB249_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB249_61:                             # %if.end180
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_62
.LBB249_62:                             # %if.end181
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_63
.LBB249_63:                             # %if.end182
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_124
.LBB249_64:                             # %sw.bb183
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_66:                             # %for.cond186
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB249_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB249_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_66
.LBB249_69:                             # %for.end202
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_77
.LBB249_70:                             # %if.else203
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB249_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_72:                             # %for.cond207
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB249_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB249_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_72
.LBB249_75:                             # %for.end226
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_76
.LBB249_76:                             # %if.end227
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_77
.LBB249_77:                             # %if.end228
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_82
.LBB249_79:                             # %if.else233
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB249_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB249_81:                             # %if.end239
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_82
.LBB249_82:                             # %if.end240
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_124
.LBB249_83:                             # %sw.bb241
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB249_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_85:                             # %for.cond245
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB249_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB249_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_85
.LBB249_88:                             # %for.end264
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_96
.LBB249_89:                             # %if.else265
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_91:                             # %for.cond268
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB249_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB249_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_91
.LBB249_94:                             # %for.end284
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_95
.LBB249_95:                             # %if.end285
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_96
.LBB249_96:                             # %if.end286
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB249_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_101
.LBB249_98:                             # %if.else292
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB249_100:                            # %if.end297
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_101
.LBB249_101:                            # %if.end298
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_124
.LBB249_102:                            # %sw.bb299
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_104:                            # %for.cond302
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB249_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB249_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_104
.LBB249_107:                            # %for.end318
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_108
.LBB249_108:                            # %if.end319
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB249_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_110:                            # %for.cond323
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB249_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB249_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_110
.LBB249_113:                            # %for.end342
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_114
.LBB249_114:                            # %if.end343
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB249_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_123
.LBB249_117:                            # %if.else352
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB249_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_122
.LBB249_119:                            # %if.else357
                                        #   in Loop: Header=BB249_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB249_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB249_121:                            # %if.end363
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_122
.LBB249_122:                            # %if.end364
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_123
.LBB249_123:                            # %if.end365
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_124
.LBB249_124:                            # %sw.epilog
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_125:                            # %for.cond366
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB249_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB249_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_127:                            # %for.cond371
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_37 Depth=2
                                        #       Parent Loop BB249_39 Depth=3
                                        #         Parent Loop BB249_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB249_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB249_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_127
.LBB249_130:                            # %for.end386
                                        #   in Loop: Header=BB249_125 Depth=4
	jmp	.LBB249_131
.LBB249_131:                            # %for.inc387
                                        #   in Loop: Header=BB249_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_125
.LBB249_132:                            # %for.end389
                                        #   in Loop: Header=BB249_39 Depth=3
	jmp	.LBB249_133
.LBB249_133:                            # %for.inc390
                                        #   in Loop: Header=BB249_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB249_39
.LBB249_134:                            # %for.end392
                                        #   in Loop: Header=BB249_37 Depth=2
	jmp	.LBB249_135
.LBB249_135:                            # %for.inc393
                                        #   in Loop: Header=BB249_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB249_37
.LBB249_136:                            # %for.end395
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB249_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	$0, -4(%rbp)
.LBB249_138:                            # %for.cond398
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB249_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB249_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB249_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_138
.LBB249_141:                            # %for.end414
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	$0, -4(%rbp)
.LBB249_142:                            # %for.cond415
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB249_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB249_142 Depth=2
	movl	$0, -8(%rbp)
.LBB249_144:                            # %for.cond419
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB249_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB249_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_144
.LBB249_147:                            # %for.end436
                                        #   in Loop: Header=BB249_142 Depth=2
	jmp	.LBB249_148
.LBB249_148:                            # %for.inc437
                                        #   in Loop: Header=BB249_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_142
.LBB249_149:                            # %for.end439
                                        #   in Loop: Header=BB249_35 Depth=1
	jmp	.LBB249_150
.LBB249_150:                            # %if.end440
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB249_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB249_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	$0, -4(%rbp)
.LBB249_153:                            # %for.cond447
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB249_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB249_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_153
.LBB249_156:                            # %for.end468
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	$0, -4(%rbp)
.LBB249_157:                            # %for.cond469
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB249_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB249_157 Depth=2
	movl	$0, -8(%rbp)
.LBB249_159:                            # %for.cond473
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB249_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB249_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_159
.LBB249_162:                            # %for.end490
                                        #   in Loop: Header=BB249_157 Depth=2
	jmp	.LBB249_163
.LBB249_163:                            # %for.inc491
                                        #   in Loop: Header=BB249_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_157
.LBB249_164:                            # %for.end493
                                        #   in Loop: Header=BB249_35 Depth=1
	jmp	.LBB249_165
.LBB249_165:                            # %if.end494
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB249_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB249_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB249_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB249_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB249_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB249_170:                            # %for.cond519
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB249_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB249_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB249_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_170
.LBB249_173:                            # %for.end540
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB249_174:                            # %for.cond556
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB249_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB249_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB249_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_174
.LBB249_177:                            # %for.end577
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB249_178:                            # %for.cond606
                                        #   Parent Loop BB249_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB249_178 Depth=2
	movl	$0, -4(%rbp)
.LBB249_180:                            # %for.cond610
                                        #   Parent Loop BB249_35 Depth=1
                                        #     Parent Loop BB249_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB249_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB249_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB249_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB249_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB249_184
.LBB249_183:                            # %cond.false630
                                        #   in Loop: Header=BB249_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB249_184:                            # %cond.end643
                                        #   in Loop: Header=BB249_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB249_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB249_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB249_190
.LBB249_186:                            # %cond.false648
                                        #   in Loop: Header=BB249_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB249_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB249_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB249_189
.LBB249_188:                            # %cond.false666
                                        #   in Loop: Header=BB249_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB249_189:                            # %cond.end679
                                        #   in Loop: Header=BB249_180 Depth=3
.LBB249_190:                            # %cond.end681
                                        #   in Loop: Header=BB249_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB249_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_180
.LBB249_192:                            # %for.end694
                                        #   in Loop: Header=BB249_178 Depth=2
	jmp	.LBB249_193
.LBB249_193:                            # %for.inc695
                                        #   in Loop: Header=BB249_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_178
.LBB249_194:                            # %for.end697
                                        #   in Loop: Header=BB249_35 Depth=1
	jmp	.LBB249_195
.LBB249_195:                            # %if.end698
                                        #   in Loop: Header=BB249_35 Depth=1
	jmp	.LBB249_196
.LBB249_196:                            # %for.inc699
                                        #   in Loop: Header=BB249_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB249_35
.LBB249_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB249_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB249_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB249_199 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB249_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_199
.LBB249_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB249_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_219 Depth 2
                                        #       Child Loop BB249_221 Depth 3
                                        #         Child Loop BB249_223 Depth 4
                                        #           Child Loop BB249_225 Depth 5
                                        #             Child Loop BB249_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB249_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB249_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB249_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB249_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB249_203 Depth=1
	jmp	.LBB249_241
.LBB249_207:                            # %if.end723
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB249_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB249_217
.LBB249_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB249_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB249_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB249_217
.LBB249_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB249_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB249_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB249_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB249_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB249_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB249_218
.LBB249_217:                            # %if.then749
                                        #   in Loop: Header=BB249_203 Depth=1
	jmp	.LBB249_241
.LBB249_218:                            # %if.end750
                                        #   in Loop: Header=BB249_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB249_219:                            # %for.cond751
                                        #   Parent Loop BB249_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_221 Depth 3
                                        #         Child Loop BB249_223 Depth 4
                                        #           Child Loop BB249_225 Depth 5
                                        #             Child Loop BB249_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB249_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB249_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB249_221:                            # %for.cond757
                                        #   Parent Loop BB249_203 Depth=1
                                        #     Parent Loop BB249_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB249_223 Depth 4
                                        #           Child Loop BB249_225 Depth 5
                                        #             Child Loop BB249_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB249_221 Depth=3
	movl	$0, -40(%rbp)
.LBB249_223:                            # %for.cond761
                                        #   Parent Loop BB249_203 Depth=1
                                        #     Parent Loop BB249_219 Depth=2
                                        #       Parent Loop BB249_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB249_225 Depth 5
                                        #             Child Loop BB249_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB249_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB249_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_225:                            # %for.cond765
                                        #   Parent Loop BB249_203 Depth=1
                                        #     Parent Loop BB249_219 Depth=2
                                        #       Parent Loop BB249_221 Depth=3
                                        #         Parent Loop BB249_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB249_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB249_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_227:                            # %for.cond770
                                        #   Parent Loop BB249_203 Depth=1
                                        #     Parent Loop BB249_219 Depth=2
                                        #       Parent Loop BB249_221 Depth=3
                                        #         Parent Loop BB249_223 Depth=4
                                        #           Parent Loop BB249_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB249_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB249_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB249_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB249_227
.LBB249_230:                            # %for.end803
                                        #   in Loop: Header=BB249_225 Depth=5
	jmp	.LBB249_231
.LBB249_231:                            # %for.inc804
                                        #   in Loop: Header=BB249_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_225
.LBB249_232:                            # %for.end806
                                        #   in Loop: Header=BB249_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB249_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB249_223
.LBB249_234:                            # %for.end810
                                        #   in Loop: Header=BB249_221 Depth=3
	jmp	.LBB249_235
.LBB249_235:                            # %for.inc811
                                        #   in Loop: Header=BB249_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB249_221
.LBB249_236:                            # %for.end813
                                        #   in Loop: Header=BB249_219 Depth=2
	jmp	.LBB249_237
.LBB249_237:                            # %for.inc814
                                        #   in Loop: Header=BB249_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB249_219
.LBB249_238:                            # %for.end816
                                        #   in Loop: Header=BB249_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB249_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB249_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB249_240:                            # %if.end820
                                        #   in Loop: Header=BB249_203 Depth=1
	jmp	.LBB249_241
.LBB249_241:                            # %for.inc821
                                        #   in Loop: Header=BB249_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB249_203
.LBB249_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB249_243:                            # %if.end824
	cmpl	$938071302, -164(%rbp)  # imm = 0x37E9D506
	jne	.LBB249_245
.LBB249_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_244
.Lfunc_end249:
	.size	IntraChromaPrediction.208, .Lfunc_end249-IntraChromaPrediction.208
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI249_0:
	.quad	.LBB249_42
	.quad	.LBB249_64
	.quad	.LBB249_83
	.quad	.LBB249_102
                                        # -- End function
	.text
	.globl	ChromaResidualCoding.209 # -- Begin function ChromaResidualCoding.209
	.p2align	4, 0x90
	.type	ChromaResidualCoding.209,@function
ChromaResidualCoding.209:               # @ChromaResidualCoding.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1589149517, -72(%rbp)  # imm = 0x5EB87F4D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB250_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB250_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB250_3:                              # %lor.end
.LBB250_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB250_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_7 Depth 2
                                        #       Child Loop BB250_9 Depth 3
                                        #     Child Loop BB250_16 Depth 2
                                        #       Child Loop BB250_18 Depth 3
                                        #     Child Loop BB250_33 Depth 2
                                        #       Child Loop BB250_35 Depth 3
                                        #     Child Loop BB250_43 Depth 2
                                        #       Child Loop BB250_45 Depth 3
                                        #     Child Loop BB250_58 Depth 2
                                        #       Child Loop BB250_60 Depth 3
                                        #     Child Loop BB250_87 Depth 2
                                        #       Child Loop BB250_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB250_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB250_7:                              # %for.cond5
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB250_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB250_7 Depth=2
	movl	$0, -20(%rbp)
.LBB250_9:                              # %for.cond8
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB250_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB250_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB250_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB250_9
.LBB250_12:                             # %for.end
                                        #   in Loop: Header=BB250_7 Depth=2
	jmp	.LBB250_13
.LBB250_13:                             # %for.inc18
                                        #   in Loop: Header=BB250_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB250_7
.LBB250_14:                             # %for.end20
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB250_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -4(%rbp)
.LBB250_16:                             # %for.cond21
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB250_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB250_16 Depth=2
	movl	$0, -8(%rbp)
.LBB250_18:                             # %for.cond26
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB250_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB250_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB250_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB250_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB250_25
.LBB250_21:                             # %if.else
                                        #   in Loop: Header=BB250_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB250_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB250_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB250_24
.LBB250_23:                             # %if.else52
                                        #   in Loop: Header=BB250_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB250_24:                             # %if.end
                                        #   in Loop: Header=BB250_18 Depth=3
	jmp	.LBB250_25
.LBB250_25:                             # %if.end57
                                        #   in Loop: Header=BB250_18 Depth=3
	jmp	.LBB250_26
.LBB250_26:                             # %for.inc58
                                        #   in Loop: Header=BB250_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_18
.LBB250_27:                             # %for.end59
                                        #   in Loop: Header=BB250_16 Depth=2
	jmp	.LBB250_28
.LBB250_28:                             # %for.inc60
                                        #   in Loop: Header=BB250_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_16
.LBB250_29:                             # %for.end62
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_74
.LBB250_30:                             # %if.else63
                                        #   in Loop: Header=BB250_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB250_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB250_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -4(%rbp)
.LBB250_33:                             # %for.cond69
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB250_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB250_33 Depth=2
	movl	$0, -8(%rbp)
.LBB250_35:                             # %for.cond73
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB250_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB250_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB250_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_35
.LBB250_38:                             # %for.end83
                                        #   in Loop: Header=BB250_33 Depth=2
	jmp	.LBB250_39
.LBB250_39:                             # %for.inc84
                                        #   in Loop: Header=BB250_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_33
.LBB250_40:                             # %for.end86
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_73
.LBB250_41:                             # %if.else87
                                        #   in Loop: Header=BB250_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB250_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -4(%rbp)
.LBB250_43:                             # %for.cond90
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB250_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB250_43 Depth=2
	movl	$0, -8(%rbp)
.LBB250_45:                             # %for.cond95
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB250_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB250_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB250_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB250_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB250_52
.LBB250_48:                             # %if.else119
                                        #   in Loop: Header=BB250_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB250_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB250_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB250_51
.LBB250_50:                             # %if.else127
                                        #   in Loop: Header=BB250_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB250_51:                             # %if.end132
                                        #   in Loop: Header=BB250_45 Depth=3
	jmp	.LBB250_52
.LBB250_52:                             # %if.end133
                                        #   in Loop: Header=BB250_45 Depth=3
	jmp	.LBB250_53
.LBB250_53:                             # %for.inc134
                                        #   in Loop: Header=BB250_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_45
.LBB250_54:                             # %for.end136
                                        #   in Loop: Header=BB250_43 Depth=2
	jmp	.LBB250_55
.LBB250_55:                             # %for.inc137
                                        #   in Loop: Header=BB250_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_43
.LBB250_56:                             # %for.end139
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_72
.LBB250_57:                             # %if.else140
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -4(%rbp)
.LBB250_58:                             # %for.cond141
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB250_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB250_58 Depth=2
	movl	$0, -8(%rbp)
.LBB250_60:                             # %for.cond146
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB250_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB250_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB250_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB250_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB250_67
.LBB250_63:                             # %if.else175
                                        #   in Loop: Header=BB250_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB250_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB250_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB250_66
.LBB250_65:                             # %if.else188
                                        #   in Loop: Header=BB250_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB250_66:                             # %if.end198
                                        #   in Loop: Header=BB250_60 Depth=3
	jmp	.LBB250_67
.LBB250_67:                             # %if.end199
                                        #   in Loop: Header=BB250_60 Depth=3
	jmp	.LBB250_68
.LBB250_68:                             # %for.inc200
                                        #   in Loop: Header=BB250_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_60
.LBB250_69:                             # %for.end202
                                        #   in Loop: Header=BB250_58 Depth=2
	jmp	.LBB250_70
.LBB250_70:                             # %for.inc203
                                        #   in Loop: Header=BB250_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_58
.LBB250_71:                             # %for.end205
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_72
.LBB250_72:                             # %if.end206
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_73
.LBB250_73:                             # %if.end207
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_74
.LBB250_74:                             # %if.end208
                                        #   in Loop: Header=BB250_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB250_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB250_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB250_100
.LBB250_77:                             # %if.else215
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB250_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB250_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB250_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB250_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB250_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB250_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB250_84
.LBB250_83:                             # %if.then247
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB250_85
.LBB250_84:                             # %if.else249
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB250_85:                             # %if.end251
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB250_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	$0, -4(%rbp)
.LBB250_87:                             # %for.cond255
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB250_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB250_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB250_87 Depth=2
	movl	$0, -8(%rbp)
.LBB250_89:                             # %for.cond260
                                        #   Parent Loop BB250_5 Depth=1
                                        #     Parent Loop BB250_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB250_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB250_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB250_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB250_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB250_93
.LBB250_92:                             # %if.else277
                                        #   in Loop: Header=BB250_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB250_93:                             # %if.end287
                                        #   in Loop: Header=BB250_89 Depth=3
	jmp	.LBB250_94
.LBB250_94:                             # %for.inc288
                                        #   in Loop: Header=BB250_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_89
.LBB250_95:                             # %for.end290
                                        #   in Loop: Header=BB250_87 Depth=2
	jmp	.LBB250_96
.LBB250_96:                             # %for.inc291
                                        #   in Loop: Header=BB250_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_87
.LBB250_97:                             # %for.end293
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_98
.LBB250_98:                             # %if.end294
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_99
.LBB250_99:                             # %if.end295
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_100
.LBB250_100:                            # %if.end296
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_101
.LBB250_101:                            # %for.inc297
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_5
.LBB250_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB250_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB250_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB250_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB250_104 Depth=1
	movl	$0, -8(%rbp)
.LBB250_106:                            # %for.cond312
                                        #   Parent Loop BB250_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB250_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB250_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_110
.LBB250_109:                            # %cond.false
                                        #   in Loop: Header=BB250_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB250_110:                            # %cond.end
                                        #   in Loop: Header=BB250_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB250_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB250_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB250_116
.LBB250_112:                            # %cond.false358
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB250_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_115
.LBB250_114:                            # %cond.false367
                                        #   in Loop: Header=BB250_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB250_115:                            # %cond.end373
                                        #   in Loop: Header=BB250_106 Depth=2
.LBB250_116:                            # %cond.end375
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB250_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB250_119
.LBB250_118:                            # %cond.false394
                                        #   in Loop: Header=BB250_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB250_119:                            # %cond.end400
                                        #   in Loop: Header=BB250_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB250_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB250_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB250_125
.LBB250_121:                            # %cond.false406
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB250_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_124
.LBB250_123:                            # %cond.false415
                                        #   in Loop: Header=BB250_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB250_124:                            # %cond.end421
                                        #   in Loop: Header=BB250_106 Depth=2
.LBB250_125:                            # %cond.end423
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB250_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB250_128
.LBB250_127:                            # %cond.false443
                                        #   in Loop: Header=BB250_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB250_128:                            # %cond.end449
                                        #   in Loop: Header=BB250_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB250_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB250_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB250_134
.LBB250_130:                            # %cond.false455
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB250_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB250_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_133
.LBB250_132:                            # %cond.false464
                                        #   in Loop: Header=BB250_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB250_133:                            # %cond.end470
                                        #   in Loop: Header=BB250_106 Depth=2
.LBB250_134:                            # %cond.end472
                                        #   in Loop: Header=BB250_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB250_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_106
.LBB250_136:                            # %for.end487
                                        #   in Loop: Header=BB250_104 Depth=1
	jmp	.LBB250_137
.LBB250_137:                            # %for.inc488
                                        #   in Loop: Header=BB250_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_104
.LBB250_138:                            # %for.end490
	jmp	.LBB250_139
.LBB250_139:                            # %if.end491
	cmpl	$1589149517, -72(%rbp)  # imm = 0x5EB87F4D
	jne	.LBB250_141
.LBB250_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_140
.Lfunc_end250:
	.size	ChromaResidualCoding.209, .Lfunc_end250-ChromaResidualCoding.209
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.210        # -- Begin function writeMBLayer.210
	.p2align	4, 0x90
	.type	writeMBLayer.210,@function
writeMBLayer.210:                       # @writeMBLayer.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$580645345, -100(%rbp)  # imm = 0x229BF1E1
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB251_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB251_3
.LBB251_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB251_3
.LBB251_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB251_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB251_9
.LBB251_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB251_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB251_8
.LBB251_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB251_8
.LBB251_8:                              # %cond.end14
.LBB251_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB251_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB251_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB251_24
.LBB251_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB251_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB251_17
	jmp	.LBB251_18
.LBB251_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB251_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB251_18
	jmp	.LBB251_17
.LBB251_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB251_17
	jmp	.LBB251_18
.LBB251_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB251_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB251_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB251_23
.LBB251_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB251_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB251_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB251_23:                             # %if.end50
	jmp	.LBB251_24
.LBB251_24:                             # %if.end51
	jmp	.LBB251_25
.LBB251_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB251_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB251_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB251_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB251_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB251_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB251_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB251_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_35
.LBB251_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB251_38
.LBB251_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB251_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB251_39:                             # %if.end96
	jmp	.LBB251_40
.LBB251_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_43
.LBB251_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB251_89
.LBB251_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB251_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB251_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB251_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB251_49
.LBB251_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB251_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB251_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB251_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB251_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_55
.LBB251_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB251_58
.LBB251_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB251_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB251_59:                             # %if.end198
	jmp	.LBB251_60
.LBB251_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB251_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB251_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB251_64
.LBB251_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB251_64:                             # %if.end226
	jmp	.LBB251_88
.LBB251_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB251_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB251_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB251_76
.LBB251_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB251_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB251_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB251_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB251_72:                             # %if.end281
	jmp	.LBB251_73
.LBB251_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB251_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB251_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB251_87
.LBB251_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB251_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB251_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB251_77 Depth=1
	movl	$0, -44(%rbp)
.LBB251_79:                             # %for.cond310
                                        #   Parent Loop BB251_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB251_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB251_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB251_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB251_79
.LBB251_82:                             # %for.end
                                        #   in Loop: Header=BB251_77 Depth=1
	jmp	.LBB251_83
.LBB251_83:                             # %for.inc322
                                        #   in Loop: Header=BB251_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB251_77
.LBB251_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB251_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB251_86:                             # %if.end345
	jmp	.LBB251_87
.LBB251_87:                             # %if.end346
	jmp	.LBB251_88
.LBB251_88:                             # %if.end347
	jmp	.LBB251_89
.LBB251_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB251_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB251_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB251_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB251_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB251_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB251_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_98
.LBB251_97:                             # %if.else380
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_98:                             # %if.end382
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB251_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB251_101
.LBB251_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB251_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB251_101:                            # %lor.end415
                                        #   in Loop: Header=BB251_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB251_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB251_94
.LBB251_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB251_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB251_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB251_114
.LBB251_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB251_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_110
.LBB251_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB251_113
.LBB251_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB251_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB251_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB251_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB251_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_120
.LBB251_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB251_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB251_119:                            # %if.end483
	jmp	.LBB251_120
.LBB251_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB251_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB251_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB251_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB251_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB251_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB251_129
.LBB251_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB251_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB251_128:                            # %if.end516
	jmp	.LBB251_129
.LBB251_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$580645345, -100(%rbp)  # imm = 0x229BF1E1
	jne	.LBB251_131
.LBB251_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_130
.Lfunc_end251:
	.size	writeMBLayer.210, .Lfunc_end251-writeMBLayer.210
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.211    # -- Begin function writeChromaCoeff.211
	.p2align	4, 0x90
	.type	writeChromaCoeff.211,@function
writeChromaCoeff.211:                   # @writeChromaCoeff.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$698596173, -80(%rbp)   # imm = 0x29A3BB4D
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB252_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB252_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB252_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB252_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB252_21
.LBB252_5:                              # %if.else
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB252_6:                              # %for.cond18
                                        #   Parent Loop BB252_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB252_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB252_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB252_8:                              # %land.end
                                        #   in Loop: Header=BB252_6 Depth=2
	testb	$1, %al
	jne	.LBB252_9
	jmp	.LBB252_20
.LBB252_9:                              # %for.body21
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB252_12
.LBB252_11:                             # %if.else29
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB252_12:                             # %if.end
                                        #   in Loop: Header=BB252_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB252_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB252_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB252_15:                             # %lor.end
                                        #   in Loop: Header=BB252_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB252_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB252_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB252_18:                             # %lor.end45
                                        #   in Loop: Header=BB252_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB252_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB252_6
.LBB252_20:                             # %for.end
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_21
.LBB252_21:                             # %if.end58
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_22
.LBB252_22:                             # %for.inc59
                                        #   in Loop: Header=BB252_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB252_2
.LBB252_23:                             # %for.end61
	jmp	.LBB252_24
.LBB252_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB252_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB252_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_28 Depth 2
                                        #       Child Loop BB252_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB252_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB252_26 Depth=1
	movl	$0, -28(%rbp)
.LBB252_28:                             # %for.cond69
                                        #   Parent Loop BB252_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB252_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB252_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB252_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB252_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB252_47
.LBB252_31:                             # %if.else84
                                        #   in Loop: Header=BB252_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB252_32:                             # %for.cond115
                                        #   Parent Loop BB252_26 Depth=1
                                        #     Parent Loop BB252_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB252_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB252_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB252_34:                             # %land.end121
                                        #   in Loop: Header=BB252_32 Depth=3
	testb	$1, %al
	jne	.LBB252_35
	jmp	.LBB252_46
.LBB252_35:                             # %for.body122
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB252_38
.LBB252_37:                             # %if.else134
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB252_38:                             # %if.end136
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB252_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB252_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB252_41:                             # %lor.end149
                                        #   in Loop: Header=BB252_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB252_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB252_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB252_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB252_44:                             # %lor.end164
                                        #   in Loop: Header=BB252_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB252_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB252_32
.LBB252_46:                             # %for.end189
                                        #   in Loop: Header=BB252_28 Depth=2
	jmp	.LBB252_47
.LBB252_47:                             # %if.end190
                                        #   in Loop: Header=BB252_28 Depth=2
	jmp	.LBB252_48
.LBB252_48:                             # %for.inc191
                                        #   in Loop: Header=BB252_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB252_28
.LBB252_49:                             # %for.end193
                                        #   in Loop: Header=BB252_26 Depth=1
	jmp	.LBB252_50
.LBB252_50:                             # %for.inc194
                                        #   in Loop: Header=BB252_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB252_26
.LBB252_51:                             # %for.end196
	jmp	.LBB252_52
.LBB252_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$698596173, -80(%rbp)   # imm = 0x29A3BB4D
	jne	.LBB252_54
.LBB252_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_53
.Lfunc_end252:
	.size	writeChromaCoeff.211, .Lfunc_end252-writeChromaCoeff.211
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.212 # -- Begin function write_terminating_bit.212
	.p2align	4, 0x90
	.type	write_terminating_bit.212,@function
write_terminating_bit.212:              # @write_terminating_bit.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$690579214, -8(%rbp)    # imm = 0x2929670E
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$690579214, -8(%rbp)    # imm = 0x2929670E
	jne	.LBB253_2
.LBB253_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_1
.Lfunc_end253:
	.size	write_terminating_bit.212, .Lfunc_end253-write_terminating_bit.212
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.213 # -- Begin function OneComponentChromaPrediction4x4.213
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.213,@function
OneComponentChromaPrediction4x4.213:    # @OneComponentChromaPrediction4x4.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$2104238588, -112(%rbp) # imm = 0x7D6C21FC
	movq	%rdi, -144(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB254_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB254_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB254_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB254_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB254_6
.LBB254_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB254_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB254_8
.LBB254_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB254_8:                              # %if.end13
	movl	-68(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB254_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB254_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB254_9 Depth=1
	movl	$0, -28(%rbp)
.LBB254_11:                             # %for.cond20
                                        #   Parent Loop BB254_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB254_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB254_15
.LBB254_14:                             # %cond.false
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB254_15:                             # %cond.end
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB254_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB254_21
.LBB254_17:                             # %cond.false65
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB254_20
.LBB254_19:                             # %cond.false74
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB254_20:                             # %cond.end76
                                        #   in Loop: Header=BB254_11 Depth=2
.LBB254_21:                             # %cond.end78
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB254_24
.LBB254_23:                             # %cond.false84
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB254_24:                             # %cond.end86
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB254_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB254_30
.LBB254_26:                             # %cond.false91
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB254_29
.LBB254_28:                             # %cond.false96
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB254_29:                             # %cond.end98
                                        #   in Loop: Header=BB254_11 Depth=2
.LBB254_30:                             # %cond.end100
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB254_33
.LBB254_32:                             # %cond.false111
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB254_33:                             # %cond.end114
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB254_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB254_39
.LBB254_35:                             # %cond.false119
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB254_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB254_38
.LBB254_37:                             # %cond.false129
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB254_38:                             # %cond.end132
                                        #   in Loop: Header=BB254_11 Depth=2
.LBB254_39:                             # %cond.end134
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB254_42
.LBB254_41:                             # %cond.false141
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB254_42:                             # %cond.end144
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB254_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB254_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB254_48
.LBB254_44:                             # %cond.false149
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB254_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB254_47
.LBB254_46:                             # %cond.false155
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB254_47:                             # %cond.end158
                                        #   in Loop: Header=BB254_11 Depth=2
.LBB254_48:                             # %cond.end160
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	imull	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-72(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-80(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-76(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB254_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB254_11
.LBB254_50:                             # %for.end
                                        #   in Loop: Header=BB254_9 Depth=1
	jmp	.LBB254_51
.LBB254_51:                             # %for.inc198
                                        #   in Loop: Header=BB254_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB254_9
.LBB254_52:                             # %for.end200
	cmpl	$2104238588, -112(%rbp) # imm = 0x7D6C21FC
	jne	.LBB254_54
.LBB254_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_53
.Lfunc_end254:
	.size	OneComponentChromaPrediction4x4.213, .Lfunc_end254-OneComponentChromaPrediction4x4.213
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.214 # -- Begin function OneComponentLumaPrediction4x4.214
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.214,@function
OneComponentLumaPrediction4x4.214:      # @OneComponentLumaPrediction4x4.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$630991007, -92(%rbp)   # imm = 0x259C289F
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$630991007, -92(%rbp)   # imm = 0x259C289F
	jne	.LBB255_2
.LBB255_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_1
.Lfunc_end255:
	.size	OneComponentLumaPrediction4x4.214, .Lfunc_end255-OneComponentLumaPrediction4x4.214
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.215 # -- Begin function writeCoeff4x4_CAVLC.215
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.215,@function
writeCoeff4x4_CAVLC.215:                # @writeCoeff4x4_CAVLC.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1233206832, -172(%rbp) # imm = 0x49813E30
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB256_22
# %bb.1:                                # %entry
	movq	.LJTI256_0(,%rax,8), %rax
	jmpq	*%rax
.LBB256_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB256_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB256_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB256_6
.LBB256_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB256_7
.LBB256_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB256_7:                              # %if.end
	jmp	.LBB256_23
.LBB256_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB256_23
.LBB256_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB256_23
.LBB256_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB256_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB256_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB256_14
.LBB256_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB256_15
.LBB256_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB256_15:                             # %if.end67
	jmp	.LBB256_23
.LBB256_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB256_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB256_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB256_20
.LBB256_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB256_21
.LBB256_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB256_21:                             # %if.end93
	jmp	.LBB256_23
.LBB256_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB256_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB256_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB256_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB256_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB256_27
.LBB256_26:                             # %cond.false
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB256_27
.LBB256_27:                             # %cond.end
                                        #   in Loop: Header=BB256_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB256_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB256_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB256_29:                             # %land.end
                                        #   in Loop: Header=BB256_24 Depth=1
	testb	$1, %dl
	jne	.LBB256_30
	jmp	.LBB256_41
.LBB256_30:                             # %for.body
                                        #   in Loop: Header=BB256_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB256_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB256_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB256_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB256_33:                             # %if.end110
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB256_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB256_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	$3, -28(%rbp)
.LBB256_36:                             # %if.end117
                                        #   in Loop: Header=BB256_24 Depth=1
	jmp	.LBB256_38
.LBB256_37:                             # %if.else118
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	$0, -28(%rbp)
.LBB256_38:                             # %if.end119
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB256_39:                             # %if.end121
                                        #   in Loop: Header=BB256_24 Depth=1
	jmp	.LBB256_40
.LBB256_40:                             # %for.inc
                                        #   in Loop: Header=BB256_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB256_24
.LBB256_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB256_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB256_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB256_46
.LBB256_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB256_46:                             # %cond.end136
	movl	%eax, -96(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB256_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB256_49
.LBB256_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB256_49:                             # %cond.end145
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB256_51
.LBB256_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -96(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB256_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB256_53
# %bb.52:                               # %if.then160
	movl	$0, -84(%rbp)
	jmp	.LBB256_60
.LBB256_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB256_55
# %bb.54:                               # %if.then163
	movl	$1, -84(%rbp)
	jmp	.LBB256_59
.LBB256_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB256_57
# %bb.56:                               # %if.then166
	movl	$2, -84(%rbp)
	jmp	.LBB256_58
.LBB256_57:                             # %if.else167
	movl	$3, -84(%rbp)
.LBB256_58:                             # %if.end168
	jmp	.LBB256_59
.LBB256_59:                             # %if.end169
	jmp	.LBB256_60
.LBB256_60:                             # %if.end170
	jmp	.LBB256_62
.LBB256_61:                             # %if.else171
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB256_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB256_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB256_65
.LBB256_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB256_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB256_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB256_122
.LBB256_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB256_121
# %bb.68:                               # %if.then192
	movl	$0, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB256_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB256_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB256_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB256_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB256_72:                             # %if.end202
                                        #   in Loop: Header=BB256_69 Depth=1
	movl	-80(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB256_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB256_69 Depth=1
	movl	-80(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB256_74:                             # %if.end205
                                        #   in Loop: Header=BB256_69 Depth=1
	jmp	.LBB256_75
.LBB256_75:                             # %for.inc206
                                        #   in Loop: Header=BB256_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB256_69
.LBB256_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB256_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB256_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB256_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB256_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB256_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB256_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB256_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB256_85
.LBB256_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB256_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB256_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB256_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB256_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB256_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB256_91
.LBB256_90:                             # %if.else249
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB256_91:                             # %if.end252
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	$0, -144(%rbp)
.LBB256_92:                             # %if.end253
                                        #   in Loop: Header=BB256_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB256_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB256_95
.LBB256_94:                             # %if.else257
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB256_95:                             # %if.end259
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB256_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB256_97:                             # %if.end266
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB256_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB256_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	$2, -32(%rbp)
.LBB256_100:                            # %if.end273
                                        #   in Loop: Header=BB256_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB256_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB256_86
.LBB256_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB256_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB256_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB256_106
.LBB256_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB256_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB256_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB256_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB256_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB256_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB256_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB256_108 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB256_112
.LBB256_111:                            # %if.then318
	jmp	.LBB256_120
.LBB256_112:                            # %if.end319
                                        #   in Loop: Header=BB256_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB256_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB256_108 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB256_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB256_108 Depth=1
	movl	-100(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB256_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB256_108 Depth=1
	movl	$6, -32(%rbp)
.LBB256_116:                            # %if.end327
                                        #   in Loop: Header=BB256_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-88(%rbp), %eax
	movl	-100(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB256_117:                            # %if.end341
                                        #   in Loop: Header=BB256_108 Depth=1
	jmp	.LBB256_118
.LBB256_118:                            # %for.inc342
                                        #   in Loop: Header=BB256_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB256_108
.LBB256_119:                            # %for.end344.loopexit
	jmp	.LBB256_120
.LBB256_120:                            # %for.end344
	jmp	.LBB256_121
.LBB256_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB256_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$1233206832, -172(%rbp) # imm = 0x49813E30
	jne	.LBB256_124
.LBB256_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_123
.Lfunc_end256:
	.size	writeCoeff4x4_CAVLC.215, .Lfunc_end256-writeCoeff4x4_CAVLC.215
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI256_0:
	.quad	.LBB256_2
	.quad	.LBB256_8
	.quad	.LBB256_9
	.quad	.LBB256_22
	.quad	.LBB256_22
	.quad	.LBB256_22
	.quad	.LBB256_10
	.quad	.LBB256_16
                                        # -- End function
	.text
	.globl	predict_nnz_chroma.216  # -- Begin function predict_nnz_chroma.216
	.p2align	4, 0x90
	.type	predict_nnz_chroma.216,@function
predict_nnz_chroma.216:                 # @predict_nnz_chroma.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$855108505, -64(%rbp)   # imm = 0x32F7EB99
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB257_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB257_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB257_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB257_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB257_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB257_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB257_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB257_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB257_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB257_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB257_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_13:                             # %if.end57
	jmp	.LBB257_27
.LBB257_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB257_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB257_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB257_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB257_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB257_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB257_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB257_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB257_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB257_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB257_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_26:                             # %if.end124
	jmp	.LBB257_27
.LBB257_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB257_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB257_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$855108505, -64(%rbp)   # imm = 0x32F7EB99
	jne	.LBB257_31
.LBB257_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_30
.Lfunc_end257:
	.size	predict_nnz_chroma.216, .Lfunc_end257-predict_nnz_chroma.216
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.217  # -- Begin function LumaResidualCoding.217
	.p2align	4, 0x90
	.type	LumaResidualCoding.217,@function
LumaResidualCoding.217:                 # @LumaResidualCoding.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1145868012, -44(%rbp)  # imm = 0x444C8EEC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB258_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB258_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB258_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-52(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-52(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB258_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB258_1
.LBB258_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB258_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB258_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB258_33
.LBB258_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB258_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB258_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB258_8 Depth=1
	movl	$0, -8(%rbp)
.LBB258_10:                             # %for.cond13
                                        #   Parent Loop BB258_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB258_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB258_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB258_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB258_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB258_14
.LBB258_13:                             # %if.else
                                        #   in Loop: Header=BB258_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB258_14:                             # %if.end
                                        #   in Loop: Header=BB258_10 Depth=2
	jmp	.LBB258_15
.LBB258_15:                             # %for.inc31
                                        #   in Loop: Header=BB258_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB258_10
.LBB258_16:                             # %for.end33
                                        #   in Loop: Header=BB258_8 Depth=1
	jmp	.LBB258_17
.LBB258_17:                             # %for.inc34
                                        #   in Loop: Header=BB258_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB258_8
.LBB258_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB258_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB258_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_22 Depth 2
                                        #       Child Loop BB258_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB258_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB258_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB258_22:                             # %for.cond45
                                        #   Parent Loop BB258_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB258_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB258_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB258_22 Depth=2
	movl	$0, -8(%rbp)
.LBB258_24:                             # %for.cond48
                                        #   Parent Loop BB258_20 Depth=1
                                        #     Parent Loop BB258_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB258_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB258_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB258_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB258_24
.LBB258_27:                             # %for.end55
                                        #   in Loop: Header=BB258_22 Depth=2
	jmp	.LBB258_28
.LBB258_28:                             # %for.inc56
                                        #   in Loop: Header=BB258_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB258_22
.LBB258_29:                             # %for.end58
                                        #   in Loop: Header=BB258_20 Depth=1
	jmp	.LBB258_30
.LBB258_30:                             # %for.inc59
                                        #   in Loop: Header=BB258_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB258_20
.LBB258_31:                             # %for.end61
	jmp	.LBB258_32
.LBB258_32:                             # %if.end62
	jmp	.LBB258_33
.LBB258_33:                             # %if.end63
	cmpl	$1145868012, -44(%rbp)  # imm = 0x444C8EEC
	jne	.LBB258_35
.LBB258_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_34
.Lfunc_end258:
	.size	LumaResidualCoding.217, .Lfunc_end258-LumaResidualCoding.217
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.218 # -- Begin function IntraChromaPrediction.218
	.p2align	4, 0x90
	.type	IntraChromaPrediction.218,@function
IntraChromaPrediction.218:              # @IntraChromaPrediction.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$808368264, -164(%rbp)  # imm = 0x302EB888
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB259_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB259_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB259_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_1
.LBB259_4:                              # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB259_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB259_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_8
.LBB259_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB259_8
.LBB259_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB259_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB259_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB259_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB259_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB259_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_13
.LBB259_12:                             # %cond.false32
                                        #   in Loop: Header=BB259_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB259_13
.LBB259_13:                             # %cond.end33
                                        #   in Loop: Header=BB259_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB259_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_9
.LBB259_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB259_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB259_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB259_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB259_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_20
.LBB259_19:                             # %cond.false57
                                        #   in Loop: Header=BB259_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB259_20
.LBB259_20:                             # %cond.end58
                                        #   in Loop: Header=BB259_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB259_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_16
.LBB259_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB259_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_25
.LBB259_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB259_25
.LBB259_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB259_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB259_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB259_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB259_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB259_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB259_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB259_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_37 Depth 2
                                        #       Child Loop BB259_39 Depth 3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
                                        #     Child Loop BB259_138 Depth 2
                                        #     Child Loop BB259_142 Depth 2
                                        #       Child Loop BB259_144 Depth 3
                                        #     Child Loop BB259_153 Depth 2
                                        #     Child Loop BB259_157 Depth 2
                                        #       Child Loop BB259_159 Depth 3
                                        #     Child Loop BB259_170 Depth 2
                                        #     Child Loop BB259_174 Depth 2
                                        #     Child Loop BB259_178 Depth 2
                                        #       Child Loop BB259_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB259_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB259_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB259_37:                             # %for.cond95
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_39 Depth 3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB259_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB259_37 Depth=2
	movl	$0, -84(%rbp)
.LBB259_39:                             # %for.cond99
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB259_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB259_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB259_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB259_39 Depth=3
	movq	.LJTI259_0(,%rax,8), %rax
	jmpq	*%rax
.LBB259_42:                             # %sw.bb
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_44:                             # %for.cond124
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB259_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB259_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_44
.LBB259_47:                             # %for.end138
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_48
.LBB259_48:                             # %if.end139
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_50:                             # %for.cond143
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB259_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB259_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_50
.LBB259_53:                             # %for.end162
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_54
.LBB259_54:                             # %if.end163
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_63
.LBB259_57:                             # %if.else
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_62
.LBB259_59:                             # %if.else174
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_61:                             # %if.end180
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_62
.LBB259_62:                             # %if.end181
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_63
.LBB259_63:                             # %if.end182
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_64:                             # %sw.bb183
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_66:                             # %for.cond186
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB259_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB259_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_66
.LBB259_69:                             # %for.end202
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_77
.LBB259_70:                             # %if.else203
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_72:                             # %for.cond207
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB259_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB259_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_72
.LBB259_75:                             # %for.end226
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_76
.LBB259_76:                             # %if.end227
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_77
.LBB259_77:                             # %if.end228
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_82
.LBB259_79:                             # %if.else233
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_81:                             # %if.end239
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_82
.LBB259_82:                             # %if.end240
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_83:                             # %sw.bb241
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_85:                             # %for.cond245
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB259_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB259_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_85
.LBB259_88:                             # %for.end264
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_96
.LBB259_89:                             # %if.else265
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_91:                             # %for.cond268
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB259_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB259_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_91
.LBB259_94:                             # %for.end284
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_95
.LBB259_95:                             # %if.end285
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_96
.LBB259_96:                             # %if.end286
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_101
.LBB259_98:                             # %if.else292
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_100:                            # %if.end297
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_101
.LBB259_101:                            # %if.end298
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_102:                            # %sw.bb299
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_104:                            # %for.cond302
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB259_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB259_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_104
.LBB259_107:                            # %for.end318
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_108
.LBB259_108:                            # %if.end319
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_110:                            # %for.cond323
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB259_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB259_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_110
.LBB259_113:                            # %for.end342
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_114
.LBB259_114:                            # %if.end343
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_123
.LBB259_117:                            # %if.else352
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_122
.LBB259_119:                            # %if.else357
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_121:                            # %if.end363
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_122
.LBB259_122:                            # %if.end364
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_123
.LBB259_123:                            # %if.end365
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_124:                            # %sw.epilog
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB259_125:                            # %for.cond366
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB259_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB259_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_127:                            # %for.cond371
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        #         Parent Loop BB259_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB259_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB259_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_127
.LBB259_130:                            # %for.end386
                                        #   in Loop: Header=BB259_125 Depth=4
	jmp	.LBB259_131
.LBB259_131:                            # %for.inc387
                                        #   in Loop: Header=BB259_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_125
.LBB259_132:                            # %for.end389
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_133
.LBB259_133:                            # %for.inc390
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB259_39
.LBB259_134:                            # %for.end392
                                        #   in Loop: Header=BB259_37 Depth=2
	jmp	.LBB259_135
.LBB259_135:                            # %for.inc393
                                        #   in Loop: Header=BB259_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB259_37
.LBB259_136:                            # %for.end395
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_138:                            # %for.cond398
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB259_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB259_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_138
.LBB259_141:                            # %for.end414
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_142:                            # %for.cond415
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB259_142 Depth=2
	movl	$0, -8(%rbp)
.LBB259_144:                            # %for.cond419
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB259_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB259_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_144
.LBB259_147:                            # %for.end436
                                        #   in Loop: Header=BB259_142 Depth=2
	jmp	.LBB259_148
.LBB259_148:                            # %for.inc437
                                        #   in Loop: Header=BB259_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_142
.LBB259_149:                            # %for.end439
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_150
.LBB259_150:                            # %if.end440
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_153:                            # %for.cond447
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB259_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB259_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_153
.LBB259_156:                            # %for.end468
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_157:                            # %for.cond469
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB259_157 Depth=2
	movl	$0, -8(%rbp)
.LBB259_159:                            # %for.cond473
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB259_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB259_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_159
.LBB259_162:                            # %for.end490
                                        #   in Loop: Header=BB259_157 Depth=2
	jmp	.LBB259_163
.LBB259_163:                            # %for.inc491
                                        #   in Loop: Header=BB259_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_157
.LBB259_164:                            # %for.end493
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_165
.LBB259_165:                            # %if.end494
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB259_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB259_170:                            # %for.cond519
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB259_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB259_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB259_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_170
.LBB259_173:                            # %for.end540
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB259_174:                            # %for.cond556
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB259_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB259_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB259_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_174
.LBB259_177:                            # %for.end577
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB259_178:                            # %for.cond606
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB259_178 Depth=2
	movl	$0, -4(%rbp)
.LBB259_180:                            # %for.cond610
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB259_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB259_184
.LBB259_183:                            # %cond.false630
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB259_184:                            # %cond.end643
                                        #   in Loop: Header=BB259_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB259_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB259_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB259_190
.LBB259_186:                            # %cond.false648
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB259_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB259_189
.LBB259_188:                            # %cond.false666
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB259_189:                            # %cond.end679
                                        #   in Loop: Header=BB259_180 Depth=3
.LBB259_190:                            # %cond.end681
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_180
.LBB259_192:                            # %for.end694
                                        #   in Loop: Header=BB259_178 Depth=2
	jmp	.LBB259_193
.LBB259_193:                            # %for.inc695
                                        #   in Loop: Header=BB259_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_178
.LBB259_194:                            # %for.end697
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_195
.LBB259_195:                            # %if.end698
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_196
.LBB259_196:                            # %for.inc699
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB259_35
.LBB259_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB259_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB259_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB259_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB259_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_199
.LBB259_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB259_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_219 Depth 2
                                        #       Child Loop BB259_221 Depth 3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB259_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB259_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB259_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB259_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_207:                            # %if.end723
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB259_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_217
.LBB259_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB259_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_217
.LBB259_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB259_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB259_218
.LBB259_217:                            # %if.then749
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_218:                            # %if.end750
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB259_219:                            # %for.cond751
                                        #   Parent Loop BB259_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_221 Depth 3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB259_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB259_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB259_221:                            # %for.cond757
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB259_221 Depth=3
	movl	$0, -44(%rbp)
.LBB259_223:                            # %for.cond761
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB259_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB259_225:                            # %for.cond765
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        #         Parent Loop BB259_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB259_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB259_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_227:                            # %for.cond770
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        #         Parent Loop BB259_223 Depth=4
                                        #           Parent Loop BB259_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB259_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB259_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB259_227
.LBB259_230:                            # %for.end803
                                        #   in Loop: Header=BB259_225 Depth=5
	jmp	.LBB259_231
.LBB259_231:                            # %for.inc804
                                        #   in Loop: Header=BB259_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_225
.LBB259_232:                            # %for.end806
                                        #   in Loop: Header=BB259_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB259_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB259_223
.LBB259_234:                            # %for.end810
                                        #   in Loop: Header=BB259_221 Depth=3
	jmp	.LBB259_235
.LBB259_235:                            # %for.inc811
                                        #   in Loop: Header=BB259_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB259_221
.LBB259_236:                            # %for.end813
                                        #   in Loop: Header=BB259_219 Depth=2
	jmp	.LBB259_237
.LBB259_237:                            # %for.inc814
                                        #   in Loop: Header=BB259_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB259_219
.LBB259_238:                            # %for.end816
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB259_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB259_240:                            # %if.end820
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_241:                            # %for.inc821
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB259_203
.LBB259_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB259_243:                            # %if.end824
	cmpl	$808368264, -164(%rbp)  # imm = 0x302EB888
	jne	.LBB259_245
.LBB259_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_244
.Lfunc_end259:
	.size	IntraChromaPrediction.218, .Lfunc_end259-IntraChromaPrediction.218
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI259_0:
	.quad	.LBB259_42
	.quad	.LBB259_64
	.quad	.LBB259_83
	.quad	.LBB259_102
                                        # -- End function
	.text
	.globl	ZeroRef.219             # -- Begin function ZeroRef.219
	.p2align	4, 0x90
	.type	ZeroRef.219,@function
ZeroRef.219:                            # @ZeroRef.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1643002502, -24(%rbp)  # imm = 0x61EE3A86
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB260_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB260_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB260_1 Depth=1
	movl	$0, -16(%rbp)
.LBB260_3:                              # %for.cond1
                                        #   Parent Loop BB260_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB260_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB260_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB260_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB260_11
.LBB260_6:                              # %if.end
                                        #   in Loop: Header=BB260_3 Depth=2
	jmp	.LBB260_7
.LBB260_7:                              # %for.inc
                                        #   in Loop: Header=BB260_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB260_3
.LBB260_8:                              # %for.end
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_9
.LBB260_9:                              # %for.inc10
                                        #   in Loop: Header=BB260_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB260_1
.LBB260_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB260_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1643002502, -24(%rbp)  # imm = 0x61EE3A86
	jne	.LBB260_13
.LBB260_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_12
.Lfunc_end260:
	.size	ZeroRef.219, .Lfunc_end260-ZeroRef.219
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.220        # -- Begin function BType2CtxRef.220
	.p2align	4, 0x90
	.type	BType2CtxRef.220,@function
BType2CtxRef.220:                       # @BType2CtxRef.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1939051067, -20(%rbp)  # imm = 0x7393923B
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB261_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB261_3
.LBB261_2:                              # %if.else
	movl	$1, -12(%rbp)
.LBB261_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1939051067, -20(%rbp)  # imm = 0x7393923B
	jne	.LBB261_5
.LBB261_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_4
.Lfunc_end261:
	.size	BType2CtxRef.220, .Lfunc_end261-BType2CtxRef.220
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.221  # -- Begin function predict_nnz_chroma.221
	.p2align	4, 0x90
	.type	predict_nnz_chroma.221,@function
predict_nnz_chroma.221:                 # @predict_nnz_chroma.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$705689228, -64(%rbp)   # imm = 0x2A0FF68C
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB262_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB262_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB262_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_13:                             # %if.end57
	jmp	.LBB262_27
.LBB262_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB262_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB262_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_26:                             # %if.end124
	jmp	.LBB262_27
.LBB262_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB262_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB262_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$705689228, -64(%rbp)   # imm = 0x2A0FF68C
	jne	.LBB262_31
.LBB262_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_30
.Lfunc_end262:
	.size	predict_nnz_chroma.221, .Lfunc_end262-predict_nnz_chroma.221
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.222 # -- Begin function write_terminating_bit.222
	.p2align	4, 0x90
	.type	write_terminating_bit.222,@function
write_terminating_bit.222:              # @write_terminating_bit.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1158358689, -8(%rbp)   # imm = 0x450B26A1
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1158358689, -8(%rbp)   # imm = 0x450B26A1
	jne	.LBB263_2
.LBB263_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_1
.Lfunc_end263:
	.size	write_terminating_bit.222, .Lfunc_end263-write_terminating_bit.222
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.223 # -- Begin function writeMotionInfo2NAL.223
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.223,@function
writeMotionInfo2NAL.223:                # @writeMotionInfo2NAL.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1804921174, -56(%rbp)  # imm = 0x6B94E956
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB264_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB264_3
.LBB264_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB264_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB264_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB264_6
.LBB264_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB264_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB264_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB264_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB264_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB264_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB264_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB264_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB264_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB264_39
.LBB264_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB264_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB264_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB264_15 Depth=1
	movl	$0, -16(%rbp)
.LBB264_17:                             # %for.cond45
                                        #   Parent Loop BB264_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB264_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB264_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB264_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB264_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB264_22
.LBB264_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB264_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB264_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB264_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB264_22:                             # %if.end
                                        #   in Loop: Header=BB264_17 Depth=2
	jmp	.LBB264_23
.LBB264_23:                             # %for.inc
                                        #   in Loop: Header=BB264_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB264_17
.LBB264_24:                             # %for.end
                                        #   in Loop: Header=BB264_15 Depth=1
	jmp	.LBB264_25
.LBB264_25:                             # %for.inc79
                                        #   in Loop: Header=BB264_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_15
.LBB264_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB264_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB264_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB264_27 Depth=1
	movl	$0, -16(%rbp)
.LBB264_29:                             # %for.cond86
                                        #   Parent Loop BB264_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB264_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB264_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB264_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB264_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB264_34
.LBB264_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB264_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB264_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB264_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB264_34:                             # %if.end126
                                        #   in Loop: Header=BB264_29 Depth=2
	jmp	.LBB264_35
.LBB264_35:                             # %for.inc127
                                        #   in Loop: Header=BB264_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB264_29
.LBB264_36:                             # %for.end129
                                        #   in Loop: Header=BB264_27 Depth=1
	jmp	.LBB264_37
.LBB264_37:                             # %for.inc130
                                        #   in Loop: Header=BB264_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_27
.LBB264_38:                             # %for.end132
	jmp	.LBB264_39
.LBB264_39:                             # %if.end133
	jmp	.LBB264_40
.LBB264_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB264_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB264_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB264_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB264_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB264_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB264_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB264_45 Depth=1
	movl	$0, -16(%rbp)
.LBB264_47:                             # %for.cond155
                                        #   Parent Loop BB264_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB264_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB264_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB264_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB264_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB264_52
.LBB264_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB264_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB264_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB264_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB264_52:                             # %if.end197
                                        #   in Loop: Header=BB264_47 Depth=2
	jmp	.LBB264_53
.LBB264_53:                             # %for.inc198
                                        #   in Loop: Header=BB264_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB264_47
.LBB264_54:                             # %for.end200
                                        #   in Loop: Header=BB264_45 Depth=1
	jmp	.LBB264_55
.LBB264_55:                             # %for.inc201
                                        #   in Loop: Header=BB264_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_45
.LBB264_56:                             # %for.end203
	jmp	.LBB264_57
.LBB264_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB264_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB264_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB264_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB264_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB264_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB264_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB264_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB264_63 Depth=1
	movl	$0, -16(%rbp)
.LBB264_65:                             # %for.cond227
                                        #   Parent Loop BB264_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB264_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB264_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB264_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB264_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB264_70
.LBB264_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB264_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB264_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB264_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB264_70:                             # %if.end269
                                        #   in Loop: Header=BB264_65 Depth=2
	jmp	.LBB264_71
.LBB264_71:                             # %for.inc270
                                        #   in Loop: Header=BB264_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB264_65
.LBB264_72:                             # %for.end272
                                        #   in Loop: Header=BB264_63 Depth=1
	jmp	.LBB264_73
.LBB264_73:                             # %for.inc273
                                        #   in Loop: Header=BB264_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_63
.LBB264_74:                             # %for.end275
	jmp	.LBB264_75
.LBB264_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1804921174, -56(%rbp)  # imm = 0x6B94E956
	jne	.LBB264_77
.LBB264_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_76
.Lfunc_end264:
	.size	writeMotionInfo2NAL.223, .Lfunc_end264-writeMotionInfo2NAL.223
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.224 # -- Begin function OneComponentChromaPrediction4x4.224
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.224,@function
OneComponentChromaPrediction4x4.224:    # @OneComponentChromaPrediction4x4.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1514467754, -116(%rbp) # imm = 0x5A44F1AA
	movq	%rdi, -136(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB265_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB265_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB265_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB265_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB265_6
.LBB265_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB265_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB265_8
.LBB265_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB265_8:                              # %if.end13
	movl	-76(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB265_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB265_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB265_9 Depth=1
	movl	$0, -32(%rbp)
.LBB265_11:                             # %for.cond20
                                        #   Parent Loop BB265_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB265_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-32(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	-88(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB265_15
.LBB265_14:                             # %cond.false
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB265_15:                             # %cond.end
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB265_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB265_21
.LBB265_17:                             # %cond.false65
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB265_20
.LBB265_19:                             # %cond.false74
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB265_20:                             # %cond.end76
                                        #   in Loop: Header=BB265_11 Depth=2
.LBB265_21:                             # %cond.end78
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB265_24
.LBB265_23:                             # %cond.false84
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB265_24:                             # %cond.end86
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB265_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB265_30
.LBB265_26:                             # %cond.false91
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB265_29
.LBB265_28:                             # %cond.false96
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB265_29:                             # %cond.end98
                                        #   in Loop: Header=BB265_11 Depth=2
.LBB265_30:                             # %cond.end100
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB265_33
.LBB265_32:                             # %cond.false111
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB265_33:                             # %cond.end114
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB265_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB265_39
.LBB265_35:                             # %cond.false119
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB265_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB265_38
.LBB265_37:                             # %cond.false129
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB265_38:                             # %cond.end132
                                        #   in Loop: Header=BB265_11 Depth=2
.LBB265_39:                             # %cond.end134
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB265_42
.LBB265_41:                             # %cond.false141
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB265_42:                             # %cond.end144
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB265_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB265_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB265_48
.LBB265_44:                             # %cond.false149
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB265_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB265_47
.LBB265_46:                             # %cond.false155
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB265_47:                             # %cond.end158
                                        #   in Loop: Header=BB265_11 Depth=2
.LBB265_48:                             # %cond.end160
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	imull	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-72(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-64(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-60(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB265_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB265_11
.LBB265_50:                             # %for.end
                                        #   in Loop: Header=BB265_9 Depth=1
	jmp	.LBB265_51
.LBB265_51:                             # %for.inc198
                                        #   in Loop: Header=BB265_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB265_9
.LBB265_52:                             # %for.end200
	cmpl	$1514467754, -116(%rbp) # imm = 0x5A44F1AA
	jne	.LBB265_54
.LBB265_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_53
.Lfunc_end265:
	.size	OneComponentChromaPrediction4x4.224, .Lfunc_end265-OneComponentChromaPrediction4x4.224
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.225 # -- Begin function proceed2nextMacroblock.225
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.225,@function
proceed2nextMacroblock.225:             # @proceed2nextMacroblock.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$677245927, -28(%rbp)   # imm = 0x285DF3E7
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB266_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB266_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB266_9
.LBB266_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB266_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_7
.LBB266_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_7:                              # %if.end
	jmp	.LBB266_8
.LBB266_8:                              # %if.end48
	jmp	.LBB266_9
.LBB266_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB266_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB266_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB266_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB266_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB266_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_16
.LBB266_15:                             # %if.else86
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_16:                             # %if.end94
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB266_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB266_20
.LBB266_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB266_21
.LBB266_20:                             # %if.then107
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB266_22
.LBB266_21:                             # %if.else114
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB266_22:                             # %if.end121
                                        #   in Loop: Header=BB266_12 Depth=1
	jmp	.LBB266_23
.LBB266_23:                             # %if.end122
                                        #   in Loop: Header=BB266_12 Depth=1
	jmp	.LBB266_24
.LBB266_24:                             # %for.inc
                                        #   in Loop: Header=BB266_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB266_12
.LBB266_25:                             # %for.end
	jmp	.LBB266_34
.LBB266_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB266_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB266_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB266_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_32
.LBB266_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_32:                             # %if.end155
	jmp	.LBB266_33
.LBB266_33:                             # %if.end156
	jmp	.LBB266_34
.LBB266_34:                             # %if.end157
	jmp	.LBB266_35
.LBB266_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB266_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB266_38
.LBB266_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB266_38:                             # %if.end167
	cmpl	$677245927, -28(%rbp)   # imm = 0x285DF3E7
	jne	.LBB266_40
.LBB266_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_39
.Lfunc_end266:
	.size	proceed2nextMacroblock.225, .Lfunc_end266-proceed2nextMacroblock.225
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.226    # -- Begin function writeChromaCoeff.226
	.p2align	4, 0x90
	.type	writeChromaCoeff.226,@function
writeChromaCoeff.226:                   # @writeChromaCoeff.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1996479977, -80(%rbp)  # imm = 0x76FFDDE9
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB267_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB267_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB267_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB267_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB267_21
.LBB267_5:                              # %if.else
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB267_6:                              # %for.cond18
                                        #   Parent Loop BB267_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB267_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB267_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB267_8:                              # %land.end
                                        #   in Loop: Header=BB267_6 Depth=2
	testb	$1, %al
	jne	.LBB267_9
	jmp	.LBB267_20
.LBB267_9:                              # %for.body21
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB267_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB267_12
.LBB267_11:                             # %if.else29
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB267_12:                             # %if.end
                                        #   in Loop: Header=BB267_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB267_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB267_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB267_15:                             # %lor.end
                                        #   in Loop: Header=BB267_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB267_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB267_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB267_18:                             # %lor.end45
                                        #   in Loop: Header=BB267_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB267_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB267_6
.LBB267_20:                             # %for.end
                                        #   in Loop: Header=BB267_2 Depth=1
	jmp	.LBB267_21
.LBB267_21:                             # %if.end58
                                        #   in Loop: Header=BB267_2 Depth=1
	jmp	.LBB267_22
.LBB267_22:                             # %for.inc59
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB267_2
.LBB267_23:                             # %for.end61
	jmp	.LBB267_24
.LBB267_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB267_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB267_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_28 Depth 2
                                        #       Child Loop BB267_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB267_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB267_26 Depth=1
	movl	$0, -28(%rbp)
.LBB267_28:                             # %for.cond69
                                        #   Parent Loop BB267_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB267_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB267_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB267_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB267_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB267_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB267_47
.LBB267_31:                             # %if.else84
                                        #   in Loop: Header=BB267_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB267_32:                             # %for.cond115
                                        #   Parent Loop BB267_26 Depth=1
                                        #     Parent Loop BB267_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB267_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB267_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB267_34:                             # %land.end121
                                        #   in Loop: Header=BB267_32 Depth=3
	testb	$1, %al
	jne	.LBB267_35
	jmp	.LBB267_46
.LBB267_35:                             # %for.body122
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB267_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB267_38
.LBB267_37:                             # %if.else134
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB267_38:                             # %if.end136
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB267_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB267_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB267_41:                             # %lor.end149
                                        #   in Loop: Header=BB267_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB267_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB267_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB267_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB267_44:                             # %lor.end164
                                        #   in Loop: Header=BB267_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB267_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB267_32
.LBB267_46:                             # %for.end189
                                        #   in Loop: Header=BB267_28 Depth=2
	jmp	.LBB267_47
.LBB267_47:                             # %if.end190
                                        #   in Loop: Header=BB267_28 Depth=2
	jmp	.LBB267_48
.LBB267_48:                             # %for.inc191
                                        #   in Loop: Header=BB267_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB267_28
.LBB267_49:                             # %for.end193
                                        #   in Loop: Header=BB267_26 Depth=1
	jmp	.LBB267_50
.LBB267_50:                             # %for.inc194
                                        #   in Loop: Header=BB267_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB267_26
.LBB267_51:                             # %for.end196
	jmp	.LBB267_52
.LBB267_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1996479977, -80(%rbp)  # imm = 0x76FFDDE9
	jne	.LBB267_54
.LBB267_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_53
.Lfunc_end267:
	.size	writeChromaCoeff.226, .Lfunc_end267-writeChromaCoeff.226
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.227        # -- Begin function MBType2Value.227
	.p2align	4, 0x90
	.type	MBType2Value.227,@function
MBType2Value.227:                       # @MBType2Value.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1221252357, -36(%rbp)  # imm = 0x48CAD505
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB268_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB268_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB268_4
.LBB268_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB268_26
.LBB268_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB268_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB268_26
.LBB268_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB268_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB268_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB268_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB268_26
.LBB268_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB268_26
.LBB268_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_26
.LBB268_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB268_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB268_26
.LBB268_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB268_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB268_17
.LBB268_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB268_26
.LBB268_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB268_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_26
.LBB268_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB268_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB268_26
.LBB268_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB268_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_26
.LBB268_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB268_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_26
.LBB268_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB268_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1221252357, -36(%rbp)  # imm = 0x48CAD505
	jne	.LBB268_28
.LBB268_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_27
.Lfunc_end268:
	.size	MBType2Value.227, .Lfunc_end268-MBType2Value.227
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.228 # -- Begin function ChromaPrediction4x4.228
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.228,@function
ChromaPrediction4x4.228:                # @ChromaPrediction4x4.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1682286434, -68(%rbp)  # imm = 0x6445A762
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB269_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB269_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB269_6
.LBB269_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB269_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB269_5:                              # %land.end
.LBB269_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB269_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB269_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB269_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB269_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB269_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB269_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB269_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB269_15
.LBB269_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB269_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB269_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB269_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB269_87
.LBB269_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB269_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB269_21
.LBB269_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB269_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB269_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB269_24
.LBB269_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB269_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB269_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB269_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB269_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_29:                             # %for.cond52
                                        #   Parent Loop BB269_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB269_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB269_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_29
.LBB269_32:                             # %for.end
                                        #   in Loop: Header=BB269_27 Depth=1
	jmp	.LBB269_33
.LBB269_33:                             # %for.inc99
                                        #   in Loop: Header=BB269_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_27
.LBB269_34:                             # %for.end101
	jmp	.LBB269_55
.LBB269_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB269_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB269_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_39:                             # %for.cond109
                                        #   Parent Loop BB269_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB269_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB269_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_39
.LBB269_42:                             # %for.end139
                                        #   in Loop: Header=BB269_37 Depth=1
	jmp	.LBB269_43
.LBB269_43:                             # %for.inc140
                                        #   in Loop: Header=BB269_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_37
.LBB269_44:                             # %for.end142
	jmp	.LBB269_54
.LBB269_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB269_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_48:                             # %for.cond148
                                        #   Parent Loop BB269_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB269_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB269_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_48
.LBB269_51:                             # %for.end178
                                        #   in Loop: Header=BB269_46 Depth=1
	jmp	.LBB269_52
.LBB269_52:                             # %for.inc179
                                        #   in Loop: Header=BB269_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_46
.LBB269_53:                             # %for.end181
	jmp	.LBB269_54
.LBB269_54:                             # %if.end182
	jmp	.LBB269_55
.LBB269_55:                             # %if.end183
	jmp	.LBB269_87
.LBB269_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB269_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB269_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_60:                             # %for.cond192
                                        #   Parent Loop BB269_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB269_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB269_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_60
.LBB269_63:                             # %for.end208
                                        #   in Loop: Header=BB269_58 Depth=1
	jmp	.LBB269_64
.LBB269_64:                             # %for.inc209
                                        #   in Loop: Header=BB269_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_58
.LBB269_65:                             # %for.end211
	jmp	.LBB269_86
.LBB269_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB269_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB269_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_70:                             # %for.cond220
                                        #   Parent Loop BB269_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB269_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB269_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_70
.LBB269_73:                             # %for.end233
                                        #   in Loop: Header=BB269_68 Depth=1
	jmp	.LBB269_74
.LBB269_74:                             # %for.inc234
                                        #   in Loop: Header=BB269_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_68
.LBB269_75:                             # %for.end236
	jmp	.LBB269_85
.LBB269_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB269_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB269_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB269_79:                             # %for.cond242
                                        #   Parent Loop BB269_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB269_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB269_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_79
.LBB269_82:                             # %for.end255
                                        #   in Loop: Header=BB269_77 Depth=1
	jmp	.LBB269_83
.LBB269_83:                             # %for.inc256
                                        #   in Loop: Header=BB269_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_77
.LBB269_84:                             # %for.end258
	jmp	.LBB269_85
.LBB269_85:                             # %if.end259
	jmp	.LBB269_86
.LBB269_86:                             # %if.end260
	jmp	.LBB269_87
.LBB269_87:                             # %if.end261
	cmpl	$1682286434, -68(%rbp)  # imm = 0x6445A762
	jne	.LBB269_89
.LBB269_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_88
.Lfunc_end269:
	.size	ChromaPrediction4x4.228, .Lfunc_end269-ChromaPrediction4x4.228
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.229 # -- Begin function writeMotionVector8x8.229
	.p2align	4, 0x90
	.type	writeMotionVector8x8.229,@function
writeMotionVector8x8.229:               # @writeMotionVector8x8.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$800475398, -96(%rbp)   # imm = 0x2FB64906
	movl	%edi, -84(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -100(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB270_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB270_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB270_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB270_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB270_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB270_7
.LBB270_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB270_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB270_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB270_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_11 Depth 2
                                        #       Child Loop BB270_13 Depth 3
                                        #         Child Loop BB270_15 Depth 4
                                        #           Child Loop BB270_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB270_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB270_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB270_11:                             # %for.cond22
                                        #   Parent Loop BB270_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB270_13 Depth 3
                                        #         Child Loop BB270_15 Depth 4
                                        #           Child Loop BB270_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB270_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	$0, -20(%rbp)
.LBB270_13:                             # %for.cond25
                                        #   Parent Loop BB270_9 Depth=1
                                        #     Parent Loop BB270_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB270_15 Depth 4
                                        #           Child Loop BB270_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB270_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB270_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB270_15:                             # %for.cond53
                                        #   Parent Loop BB270_9 Depth=1
                                        #     Parent Loop BB270_11 Depth=2
                                        #       Parent Loop BB270_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB270_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB270_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB270_15 Depth=4
	movl	$0, -44(%rbp)
.LBB270_17:                             # %for.cond57
                                        #   Parent Loop BB270_9 Depth=1
                                        #     Parent Loop BB270_11 Depth=2
                                        #       Parent Loop BB270_13 Depth=3
                                        #         Parent Loop BB270_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB270_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB270_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB270_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB270_17
.LBB270_20:                             # %for.end
                                        #   in Loop: Header=BB270_15 Depth=4
	jmp	.LBB270_21
.LBB270_21:                             # %for.inc70
                                        #   in Loop: Header=BB270_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB270_15
.LBB270_22:                             # %for.end72
                                        #   in Loop: Header=BB270_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB270_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB270_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB270_25
.LBB270_24:                             # %if.else
                                        #   in Loop: Header=BB270_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB270_25:                             # %if.end78
                                        #   in Loop: Header=BB270_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB270_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB270_13
.LBB270_27:                             # %for.end90
                                        #   in Loop: Header=BB270_11 Depth=2
	jmp	.LBB270_28
.LBB270_28:                             # %for.inc91
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB270_11
.LBB270_29:                             # %for.end93
                                        #   in Loop: Header=BB270_9 Depth=1
	jmp	.LBB270_30
.LBB270_30:                             # %for.inc94
                                        #   in Loop: Header=BB270_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB270_9
.LBB270_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$800475398, -96(%rbp)   # imm = 0x2FB64906
	jne	.LBB270_33
.LBB270_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_32
.Lfunc_end270:
	.size	writeMotionVector8x8.229, .Lfunc_end270-writeMotionVector8x8.229
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.230  # -- Begin function predict_nnz_chroma.230
	.p2align	4, 0x90
	.type	predict_nnz_chroma.230,@function
predict_nnz_chroma.230:                 # @predict_nnz_chroma.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$60142203, -64(%rbp)    # imm = 0x395B27B
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB271_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB271_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB271_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB271_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB271_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB271_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB271_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB271_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB271_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB271_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB271_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB271_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB271_13:                             # %if.end57
	jmp	.LBB271_27
.LBB271_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB271_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB271_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB271_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB271_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB271_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB271_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB271_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB271_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB271_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB271_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB271_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB271_26:                             # %if.end124
	jmp	.LBB271_27
.LBB271_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB271_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB271_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$60142203, -64(%rbp)    # imm = 0x395B27B
	jne	.LBB271_31
.LBB271_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_30
.Lfunc_end271:
	.size	predict_nnz_chroma.230, .Lfunc_end271-predict_nnz_chroma.230
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.231  # -- Begin function predict_nnz_chroma.231
	.p2align	4, 0x90
	.type	predict_nnz_chroma.231,@function
predict_nnz_chroma.231:                 # @predict_nnz_chroma.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$36726008, -64(%rbp)    # imm = 0x23064F8
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB272_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB272_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB272_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB272_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB272_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB272_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB272_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB272_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB272_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB272_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB272_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB272_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB272_13:                             # %if.end57
	jmp	.LBB272_27
.LBB272_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB272_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB272_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB272_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB272_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB272_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB272_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB272_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB272_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB272_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB272_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB272_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB272_26:                             # %if.end124
	jmp	.LBB272_27
.LBB272_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB272_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB272_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$36726008, -64(%rbp)    # imm = 0x23064F8
	jne	.LBB272_31
.LBB272_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_30
.Lfunc_end272:
	.size	predict_nnz_chroma.231, .Lfunc_end272-predict_nnz_chroma.231
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.232  # -- Begin function LumaResidualCoding.232
	.p2align	4, 0x90
	.type	LumaResidualCoding.232,@function
LumaResidualCoding.232:                 # @LumaResidualCoding.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1402499849, -44(%rbp)  # imm = 0x53987309
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB273_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB273_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB273_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-52(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-52(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB273_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB273_1
.LBB273_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB273_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB273_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB273_33
.LBB273_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB273_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB273_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB273_8 Depth=1
	movl	$0, -8(%rbp)
.LBB273_10:                             # %for.cond13
                                        #   Parent Loop BB273_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB273_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB273_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB273_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB273_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB273_14
.LBB273_13:                             # %if.else
                                        #   in Loop: Header=BB273_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB273_14:                             # %if.end
                                        #   in Loop: Header=BB273_10 Depth=2
	jmp	.LBB273_15
.LBB273_15:                             # %for.inc31
                                        #   in Loop: Header=BB273_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB273_10
.LBB273_16:                             # %for.end33
                                        #   in Loop: Header=BB273_8 Depth=1
	jmp	.LBB273_17
.LBB273_17:                             # %for.inc34
                                        #   in Loop: Header=BB273_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_8
.LBB273_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB273_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB273_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_22 Depth 2
                                        #       Child Loop BB273_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB273_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB273_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB273_22:                             # %for.cond45
                                        #   Parent Loop BB273_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB273_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB273_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB273_22 Depth=2
	movl	$0, -8(%rbp)
.LBB273_24:                             # %for.cond48
                                        #   Parent Loop BB273_20 Depth=1
                                        #     Parent Loop BB273_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB273_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB273_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB273_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB273_24
.LBB273_27:                             # %for.end55
                                        #   in Loop: Header=BB273_22 Depth=2
	jmp	.LBB273_28
.LBB273_28:                             # %for.inc56
                                        #   in Loop: Header=BB273_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_22
.LBB273_29:                             # %for.end58
                                        #   in Loop: Header=BB273_20 Depth=1
	jmp	.LBB273_30
.LBB273_30:                             # %for.inc59
                                        #   in Loop: Header=BB273_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB273_20
.LBB273_31:                             # %for.end61
	jmp	.LBB273_32
.LBB273_32:                             # %if.end62
	jmp	.LBB273_33
.LBB273_33:                             # %if.end63
	cmpl	$1402499849, -44(%rbp)  # imm = 0x53987309
	jne	.LBB273_35
.LBB273_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_34
.Lfunc_end273:
	.size	LumaResidualCoding.232, .Lfunc_end273-LumaResidualCoding.232
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.233  # -- Begin function LumaResidualCoding.233
	.p2align	4, 0x90
	.type	LumaResidualCoding.233,@function
LumaResidualCoding.233:                 # @LumaResidualCoding.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$244021050, -40(%rbp)   # imm = 0xE8B773A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB274_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB274_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB274_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB274_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB274_1
.LBB274_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB274_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB274_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB274_33
.LBB274_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB274_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB274_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB274_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB274_8 Depth=1
	movl	$0, -12(%rbp)
.LBB274_10:                             # %for.cond13
                                        #   Parent Loop BB274_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB274_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB274_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB274_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB274_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB274_14
.LBB274_13:                             # %if.else
                                        #   in Loop: Header=BB274_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB274_14:                             # %if.end
                                        #   in Loop: Header=BB274_10 Depth=2
	jmp	.LBB274_15
.LBB274_15:                             # %for.inc31
                                        #   in Loop: Header=BB274_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_10
.LBB274_16:                             # %for.end33
                                        #   in Loop: Header=BB274_8 Depth=1
	jmp	.LBB274_17
.LBB274_17:                             # %for.inc34
                                        #   in Loop: Header=BB274_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB274_8
.LBB274_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB274_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB274_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB274_22 Depth 2
                                        #       Child Loop BB274_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB274_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB274_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB274_22:                             # %for.cond45
                                        #   Parent Loop BB274_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB274_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB274_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB274_22 Depth=2
	movl	$0, -12(%rbp)
.LBB274_24:                             # %for.cond48
                                        #   Parent Loop BB274_20 Depth=1
                                        #     Parent Loop BB274_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB274_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB274_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB274_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_24
.LBB274_27:                             # %for.end55
                                        #   in Loop: Header=BB274_22 Depth=2
	jmp	.LBB274_28
.LBB274_28:                             # %for.inc56
                                        #   in Loop: Header=BB274_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB274_22
.LBB274_29:                             # %for.end58
                                        #   in Loop: Header=BB274_20 Depth=1
	jmp	.LBB274_30
.LBB274_30:                             # %for.inc59
                                        #   in Loop: Header=BB274_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB274_20
.LBB274_31:                             # %for.end61
	jmp	.LBB274_32
.LBB274_32:                             # %if.end62
	jmp	.LBB274_33
.LBB274_33:                             # %if.end63
	cmpl	$244021050, -40(%rbp)   # imm = 0xE8B773A
	jne	.LBB274_35
.LBB274_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_34
.Lfunc_end274:
	.size	LumaResidualCoding.233, .Lfunc_end274-LumaResidualCoding.233
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.234        # -- Begin function writeMBLayer.234
	.p2align	4, 0x90
	.type	writeMBLayer.234,@function
writeMBLayer.234:                       # @writeMBLayer.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1054632048, -96(%rbp)  # imm = 0x3EDC6870
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB275_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB275_3
.LBB275_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB275_3
.LBB275_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB275_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB275_9
.LBB275_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB275_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB275_8
.LBB275_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB275_8
.LBB275_8:                              # %cond.end14
.LBB275_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB275_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB275_24
.LBB275_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB275_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB275_17
	jmp	.LBB275_18
.LBB275_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB275_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB275_18
	jmp	.LBB275_17
.LBB275_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB275_17
	jmp	.LBB275_18
.LBB275_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB275_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB275_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB275_23
.LBB275_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB275_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB275_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB275_23:                             # %if.end50
	jmp	.LBB275_24
.LBB275_24:                             # %if.end51
	jmp	.LBB275_25
.LBB275_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB275_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB275_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB275_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB275_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB275_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB275_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB275_35
.LBB275_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB275_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB275_38
.LBB275_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB275_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB275_39:                             # %if.end96
	jmp	.LBB275_40
.LBB275_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB275_43
.LBB275_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB275_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB275_89
.LBB275_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB275_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB275_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB275_49
.LBB275_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB275_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB275_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB275_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB275_55
.LBB275_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB275_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB275_58
.LBB275_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB275_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB275_59:                             # %if.end198
	jmp	.LBB275_60
.LBB275_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB275_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB275_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB275_64
.LBB275_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB275_64:                             # %if.end226
	jmp	.LBB275_88
.LBB275_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB275_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB275_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB275_76
.LBB275_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB275_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB275_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB275_72:                             # %if.end281
	jmp	.LBB275_73
.LBB275_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB275_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB275_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB275_87
.LBB275_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB275_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB275_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB275_77 Depth=1
	movl	$0, -44(%rbp)
.LBB275_79:                             # %for.cond310
                                        #   Parent Loop BB275_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB275_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB275_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB275_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB275_79
.LBB275_82:                             # %for.end
                                        #   in Loop: Header=BB275_77 Depth=1
	jmp	.LBB275_83
.LBB275_83:                             # %for.inc322
                                        #   in Loop: Header=BB275_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB275_77
.LBB275_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB275_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB275_86:                             # %if.end345
	jmp	.LBB275_87
.LBB275_87:                             # %if.end346
	jmp	.LBB275_88
.LBB275_88:                             # %if.end347
	jmp	.LBB275_89
.LBB275_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB275_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB275_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB275_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB275_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB275_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB275_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB275_98
.LBB275_97:                             # %if.else380
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB275_98:                             # %if.end382
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB275_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB275_101
.LBB275_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB275_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB275_101:                            # %lor.end415
                                        #   in Loop: Header=BB275_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB275_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB275_94
.LBB275_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB275_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB275_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB275_114
.LBB275_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB275_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB275_110
.LBB275_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB275_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB275_113
.LBB275_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB275_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB275_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB275_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB275_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB275_120
.LBB275_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB275_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB275_119:                            # %if.end483
	jmp	.LBB275_120
.LBB275_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB275_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB275_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB275_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB275_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB275_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB275_129
.LBB275_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB275_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB275_128:                            # %if.end516
	jmp	.LBB275_129
.LBB275_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1054632048, -96(%rbp)  # imm = 0x3EDC6870
	jne	.LBB275_131
.LBB275_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_130
.Lfunc_end275:
	.size	writeMBLayer.234, .Lfunc_end275-writeMBLayer.234
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.235 # -- Begin function IntraChromaPrediction.235
	.p2align	4, 0x90
	.type	IntraChromaPrediction.235,@function
IntraChromaPrediction.235:              # @IntraChromaPrediction.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2050101310, -164(%rbp) # imm = 0x7A32103E
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB276_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB276_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB276_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_1
.LBB276_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB276_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB276_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB276_8
.LBB276_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB276_8
.LBB276_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB276_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB276_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB276_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB276_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB276_13
.LBB276_12:                             # %cond.false32
                                        #   in Loop: Header=BB276_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB276_13
.LBB276_13:                             # %cond.end33
                                        #   in Loop: Header=BB276_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB276_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_9
.LBB276_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB276_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB276_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB276_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB276_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB276_20
.LBB276_19:                             # %cond.false57
                                        #   in Loop: Header=BB276_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB276_20
.LBB276_20:                             # %cond.end58
                                        #   in Loop: Header=BB276_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB276_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_16
.LBB276_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB276_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB276_25
.LBB276_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB276_25
.LBB276_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB276_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB276_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB276_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB276_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB276_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB276_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB276_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_37 Depth 2
                                        #       Child Loop BB276_39 Depth 3
                                        #         Child Loop BB276_104 Depth 4
                                        #         Child Loop BB276_110 Depth 4
                                        #         Child Loop BB276_85 Depth 4
                                        #         Child Loop BB276_91 Depth 4
                                        #         Child Loop BB276_66 Depth 4
                                        #         Child Loop BB276_72 Depth 4
                                        #         Child Loop BB276_44 Depth 4
                                        #         Child Loop BB276_50 Depth 4
                                        #         Child Loop BB276_125 Depth 4
                                        #           Child Loop BB276_127 Depth 5
                                        #     Child Loop BB276_138 Depth 2
                                        #     Child Loop BB276_142 Depth 2
                                        #       Child Loop BB276_144 Depth 3
                                        #     Child Loop BB276_153 Depth 2
                                        #     Child Loop BB276_157 Depth 2
                                        #       Child Loop BB276_159 Depth 3
                                        #     Child Loop BB276_170 Depth 2
                                        #     Child Loop BB276_174 Depth 2
                                        #     Child Loop BB276_178 Depth 2
                                        #       Child Loop BB276_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB276_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB276_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB276_37:                             # %for.cond95
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB276_39 Depth 3
                                        #         Child Loop BB276_104 Depth 4
                                        #         Child Loop BB276_110 Depth 4
                                        #         Child Loop BB276_85 Depth 4
                                        #         Child Loop BB276_91 Depth 4
                                        #         Child Loop BB276_66 Depth 4
                                        #         Child Loop BB276_72 Depth 4
                                        #         Child Loop BB276_44 Depth 4
                                        #         Child Loop BB276_50 Depth 4
                                        #         Child Loop BB276_125 Depth 4
                                        #           Child Loop BB276_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB276_37 Depth=2
	movl	$0, -84(%rbp)
.LBB276_39:                             # %for.cond99
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB276_104 Depth 4
                                        #         Child Loop BB276_110 Depth 4
                                        #         Child Loop BB276_85 Depth 4
                                        #         Child Loop BB276_91 Depth 4
                                        #         Child Loop BB276_66 Depth 4
                                        #         Child Loop BB276_72 Depth 4
                                        #         Child Loop BB276_44 Depth 4
                                        #         Child Loop BB276_50 Depth 4
                                        #         Child Loop BB276_125 Depth 4
                                        #           Child Loop BB276_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB276_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB276_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB276_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB276_39 Depth=3
	movq	.LJTI276_0(,%rax,8), %rax
	jmpq	*%rax
.LBB276_42:                             # %sw.bb
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_44:                             # %for.cond124
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB276_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB276_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_44
.LBB276_47:                             # %for.end138
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_48
.LBB276_48:                             # %if.end139
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB276_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_50:                             # %for.cond143
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB276_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB276_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_50
.LBB276_53:                             # %for.end162
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_54
.LBB276_54:                             # %if.end163
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB276_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_63
.LBB276_57:                             # %if.else
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_62
.LBB276_59:                             # %if.else174
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB276_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB276_61:                             # %if.end180
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_62
.LBB276_62:                             # %if.end181
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_63
.LBB276_63:                             # %if.end182
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_124
.LBB276_64:                             # %sw.bb183
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_66:                             # %for.cond186
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB276_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB276_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_66
.LBB276_69:                             # %for.end202
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_77
.LBB276_70:                             # %if.else203
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB276_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_72:                             # %for.cond207
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB276_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB276_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_72
.LBB276_75:                             # %for.end226
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_76
.LBB276_76:                             # %if.end227
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_77
.LBB276_77:                             # %if.end228
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_82
.LBB276_79:                             # %if.else233
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB276_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB276_81:                             # %if.end239
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_82
.LBB276_82:                             # %if.end240
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_124
.LBB276_83:                             # %sw.bb241
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB276_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_85:                             # %for.cond245
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB276_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB276_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_85
.LBB276_88:                             # %for.end264
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_96
.LBB276_89:                             # %if.else265
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_91:                             # %for.cond268
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB276_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB276_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_91
.LBB276_94:                             # %for.end284
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_95
.LBB276_95:                             # %if.end285
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_96
.LBB276_96:                             # %if.end286
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB276_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_101
.LBB276_98:                             # %if.else292
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB276_100:                            # %if.end297
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_101
.LBB276_101:                            # %if.end298
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_124
.LBB276_102:                            # %sw.bb299
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_104:                            # %for.cond302
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB276_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB276_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_104
.LBB276_107:                            # %for.end318
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_108
.LBB276_108:                            # %if.end319
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB276_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_110:                            # %for.cond323
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB276_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB276_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_110
.LBB276_113:                            # %for.end342
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_114
.LBB276_114:                            # %if.end343
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB276_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_123
.LBB276_117:                            # %if.else352
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB276_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB276_122
.LBB276_119:                            # %if.else357
                                        #   in Loop: Header=BB276_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB276_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB276_121:                            # %if.end363
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_122
.LBB276_122:                            # %if.end364
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_123
.LBB276_123:                            # %if.end365
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_124
.LBB276_124:                            # %sw.epilog
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB276_125:                            # %for.cond366
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB276_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB276_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_127:                            # %for.cond371
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_37 Depth=2
                                        #       Parent Loop BB276_39 Depth=3
                                        #         Parent Loop BB276_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB276_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB276_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_127
.LBB276_130:                            # %for.end386
                                        #   in Loop: Header=BB276_125 Depth=4
	jmp	.LBB276_131
.LBB276_131:                            # %for.inc387
                                        #   in Loop: Header=BB276_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_125
.LBB276_132:                            # %for.end389
                                        #   in Loop: Header=BB276_39 Depth=3
	jmp	.LBB276_133
.LBB276_133:                            # %for.inc390
                                        #   in Loop: Header=BB276_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB276_39
.LBB276_134:                            # %for.end392
                                        #   in Loop: Header=BB276_37 Depth=2
	jmp	.LBB276_135
.LBB276_135:                            # %for.inc393
                                        #   in Loop: Header=BB276_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB276_37
.LBB276_136:                            # %for.end395
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB276_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	$0, -4(%rbp)
.LBB276_138:                            # %for.cond398
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB276_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB276_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB276_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_138
.LBB276_141:                            # %for.end414
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	$0, -4(%rbp)
.LBB276_142:                            # %for.cond415
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB276_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB276_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB276_142 Depth=2
	movl	$0, -8(%rbp)
.LBB276_144:                            # %for.cond419
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB276_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB276_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_144
.LBB276_147:                            # %for.end436
                                        #   in Loop: Header=BB276_142 Depth=2
	jmp	.LBB276_148
.LBB276_148:                            # %for.inc437
                                        #   in Loop: Header=BB276_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_142
.LBB276_149:                            # %for.end439
                                        #   in Loop: Header=BB276_35 Depth=1
	jmp	.LBB276_150
.LBB276_150:                            # %if.end440
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB276_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB276_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	$0, -4(%rbp)
.LBB276_153:                            # %for.cond447
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB276_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB276_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_153
.LBB276_156:                            # %for.end468
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	$0, -4(%rbp)
.LBB276_157:                            # %for.cond469
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB276_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB276_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB276_157 Depth=2
	movl	$0, -8(%rbp)
.LBB276_159:                            # %for.cond473
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB276_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB276_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_159
.LBB276_162:                            # %for.end490
                                        #   in Loop: Header=BB276_157 Depth=2
	jmp	.LBB276_163
.LBB276_163:                            # %for.inc491
                                        #   in Loop: Header=BB276_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_157
.LBB276_164:                            # %for.end493
                                        #   in Loop: Header=BB276_35 Depth=1
	jmp	.LBB276_165
.LBB276_165:                            # %if.end494
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB276_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB276_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB276_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB276_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB276_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB276_170:                            # %for.cond519
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB276_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB276_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB276_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_170
.LBB276_173:                            # %for.end540
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB276_174:                            # %for.cond556
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB276_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB276_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB276_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_174
.LBB276_177:                            # %for.end577
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB276_178:                            # %for.cond606
                                        #   Parent Loop BB276_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB276_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB276_178 Depth=2
	movl	$0, -4(%rbp)
.LBB276_180:                            # %for.cond610
                                        #   Parent Loop BB276_35 Depth=1
                                        #     Parent Loop BB276_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB276_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB276_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB276_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB276_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB276_184
.LBB276_183:                            # %cond.false630
                                        #   in Loop: Header=BB276_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB276_184:                            # %cond.end643
                                        #   in Loop: Header=BB276_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB276_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB276_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB276_190
.LBB276_186:                            # %cond.false648
                                        #   in Loop: Header=BB276_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB276_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB276_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB276_189
.LBB276_188:                            # %cond.false666
                                        #   in Loop: Header=BB276_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB276_189:                            # %cond.end679
                                        #   in Loop: Header=BB276_180 Depth=3
.LBB276_190:                            # %cond.end681
                                        #   in Loop: Header=BB276_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB276_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_180
.LBB276_192:                            # %for.end694
                                        #   in Loop: Header=BB276_178 Depth=2
	jmp	.LBB276_193
.LBB276_193:                            # %for.inc695
                                        #   in Loop: Header=BB276_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_178
.LBB276_194:                            # %for.end697
                                        #   in Loop: Header=BB276_35 Depth=1
	jmp	.LBB276_195
.LBB276_195:                            # %if.end698
                                        #   in Loop: Header=BB276_35 Depth=1
	jmp	.LBB276_196
.LBB276_196:                            # %for.inc699
                                        #   in Loop: Header=BB276_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB276_35
.LBB276_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB276_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB276_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB276_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB276_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_199
.LBB276_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB276_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_219 Depth 2
                                        #       Child Loop BB276_221 Depth 3
                                        #         Child Loop BB276_223 Depth 4
                                        #           Child Loop BB276_225 Depth 5
                                        #             Child Loop BB276_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB276_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB276_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB276_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB276_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB276_203 Depth=1
	jmp	.LBB276_241
.LBB276_207:                            # %if.end723
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB276_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB276_217
.LBB276_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB276_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB276_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB276_217
.LBB276_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB276_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB276_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB276_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB276_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB276_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB276_218
.LBB276_217:                            # %if.then749
                                        #   in Loop: Header=BB276_203 Depth=1
	jmp	.LBB276_241
.LBB276_218:                            # %if.end750
                                        #   in Loop: Header=BB276_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB276_219:                            # %for.cond751
                                        #   Parent Loop BB276_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB276_221 Depth 3
                                        #         Child Loop BB276_223 Depth 4
                                        #           Child Loop BB276_225 Depth 5
                                        #             Child Loop BB276_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB276_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB276_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB276_221:                            # %for.cond757
                                        #   Parent Loop BB276_203 Depth=1
                                        #     Parent Loop BB276_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB276_223 Depth 4
                                        #           Child Loop BB276_225 Depth 5
                                        #             Child Loop BB276_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB276_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB276_221 Depth=3
	movl	$0, -48(%rbp)
.LBB276_223:                            # %for.cond761
                                        #   Parent Loop BB276_203 Depth=1
                                        #     Parent Loop BB276_219 Depth=2
                                        #       Parent Loop BB276_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB276_225 Depth 5
                                        #             Child Loop BB276_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB276_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB276_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB276_225:                            # %for.cond765
                                        #   Parent Loop BB276_203 Depth=1
                                        #     Parent Loop BB276_219 Depth=2
                                        #       Parent Loop BB276_221 Depth=3
                                        #         Parent Loop BB276_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB276_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB276_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB276_227:                            # %for.cond770
                                        #   Parent Loop BB276_203 Depth=1
                                        #     Parent Loop BB276_219 Depth=2
                                        #       Parent Loop BB276_221 Depth=3
                                        #         Parent Loop BB276_223 Depth=4
                                        #           Parent Loop BB276_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB276_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB276_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB276_227
.LBB276_230:                            # %for.end803
                                        #   in Loop: Header=BB276_225 Depth=5
	jmp	.LBB276_231
.LBB276_231:                            # %for.inc804
                                        #   in Loop: Header=BB276_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_225
.LBB276_232:                            # %for.end806
                                        #   in Loop: Header=BB276_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB276_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB276_223
.LBB276_234:                            # %for.end810
                                        #   in Loop: Header=BB276_221 Depth=3
	jmp	.LBB276_235
.LBB276_235:                            # %for.inc811
                                        #   in Loop: Header=BB276_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB276_221
.LBB276_236:                            # %for.end813
                                        #   in Loop: Header=BB276_219 Depth=2
	jmp	.LBB276_237
.LBB276_237:                            # %for.inc814
                                        #   in Loop: Header=BB276_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB276_219
.LBB276_238:                            # %for.end816
                                        #   in Loop: Header=BB276_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB276_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB276_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB276_240:                            # %if.end820
                                        #   in Loop: Header=BB276_203 Depth=1
	jmp	.LBB276_241
.LBB276_241:                            # %for.inc821
                                        #   in Loop: Header=BB276_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB276_203
.LBB276_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB276_243:                            # %if.end824
	cmpl	$2050101310, -164(%rbp) # imm = 0x7A32103E
	jne	.LBB276_245
.LBB276_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_244
.Lfunc_end276:
	.size	IntraChromaPrediction.235, .Lfunc_end276-IntraChromaPrediction.235
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI276_0:
	.quad	.LBB276_42
	.quad	.LBB276_64
	.quad	.LBB276_83
	.quad	.LBB276_102
                                        # -- End function
	.text
	.globl	writeLumaCoeff4x4_CABAC.236 # -- Begin function writeLumaCoeff4x4_CABAC.236
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.236,@function
writeLumaCoeff4x4_CABAC.236:            # @writeLumaCoeff4x4_CABAC.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$326855567, -52(%rbp)   # imm = 0x137B6B8F
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB277_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB277_3
.LBB277_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB277_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB277_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB277_6
.LBB277_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB277_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB277_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB277_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB277_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB277_9:                              # %land.end
                                        #   in Loop: Header=BB277_7 Depth=1
	testb	$1, %al
	jne	.LBB277_10
	jmp	.LBB277_15
.LBB277_10:                             # %for.body
                                        #   in Loop: Header=BB277_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB277_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB277_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB277_13
.LBB277_12:                             # %cond.false40
                                        #   in Loop: Header=BB277_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB277_13:                             # %cond.end43
                                        #   in Loop: Header=BB277_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB277_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB277_7
.LBB277_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$326855567, -52(%rbp)   # imm = 0x137B6B8F
	jne	.LBB277_17
.LBB277_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_16
.Lfunc_end277:
	.size	writeLumaCoeff4x4_CABAC.236, .Lfunc_end277-writeLumaCoeff4x4_CABAC.236
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.237      # -- Begin function find_sad_16x16.237
	.p2align	4, 0x90
	.type	find_sad_16x16.237,@function
find_sad_16x16.237:                     # @find_sad_16x16.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$648163054, -80(%rbp)   # imm = 0x26A22EEE
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB278_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB278_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB278_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB278_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_1
.LBB278_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB278_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB278_20
.LBB278_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB278_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB278_9
.LBB278_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB278_9
.LBB278_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB278_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB278_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB278_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB278_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB278_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB278_14
.LBB278_13:                             # %cond.false23
                                        #   in Loop: Header=BB278_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB278_14
.LBB278_14:                             # %cond.end24
                                        #   in Loop: Header=BB278_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB278_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_10
.LBB278_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB278_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB278_19
.LBB278_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB278_19
.LBB278_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB278_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB278_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_42 Depth 2
                                        #       Child Loop BB278_44 Depth 3
                                        #     Child Loop BB278_50 Depth 2
                                        #       Child Loop BB278_52 Depth 3
                                        #         Child Loop BB278_54 Depth 4
                                        #         Child Loop BB278_58 Depth 4
                                        #           Child Loop BB278_60 Depth 5
                                        #     Child Loop BB278_72 Depth 2
                                        #       Child Loop BB278_74 Depth 3
                                        #     Child Loop BB278_80 Depth 2
                                        #     Child Loop BB278_84 Depth 2
                                        #       Child Loop BB278_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB278_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB278_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB278_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB278_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB278_32
.LBB278_24:                             # %if.then46
                                        #   in Loop: Header=BB278_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB278_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB278_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB278_28
.LBB278_27:                             # %if.then51
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_95
.LBB278_28:                             # %if.end52
                                        #   in Loop: Header=BB278_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB278_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB278_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_95
.LBB278_31:                             # %if.end57
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_32
.LBB278_32:                             # %if.end58
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB278_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB278_40
.LBB278_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB278_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB278_40
.LBB278_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB278_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB278_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB278_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB278_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB278_41
.LBB278_40:                             # %if.then74
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_94
.LBB278_41:                             # %if.else75
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	$0, -16(%rbp)
.LBB278_42:                             # %for.cond76
                                        #   Parent Loop BB278_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB278_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB278_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB278_42 Depth=2
	movl	$0, -12(%rbp)
.LBB278_44:                             # %for.cond79
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB278_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB278_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB278_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_44
.LBB278_47:                             # %for.end115
                                        #   in Loop: Header=BB278_42 Depth=2
	jmp	.LBB278_48
.LBB278_48:                             # %for.inc116
                                        #   in Loop: Header=BB278_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_42
.LBB278_49:                             # %for.end118
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB278_50:                             # %for.cond119
                                        #   Parent Loop BB278_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB278_52 Depth 3
                                        #         Child Loop BB278_54 Depth 4
                                        #         Child Loop BB278_58 Depth 4
                                        #           Child Loop BB278_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB278_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB278_50 Depth=2
	movl	$0, -20(%rbp)
.LBB278_52:                             # %for.cond123
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB278_54 Depth 4
                                        #         Child Loop BB278_58 Depth 4
                                        #           Child Loop BB278_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB278_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB278_52 Depth=3
	movl	$0, -16(%rbp)
.LBB278_54:                             # %for.cond127
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_50 Depth=2
                                        #       Parent Loop BB278_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB278_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB278_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB278_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_54
.LBB278_57:                             # %for.end237
                                        #   in Loop: Header=BB278_52 Depth=3
	movl	$0, -12(%rbp)
.LBB278_58:                             # %for.cond238
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_50 Depth=2
                                        #       Parent Loop BB278_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB278_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB278_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB278_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB278_60:                             # %for.cond346
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_50 Depth=2
                                        #       Parent Loop BB278_52 Depth=3
                                        #         Parent Loop BB278_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB278_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB278_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB278_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB278_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB278_63:                             # %if.end363
                                        #   in Loop: Header=BB278_60 Depth=5
	jmp	.LBB278_64
.LBB278_64:                             # %for.inc364
                                        #   in Loop: Header=BB278_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_60
.LBB278_65:                             # %for.end366
                                        #   in Loop: Header=BB278_58 Depth=4
	jmp	.LBB278_66
.LBB278_66:                             # %for.inc367
                                        #   in Loop: Header=BB278_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_58
.LBB278_67:                             # %for.end369
                                        #   in Loop: Header=BB278_52 Depth=3
	jmp	.LBB278_68
.LBB278_68:                             # %for.inc370
                                        #   in Loop: Header=BB278_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB278_52
.LBB278_69:                             # %for.end372
                                        #   in Loop: Header=BB278_50 Depth=2
	jmp	.LBB278_70
.LBB278_70:                             # %for.inc373
                                        #   in Loop: Header=BB278_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB278_50
.LBB278_71:                             # %for.end375
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	$0, -16(%rbp)
.LBB278_72:                             # %for.cond376
                                        #   Parent Loop BB278_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB278_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB278_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB278_72 Depth=2
	movl	$0, -12(%rbp)
.LBB278_74:                             # %for.cond380
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB278_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB278_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB278_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_74
.LBB278_77:                             # %for.end397
                                        #   in Loop: Header=BB278_72 Depth=2
	jmp	.LBB278_78
.LBB278_78:                             # %for.inc398
                                        #   in Loop: Header=BB278_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_72
.LBB278_79:                             # %for.end400
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	$0, -16(%rbp)
.LBB278_80:                             # %for.cond401
                                        #   Parent Loop BB278_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB278_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB278_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB278_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_80
.LBB278_83:                             # %for.end463
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	$0, -12(%rbp)
.LBB278_84:                             # %for.cond464
                                        #   Parent Loop BB278_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB278_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB278_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB278_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB278_86:                             # %for.cond524
                                        #   Parent Loop BB278_21 Depth=1
                                        #     Parent Loop BB278_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB278_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB278_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB278_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_86
.LBB278_89:                             # %for.end536
                                        #   in Loop: Header=BB278_84 Depth=2
	jmp	.LBB278_90
.LBB278_90:                             # %for.inc537
                                        #   in Loop: Header=BB278_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_84
.LBB278_91:                             # %for.end539
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB278_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB278_93:                             # %if.end543
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_94
.LBB278_94:                             # %if.end544
                                        #   in Loop: Header=BB278_21 Depth=1
	jmp	.LBB278_95
.LBB278_95:                             # %for.inc545
                                        #   in Loop: Header=BB278_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB278_21
.LBB278_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$648163054, -80(%rbp)   # imm = 0x26A22EEE
	jne	.LBB278_98
.LBB278_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_97
.Lfunc_end278:
	.size	find_sad_16x16.237, .Lfunc_end278-find_sad_16x16.237
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.238  # -- Begin function LumaResidualCoding.238
	.p2align	4, 0x90
	.type	LumaResidualCoding.238,@function
LumaResidualCoding.238:                 # @LumaResidualCoding.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$792852906, -48(%rbp)   # imm = 0x2F41F9AA
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB279_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB279_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB279_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-36(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-36(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB279_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB279_1
.LBB279_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB279_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB279_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB279_33
.LBB279_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB279_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB279_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB279_8 Depth=1
	movl	$0, -12(%rbp)
.LBB279_10:                             # %for.cond13
                                        #   Parent Loop BB279_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB279_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB279_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB279_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB279_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB279_14
.LBB279_13:                             # %if.else
                                        #   in Loop: Header=BB279_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB279_14:                             # %if.end
                                        #   in Loop: Header=BB279_10 Depth=2
	jmp	.LBB279_15
.LBB279_15:                             # %for.inc31
                                        #   in Loop: Header=BB279_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB279_10
.LBB279_16:                             # %for.end33
                                        #   in Loop: Header=BB279_8 Depth=1
	jmp	.LBB279_17
.LBB279_17:                             # %for.inc34
                                        #   in Loop: Header=BB279_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB279_8
.LBB279_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB279_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB279_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_22 Depth 2
                                        #       Child Loop BB279_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB279_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB279_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB279_22:                             # %for.cond45
                                        #   Parent Loop BB279_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB279_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB279_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB279_22 Depth=2
	movl	$0, -12(%rbp)
.LBB279_24:                             # %for.cond48
                                        #   Parent Loop BB279_20 Depth=1
                                        #     Parent Loop BB279_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB279_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB279_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB279_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB279_24
.LBB279_27:                             # %for.end55
                                        #   in Loop: Header=BB279_22 Depth=2
	jmp	.LBB279_28
.LBB279_28:                             # %for.inc56
                                        #   in Loop: Header=BB279_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB279_22
.LBB279_29:                             # %for.end58
                                        #   in Loop: Header=BB279_20 Depth=1
	jmp	.LBB279_30
.LBB279_30:                             # %for.inc59
                                        #   in Loop: Header=BB279_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB279_20
.LBB279_31:                             # %for.end61
	jmp	.LBB279_32
.LBB279_32:                             # %if.end62
	jmp	.LBB279_33
.LBB279_33:                             # %if.end63
	cmpl	$792852906, -48(%rbp)   # imm = 0x2F41F9AA
	jne	.LBB279_35
.LBB279_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_34
.Lfunc_end279:
	.size	LumaResidualCoding.238, .Lfunc_end279-LumaResidualCoding.238
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.239  # -- Begin function predict_nnz_chroma.239
	.p2align	4, 0x90
	.type	predict_nnz_chroma.239,@function
predict_nnz_chroma.239:                 # @predict_nnz_chroma.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$883827460, -64(%rbp)   # imm = 0x34AE2304
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB280_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB280_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB280_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB280_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB280_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB280_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB280_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB280_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB280_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB280_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB280_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB280_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB280_13:                             # %if.end57
	jmp	.LBB280_27
.LBB280_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB280_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB280_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB280_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB280_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB280_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB280_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB280_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB280_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB280_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB280_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB280_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB280_26:                             # %if.end124
	jmp	.LBB280_27
.LBB280_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB280_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB280_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$883827460, -64(%rbp)   # imm = 0x34AE2304
	jne	.LBB280_31
.LBB280_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_30
.Lfunc_end280:
	.size	predict_nnz_chroma.239, .Lfunc_end280-predict_nnz_chroma.239
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.240 # -- Begin function OneComponentChromaPrediction4x4.240
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.240,@function
OneComponentChromaPrediction4x4.240:    # @OneComponentChromaPrediction4x4.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1658769268, -108(%rbp) # imm = 0x62DECF74
	movq	%rdi, -144(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -88(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB281_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB281_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB281_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB281_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB281_6
.LBB281_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB281_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB281_8
.LBB281_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB281_8:                              # %if.end13
	movl	-88(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB281_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB281_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB281_9 Depth=1
	movl	$0, -32(%rbp)
.LBB281_11:                             # %for.cond20
                                        #   Parent Loop BB281_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB281_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-32(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB281_15
.LBB281_14:                             # %cond.false
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB281_15:                             # %cond.end
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB281_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_21
.LBB281_17:                             # %cond.false65
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB281_20
.LBB281_19:                             # %cond.false74
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB281_20:                             # %cond.end76
                                        #   in Loop: Header=BB281_11 Depth=2
.LBB281_21:                             # %cond.end78
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB281_24
.LBB281_23:                             # %cond.false84
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB281_24:                             # %cond.end86
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB281_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_30
.LBB281_26:                             # %cond.false91
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB281_29
.LBB281_28:                             # %cond.false96
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB281_29:                             # %cond.end98
                                        #   in Loop: Header=BB281_11 Depth=2
.LBB281_30:                             # %cond.end100
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB281_33
.LBB281_32:                             # %cond.false111
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB281_33:                             # %cond.end114
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB281_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_39
.LBB281_35:                             # %cond.false119
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB281_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB281_38
.LBB281_37:                             # %cond.false129
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB281_38:                             # %cond.end132
                                        #   in Loop: Header=BB281_11 Depth=2
.LBB281_39:                             # %cond.end134
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB281_42
.LBB281_41:                             # %cond.false141
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB281_42:                             # %cond.end144
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB281_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB281_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_48
.LBB281_44:                             # %cond.false149
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB281_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB281_47
.LBB281_46:                             # %cond.false155
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB281_47:                             # %cond.end158
                                        #   in Loop: Header=BB281_11 Depth=2
.LBB281_48:                             # %cond.end160
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-60(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-64(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-56(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB281_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB281_11
.LBB281_50:                             # %for.end
                                        #   in Loop: Header=BB281_9 Depth=1
	jmp	.LBB281_51
.LBB281_51:                             # %for.inc198
                                        #   in Loop: Header=BB281_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_9
.LBB281_52:                             # %for.end200
	cmpl	$1658769268, -108(%rbp) # imm = 0x62DECF74
	jne	.LBB281_54
.LBB281_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_53
.Lfunc_end281:
	.size	OneComponentChromaPrediction4x4.240, .Lfunc_end281-OneComponentChromaPrediction4x4.240
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.241 # -- Begin function SetModesAndRefframe.241
	.p2align	4, 0x90
	.type	SetModesAndRefframe.241,@function
SetModesAndRefframe.241:                # @SetModesAndRefframe.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$411521689, -60(%rbp)   # imm = 0x18875299
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB282_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB282_12
.LBB282_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB282_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB282_11
.LBB282_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB282_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB282_10
.LBB282_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB282_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB282_9
.LBB282_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB282_9:                              # %if.end
	jmp	.LBB282_10
.LBB282_10:                             # %if.end86
	jmp	.LBB282_11
.LBB282_11:                             # %if.end87
	jmp	.LBB282_12
.LBB282_12:                             # %if.end88
	cmpl	$411521689, -60(%rbp)   # imm = 0x18875299
	jne	.LBB282_14
.LBB282_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_13
.Lfunc_end282:
	.size	SetModesAndRefframe.241, .Lfunc_end282-SetModesAndRefframe.241
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.242 # -- Begin function write_terminating_bit.242
	.p2align	4, 0x90
	.type	write_terminating_bit.242,@function
write_terminating_bit.242:              # @write_terminating_bit.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$905053896, -8(%rbp)    # imm = 0x35F206C8
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$905053896, -8(%rbp)    # imm = 0x35F206C8
	jne	.LBB283_2
.LBB283_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_1
.Lfunc_end283:
	.size	write_terminating_bit.242, .Lfunc_end283-write_terminating_bit.242
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.243    # -- Begin function writeChromaCoeff.243
	.p2align	4, 0x90
	.type	writeChromaCoeff.243,@function
writeChromaCoeff.243:                   # @writeChromaCoeff.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1134200290, -84(%rbp)  # imm = 0x439A85E2
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB284_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB284_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB284_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB284_21
.LBB284_5:                              # %if.else
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB284_6:                              # %for.cond18
                                        #   Parent Loop BB284_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB284_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB284_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB284_8:                              # %land.end
                                        #   in Loop: Header=BB284_6 Depth=2
	testb	$1, %al
	jne	.LBB284_9
	jmp	.LBB284_20
.LBB284_9:                              # %for.body21
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_12
.LBB284_11:                             # %if.else29
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_12:                             # %if.end
                                        #   in Loop: Header=BB284_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB284_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB284_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB284_15:                             # %lor.end
                                        #   in Loop: Header=BB284_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB284_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB284_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB284_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB284_18:                             # %lor.end45
                                        #   in Loop: Header=BB284_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB284_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB284_6
.LBB284_20:                             # %for.end
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_21
.LBB284_21:                             # %if.end58
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_22
.LBB284_22:                             # %for.inc59
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB284_2
.LBB284_23:                             # %for.end61
	jmp	.LBB284_24
.LBB284_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB284_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB284_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_28 Depth 2
                                        #       Child Loop BB284_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB284_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB284_26 Depth=1
	movl	$0, -32(%rbp)
.LBB284_28:                             # %for.cond69
                                        #   Parent Loop BB284_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB284_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB284_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB284_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB284_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB284_47
.LBB284_31:                             # %if.else84
                                        #   in Loop: Header=BB284_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB284_32:                             # %for.cond115
                                        #   Parent Loop BB284_26 Depth=1
                                        #     Parent Loop BB284_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB284_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB284_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB284_34:                             # %land.end121
                                        #   in Loop: Header=BB284_32 Depth=3
	testb	$1, %al
	jne	.LBB284_35
	jmp	.LBB284_46
.LBB284_35:                             # %for.body122
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_38
.LBB284_37:                             # %if.else134
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_38:                             # %if.end136
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB284_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB284_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB284_41:                             # %lor.end149
                                        #   in Loop: Header=BB284_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB284_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB284_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB284_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB284_44:                             # %lor.end164
                                        #   in Loop: Header=BB284_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB284_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB284_32
.LBB284_46:                             # %for.end189
                                        #   in Loop: Header=BB284_28 Depth=2
	jmp	.LBB284_47
.LBB284_47:                             # %if.end190
                                        #   in Loop: Header=BB284_28 Depth=2
	jmp	.LBB284_48
.LBB284_48:                             # %for.inc191
                                        #   in Loop: Header=BB284_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB284_28
.LBB284_49:                             # %for.end193
                                        #   in Loop: Header=BB284_26 Depth=1
	jmp	.LBB284_50
.LBB284_50:                             # %for.inc194
                                        #   in Loop: Header=BB284_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB284_26
.LBB284_51:                             # %for.end196
	jmp	.LBB284_52
.LBB284_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1134200290, -84(%rbp)  # imm = 0x439A85E2
	jne	.LBB284_54
.LBB284_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_53
.Lfunc_end284:
	.size	writeChromaCoeff.243, .Lfunc_end284-writeChromaCoeff.243
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.244   # -- Begin function writeLumaCoeff8x8.244
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.244,@function
writeLumaCoeff8x8.244:                  # @writeLumaCoeff8x8.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$510225952, -36(%rbp)   # imm = 0x1E696E20
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB285_2
# %bb.1:                                # %if.then
	jmp	.LBB285_2
.LBB285_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB285_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_15
.LBB285_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB285_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB285_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB285_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB285_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB285_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB285_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB285_10
.LBB285_9:                              # %cond.false
                                        #   in Loop: Header=BB285_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB285_10:                             # %cond.end
                                        #   in Loop: Header=BB285_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB285_12
.LBB285_11:                             # %if.else
                                        #   in Loop: Header=BB285_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB285_12:                             # %if.end17
                                        #   in Loop: Header=BB285_5 Depth=1
	jmp	.LBB285_13
.LBB285_13:                             # %for.inc
                                        #   in Loop: Header=BB285_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB285_5
.LBB285_14:                             # %for.end
	jmp	.LBB285_19
.LBB285_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB285_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB285_18
.LBB285_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB285_18:                             # %if.end27
	jmp	.LBB285_19
.LBB285_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$510225952, -36(%rbp)   # imm = 0x1E696E20
	jne	.LBB285_21
.LBB285_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_20
.Lfunc_end285:
	.size	writeLumaCoeff8x8.244, .Lfunc_end285-writeLumaCoeff8x8.244
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.245        # -- Begin function writeMBLayer.245
	.p2align	4, 0x90
	.type	writeMBLayer.245,@function
writeMBLayer.245:                       # @writeMBLayer.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$559785740, -100(%rbp)  # imm = 0x215DA70C
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB286_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB286_3
.LBB286_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB286_3
.LBB286_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB286_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB286_9
.LBB286_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB286_8
.LBB286_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB286_8
.LBB286_8:                              # %cond.end14
.LBB286_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB286_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB286_24
.LBB286_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB286_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB286_17
	jmp	.LBB286_18
.LBB286_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB286_18
	jmp	.LBB286_17
.LBB286_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB286_17
	jmp	.LBB286_18
.LBB286_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB286_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB286_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB286_23
.LBB286_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB286_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB286_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB286_23:                             # %if.end50
	jmp	.LBB286_24
.LBB286_24:                             # %if.end51
	jmp	.LBB286_25
.LBB286_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB286_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB286_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB286_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB286_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB286_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB286_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_35
.LBB286_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB286_38
.LBB286_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB286_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB286_39:                             # %if.end96
	jmp	.LBB286_40
.LBB286_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_43
.LBB286_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB286_89
.LBB286_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB286_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB286_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB286_49
.LBB286_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB286_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB286_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB286_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_55
.LBB286_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB286_58
.LBB286_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB286_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB286_59:                             # %if.end198
	jmp	.LBB286_60
.LBB286_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB286_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB286_64
.LBB286_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB286_64:                             # %if.end226
	jmp	.LBB286_88
.LBB286_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB286_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB286_76
.LBB286_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB286_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB286_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB286_72:                             # %if.end281
	jmp	.LBB286_73
.LBB286_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB286_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB286_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB286_87
.LBB286_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB286_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB286_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB286_77 Depth=1
	movl	$0, -44(%rbp)
.LBB286_79:                             # %for.cond310
                                        #   Parent Loop BB286_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB286_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB286_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB286_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB286_79
.LBB286_82:                             # %for.end
                                        #   in Loop: Header=BB286_77 Depth=1
	jmp	.LBB286_83
.LBB286_83:                             # %for.inc322
                                        #   in Loop: Header=BB286_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB286_77
.LBB286_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB286_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB286_86:                             # %if.end345
	jmp	.LBB286_87
.LBB286_87:                             # %if.end346
	jmp	.LBB286_88
.LBB286_88:                             # %if.end347
	jmp	.LBB286_89
.LBB286_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB286_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB286_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB286_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB286_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB286_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB286_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_98
.LBB286_97:                             # %if.else380
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_98:                             # %if.end382
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB286_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB286_101
.LBB286_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB286_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB286_101:                            # %lor.end415
                                        #   in Loop: Header=BB286_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB286_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB286_94
.LBB286_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB286_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB286_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB286_114
.LBB286_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB286_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_110
.LBB286_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB286_113
.LBB286_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB286_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB286_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB286_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB286_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB286_120
.LBB286_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB286_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB286_119:                            # %if.end483
	jmp	.LBB286_120
.LBB286_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB286_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB286_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB286_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB286_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB286_129
.LBB286_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB286_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB286_128:                            # %if.end516
	jmp	.LBB286_129
.LBB286_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$559785740, -100(%rbp)  # imm = 0x215DA70C
	jne	.LBB286_131
.LBB286_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_130
.Lfunc_end286:
	.size	writeMBLayer.245, .Lfunc_end286-writeMBLayer.245
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.246      # -- Begin function find_sad_16x16.246
	.p2align	4, 0x90
	.type	find_sad_16x16.246,@function
find_sad_16x16.246:                     # @find_sad_16x16.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1364470488, -80(%rbp)  # imm = 0x51542AD8
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB287_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB287_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB287_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB287_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_1
.LBB287_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB287_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB287_20
.LBB287_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB287_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB287_9
.LBB287_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB287_9
.LBB287_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB287_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB287_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB287_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB287_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB287_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB287_14
.LBB287_13:                             # %cond.false23
                                        #   in Loop: Header=BB287_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB287_14
.LBB287_14:                             # %cond.end24
                                        #   in Loop: Header=BB287_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB287_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_10
.LBB287_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB287_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB287_19
.LBB287_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB287_19
.LBB287_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB287_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB287_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_42 Depth 2
                                        #       Child Loop BB287_44 Depth 3
                                        #     Child Loop BB287_50 Depth 2
                                        #       Child Loop BB287_52 Depth 3
                                        #         Child Loop BB287_54 Depth 4
                                        #         Child Loop BB287_58 Depth 4
                                        #           Child Loop BB287_60 Depth 5
                                        #     Child Loop BB287_72 Depth 2
                                        #       Child Loop BB287_74 Depth 3
                                        #     Child Loop BB287_80 Depth 2
                                        #     Child Loop BB287_84 Depth 2
                                        #       Child Loop BB287_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB287_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB287_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB287_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB287_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB287_32
.LBB287_24:                             # %if.then46
                                        #   in Loop: Header=BB287_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB287_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB287_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB287_28
.LBB287_27:                             # %if.then51
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_95
.LBB287_28:                             # %if.end52
                                        #   in Loop: Header=BB287_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB287_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB287_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_95
.LBB287_31:                             # %if.end57
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_32
.LBB287_32:                             # %if.end58
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB287_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB287_40
.LBB287_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB287_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB287_40
.LBB287_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB287_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB287_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB287_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB287_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB287_41
.LBB287_40:                             # %if.then74
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_94
.LBB287_41:                             # %if.else75
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	$0, -16(%rbp)
.LBB287_42:                             # %for.cond76
                                        #   Parent Loop BB287_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB287_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB287_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB287_42 Depth=2
	movl	$0, -12(%rbp)
.LBB287_44:                             # %for.cond79
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB287_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB287_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB287_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_44
.LBB287_47:                             # %for.end115
                                        #   in Loop: Header=BB287_42 Depth=2
	jmp	.LBB287_48
.LBB287_48:                             # %for.inc116
                                        #   in Loop: Header=BB287_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_42
.LBB287_49:                             # %for.end118
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB287_50:                             # %for.cond119
                                        #   Parent Loop BB287_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB287_52 Depth 3
                                        #         Child Loop BB287_54 Depth 4
                                        #         Child Loop BB287_58 Depth 4
                                        #           Child Loop BB287_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB287_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB287_50 Depth=2
	movl	$0, -20(%rbp)
.LBB287_52:                             # %for.cond123
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB287_54 Depth 4
                                        #         Child Loop BB287_58 Depth 4
                                        #           Child Loop BB287_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB287_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB287_52 Depth=3
	movl	$0, -16(%rbp)
.LBB287_54:                             # %for.cond127
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_50 Depth=2
                                        #       Parent Loop BB287_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB287_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB287_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB287_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_54
.LBB287_57:                             # %for.end237
                                        #   in Loop: Header=BB287_52 Depth=3
	movl	$0, -12(%rbp)
.LBB287_58:                             # %for.cond238
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_50 Depth=2
                                        #       Parent Loop BB287_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB287_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB287_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB287_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB287_60:                             # %for.cond346
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_50 Depth=2
                                        #       Parent Loop BB287_52 Depth=3
                                        #         Parent Loop BB287_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB287_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB287_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB287_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB287_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB287_63:                             # %if.end363
                                        #   in Loop: Header=BB287_60 Depth=5
	jmp	.LBB287_64
.LBB287_64:                             # %for.inc364
                                        #   in Loop: Header=BB287_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_60
.LBB287_65:                             # %for.end366
                                        #   in Loop: Header=BB287_58 Depth=4
	jmp	.LBB287_66
.LBB287_66:                             # %for.inc367
                                        #   in Loop: Header=BB287_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_58
.LBB287_67:                             # %for.end369
                                        #   in Loop: Header=BB287_52 Depth=3
	jmp	.LBB287_68
.LBB287_68:                             # %for.inc370
                                        #   in Loop: Header=BB287_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_52
.LBB287_69:                             # %for.end372
                                        #   in Loop: Header=BB287_50 Depth=2
	jmp	.LBB287_70
.LBB287_70:                             # %for.inc373
                                        #   in Loop: Header=BB287_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB287_50
.LBB287_71:                             # %for.end375
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	$0, -16(%rbp)
.LBB287_72:                             # %for.cond376
                                        #   Parent Loop BB287_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB287_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB287_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB287_72 Depth=2
	movl	$0, -12(%rbp)
.LBB287_74:                             # %for.cond380
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB287_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB287_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB287_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_74
.LBB287_77:                             # %for.end397
                                        #   in Loop: Header=BB287_72 Depth=2
	jmp	.LBB287_78
.LBB287_78:                             # %for.inc398
                                        #   in Loop: Header=BB287_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_72
.LBB287_79:                             # %for.end400
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	$0, -16(%rbp)
.LBB287_80:                             # %for.cond401
                                        #   Parent Loop BB287_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB287_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB287_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB287_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_80
.LBB287_83:                             # %for.end463
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	$0, -12(%rbp)
.LBB287_84:                             # %for.cond464
                                        #   Parent Loop BB287_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB287_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB287_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB287_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB287_86:                             # %for.cond524
                                        #   Parent Loop BB287_21 Depth=1
                                        #     Parent Loop BB287_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB287_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB287_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB287_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_86
.LBB287_89:                             # %for.end536
                                        #   in Loop: Header=BB287_84 Depth=2
	jmp	.LBB287_90
.LBB287_90:                             # %for.inc537
                                        #   in Loop: Header=BB287_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_84
.LBB287_91:                             # %for.end539
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB287_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB287_93:                             # %if.end543
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_94
.LBB287_94:                             # %if.end544
                                        #   in Loop: Header=BB287_21 Depth=1
	jmp	.LBB287_95
.LBB287_95:                             # %for.inc545
                                        #   in Loop: Header=BB287_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB287_21
.LBB287_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1364470488, -80(%rbp)  # imm = 0x51542AD8
	jne	.LBB287_98
.LBB287_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_97
.Lfunc_end287:
	.size	find_sad_16x16.246, .Lfunc_end287-find_sad_16x16.246
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.247 # -- Begin function write_one_macroblock.247
	.p2align	4, 0x90
	.type	write_one_macroblock.247,@function
write_one_macroblock.247:               # @write_one_macroblock.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1843792469, -32(%rbp)  # imm = 0x6DE60A55
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB288_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB288_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB288_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB288_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB288_6
.LBB288_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB288_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB288_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB288_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB288_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB288_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB288_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB288_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB288_22
.LBB288_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB288_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB288_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB288_14 Depth=1
	movl	$0, -24(%rbp)
.LBB288_16:                             # %for.cond24
                                        #   Parent Loop BB288_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB288_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB288_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB288_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB288_16
.LBB288_19:                             # %for.end
                                        #   in Loop: Header=BB288_14 Depth=1
	jmp	.LBB288_20
.LBB288_20:                             # %for.inc35
                                        #   in Loop: Header=BB288_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB288_14
.LBB288_21:                             # %for.end37
	jmp	.LBB288_22
.LBB288_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB288_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB288_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB288_30
.LBB288_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB288_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB288_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB288_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB288_29:                             # %if.end59
	jmp	.LBB288_30
.LBB288_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB288_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB288_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1843792469, -32(%rbp)  # imm = 0x6DE60A55
	jne	.LBB288_34
.LBB288_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_33
.Lfunc_end288:
	.size	write_one_macroblock.247, .Lfunc_end288-write_one_macroblock.247
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.248   # -- Begin function LumaPrediction4x4.248
	.p2align	4, 0x90
	.type	LumaPrediction4x4.248,@function
LumaPrediction4x4.248:                  # @LumaPrediction4x4.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$56067096, -104(%rbp)   # imm = 0x3578418
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB289_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB289_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB289_6
.LBB289_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB289_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB289_5:                              # %land.end
.LBB289_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB289_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB289_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB289_10
.LBB289_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB289_10
.LBB289_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB289_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB289_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB289_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB289_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB289_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB289_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB289_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB289_19
.LBB289_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB289_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB289_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB289_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB289_23
.LBB289_22:                             # %if.then45
	movl	-76(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB289_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB289_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB289_26
.LBB289_25:                             # %if.then64
	movl	-76(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB289_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB289_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB289_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB289_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_31:                             # %for.cond85
                                        #   Parent Loop BB289_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB289_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB289_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_31
.LBB289_34:                             # %for.end
                                        #   in Loop: Header=BB289_29 Depth=1
	jmp	.LBB289_35
.LBB289_35:                             # %for.inc125
                                        #   in Loop: Header=BB289_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_29
.LBB289_36:                             # %for.end127
	jmp	.LBB289_57
.LBB289_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB289_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB289_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_41:                             # %for.cond135
                                        #   Parent Loop BB289_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB289_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB289_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_41
.LBB289_44:                             # %for.end161
                                        #   in Loop: Header=BB289_39 Depth=1
	jmp	.LBB289_45
.LBB289_45:                             # %for.inc162
                                        #   in Loop: Header=BB289_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_39
.LBB289_46:                             # %for.end164
	jmp	.LBB289_56
.LBB289_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB289_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_50:                             # %for.cond170
                                        #   Parent Loop BB289_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB289_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB289_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_50
.LBB289_53:                             # %for.end196
                                        #   in Loop: Header=BB289_48 Depth=1
	jmp	.LBB289_54
.LBB289_54:                             # %for.inc197
                                        #   in Loop: Header=BB289_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_48
.LBB289_55:                             # %for.end199
	jmp	.LBB289_56
.LBB289_56:                             # %if.end200
	jmp	.LBB289_57
.LBB289_57:                             # %if.end201
	jmp	.LBB289_89
.LBB289_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB289_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB289_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_62:                             # %for.cond210
                                        #   Parent Loop BB289_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB289_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB289_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_62
.LBB289_65:                             # %for.end226
                                        #   in Loop: Header=BB289_60 Depth=1
	jmp	.LBB289_66
.LBB289_66:                             # %for.inc227
                                        #   in Loop: Header=BB289_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_60
.LBB289_67:                             # %for.end229
	jmp	.LBB289_88
.LBB289_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB289_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB289_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_72:                             # %for.cond238
                                        #   Parent Loop BB289_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB289_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB289_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_72
.LBB289_75:                             # %for.end251
                                        #   in Loop: Header=BB289_70 Depth=1
	jmp	.LBB289_76
.LBB289_76:                             # %for.inc252
                                        #   in Loop: Header=BB289_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_70
.LBB289_77:                             # %for.end254
	jmp	.LBB289_87
.LBB289_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB289_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB289_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB289_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB289_81:                             # %for.cond260
                                        #   Parent Loop BB289_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB289_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB289_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB289_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_81
.LBB289_84:                             # %for.end273
                                        #   in Loop: Header=BB289_79 Depth=1
	jmp	.LBB289_85
.LBB289_85:                             # %for.inc274
                                        #   in Loop: Header=BB289_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_79
.LBB289_86:                             # %for.end276
	jmp	.LBB289_87
.LBB289_87:                             # %if.end277
	jmp	.LBB289_88
.LBB289_88:                             # %if.end278
	jmp	.LBB289_89
.LBB289_89:                             # %if.end279
	cmpl	$56067096, -104(%rbp)   # imm = 0x3578418
	jne	.LBB289_91
.LBB289_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_90
.Lfunc_end289:
	.size	LumaPrediction4x4.248, .Lfunc_end289-LumaPrediction4x4.248
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.249 # -- Begin function write_one_macroblock.249
	.p2align	4, 0x90
	.type	write_one_macroblock.249,@function
write_one_macroblock.249:               # @write_one_macroblock.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1951250824, -32(%rbp)  # imm = 0x744DB988
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB290_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB290_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB290_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB290_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB290_6
.LBB290_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB290_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB290_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB290_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB290_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB290_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB290_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB290_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB290_22
.LBB290_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB290_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB290_14 Depth=1
	movl	$0, -24(%rbp)
.LBB290_16:                             # %for.cond24
                                        #   Parent Loop BB290_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB290_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB290_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB290_16
.LBB290_19:                             # %for.end
                                        #   in Loop: Header=BB290_14 Depth=1
	jmp	.LBB290_20
.LBB290_20:                             # %for.inc35
                                        #   in Loop: Header=BB290_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB290_14
.LBB290_21:                             # %for.end37
	jmp	.LBB290_22
.LBB290_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB290_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB290_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB290_30
.LBB290_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB290_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB290_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB290_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB290_29:                             # %if.end59
	jmp	.LBB290_30
.LBB290_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB290_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB290_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1951250824, -32(%rbp)  # imm = 0x744DB988
	jne	.LBB290_34
.LBB290_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_33
.Lfunc_end290:
	.size	write_one_macroblock.249, .Lfunc_end290-write_one_macroblock.249
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.250  # -- Begin function predict_nnz_chroma.250
	.p2align	4, 0x90
	.type	predict_nnz_chroma.250,@function
predict_nnz_chroma.250:                 # @predict_nnz_chroma.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$897818908, -64(%rbp)   # imm = 0x3583A11C
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB291_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB291_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB291_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB291_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB291_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB291_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB291_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB291_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB291_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB291_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB291_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB291_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB291_13:                             # %if.end57
	jmp	.LBB291_27
.LBB291_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB291_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB291_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB291_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB291_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB291_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB291_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB291_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB291_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB291_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB291_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB291_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB291_26:                             # %if.end124
	jmp	.LBB291_27
.LBB291_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB291_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB291_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$897818908, -64(%rbp)   # imm = 0x3583A11C
	jne	.LBB291_31
.LBB291_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_30
.Lfunc_end291:
	.size	predict_nnz_chroma.250, .Lfunc_end291-predict_nnz_chroma.250
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.251        # -- Begin function writeMBLayer.251
	.p2align	4, 0x90
	.type	writeMBLayer.251,@function
writeMBLayer.251:                       # @writeMBLayer.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$344707096, -92(%rbp)   # imm = 0x148BD018
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB292_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB292_3
.LBB292_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB292_3
.LBB292_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB292_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB292_9
.LBB292_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB292_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB292_8
.LBB292_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB292_8
.LBB292_8:                              # %cond.end14
.LBB292_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB292_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB292_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB292_24
.LBB292_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB292_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB292_17
	jmp	.LBB292_18
.LBB292_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB292_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB292_18
	jmp	.LBB292_17
.LBB292_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB292_17
	jmp	.LBB292_18
.LBB292_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB292_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB292_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB292_23
.LBB292_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB292_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB292_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB292_23:                             # %if.end50
	jmp	.LBB292_24
.LBB292_24:                             # %if.end51
	jmp	.LBB292_25
.LBB292_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB292_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB292_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB292_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB292_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB292_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB292_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB292_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB292_35
.LBB292_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB292_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB292_38
.LBB292_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB292_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB292_39:                             # %if.end96
	jmp	.LBB292_40
.LBB292_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB292_43
.LBB292_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB292_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB292_89
.LBB292_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB292_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB292_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB292_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB292_49
.LBB292_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB292_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB292_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB292_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB292_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB292_55
.LBB292_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB292_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB292_58
.LBB292_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB292_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB292_59:                             # %if.end198
	jmp	.LBB292_60
.LBB292_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB292_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB292_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB292_64
.LBB292_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB292_64:                             # %if.end226
	jmp	.LBB292_88
.LBB292_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB292_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB292_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB292_76
.LBB292_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB292_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB292_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB292_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB292_72:                             # %if.end281
	jmp	.LBB292_73
.LBB292_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB292_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB292_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB292_87
.LBB292_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB292_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB292_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB292_77 Depth=1
	movl	$0, -44(%rbp)
.LBB292_79:                             # %for.cond310
                                        #   Parent Loop BB292_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB292_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB292_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB292_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB292_79
.LBB292_82:                             # %for.end
                                        #   in Loop: Header=BB292_77 Depth=1
	jmp	.LBB292_83
.LBB292_83:                             # %for.inc322
                                        #   in Loop: Header=BB292_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB292_77
.LBB292_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB292_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB292_86:                             # %if.end345
	jmp	.LBB292_87
.LBB292_87:                             # %if.end346
	jmp	.LBB292_88
.LBB292_88:                             # %if.end347
	jmp	.LBB292_89
.LBB292_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB292_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB292_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB292_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB292_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB292_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB292_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB292_98
.LBB292_97:                             # %if.else380
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB292_98:                             # %if.end382
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB292_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB292_101
.LBB292_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB292_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB292_101:                            # %lor.end415
                                        #   in Loop: Header=BB292_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB292_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB292_94
.LBB292_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB292_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB292_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB292_114
.LBB292_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB292_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB292_110
.LBB292_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB292_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB292_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB292_113
.LBB292_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB292_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB292_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB292_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB292_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB292_120
.LBB292_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB292_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB292_119:                            # %if.end483
	jmp	.LBB292_120
.LBB292_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB292_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB292_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB292_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB292_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB292_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB292_129
.LBB292_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB292_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB292_128:                            # %if.end516
	jmp	.LBB292_129
.LBB292_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$344707096, -92(%rbp)   # imm = 0x148BD018
	jne	.LBB292_131
.LBB292_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_130
.Lfunc_end292:
	.size	writeMBLayer.251, .Lfunc_end292-writeMBLayer.251
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.252 # -- Begin function OneComponentChromaPrediction4x4.252
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.252,@function
OneComponentChromaPrediction4x4.252:    # @OneComponentChromaPrediction4x4.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1082755923, -112(%rbp) # imm = 0x40898B53
	movq	%rdi, -144(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB293_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB293_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB293_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB293_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB293_6
.LBB293_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB293_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB293_8
.LBB293_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB293_8:                              # %if.end13
	movl	-56(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB293_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB293_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB293_9 Depth=1
	movl	$0, -28(%rbp)
.LBB293_11:                             # %for.cond20
                                        #   Parent Loop BB293_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB293_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB293_15
.LBB293_14:                             # %cond.false
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB293_15:                             # %cond.end
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB293_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_21
.LBB293_17:                             # %cond.false65
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB293_20
.LBB293_19:                             # %cond.false74
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB293_20:                             # %cond.end76
                                        #   in Loop: Header=BB293_11 Depth=2
.LBB293_21:                             # %cond.end78
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB293_24
.LBB293_23:                             # %cond.false84
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB293_24:                             # %cond.end86
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB293_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_30
.LBB293_26:                             # %cond.false91
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB293_29
.LBB293_28:                             # %cond.false96
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB293_29:                             # %cond.end98
                                        #   in Loop: Header=BB293_11 Depth=2
.LBB293_30:                             # %cond.end100
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB293_33
.LBB293_32:                             # %cond.false111
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB293_33:                             # %cond.end114
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB293_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_39
.LBB293_35:                             # %cond.false119
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB293_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB293_38
.LBB293_37:                             # %cond.false129
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB293_38:                             # %cond.end132
                                        #   in Loop: Header=BB293_11 Depth=2
.LBB293_39:                             # %cond.end134
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB293_42
.LBB293_41:                             # %cond.false141
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB293_42:                             # %cond.end144
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB293_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB293_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_48
.LBB293_44:                             # %cond.false149
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB293_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB293_47
.LBB293_46:                             # %cond.false155
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB293_47:                             # %cond.end158
                                        #   in Loop: Header=BB293_11 Depth=2
.LBB293_48:                             # %cond.end160
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-88(%rbp), %eax
	imull	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-76(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB293_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB293_11
.LBB293_50:                             # %for.end
                                        #   in Loop: Header=BB293_9 Depth=1
	jmp	.LBB293_51
.LBB293_51:                             # %for.inc198
                                        #   in Loop: Header=BB293_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB293_9
.LBB293_52:                             # %for.end200
	cmpl	$1082755923, -112(%rbp) # imm = 0x40898B53
	jne	.LBB293_54
.LBB293_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_53
.Lfunc_end293:
	.size	OneComponentChromaPrediction4x4.252, .Lfunc_end293-OneComponentChromaPrediction4x4.252
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.253 # -- Begin function writeLumaCoeff4x4_CABAC.253
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.253,@function
writeLumaCoeff4x4_CABAC.253:            # @writeLumaCoeff4x4_CABAC.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$206575902, -52(%rbp)   # imm = 0xC50191E
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB294_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB294_3
.LBB294_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB294_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB294_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB294_6
.LBB294_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB294_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB294_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB294_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB294_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB294_9:                              # %land.end
                                        #   in Loop: Header=BB294_7 Depth=1
	testb	$1, %al
	jne	.LBB294_10
	jmp	.LBB294_15
.LBB294_10:                             # %for.body
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB294_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB294_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB294_13
.LBB294_12:                             # %cond.false40
                                        #   in Loop: Header=BB294_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB294_13:                             # %cond.end43
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB294_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_7
.LBB294_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$206575902, -52(%rbp)   # imm = 0xC50191E
	jne	.LBB294_17
.LBB294_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_16
.Lfunc_end294:
	.size	writeLumaCoeff4x4_CABAC.253, .Lfunc_end294-writeLumaCoeff4x4_CABAC.253
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.254   # -- Begin function LumaPrediction4x4.254
	.p2align	4, 0x90
	.type	LumaPrediction4x4.254,@function
LumaPrediction4x4.254:                  # @LumaPrediction4x4.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1973846129, -104(%rbp) # imm = 0x75A68071
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB295_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB295_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB295_6
.LBB295_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB295_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB295_5:                              # %land.end
.LBB295_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB295_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB295_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB295_10
.LBB295_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB295_10
.LBB295_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB295_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB295_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB295_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB295_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB295_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB295_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB295_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB295_19
.LBB295_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB295_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB295_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB295_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB295_23
.LBB295_22:                             # %if.then45
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB295_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB295_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB295_26
.LBB295_25:                             # %if.then64
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB295_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB295_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB295_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB295_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_31:                             # %for.cond85
                                        #   Parent Loop BB295_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB295_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB295_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_31
.LBB295_34:                             # %for.end
                                        #   in Loop: Header=BB295_29 Depth=1
	jmp	.LBB295_35
.LBB295_35:                             # %for.inc125
                                        #   in Loop: Header=BB295_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_29
.LBB295_36:                             # %for.end127
	jmp	.LBB295_57
.LBB295_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB295_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB295_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_41:                             # %for.cond135
                                        #   Parent Loop BB295_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB295_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB295_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_41
.LBB295_44:                             # %for.end161
                                        #   in Loop: Header=BB295_39 Depth=1
	jmp	.LBB295_45
.LBB295_45:                             # %for.inc162
                                        #   in Loop: Header=BB295_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_39
.LBB295_46:                             # %for.end164
	jmp	.LBB295_56
.LBB295_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB295_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_50:                             # %for.cond170
                                        #   Parent Loop BB295_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB295_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB295_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_50
.LBB295_53:                             # %for.end196
                                        #   in Loop: Header=BB295_48 Depth=1
	jmp	.LBB295_54
.LBB295_54:                             # %for.inc197
                                        #   in Loop: Header=BB295_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_48
.LBB295_55:                             # %for.end199
	jmp	.LBB295_56
.LBB295_56:                             # %if.end200
	jmp	.LBB295_57
.LBB295_57:                             # %if.end201
	jmp	.LBB295_89
.LBB295_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB295_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB295_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_62:                             # %for.cond210
                                        #   Parent Loop BB295_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB295_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB295_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_62
.LBB295_65:                             # %for.end226
                                        #   in Loop: Header=BB295_60 Depth=1
	jmp	.LBB295_66
.LBB295_66:                             # %for.inc227
                                        #   in Loop: Header=BB295_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_60
.LBB295_67:                             # %for.end229
	jmp	.LBB295_88
.LBB295_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB295_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB295_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_72:                             # %for.cond238
                                        #   Parent Loop BB295_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB295_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB295_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_72
.LBB295_75:                             # %for.end251
                                        #   in Loop: Header=BB295_70 Depth=1
	jmp	.LBB295_76
.LBB295_76:                             # %for.inc252
                                        #   in Loop: Header=BB295_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_70
.LBB295_77:                             # %for.end254
	jmp	.LBB295_87
.LBB295_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB295_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB295_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB295_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB295_81:                             # %for.cond260
                                        #   Parent Loop BB295_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB295_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB295_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB295_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_81
.LBB295_84:                             # %for.end273
                                        #   in Loop: Header=BB295_79 Depth=1
	jmp	.LBB295_85
.LBB295_85:                             # %for.inc274
                                        #   in Loop: Header=BB295_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_79
.LBB295_86:                             # %for.end276
	jmp	.LBB295_87
.LBB295_87:                             # %if.end277
	jmp	.LBB295_88
.LBB295_88:                             # %if.end278
	jmp	.LBB295_89
.LBB295_89:                             # %if.end279
	cmpl	$1973846129, -104(%rbp) # imm = 0x75A68071
	jne	.LBB295_91
.LBB295_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_90
.Lfunc_end295:
	.size	LumaPrediction4x4.254, .Lfunc_end295-LumaPrediction4x4.254
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.255 # -- Begin function ChromaResidualCoding.255
	.p2align	4, 0x90
	.type	ChromaResidualCoding.255,@function
ChromaResidualCoding.255:               # @ChromaResidualCoding.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1462056722, -68(%rbp)  # imm = 0x57253712
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB296_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB296_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB296_3:                              # %lor.end
.LBB296_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB296_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_7 Depth 2
                                        #       Child Loop BB296_9 Depth 3
                                        #     Child Loop BB296_16 Depth 2
                                        #       Child Loop BB296_18 Depth 3
                                        #     Child Loop BB296_33 Depth 2
                                        #       Child Loop BB296_35 Depth 3
                                        #     Child Loop BB296_43 Depth 2
                                        #       Child Loop BB296_45 Depth 3
                                        #     Child Loop BB296_58 Depth 2
                                        #       Child Loop BB296_60 Depth 3
                                        #     Child Loop BB296_87 Depth 2
                                        #       Child Loop BB296_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB296_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB296_7:                              # %for.cond5
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB296_7 Depth=2
	movl	$0, -20(%rbp)
.LBB296_9:                              # %for.cond8
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB296_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB296_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB296_9
.LBB296_12:                             # %for.end
                                        #   in Loop: Header=BB296_7 Depth=2
	jmp	.LBB296_13
.LBB296_13:                             # %for.inc18
                                        #   in Loop: Header=BB296_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB296_7
.LBB296_14:                             # %for.end20
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB296_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -4(%rbp)
.LBB296_16:                             # %for.cond21
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB296_16 Depth=2
	movl	$0, -8(%rbp)
.LBB296_18:                             # %for.cond26
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB296_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB296_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB296_25
.LBB296_21:                             # %if.else
                                        #   in Loop: Header=BB296_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB296_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB296_24
.LBB296_23:                             # %if.else52
                                        #   in Loop: Header=BB296_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB296_24:                             # %if.end
                                        #   in Loop: Header=BB296_18 Depth=3
	jmp	.LBB296_25
.LBB296_25:                             # %if.end57
                                        #   in Loop: Header=BB296_18 Depth=3
	jmp	.LBB296_26
.LBB296_26:                             # %for.inc58
                                        #   in Loop: Header=BB296_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_18
.LBB296_27:                             # %for.end59
                                        #   in Loop: Header=BB296_16 Depth=2
	jmp	.LBB296_28
.LBB296_28:                             # %for.inc60
                                        #   in Loop: Header=BB296_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_16
.LBB296_29:                             # %for.end62
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_74
.LBB296_30:                             # %if.else63
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB296_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -4(%rbp)
.LBB296_33:                             # %for.cond69
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB296_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB296_33 Depth=2
	movl	$0, -8(%rbp)
.LBB296_35:                             # %for.cond73
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB296_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB296_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB296_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_35
.LBB296_38:                             # %for.end83
                                        #   in Loop: Header=BB296_33 Depth=2
	jmp	.LBB296_39
.LBB296_39:                             # %for.inc84
                                        #   in Loop: Header=BB296_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_33
.LBB296_40:                             # %for.end86
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_73
.LBB296_41:                             # %if.else87
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB296_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -4(%rbp)
.LBB296_43:                             # %for.cond90
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB296_43 Depth=2
	movl	$0, -8(%rbp)
.LBB296_45:                             # %for.cond95
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB296_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB296_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB296_52
.LBB296_48:                             # %if.else119
                                        #   in Loop: Header=BB296_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB296_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB296_51
.LBB296_50:                             # %if.else127
                                        #   in Loop: Header=BB296_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB296_51:                             # %if.end132
                                        #   in Loop: Header=BB296_45 Depth=3
	jmp	.LBB296_52
.LBB296_52:                             # %if.end133
                                        #   in Loop: Header=BB296_45 Depth=3
	jmp	.LBB296_53
.LBB296_53:                             # %for.inc134
                                        #   in Loop: Header=BB296_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_45
.LBB296_54:                             # %for.end136
                                        #   in Loop: Header=BB296_43 Depth=2
	jmp	.LBB296_55
.LBB296_55:                             # %for.inc137
                                        #   in Loop: Header=BB296_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_43
.LBB296_56:                             # %for.end139
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_72
.LBB296_57:                             # %if.else140
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -4(%rbp)
.LBB296_58:                             # %for.cond141
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB296_58 Depth=2
	movl	$0, -8(%rbp)
.LBB296_60:                             # %for.cond146
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB296_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB296_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB296_67
.LBB296_63:                             # %if.else175
                                        #   in Loop: Header=BB296_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB296_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB296_66
.LBB296_65:                             # %if.else188
                                        #   in Loop: Header=BB296_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB296_66:                             # %if.end198
                                        #   in Loop: Header=BB296_60 Depth=3
	jmp	.LBB296_67
.LBB296_67:                             # %if.end199
                                        #   in Loop: Header=BB296_60 Depth=3
	jmp	.LBB296_68
.LBB296_68:                             # %for.inc200
                                        #   in Loop: Header=BB296_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_60
.LBB296_69:                             # %for.end202
                                        #   in Loop: Header=BB296_58 Depth=2
	jmp	.LBB296_70
.LBB296_70:                             # %for.inc203
                                        #   in Loop: Header=BB296_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_58
.LBB296_71:                             # %for.end205
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_72
.LBB296_72:                             # %if.end206
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_73
.LBB296_73:                             # %if.end207
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_74
.LBB296_74:                             # %if.end208
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB296_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB296_100
.LBB296_77:                             # %if.else215
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB296_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB296_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB296_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB296_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB296_84
.LBB296_83:                             # %if.then247
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB296_85
.LBB296_84:                             # %if.else249
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB296_85:                             # %if.end251
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB296_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -4(%rbp)
.LBB296_87:                             # %for.cond255
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB296_87 Depth=2
	movl	$0, -8(%rbp)
.LBB296_89:                             # %for.cond260
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB296_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB296_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB296_93
.LBB296_92:                             # %if.else277
                                        #   in Loop: Header=BB296_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB296_93:                             # %if.end287
                                        #   in Loop: Header=BB296_89 Depth=3
	jmp	.LBB296_94
.LBB296_94:                             # %for.inc288
                                        #   in Loop: Header=BB296_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_89
.LBB296_95:                             # %for.end290
                                        #   in Loop: Header=BB296_87 Depth=2
	jmp	.LBB296_96
.LBB296_96:                             # %for.inc291
                                        #   in Loop: Header=BB296_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_87
.LBB296_97:                             # %for.end293
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_98
.LBB296_98:                             # %if.end294
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_99
.LBB296_99:                             # %if.end295
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_100
.LBB296_100:                            # %if.end296
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_101
.LBB296_101:                            # %for.inc297
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB296_5
.LBB296_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB296_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB296_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB296_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB296_104 Depth=1
	movl	$0, -8(%rbp)
.LBB296_106:                            # %for.cond312
                                        #   Parent Loop BB296_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB296_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB296_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_110
.LBB296_109:                            # %cond.false
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB296_110:                            # %cond.end
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB296_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB296_116
.LBB296_112:                            # %cond.false358
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB296_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_115
.LBB296_114:                            # %cond.false367
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB296_115:                            # %cond.end373
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_116:                            # %cond.end375
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB296_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB296_119
.LBB296_118:                            # %cond.false394
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB296_119:                            # %cond.end400
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB296_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB296_125
.LBB296_121:                            # %cond.false406
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB296_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_124
.LBB296_123:                            # %cond.false415
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB296_124:                            # %cond.end421
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_125:                            # %cond.end423
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB296_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB296_128
.LBB296_127:                            # %cond.false443
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB296_128:                            # %cond.end449
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB296_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB296_134
.LBB296_130:                            # %cond.false455
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB296_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_133
.LBB296_132:                            # %cond.false464
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB296_133:                            # %cond.end470
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_134:                            # %cond.end472
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_106
.LBB296_136:                            # %for.end487
                                        #   in Loop: Header=BB296_104 Depth=1
	jmp	.LBB296_137
.LBB296_137:                            # %for.inc488
                                        #   in Loop: Header=BB296_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_104
.LBB296_138:                            # %for.end490
	jmp	.LBB296_139
.LBB296_139:                            # %if.end491
	cmpl	$1462056722, -68(%rbp)  # imm = 0x57253712
	jne	.LBB296_141
.LBB296_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_140
.Lfunc_end296:
	.size	ChromaResidualCoding.255, .Lfunc_end296-ChromaResidualCoding.255
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.256 # -- Begin function write_one_macroblock.256
	.p2align	4, 0x90
	.type	write_one_macroblock.256,@function
write_one_macroblock.256:               # @write_one_macroblock.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1324029495, -28(%rbp)  # imm = 0x4EEB1637
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB297_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB297_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB297_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB297_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB297_6
.LBB297_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB297_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB297_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB297_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB297_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB297_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB297_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB297_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB297_22
.LBB297_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB297_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB297_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB297_14 Depth=1
	movl	$0, -20(%rbp)
.LBB297_16:                             # %for.cond24
                                        #   Parent Loop BB297_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB297_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB297_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB297_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB297_16
.LBB297_19:                             # %for.end
                                        #   in Loop: Header=BB297_14 Depth=1
	jmp	.LBB297_20
.LBB297_20:                             # %for.inc35
                                        #   in Loop: Header=BB297_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB297_14
.LBB297_21:                             # %for.end37
	jmp	.LBB297_22
.LBB297_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB297_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB297_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB297_30
.LBB297_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB297_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB297_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB297_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB297_29:                             # %if.end59
	jmp	.LBB297_30
.LBB297_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB297_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB297_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1324029495, -28(%rbp)  # imm = 0x4EEB1637
	jne	.LBB297_34
.LBB297_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_33
.Lfunc_end297:
	.size	write_one_macroblock.256, .Lfunc_end297-write_one_macroblock.256
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.257      # -- Begin function find_sad_16x16.257
	.p2align	4, 0x90
	.type	find_sad_16x16.257,@function
find_sad_16x16.257:                     # @find_sad_16x16.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1615962670, -80(%rbp)  # imm = 0x6051A22E
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB298_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB298_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB298_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB298_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_1
.LBB298_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB298_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB298_20
.LBB298_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB298_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB298_9
.LBB298_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB298_9
.LBB298_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB298_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB298_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB298_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB298_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB298_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB298_14
.LBB298_13:                             # %cond.false23
                                        #   in Loop: Header=BB298_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB298_14
.LBB298_14:                             # %cond.end24
                                        #   in Loop: Header=BB298_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB298_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_10
.LBB298_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB298_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB298_19
.LBB298_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB298_19
.LBB298_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB298_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB298_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB298_42 Depth 2
                                        #       Child Loop BB298_44 Depth 3
                                        #     Child Loop BB298_50 Depth 2
                                        #       Child Loop BB298_52 Depth 3
                                        #         Child Loop BB298_54 Depth 4
                                        #         Child Loop BB298_58 Depth 4
                                        #           Child Loop BB298_60 Depth 5
                                        #     Child Loop BB298_72 Depth 2
                                        #       Child Loop BB298_74 Depth 3
                                        #     Child Loop BB298_80 Depth 2
                                        #     Child Loop BB298_84 Depth 2
                                        #       Child Loop BB298_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB298_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB298_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB298_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB298_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB298_32
.LBB298_24:                             # %if.then46
                                        #   in Loop: Header=BB298_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB298_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB298_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB298_28
.LBB298_27:                             # %if.then51
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_95
.LBB298_28:                             # %if.end52
                                        #   in Loop: Header=BB298_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB298_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB298_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_95
.LBB298_31:                             # %if.end57
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_32
.LBB298_32:                             # %if.end58
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB298_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB298_40
.LBB298_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB298_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB298_40
.LBB298_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB298_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB298_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB298_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB298_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB298_41
.LBB298_40:                             # %if.then74
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_94
.LBB298_41:                             # %if.else75
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	$0, -16(%rbp)
.LBB298_42:                             # %for.cond76
                                        #   Parent Loop BB298_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB298_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB298_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB298_42 Depth=2
	movl	$0, -12(%rbp)
.LBB298_44:                             # %for.cond79
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB298_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB298_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB298_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_44
.LBB298_47:                             # %for.end115
                                        #   in Loop: Header=BB298_42 Depth=2
	jmp	.LBB298_48
.LBB298_48:                             # %for.inc116
                                        #   in Loop: Header=BB298_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_42
.LBB298_49:                             # %for.end118
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB298_50:                             # %for.cond119
                                        #   Parent Loop BB298_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB298_52 Depth 3
                                        #         Child Loop BB298_54 Depth 4
                                        #         Child Loop BB298_58 Depth 4
                                        #           Child Loop BB298_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB298_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB298_50 Depth=2
	movl	$0, -20(%rbp)
.LBB298_52:                             # %for.cond123
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB298_54 Depth 4
                                        #         Child Loop BB298_58 Depth 4
                                        #           Child Loop BB298_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB298_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB298_52 Depth=3
	movl	$0, -16(%rbp)
.LBB298_54:                             # %for.cond127
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_50 Depth=2
                                        #       Parent Loop BB298_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB298_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB298_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB298_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_54
.LBB298_57:                             # %for.end237
                                        #   in Loop: Header=BB298_52 Depth=3
	movl	$0, -12(%rbp)
.LBB298_58:                             # %for.cond238
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_50 Depth=2
                                        #       Parent Loop BB298_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB298_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB298_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB298_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB298_60:                             # %for.cond346
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_50 Depth=2
                                        #       Parent Loop BB298_52 Depth=3
                                        #         Parent Loop BB298_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB298_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB298_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB298_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB298_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB298_63:                             # %if.end363
                                        #   in Loop: Header=BB298_60 Depth=5
	jmp	.LBB298_64
.LBB298_64:                             # %for.inc364
                                        #   in Loop: Header=BB298_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_60
.LBB298_65:                             # %for.end366
                                        #   in Loop: Header=BB298_58 Depth=4
	jmp	.LBB298_66
.LBB298_66:                             # %for.inc367
                                        #   in Loop: Header=BB298_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_58
.LBB298_67:                             # %for.end369
                                        #   in Loop: Header=BB298_52 Depth=3
	jmp	.LBB298_68
.LBB298_68:                             # %for.inc370
                                        #   in Loop: Header=BB298_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB298_52
.LBB298_69:                             # %for.end372
                                        #   in Loop: Header=BB298_50 Depth=2
	jmp	.LBB298_70
.LBB298_70:                             # %for.inc373
                                        #   in Loop: Header=BB298_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB298_50
.LBB298_71:                             # %for.end375
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	$0, -16(%rbp)
.LBB298_72:                             # %for.cond376
                                        #   Parent Loop BB298_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB298_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB298_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB298_72 Depth=2
	movl	$0, -12(%rbp)
.LBB298_74:                             # %for.cond380
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB298_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB298_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB298_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_74
.LBB298_77:                             # %for.end397
                                        #   in Loop: Header=BB298_72 Depth=2
	jmp	.LBB298_78
.LBB298_78:                             # %for.inc398
                                        #   in Loop: Header=BB298_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_72
.LBB298_79:                             # %for.end400
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	$0, -16(%rbp)
.LBB298_80:                             # %for.cond401
                                        #   Parent Loop BB298_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB298_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB298_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB298_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_80
.LBB298_83:                             # %for.end463
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	$0, -12(%rbp)
.LBB298_84:                             # %for.cond464
                                        #   Parent Loop BB298_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB298_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB298_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB298_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB298_86:                             # %for.cond524
                                        #   Parent Loop BB298_21 Depth=1
                                        #     Parent Loop BB298_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB298_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB298_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB298_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB298_86
.LBB298_89:                             # %for.end536
                                        #   in Loop: Header=BB298_84 Depth=2
	jmp	.LBB298_90
.LBB298_90:                             # %for.inc537
                                        #   in Loop: Header=BB298_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_84
.LBB298_91:                             # %for.end539
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB298_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB298_93:                             # %if.end543
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_94
.LBB298_94:                             # %if.end544
                                        #   in Loop: Header=BB298_21 Depth=1
	jmp	.LBB298_95
.LBB298_95:                             # %for.inc545
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB298_21
.LBB298_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1615962670, -80(%rbp)  # imm = 0x6051A22E
	jne	.LBB298_98
.LBB298_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_97
.Lfunc_end298:
	.size	find_sad_16x16.257, .Lfunc_end298-find_sad_16x16.257
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.258 # -- Begin function OneComponentChromaPrediction4x4.258
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.258,@function
OneComponentChromaPrediction4x4.258:    # @OneComponentChromaPrediction4x4.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$2039537142, -108(%rbp) # imm = 0x7990DDF6
	movq	%rdi, -136(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB299_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB299_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB299_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB299_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB299_6
.LBB299_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB299_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB299_8
.LBB299_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB299_8:                              # %if.end13
	movl	-60(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB299_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB299_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB299_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB299_9 Depth=1
	movl	$0, -36(%rbp)
.LBB299_11:                             # %for.cond20
                                        #   Parent Loop BB299_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -36(%rbp)
	jge	.LBB299_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-36(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-36(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB299_15
.LBB299_14:                             # %cond.false
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB299_15:                             # %cond.end
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB299_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_21
.LBB299_17:                             # %cond.false65
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB299_20
.LBB299_19:                             # %cond.false74
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB299_20:                             # %cond.end76
                                        #   in Loop: Header=BB299_11 Depth=2
.LBB299_21:                             # %cond.end78
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB299_24
.LBB299_23:                             # %cond.false84
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB299_24:                             # %cond.end86
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB299_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_30
.LBB299_26:                             # %cond.false91
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB299_29
.LBB299_28:                             # %cond.false96
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB299_29:                             # %cond.end98
                                        #   in Loop: Header=BB299_11 Depth=2
.LBB299_30:                             # %cond.end100
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB299_33
.LBB299_32:                             # %cond.false111
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB299_33:                             # %cond.end114
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB299_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_39
.LBB299_35:                             # %cond.false119
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB299_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB299_38
.LBB299_37:                             # %cond.false129
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB299_38:                             # %cond.end132
                                        #   in Loop: Header=BB299_11 Depth=2
.LBB299_39:                             # %cond.end134
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB299_42
.LBB299_41:                             # %cond.false141
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB299_42:                             # %cond.end144
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB299_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB299_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB299_48
.LBB299_44:                             # %cond.false149
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB299_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB299_47
.LBB299_46:                             # %cond.false155
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB299_47:                             # %cond.end158
                                        #   in Loop: Header=BB299_11 Depth=2
.LBB299_48:                             # %cond.end160
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	imull	-56(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-80(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB299_11 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB299_11
.LBB299_50:                             # %for.end
                                        #   in Loop: Header=BB299_9 Depth=1
	jmp	.LBB299_51
.LBB299_51:                             # %for.inc198
                                        #   in Loop: Header=BB299_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB299_9
.LBB299_52:                             # %for.end200
	cmpl	$2039537142, -108(%rbp) # imm = 0x7990DDF6
	jne	.LBB299_54
.LBB299_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_53
.Lfunc_end299:
	.size	OneComponentChromaPrediction4x4.258, .Lfunc_end299-OneComponentChromaPrediction4x4.258
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.259 # -- Begin function LumaResidualCoding8x8.259
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.259,@function
LumaResidualCoding8x8.259:              # @LumaResidualCoding8x8.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1596716289, -116(%rbp) # imm = 0x5F2BF501
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB300_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB300_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB300_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB300_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB300_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB300_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_8 Depth 2
                                        #       Child Loop BB300_11 Depth 3
                                        #         Child Loop BB300_13 Depth 4
                                        #       Child Loop BB300_19 Depth 3
                                        #         Child Loop BB300_21 Depth 4
                                        #       Child Loop BB300_29 Depth 3
                                        #         Child Loop BB300_31 Depth 4
                                        #       Child Loop BB300_40 Depth 3
                                        #         Child Loop BB300_42 Depth 4
                                        #       Child Loop BB300_57 Depth 3
                                        #         Child Loop BB300_59 Depth 4
                                        #       Child Loop BB300_67 Depth 3
                                        #         Child Loop BB300_69 Depth 4
                                        #       Child Loop BB300_84 Depth 3
                                        #         Child Loop BB300_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB300_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB300_8:                              # %for.cond9
                                        #   Parent Loop BB300_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_11 Depth 3
                                        #         Child Loop BB300_13 Depth 4
                                        #       Child Loop BB300_19 Depth 3
                                        #         Child Loop BB300_21 Depth 4
                                        #       Child Loop BB300_29 Depth 3
                                        #         Child Loop BB300_31 Depth 4
                                        #       Child Loop BB300_40 Depth 3
                                        #         Child Loop BB300_42 Depth 4
                                        #       Child Loop BB300_57 Depth 3
                                        #         Child Loop BB300_59 Depth 4
                                        #       Child Loop BB300_67 Depth 3
                                        #         Child Loop BB300_69 Depth 4
                                        #       Child Loop BB300_84 Depth 3
                                        #         Child Loop BB300_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB300_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB300_11:                             # %for.cond16
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB300_11 Depth=3
	movl	$0, -12(%rbp)
.LBB300_13:                             # %for.cond20
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB300_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB300_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_13
.LBB300_16:                             # %for.end
                                        #   in Loop: Header=BB300_11 Depth=3
	jmp	.LBB300_17
.LBB300_17:                             # %for.inc37
                                        #   in Loop: Header=BB300_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_11
.LBB300_18:                             # %for.end39
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB300_19:                             # %for.cond41
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB300_19 Depth=3
	movl	$0, -12(%rbp)
.LBB300_21:                             # %for.cond45
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB300_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB300_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_21
.LBB300_24:                             # %for.end65
                                        #   in Loop: Header=BB300_19 Depth=3
	jmp	.LBB300_25
.LBB300_25:                             # %for.inc66
                                        #   in Loop: Header=BB300_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_19
.LBB300_26:                             # %for.end68
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_27
.LBB300_27:                             # %if.end69
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB300_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	$0, -16(%rbp)
.LBB300_29:                             # %for.cond74
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB300_29 Depth=3
	movl	$0, -12(%rbp)
.LBB300_31:                             # %for.cond78
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB300_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB300_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_31
.LBB300_34:                             # %for.end98
                                        #   in Loop: Header=BB300_29 Depth=3
	jmp	.LBB300_35
.LBB300_35:                             # %for.inc99
                                        #   in Loop: Header=BB300_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_29
.LBB300_36:                             # %for.end101
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_37
.LBB300_37:                             # %if.end102
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB300_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB300_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	$0, -16(%rbp)
.LBB300_40:                             # %for.cond108
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB300_40 Depth=3
	movl	$0, -12(%rbp)
.LBB300_42:                             # %for.cond112
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB300_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB300_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_42
.LBB300_45:                             # %for.end137
                                        #   in Loop: Header=BB300_40 Depth=3
	jmp	.LBB300_46
.LBB300_46:                             # %for.inc138
                                        #   in Loop: Header=BB300_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_40
.LBB300_47:                             # %for.end140
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB300_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB300_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB300_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB300_52
.LBB300_51:                             # %if.else
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB300_52:                             # %if.end151
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB300_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB300_54:                             # %if.end157
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_55
.LBB300_55:                             # %if.end158
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_65
.LBB300_56:                             # %if.else159
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	$0, -16(%rbp)
.LBB300_57:                             # %for.cond160
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB300_57 Depth=3
	movl	$0, -12(%rbp)
.LBB300_59:                             # %for.cond164
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB300_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB300_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_59
.LBB300_62:                             # %for.end193
                                        #   in Loop: Header=BB300_57 Depth=3
	jmp	.LBB300_63
.LBB300_63:                             # %for.inc194
                                        #   in Loop: Header=BB300_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_57
.LBB300_64:                             # %for.end196
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_65
.LBB300_65:                             # %if.end197
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_95
.LBB300_66:                             # %if.else198
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	$0, -16(%rbp)
.LBB300_67:                             # %for.cond199
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB300_67 Depth=3
	movl	$0, -12(%rbp)
.LBB300_69:                             # %for.cond203
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB300_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB300_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB300_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB300_73
.LBB300_72:                             # %if.else300
                                        #   in Loop: Header=BB300_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB300_73:                             # %if.end314
                                        #   in Loop: Header=BB300_69 Depth=4
	jmp	.LBB300_74
.LBB300_74:                             # %for.inc315
                                        #   in Loop: Header=BB300_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_69
.LBB300_75:                             # %for.end317
                                        #   in Loop: Header=BB300_67 Depth=3
	jmp	.LBB300_76
.LBB300_76:                             # %for.inc318
                                        #   in Loop: Header=BB300_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_67
.LBB300_77:                             # %for.end320
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB300_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB300_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB300_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB300_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB300_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB300_83
.LBB300_82:                             # %if.else334
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB300_83:                             # %if.end336
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	$0, -16(%rbp)
.LBB300_84:                             # %for.cond337
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB300_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB300_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB300_84 Depth=3
	movl	$0, -12(%rbp)
.LBB300_86:                             # %for.cond341
                                        #   Parent Loop BB300_6 Depth=1
                                        #     Parent Loop BB300_8 Depth=2
                                        #       Parent Loop BB300_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB300_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB300_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB300_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_86
.LBB300_89:                             # %for.end358
                                        #   in Loop: Header=BB300_84 Depth=3
	jmp	.LBB300_90
.LBB300_90:                             # %for.inc359
                                        #   in Loop: Header=BB300_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_84
.LBB300_91:                             # %for.end361
                                        #   in Loop: Header=BB300_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB300_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB300_93:                             # %if.end368
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_94
.LBB300_94:                             # %if.end369
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_95
.LBB300_95:                             # %if.end370
                                        #   in Loop: Header=BB300_8 Depth=2
	jmp	.LBB300_96
.LBB300_96:                             # %for.inc371
                                        #   in Loop: Header=BB300_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB300_8
.LBB300_97:                             # %for.end374
                                        #   in Loop: Header=BB300_6 Depth=1
	jmp	.LBB300_98
.LBB300_98:                             # %for.inc375
                                        #   in Loop: Header=BB300_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB300_6
.LBB300_99:                             # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB300_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB300_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB300_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB300_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB300_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB300_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB300_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB300_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB300_106 Depth=1
	movl	$0, -12(%rbp)
.LBB300_108:                            # %for.cond400
                                        #   Parent Loop BB300_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB300_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB300_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB300_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_108
.LBB300_111:                            # %for.end417
                                        #   in Loop: Header=BB300_106 Depth=1
	jmp	.LBB300_112
.LBB300_112:                            # %for.inc418
                                        #   in Loop: Header=BB300_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_106
.LBB300_113:                            # %for.end420
	jmp	.LBB300_114
.LBB300_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB300_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB300_116:                            # %if.end431
	jmp	.LBB300_117
.LBB300_117:                            # %if.end432
	jmp	.LBB300_118
.LBB300_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB300_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB300_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB300_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB300_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB300_145
.LBB300_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB300_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB300_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB300_126:                            # %for.cond462
                                        #   Parent Loop BB300_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB300_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB300_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB300_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB300_130
.LBB300_129:                            # %if.else481
                                        #   in Loop: Header=BB300_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB300_130:                            # %if.end486
                                        #   in Loop: Header=BB300_126 Depth=2
	jmp	.LBB300_131
.LBB300_131:                            # %for.inc487
                                        #   in Loop: Header=BB300_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_126
.LBB300_132:                            # %for.end489
                                        #   in Loop: Header=BB300_124 Depth=1
	jmp	.LBB300_133
.LBB300_133:                            # %for.inc490
                                        #   in Loop: Header=BB300_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_124
.LBB300_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB300_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB300_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB300_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB300_138:                            # %for.cond502
                                        #   Parent Loop BB300_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB300_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB300_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB300_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_138
.LBB300_141:                            # %for.end509
                                        #   in Loop: Header=BB300_136 Depth=1
	jmp	.LBB300_142
.LBB300_142:                            # %for.inc510
                                        #   in Loop: Header=BB300_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_136
.LBB300_143:                            # %for.end512
	jmp	.LBB300_144
.LBB300_144:                            # %if.end513
	jmp	.LBB300_145
.LBB300_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1596716289, -116(%rbp) # imm = 0x5F2BF501
	jne	.LBB300_147
.LBB300_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_146
.Lfunc_end300:
	.size	LumaResidualCoding8x8.259, .Lfunc_end300-LumaResidualCoding8x8.259
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.260 # -- Begin function ChromaResidualCoding.260
	.p2align	4, 0x90
	.type	ChromaResidualCoding.260,@function
ChromaResidualCoding.260:               # @ChromaResidualCoding.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$324795916, -68(%rbp)   # imm = 0x135BFE0C
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB301_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB301_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB301_3:                              # %lor.end
.LBB301_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB301_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB301_7 Depth 2
                                        #       Child Loop BB301_9 Depth 3
                                        #     Child Loop BB301_16 Depth 2
                                        #       Child Loop BB301_18 Depth 3
                                        #     Child Loop BB301_33 Depth 2
                                        #       Child Loop BB301_35 Depth 3
                                        #     Child Loop BB301_43 Depth 2
                                        #       Child Loop BB301_45 Depth 3
                                        #     Child Loop BB301_58 Depth 2
                                        #       Child Loop BB301_60 Depth 3
                                        #     Child Loop BB301_87 Depth 2
                                        #       Child Loop BB301_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB301_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB301_7:                              # %for.cond5
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB301_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB301_7 Depth=2
	movl	$0, -16(%rbp)
.LBB301_9:                              # %for.cond8
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB301_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB301_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB301_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB301_9
.LBB301_12:                             # %for.end
                                        #   in Loop: Header=BB301_7 Depth=2
	jmp	.LBB301_13
.LBB301_13:                             # %for.inc18
                                        #   in Loop: Header=BB301_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB301_7
.LBB301_14:                             # %for.end20
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB301_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -8(%rbp)
.LBB301_16:                             # %for.cond21
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB301_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB301_16 Depth=2
	movl	$0, -4(%rbp)
.LBB301_18:                             # %for.cond26
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB301_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB301_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB301_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB301_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB301_25
.LBB301_21:                             # %if.else
                                        #   in Loop: Header=BB301_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB301_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB301_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB301_24
.LBB301_23:                             # %if.else52
                                        #   in Loop: Header=BB301_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB301_24:                             # %if.end
                                        #   in Loop: Header=BB301_18 Depth=3
	jmp	.LBB301_25
.LBB301_25:                             # %if.end57
                                        #   in Loop: Header=BB301_18 Depth=3
	jmp	.LBB301_26
.LBB301_26:                             # %for.inc58
                                        #   in Loop: Header=BB301_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_18
.LBB301_27:                             # %for.end59
                                        #   in Loop: Header=BB301_16 Depth=2
	jmp	.LBB301_28
.LBB301_28:                             # %for.inc60
                                        #   in Loop: Header=BB301_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_16
.LBB301_29:                             # %for.end62
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_74
.LBB301_30:                             # %if.else63
                                        #   in Loop: Header=BB301_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB301_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB301_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -8(%rbp)
.LBB301_33:                             # %for.cond69
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB301_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB301_33 Depth=2
	movl	$0, -4(%rbp)
.LBB301_35:                             # %for.cond73
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB301_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB301_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB301_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_35
.LBB301_38:                             # %for.end83
                                        #   in Loop: Header=BB301_33 Depth=2
	jmp	.LBB301_39
.LBB301_39:                             # %for.inc84
                                        #   in Loop: Header=BB301_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_33
.LBB301_40:                             # %for.end86
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_73
.LBB301_41:                             # %if.else87
                                        #   in Loop: Header=BB301_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB301_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -8(%rbp)
.LBB301_43:                             # %for.cond90
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB301_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB301_43 Depth=2
	movl	$0, -4(%rbp)
.LBB301_45:                             # %for.cond95
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB301_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB301_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB301_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB301_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB301_52
.LBB301_48:                             # %if.else119
                                        #   in Loop: Header=BB301_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB301_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB301_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB301_51
.LBB301_50:                             # %if.else127
                                        #   in Loop: Header=BB301_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB301_51:                             # %if.end132
                                        #   in Loop: Header=BB301_45 Depth=3
	jmp	.LBB301_52
.LBB301_52:                             # %if.end133
                                        #   in Loop: Header=BB301_45 Depth=3
	jmp	.LBB301_53
.LBB301_53:                             # %for.inc134
                                        #   in Loop: Header=BB301_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_45
.LBB301_54:                             # %for.end136
                                        #   in Loop: Header=BB301_43 Depth=2
	jmp	.LBB301_55
.LBB301_55:                             # %for.inc137
                                        #   in Loop: Header=BB301_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_43
.LBB301_56:                             # %for.end139
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_72
.LBB301_57:                             # %if.else140
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -8(%rbp)
.LBB301_58:                             # %for.cond141
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB301_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB301_58 Depth=2
	movl	$0, -4(%rbp)
.LBB301_60:                             # %for.cond146
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB301_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB301_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB301_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB301_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB301_67
.LBB301_63:                             # %if.else175
                                        #   in Loop: Header=BB301_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB301_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB301_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB301_66
.LBB301_65:                             # %if.else188
                                        #   in Loop: Header=BB301_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB301_66:                             # %if.end198
                                        #   in Loop: Header=BB301_60 Depth=3
	jmp	.LBB301_67
.LBB301_67:                             # %if.end199
                                        #   in Loop: Header=BB301_60 Depth=3
	jmp	.LBB301_68
.LBB301_68:                             # %for.inc200
                                        #   in Loop: Header=BB301_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_60
.LBB301_69:                             # %for.end202
                                        #   in Loop: Header=BB301_58 Depth=2
	jmp	.LBB301_70
.LBB301_70:                             # %for.inc203
                                        #   in Loop: Header=BB301_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_58
.LBB301_71:                             # %for.end205
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_72
.LBB301_72:                             # %if.end206
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_73
.LBB301_73:                             # %if.end207
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_74
.LBB301_74:                             # %if.end208
                                        #   in Loop: Header=BB301_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB301_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB301_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB301_100
.LBB301_77:                             # %if.else215
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB301_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB301_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB301_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB301_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB301_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB301_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB301_84
.LBB301_83:                             # %if.then247
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB301_85
.LBB301_84:                             # %if.else249
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB301_85:                             # %if.end251
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB301_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	$0, -8(%rbp)
.LBB301_87:                             # %for.cond255
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB301_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB301_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB301_87 Depth=2
	movl	$0, -4(%rbp)
.LBB301_89:                             # %for.cond260
                                        #   Parent Loop BB301_5 Depth=1
                                        #     Parent Loop BB301_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB301_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB301_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB301_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB301_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB301_93
.LBB301_92:                             # %if.else277
                                        #   in Loop: Header=BB301_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB301_93:                             # %if.end287
                                        #   in Loop: Header=BB301_89 Depth=3
	jmp	.LBB301_94
.LBB301_94:                             # %for.inc288
                                        #   in Loop: Header=BB301_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_89
.LBB301_95:                             # %for.end290
                                        #   in Loop: Header=BB301_87 Depth=2
	jmp	.LBB301_96
.LBB301_96:                             # %for.inc291
                                        #   in Loop: Header=BB301_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_87
.LBB301_97:                             # %for.end293
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_98
.LBB301_98:                             # %if.end294
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_99
.LBB301_99:                             # %if.end295
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_100
.LBB301_100:                            # %if.end296
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_101
.LBB301_101:                            # %for.inc297
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_5
.LBB301_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB301_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB301_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB301_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB301_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB301_104 Depth=1
	movl	$0, -4(%rbp)
.LBB301_106:                            # %for.cond312
                                        #   Parent Loop BB301_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB301_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB301_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB301_110
.LBB301_109:                            # %cond.false
                                        #   in Loop: Header=BB301_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB301_110:                            # %cond.end
                                        #   in Loop: Header=BB301_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB301_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB301_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB301_116
.LBB301_112:                            # %cond.false358
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB301_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB301_115
.LBB301_114:                            # %cond.false367
                                        #   in Loop: Header=BB301_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB301_115:                            # %cond.end373
                                        #   in Loop: Header=BB301_106 Depth=2
.LBB301_116:                            # %cond.end375
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB301_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB301_119
.LBB301_118:                            # %cond.false394
                                        #   in Loop: Header=BB301_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB301_119:                            # %cond.end400
                                        #   in Loop: Header=BB301_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB301_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB301_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB301_125
.LBB301_121:                            # %cond.false406
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB301_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB301_124
.LBB301_123:                            # %cond.false415
                                        #   in Loop: Header=BB301_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB301_124:                            # %cond.end421
                                        #   in Loop: Header=BB301_106 Depth=2
.LBB301_125:                            # %cond.end423
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB301_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB301_128
.LBB301_127:                            # %cond.false443
                                        #   in Loop: Header=BB301_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB301_128:                            # %cond.end449
                                        #   in Loop: Header=BB301_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB301_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB301_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB301_134
.LBB301_130:                            # %cond.false455
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB301_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB301_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB301_133
.LBB301_132:                            # %cond.false464
                                        #   in Loop: Header=BB301_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB301_133:                            # %cond.end470
                                        #   in Loop: Header=BB301_106 Depth=2
.LBB301_134:                            # %cond.end472
                                        #   in Loop: Header=BB301_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB301_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_106
.LBB301_136:                            # %for.end487
                                        #   in Loop: Header=BB301_104 Depth=1
	jmp	.LBB301_137
.LBB301_137:                            # %for.inc488
                                        #   in Loop: Header=BB301_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_104
.LBB301_138:                            # %for.end490
	jmp	.LBB301_139
.LBB301_139:                            # %if.end491
	cmpl	$324795916, -68(%rbp)   # imm = 0x135BFE0C
	jne	.LBB301_141
.LBB301_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_140
.Lfunc_end301:
	.size	ChromaResidualCoding.260, .Lfunc_end301-ChromaResidualCoding.260
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.261   # -- Begin function writeLumaCoeff8x8.261
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.261,@function
writeLumaCoeff8x8.261:                  # @writeLumaCoeff8x8.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$698538466, -36(%rbp)   # imm = 0x29A2D9E2
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB302_2
# %bb.1:                                # %if.then
	jmp	.LBB302_2
.LBB302_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB302_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_15
.LBB302_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB302_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB302_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB302_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB302_10
.LBB302_9:                              # %cond.false
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB302_10:                             # %cond.end
                                        #   in Loop: Header=BB302_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB302_12
.LBB302_11:                             # %if.else
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB302_12:                             # %if.end17
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_13
.LBB302_13:                             # %for.inc
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB302_5
.LBB302_14:                             # %for.end
	jmp	.LBB302_19
.LBB302_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB302_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB302_18
.LBB302_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB302_18:                             # %if.end27
	jmp	.LBB302_19
.LBB302_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$698538466, -36(%rbp)   # imm = 0x29A2D9E2
	jne	.LBB302_21
.LBB302_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_20
.Lfunc_end302:
	.size	writeLumaCoeff8x8.261, .Lfunc_end302-writeLumaCoeff8x8.261
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.262 # -- Begin function writeLumaCoeff4x4_CABAC.262
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.262,@function
writeLumaCoeff4x4_CABAC.262:            # @writeLumaCoeff4x4_CABAC.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$784401872, -52(%rbp)   # imm = 0x2EC105D0
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB303_3
.LBB303_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB303_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB303_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB303_6
.LBB303_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB303_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB303_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB303_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB303_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB303_9:                              # %land.end
                                        #   in Loop: Header=BB303_7 Depth=1
	testb	$1, %al
	jne	.LBB303_10
	jmp	.LBB303_15
.LBB303_10:                             # %for.body
                                        #   in Loop: Header=BB303_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB303_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB303_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB303_13
.LBB303_12:                             # %cond.false40
                                        #   in Loop: Header=BB303_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB303_13:                             # %cond.end43
                                        #   in Loop: Header=BB303_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB303_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_7
.LBB303_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$784401872, -52(%rbp)   # imm = 0x2EC105D0
	jne	.LBB303_17
.LBB303_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_16
.Lfunc_end303:
	.size	writeLumaCoeff4x4_CABAC.262, .Lfunc_end303-writeLumaCoeff4x4_CABAC.262
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.263 # -- Begin function writeMotionInfo2NAL.263
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.263,@function
writeMotionInfo2NAL.263:                # @writeMotionInfo2NAL.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$93570365, -56(%rbp)    # imm = 0x593C53D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB304_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB304_3
.LBB304_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB304_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB304_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB304_6
.LBB304_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB304_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB304_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB304_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB304_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB304_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB304_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB304_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB304_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB304_39
.LBB304_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB304_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB304_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB304_15 Depth=1
	movl	$0, -16(%rbp)
.LBB304_17:                             # %for.cond45
                                        #   Parent Loop BB304_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB304_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB304_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB304_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB304_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB304_22
.LBB304_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB304_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB304_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB304_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB304_22:                             # %if.end
                                        #   in Loop: Header=BB304_17 Depth=2
	jmp	.LBB304_23
.LBB304_23:                             # %for.inc
                                        #   in Loop: Header=BB304_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_17
.LBB304_24:                             # %for.end
                                        #   in Loop: Header=BB304_15 Depth=1
	jmp	.LBB304_25
.LBB304_25:                             # %for.inc79
                                        #   in Loop: Header=BB304_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_15
.LBB304_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB304_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB304_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB304_27 Depth=1
	movl	$0, -16(%rbp)
.LBB304_29:                             # %for.cond86
                                        #   Parent Loop BB304_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB304_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB304_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB304_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB304_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB304_34
.LBB304_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB304_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB304_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB304_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB304_34:                             # %if.end126
                                        #   in Loop: Header=BB304_29 Depth=2
	jmp	.LBB304_35
.LBB304_35:                             # %for.inc127
                                        #   in Loop: Header=BB304_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_29
.LBB304_36:                             # %for.end129
                                        #   in Loop: Header=BB304_27 Depth=1
	jmp	.LBB304_37
.LBB304_37:                             # %for.inc130
                                        #   in Loop: Header=BB304_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_27
.LBB304_38:                             # %for.end132
	jmp	.LBB304_39
.LBB304_39:                             # %if.end133
	jmp	.LBB304_40
.LBB304_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB304_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB304_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB304_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB304_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB304_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB304_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB304_45 Depth=1
	movl	$0, -16(%rbp)
.LBB304_47:                             # %for.cond155
                                        #   Parent Loop BB304_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB304_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB304_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB304_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB304_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB304_52
.LBB304_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB304_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB304_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB304_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB304_52:                             # %if.end197
                                        #   in Loop: Header=BB304_47 Depth=2
	jmp	.LBB304_53
.LBB304_53:                             # %for.inc198
                                        #   in Loop: Header=BB304_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_47
.LBB304_54:                             # %for.end200
                                        #   in Loop: Header=BB304_45 Depth=1
	jmp	.LBB304_55
.LBB304_55:                             # %for.inc201
                                        #   in Loop: Header=BB304_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_45
.LBB304_56:                             # %for.end203
	jmp	.LBB304_57
.LBB304_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB304_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB304_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB304_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB304_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB304_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB304_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB304_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB304_63 Depth=1
	movl	$0, -16(%rbp)
.LBB304_65:                             # %for.cond227
                                        #   Parent Loop BB304_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB304_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB304_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB304_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB304_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB304_70
.LBB304_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB304_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB304_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB304_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB304_70:                             # %if.end269
                                        #   in Loop: Header=BB304_65 Depth=2
	jmp	.LBB304_71
.LBB304_71:                             # %for.inc270
                                        #   in Loop: Header=BB304_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_65
.LBB304_72:                             # %for.end272
                                        #   in Loop: Header=BB304_63 Depth=1
	jmp	.LBB304_73
.LBB304_73:                             # %for.inc273
                                        #   in Loop: Header=BB304_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_63
.LBB304_74:                             # %for.end275
	jmp	.LBB304_75
.LBB304_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$93570365, -56(%rbp)    # imm = 0x593C53D
	jne	.LBB304_77
.LBB304_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_76
.Lfunc_end304:
	.size	writeMotionInfo2NAL.263, .Lfunc_end304-writeMotionInfo2NAL.263
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.264  # -- Begin function LumaResidualCoding.264
	.p2align	4, 0x90
	.type	LumaResidualCoding.264,@function
LumaResidualCoding.264:                 # @LumaResidualCoding.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1367270864, -52(%rbp)  # imm = 0x517EE5D0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB305_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB305_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_1
.LBB305_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB305_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB305_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB305_33
.LBB305_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB305_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB305_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB305_8 Depth=1
	movl	$0, -12(%rbp)
.LBB305_10:                             # %for.cond13
                                        #   Parent Loop BB305_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB305_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB305_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB305_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB305_14
.LBB305_13:                             # %if.else
                                        #   in Loop: Header=BB305_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB305_14:                             # %if.end
                                        #   in Loop: Header=BB305_10 Depth=2
	jmp	.LBB305_15
.LBB305_15:                             # %for.inc31
                                        #   in Loop: Header=BB305_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_10
.LBB305_16:                             # %for.end33
                                        #   in Loop: Header=BB305_8 Depth=1
	jmp	.LBB305_17
.LBB305_17:                             # %for.inc34
                                        #   in Loop: Header=BB305_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_8
.LBB305_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB305_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_22 Depth 2
                                        #       Child Loop BB305_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB305_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB305_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB305_22:                             # %for.cond45
                                        #   Parent Loop BB305_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB305_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB305_22 Depth=2
	movl	$0, -12(%rbp)
.LBB305_24:                             # %for.cond48
                                        #   Parent Loop BB305_20 Depth=1
                                        #     Parent Loop BB305_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB305_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB305_24 Depth=3
	movl	-48(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB305_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_24
.LBB305_27:                             # %for.end55
                                        #   in Loop: Header=BB305_22 Depth=2
	jmp	.LBB305_28
.LBB305_28:                             # %for.inc56
                                        #   in Loop: Header=BB305_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_22
.LBB305_29:                             # %for.end58
                                        #   in Loop: Header=BB305_20 Depth=1
	jmp	.LBB305_30
.LBB305_30:                             # %for.inc59
                                        #   in Loop: Header=BB305_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_20
.LBB305_31:                             # %for.end61
	jmp	.LBB305_32
.LBB305_32:                             # %if.end62
	jmp	.LBB305_33
.LBB305_33:                             # %if.end63
	cmpl	$1367270864, -52(%rbp)  # imm = 0x517EE5D0
	jne	.LBB305_35
.LBB305_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_34
.Lfunc_end305:
	.size	LumaResidualCoding.264, .Lfunc_end305-LumaResidualCoding.264
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.265   # -- Begin function writeLumaCoeff8x8.265
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.265,@function
writeLumaCoeff8x8.265:                  # @writeLumaCoeff8x8.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$341451957, -36(%rbp)   # imm = 0x145A24B5
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB306_2
# %bb.1:                                # %if.then
	jmp	.LBB306_2
.LBB306_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB306_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_15
.LBB306_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB306_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB306_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB306_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB306_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB306_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB306_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB306_10
.LBB306_9:                              # %cond.false
                                        #   in Loop: Header=BB306_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB306_10:                             # %cond.end
                                        #   in Loop: Header=BB306_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_12
.LBB306_11:                             # %if.else
                                        #   in Loop: Header=BB306_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB306_12:                             # %if.end17
                                        #   in Loop: Header=BB306_5 Depth=1
	jmp	.LBB306_13
.LBB306_13:                             # %for.inc
                                        #   in Loop: Header=BB306_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_5
.LBB306_14:                             # %for.end
	jmp	.LBB306_19
.LBB306_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB306_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_18
.LBB306_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB306_18:                             # %if.end27
	jmp	.LBB306_19
.LBB306_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$341451957, -36(%rbp)   # imm = 0x145A24B5
	jne	.LBB306_21
.LBB306_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_20
.Lfunc_end306:
	.size	writeLumaCoeff8x8.265, .Lfunc_end306-writeLumaCoeff8x8.265
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.266  # -- Begin function LumaResidualCoding.266
	.p2align	4, 0x90
	.type	LumaResidualCoding.266,@function
LumaResidualCoding.266:                 # @LumaResidualCoding.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1963380725, -40(%rbp)  # imm = 0x7506CFF5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB307_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB307_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB307_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB307_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB307_1
.LBB307_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB307_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB307_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB307_33
.LBB307_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB307_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB307_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB307_8 Depth=1
	movl	$0, -4(%rbp)
.LBB307_10:                             # %for.cond13
                                        #   Parent Loop BB307_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB307_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB307_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB307_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB307_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB307_14
.LBB307_13:                             # %if.else
                                        #   in Loop: Header=BB307_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB307_14:                             # %if.end
                                        #   in Loop: Header=BB307_10 Depth=2
	jmp	.LBB307_15
.LBB307_15:                             # %for.inc31
                                        #   in Loop: Header=BB307_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_10
.LBB307_16:                             # %for.end33
                                        #   in Loop: Header=BB307_8 Depth=1
	jmp	.LBB307_17
.LBB307_17:                             # %for.inc34
                                        #   in Loop: Header=BB307_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_8
.LBB307_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB307_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB307_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_22 Depth 2
                                        #       Child Loop BB307_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB307_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB307_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB307_22:                             # %for.cond45
                                        #   Parent Loop BB307_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB307_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB307_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB307_22 Depth=2
	movl	$0, -4(%rbp)
.LBB307_24:                             # %for.cond48
                                        #   Parent Loop BB307_20 Depth=1
                                        #     Parent Loop BB307_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB307_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB307_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB307_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_24
.LBB307_27:                             # %for.end55
                                        #   in Loop: Header=BB307_22 Depth=2
	jmp	.LBB307_28
.LBB307_28:                             # %for.inc56
                                        #   in Loop: Header=BB307_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_22
.LBB307_29:                             # %for.end58
                                        #   in Loop: Header=BB307_20 Depth=1
	jmp	.LBB307_30
.LBB307_30:                             # %for.inc59
                                        #   in Loop: Header=BB307_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB307_20
.LBB307_31:                             # %for.end61
	jmp	.LBB307_32
.LBB307_32:                             # %if.end62
	jmp	.LBB307_33
.LBB307_33:                             # %if.end63
	cmpl	$1963380725, -40(%rbp)  # imm = 0x7506CFF5
	jne	.LBB307_35
.LBB307_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_34
.Lfunc_end307:
	.size	LumaResidualCoding.266, .Lfunc_end307-LumaResidualCoding.266
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.267 # -- Begin function writeLumaCoeff4x4_CABAC.267
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.267,@function
writeLumaCoeff4x4_CABAC.267:            # @writeLumaCoeff4x4_CABAC.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1100686879, -52(%rbp)  # imm = 0x419B261F
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB308_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB308_3
.LBB308_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB308_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB308_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB308_6
.LBB308_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB308_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB308_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB308_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB308_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB308_9:                              # %land.end
                                        #   in Loop: Header=BB308_7 Depth=1
	testb	$1, %al
	jne	.LBB308_10
	jmp	.LBB308_15
.LBB308_10:                             # %for.body
                                        #   in Loop: Header=BB308_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB308_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB308_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB308_13
.LBB308_12:                             # %cond.false40
                                        #   in Loop: Header=BB308_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB308_13:                             # %cond.end43
                                        #   in Loop: Header=BB308_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB308_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_7
.LBB308_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1100686879, -52(%rbp)  # imm = 0x419B261F
	jne	.LBB308_17
.LBB308_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_16
.Lfunc_end308:
	.size	writeLumaCoeff4x4_CABAC.267, .Lfunc_end308-writeLumaCoeff4x4_CABAC.267
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.268 # -- Begin function write_one_macroblock.268
	.p2align	4, 0x90
	.type	write_one_macroblock.268,@function
write_one_macroblock.268:               # @write_one_macroblock.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$613736344, -32(%rbp)   # imm = 0x2494DF98
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB309_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB309_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB309_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB309_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB309_6
.LBB309_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB309_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB309_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB309_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB309_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB309_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB309_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB309_22
.LBB309_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB309_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB309_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB309_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB309_14 Depth=1
	movl	$0, -20(%rbp)
.LBB309_16:                             # %for.cond24
                                        #   Parent Loop BB309_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB309_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB309_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB309_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB309_16
.LBB309_19:                             # %for.end
                                        #   in Loop: Header=BB309_14 Depth=1
	jmp	.LBB309_20
.LBB309_20:                             # %for.inc35
                                        #   in Loop: Header=BB309_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB309_14
.LBB309_21:                             # %for.end37
	jmp	.LBB309_22
.LBB309_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB309_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB309_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_30
.LBB309_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB309_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB309_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB309_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB309_29:                             # %if.end59
	jmp	.LBB309_30
.LBB309_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB309_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB309_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$613736344, -32(%rbp)   # imm = 0x2494DF98
	jne	.LBB309_34
.LBB309_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_33
.Lfunc_end309:
	.size	write_one_macroblock.268, .Lfunc_end309-write_one_macroblock.268
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.269 # -- Begin function OneComponentChromaPrediction4x4.269
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.269,@function
OneComponentChromaPrediction4x4.269:    # @OneComponentChromaPrediction4x4.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1729704579, -108(%rbp) # imm = 0x67193283
	movq	%rdi, -136(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -60(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB310_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB310_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB310_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB310_6
.LBB310_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB310_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_8
.LBB310_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB310_8:                              # %if.end13
	movl	-80(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB310_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB310_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB310_9 Depth=1
	movl	$0, -28(%rbp)
.LBB310_11:                             # %for.cond20
                                        #   Parent Loop BB310_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB310_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-60(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-28(%rbp), %eax
	addl	-88(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB310_15
.LBB310_14:                             # %cond.false
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB310_15:                             # %cond.end
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB310_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB310_21
.LBB310_17:                             # %cond.false65
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB310_20
.LBB310_19:                             # %cond.false74
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB310_20:                             # %cond.end76
                                        #   in Loop: Header=BB310_11 Depth=2
.LBB310_21:                             # %cond.end78
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB310_24
.LBB310_23:                             # %cond.false84
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB310_24:                             # %cond.end86
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB310_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB310_30
.LBB310_26:                             # %cond.false91
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB310_29
.LBB310_28:                             # %cond.false96
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB310_29:                             # %cond.end98
                                        #   in Loop: Header=BB310_11 Depth=2
.LBB310_30:                             # %cond.end100
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB310_33
.LBB310_32:                             # %cond.false111
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB310_33:                             # %cond.end114
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB310_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB310_39
.LBB310_35:                             # %cond.false119
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB310_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB310_38
.LBB310_37:                             # %cond.false129
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB310_38:                             # %cond.end132
                                        #   in Loop: Header=BB310_11 Depth=2
.LBB310_39:                             # %cond.end134
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB310_42
.LBB310_41:                             # %cond.false141
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB310_42:                             # %cond.end144
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB310_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB310_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB310_48
.LBB310_44:                             # %cond.false149
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB310_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB310_47
.LBB310_46:                             # %cond.false155
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB310_47:                             # %cond.end158
                                        #   in Loop: Header=BB310_11 Depth=2
.LBB310_48:                             # %cond.end160
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	imull	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-76(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-64(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB310_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB310_11
.LBB310_50:                             # %for.end
                                        #   in Loop: Header=BB310_9 Depth=1
	jmp	.LBB310_51
.LBB310_51:                             # %for.inc198
                                        #   in Loop: Header=BB310_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_9
.LBB310_52:                             # %for.end200
	cmpl	$1729704579, -108(%rbp) # imm = 0x67193283
	jne	.LBB310_54
.LBB310_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_53
.Lfunc_end310:
	.size	OneComponentChromaPrediction4x4.269, .Lfunc_end310-OneComponentChromaPrediction4x4.269
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.270        # -- Begin function MBType2Value.270
	.p2align	4, 0x90
	.type	MBType2Value.270,@function
MBType2Value.270:                       # @MBType2Value.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1384859824, -36(%rbp)  # imm = 0x528B48B0
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB311_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB311_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB311_4
.LBB311_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB311_26
.LBB311_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB311_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB311_26
.LBB311_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB311_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB311_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB311_26
.LBB311_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB311_26
.LBB311_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB311_26
.LBB311_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB311_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB311_26
.LBB311_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB311_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB311_17
.LBB311_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB311_26
.LBB311_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB311_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB311_26
.LBB311_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB311_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB311_26
.LBB311_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB311_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB311_26
.LBB311_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB311_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB311_26
.LBB311_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB311_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1384859824, -36(%rbp)  # imm = 0x528B48B0
	jne	.LBB311_28
.LBB311_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_27
.Lfunc_end311:
	.size	MBType2Value.270, .Lfunc_end311-MBType2Value.270
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.271             # -- Begin function ZeroRef.271
	.p2align	4, 0x90
	.type	ZeroRef.271,@function
ZeroRef.271:                            # @ZeroRef.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1237115690, -24(%rbp)  # imm = 0x49BCE32A
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB312_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB312_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB312_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB312_1 Depth=1
	movl	$0, -12(%rbp)
.LBB312_3:                              # %for.cond1
                                        #   Parent Loop BB312_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB312_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB312_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB312_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB312_11
.LBB312_6:                              # %if.end
                                        #   in Loop: Header=BB312_3 Depth=2
	jmp	.LBB312_7
.LBB312_7:                              # %for.inc
                                        #   in Loop: Header=BB312_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB312_3
.LBB312_8:                              # %for.end
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_9
.LBB312_9:                              # %for.inc10
                                        #   in Loop: Header=BB312_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB312_1
.LBB312_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB312_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1237115690, -24(%rbp)  # imm = 0x49BCE32A
	jne	.LBB312_13
.LBB312_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_12
.Lfunc_end312:
	.size	ZeroRef.271, .Lfunc_end312-ZeroRef.271
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.272 # -- Begin function writeLumaCoeff4x4_CABAC.272
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.272,@function
writeLumaCoeff4x4_CABAC.272:            # @writeLumaCoeff4x4_CABAC.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1557727145, -52(%rbp)  # imm = 0x5CD907A9
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB313_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB313_3
.LBB313_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB313_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB313_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB313_6
.LBB313_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB313_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB313_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB313_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB313_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB313_9:                              # %land.end
                                        #   in Loop: Header=BB313_7 Depth=1
	testb	$1, %al
	jne	.LBB313_10
	jmp	.LBB313_15
.LBB313_10:                             # %for.body
                                        #   in Loop: Header=BB313_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB313_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB313_13
.LBB313_12:                             # %cond.false40
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB313_13:                             # %cond.end43
                                        #   in Loop: Header=BB313_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_7
.LBB313_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1557727145, -52(%rbp)  # imm = 0x5CD907A9
	jne	.LBB313_17
.LBB313_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_16
.Lfunc_end313:
	.size	writeLumaCoeff4x4_CABAC.272, .Lfunc_end313-writeLumaCoeff4x4_CABAC.272
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.273   # -- Begin function writeLumaCoeff8x8.273
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.273,@function
writeLumaCoeff8x8.273:                  # @writeLumaCoeff8x8.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$872046821, -36(%rbp)   # imm = 0x33FA60E5
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB314_2
# %bb.1:                                # %if.then
	jmp	.LBB314_2
.LBB314_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB314_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB314_15
.LBB314_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB314_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB314_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB314_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB314_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB314_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB314_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB314_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB314_10
.LBB314_9:                              # %cond.false
                                        #   in Loop: Header=BB314_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB314_10:                             # %cond.end
                                        #   in Loop: Header=BB314_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB314_12
.LBB314_11:                             # %if.else
                                        #   in Loop: Header=BB314_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB314_12:                             # %if.end17
                                        #   in Loop: Header=BB314_5 Depth=1
	jmp	.LBB314_13
.LBB314_13:                             # %for.inc
                                        #   in Loop: Header=BB314_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB314_5
.LBB314_14:                             # %for.end
	jmp	.LBB314_19
.LBB314_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB314_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB314_18
.LBB314_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB314_18:                             # %if.end27
	jmp	.LBB314_19
.LBB314_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$872046821, -36(%rbp)   # imm = 0x33FA60E5
	jne	.LBB314_21
.LBB314_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_20
.Lfunc_end314:
	.size	writeLumaCoeff8x8.273, .Lfunc_end314-writeLumaCoeff8x8.273
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.274        # -- Begin function MBType2Value.274
	.p2align	4, 0x90
	.type	MBType2Value.274,@function
MBType2Value.274:                       # @MBType2Value.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$622743428, -36(%rbp)   # imm = 0x251E4F84
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB315_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB315_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB315_4
.LBB315_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB315_26
.LBB315_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB315_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB315_26
.LBB315_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB315_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB315_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB315_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB315_26
.LBB315_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB315_26
.LBB315_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_26
.LBB315_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB315_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB315_26
.LBB315_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB315_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB315_17
.LBB315_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB315_26
.LBB315_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB315_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_26
.LBB315_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB315_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB315_26
.LBB315_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB315_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_26
.LBB315_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB315_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_26
.LBB315_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB315_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$622743428, -36(%rbp)   # imm = 0x251E4F84
	jne	.LBB315_28
.LBB315_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_27
.Lfunc_end315:
	.size	MBType2Value.274, .Lfunc_end315-MBType2Value.274
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.275   # -- Begin function writeLumaCoeff8x8.275
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.275,@function
writeLumaCoeff8x8.275:                  # @writeLumaCoeff8x8.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$556997151, -36(%rbp)   # imm = 0x21331A1F
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB316_2
# %bb.1:                                # %if.then
	jmp	.LBB316_2
.LBB316_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB316_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB316_15
.LBB316_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB316_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB316_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB316_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB316_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB316_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB316_10
.LBB316_9:                              # %cond.false
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB316_10:                             # %cond.end
                                        #   in Loop: Header=BB316_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB316_12
.LBB316_11:                             # %if.else
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB316_12:                             # %if.end17
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_13
.LBB316_13:                             # %for.inc
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB316_5
.LBB316_14:                             # %for.end
	jmp	.LBB316_19
.LBB316_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB316_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB316_18
.LBB316_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB316_18:                             # %if.end27
	jmp	.LBB316_19
.LBB316_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$556997151, -36(%rbp)   # imm = 0x21331A1F
	jne	.LBB316_21
.LBB316_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_20
.Lfunc_end316:
	.size	writeLumaCoeff8x8.275, .Lfunc_end316-writeLumaCoeff8x8.275
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.276 # -- Begin function ChromaResidualCoding.276
	.p2align	4, 0x90
	.type	ChromaResidualCoding.276,@function
ChromaResidualCoding.276:               # @ChromaResidualCoding.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1792420685, -80(%rbp)  # imm = 0x6AD62B4D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB317_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB317_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB317_3:                              # %lor.end
.LBB317_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB317_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_7 Depth 2
                                        #       Child Loop BB317_9 Depth 3
                                        #     Child Loop BB317_16 Depth 2
                                        #       Child Loop BB317_18 Depth 3
                                        #     Child Loop BB317_33 Depth 2
                                        #       Child Loop BB317_35 Depth 3
                                        #     Child Loop BB317_43 Depth 2
                                        #       Child Loop BB317_45 Depth 3
                                        #     Child Loop BB317_58 Depth 2
                                        #       Child Loop BB317_60 Depth 3
                                        #     Child Loop BB317_87 Depth 2
                                        #       Child Loop BB317_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB317_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB317_7:                              # %for.cond5
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB317_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB317_7 Depth=2
	movl	$0, -24(%rbp)
.LBB317_9:                              # %for.cond8
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB317_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB317_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB317_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB317_9
.LBB317_12:                             # %for.end
                                        #   in Loop: Header=BB317_7 Depth=2
	jmp	.LBB317_13
.LBB317_13:                             # %for.inc18
                                        #   in Loop: Header=BB317_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB317_7
.LBB317_14:                             # %for.end20
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB317_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -4(%rbp)
.LBB317_16:                             # %for.cond21
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB317_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB317_16 Depth=2
	movl	$0, -8(%rbp)
.LBB317_18:                             # %for.cond26
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB317_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB317_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB317_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB317_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB317_25
.LBB317_21:                             # %if.else
                                        #   in Loop: Header=BB317_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB317_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB317_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB317_24
.LBB317_23:                             # %if.else52
                                        #   in Loop: Header=BB317_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB317_24:                             # %if.end
                                        #   in Loop: Header=BB317_18 Depth=3
	jmp	.LBB317_25
.LBB317_25:                             # %if.end57
                                        #   in Loop: Header=BB317_18 Depth=3
	jmp	.LBB317_26
.LBB317_26:                             # %for.inc58
                                        #   in Loop: Header=BB317_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_18
.LBB317_27:                             # %for.end59
                                        #   in Loop: Header=BB317_16 Depth=2
	jmp	.LBB317_28
.LBB317_28:                             # %for.inc60
                                        #   in Loop: Header=BB317_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_16
.LBB317_29:                             # %for.end62
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_74
.LBB317_30:                             # %if.else63
                                        #   in Loop: Header=BB317_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB317_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB317_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -4(%rbp)
.LBB317_33:                             # %for.cond69
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB317_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB317_33 Depth=2
	movl	$0, -8(%rbp)
.LBB317_35:                             # %for.cond73
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB317_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB317_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB317_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_35
.LBB317_38:                             # %for.end83
                                        #   in Loop: Header=BB317_33 Depth=2
	jmp	.LBB317_39
.LBB317_39:                             # %for.inc84
                                        #   in Loop: Header=BB317_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_33
.LBB317_40:                             # %for.end86
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_73
.LBB317_41:                             # %if.else87
                                        #   in Loop: Header=BB317_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB317_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -4(%rbp)
.LBB317_43:                             # %for.cond90
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB317_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB317_43 Depth=2
	movl	$0, -8(%rbp)
.LBB317_45:                             # %for.cond95
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB317_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB317_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB317_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB317_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB317_52
.LBB317_48:                             # %if.else119
                                        #   in Loop: Header=BB317_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB317_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB317_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB317_51
.LBB317_50:                             # %if.else127
                                        #   in Loop: Header=BB317_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB317_51:                             # %if.end132
                                        #   in Loop: Header=BB317_45 Depth=3
	jmp	.LBB317_52
.LBB317_52:                             # %if.end133
                                        #   in Loop: Header=BB317_45 Depth=3
	jmp	.LBB317_53
.LBB317_53:                             # %for.inc134
                                        #   in Loop: Header=BB317_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_45
.LBB317_54:                             # %for.end136
                                        #   in Loop: Header=BB317_43 Depth=2
	jmp	.LBB317_55
.LBB317_55:                             # %for.inc137
                                        #   in Loop: Header=BB317_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_43
.LBB317_56:                             # %for.end139
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_72
.LBB317_57:                             # %if.else140
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -4(%rbp)
.LBB317_58:                             # %for.cond141
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB317_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB317_58 Depth=2
	movl	$0, -8(%rbp)
.LBB317_60:                             # %for.cond146
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB317_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB317_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB317_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB317_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB317_67
.LBB317_63:                             # %if.else175
                                        #   in Loop: Header=BB317_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB317_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB317_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB317_66
.LBB317_65:                             # %if.else188
                                        #   in Loop: Header=BB317_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB317_66:                             # %if.end198
                                        #   in Loop: Header=BB317_60 Depth=3
	jmp	.LBB317_67
.LBB317_67:                             # %if.end199
                                        #   in Loop: Header=BB317_60 Depth=3
	jmp	.LBB317_68
.LBB317_68:                             # %for.inc200
                                        #   in Loop: Header=BB317_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_60
.LBB317_69:                             # %for.end202
                                        #   in Loop: Header=BB317_58 Depth=2
	jmp	.LBB317_70
.LBB317_70:                             # %for.inc203
                                        #   in Loop: Header=BB317_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_58
.LBB317_71:                             # %for.end205
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_72
.LBB317_72:                             # %if.end206
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_73
.LBB317_73:                             # %if.end207
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_74
.LBB317_74:                             # %if.end208
                                        #   in Loop: Header=BB317_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB317_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB317_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB317_100
.LBB317_77:                             # %if.else215
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB317_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB317_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB317_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB317_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB317_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB317_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB317_84
.LBB317_83:                             # %if.then247
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB317_85
.LBB317_84:                             # %if.else249
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB317_85:                             # %if.end251
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB317_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	$0, -4(%rbp)
.LBB317_87:                             # %for.cond255
                                        #   Parent Loop BB317_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB317_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB317_87 Depth=2
	movl	$0, -8(%rbp)
.LBB317_89:                             # %for.cond260
                                        #   Parent Loop BB317_5 Depth=1
                                        #     Parent Loop BB317_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB317_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB317_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB317_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB317_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB317_93
.LBB317_92:                             # %if.else277
                                        #   in Loop: Header=BB317_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB317_93:                             # %if.end287
                                        #   in Loop: Header=BB317_89 Depth=3
	jmp	.LBB317_94
.LBB317_94:                             # %for.inc288
                                        #   in Loop: Header=BB317_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_89
.LBB317_95:                             # %for.end290
                                        #   in Loop: Header=BB317_87 Depth=2
	jmp	.LBB317_96
.LBB317_96:                             # %for.inc291
                                        #   in Loop: Header=BB317_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_87
.LBB317_97:                             # %for.end293
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_98
.LBB317_98:                             # %if.end294
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_99
.LBB317_99:                             # %if.end295
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_100
.LBB317_100:                            # %if.end296
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_101
.LBB317_101:                            # %for.inc297
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB317_5
.LBB317_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB317_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB317_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB317_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB317_104 Depth=1
	movl	$0, -8(%rbp)
.LBB317_106:                            # %for.cond312
                                        #   Parent Loop BB317_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB317_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB317_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB317_110
.LBB317_109:                            # %cond.false
                                        #   in Loop: Header=BB317_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB317_110:                            # %cond.end
                                        #   in Loop: Header=BB317_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB317_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB317_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB317_116
.LBB317_112:                            # %cond.false358
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB317_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB317_115
.LBB317_114:                            # %cond.false367
                                        #   in Loop: Header=BB317_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB317_115:                            # %cond.end373
                                        #   in Loop: Header=BB317_106 Depth=2
.LBB317_116:                            # %cond.end375
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB317_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB317_119
.LBB317_118:                            # %cond.false394
                                        #   in Loop: Header=BB317_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB317_119:                            # %cond.end400
                                        #   in Loop: Header=BB317_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB317_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB317_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB317_125
.LBB317_121:                            # %cond.false406
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB317_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB317_124
.LBB317_123:                            # %cond.false415
                                        #   in Loop: Header=BB317_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB317_124:                            # %cond.end421
                                        #   in Loop: Header=BB317_106 Depth=2
.LBB317_125:                            # %cond.end423
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB317_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB317_128
.LBB317_127:                            # %cond.false443
                                        #   in Loop: Header=BB317_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB317_128:                            # %cond.end449
                                        #   in Loop: Header=BB317_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB317_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB317_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB317_134
.LBB317_130:                            # %cond.false455
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB317_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB317_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB317_133
.LBB317_132:                            # %cond.false464
                                        #   in Loop: Header=BB317_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB317_133:                            # %cond.end470
                                        #   in Loop: Header=BB317_106 Depth=2
.LBB317_134:                            # %cond.end472
                                        #   in Loop: Header=BB317_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB317_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_106
.LBB317_136:                            # %for.end487
                                        #   in Loop: Header=BB317_104 Depth=1
	jmp	.LBB317_137
.LBB317_137:                            # %for.inc488
                                        #   in Loop: Header=BB317_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_104
.LBB317_138:                            # %for.end490
	jmp	.LBB317_139
.LBB317_139:                            # %if.end491
	cmpl	$1792420685, -80(%rbp)  # imm = 0x6AD62B4D
	jne	.LBB317_141
.LBB317_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_140
.Lfunc_end317:
	.size	ChromaResidualCoding.276, .Lfunc_end317-ChromaResidualCoding.276
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.277 # -- Begin function writeMotionInfo2NAL.277
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.277,@function
writeMotionInfo2NAL.277:                # @writeMotionInfo2NAL.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1018950820, -56(%rbp)  # imm = 0x3CBBF4A4
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB318_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB318_3
.LBB318_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB318_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB318_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB318_6
.LBB318_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB318_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB318_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB318_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB318_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB318_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB318_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB318_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB318_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB318_39
.LBB318_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB318_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB318_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB318_15 Depth=1
	movl	$0, -16(%rbp)
.LBB318_17:                             # %for.cond45
                                        #   Parent Loop BB318_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB318_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB318_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB318_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB318_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB318_22
.LBB318_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB318_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB318_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB318_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB318_22:                             # %if.end
                                        #   in Loop: Header=BB318_17 Depth=2
	jmp	.LBB318_23
.LBB318_23:                             # %for.inc
                                        #   in Loop: Header=BB318_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_17
.LBB318_24:                             # %for.end
                                        #   in Loop: Header=BB318_15 Depth=1
	jmp	.LBB318_25
.LBB318_25:                             # %for.inc79
                                        #   in Loop: Header=BB318_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_15
.LBB318_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB318_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB318_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB318_27 Depth=1
	movl	$0, -16(%rbp)
.LBB318_29:                             # %for.cond86
                                        #   Parent Loop BB318_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB318_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB318_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB318_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB318_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB318_34
.LBB318_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB318_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB318_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB318_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB318_34:                             # %if.end126
                                        #   in Loop: Header=BB318_29 Depth=2
	jmp	.LBB318_35
.LBB318_35:                             # %for.inc127
                                        #   in Loop: Header=BB318_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_29
.LBB318_36:                             # %for.end129
                                        #   in Loop: Header=BB318_27 Depth=1
	jmp	.LBB318_37
.LBB318_37:                             # %for.inc130
                                        #   in Loop: Header=BB318_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_27
.LBB318_38:                             # %for.end132
	jmp	.LBB318_39
.LBB318_39:                             # %if.end133
	jmp	.LBB318_40
.LBB318_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB318_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB318_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB318_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB318_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB318_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB318_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB318_45 Depth=1
	movl	$0, -16(%rbp)
.LBB318_47:                             # %for.cond155
                                        #   Parent Loop BB318_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB318_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB318_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB318_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB318_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB318_52
.LBB318_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB318_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB318_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB318_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB318_52:                             # %if.end197
                                        #   in Loop: Header=BB318_47 Depth=2
	jmp	.LBB318_53
.LBB318_53:                             # %for.inc198
                                        #   in Loop: Header=BB318_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_47
.LBB318_54:                             # %for.end200
                                        #   in Loop: Header=BB318_45 Depth=1
	jmp	.LBB318_55
.LBB318_55:                             # %for.inc201
                                        #   in Loop: Header=BB318_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_45
.LBB318_56:                             # %for.end203
	jmp	.LBB318_57
.LBB318_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB318_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB318_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB318_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB318_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB318_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB318_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB318_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB318_63 Depth=1
	movl	$0, -16(%rbp)
.LBB318_65:                             # %for.cond227
                                        #   Parent Loop BB318_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB318_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB318_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB318_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB318_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB318_70
.LBB318_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB318_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB318_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB318_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB318_70:                             # %if.end269
                                        #   in Loop: Header=BB318_65 Depth=2
	jmp	.LBB318_71
.LBB318_71:                             # %for.inc270
                                        #   in Loop: Header=BB318_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_65
.LBB318_72:                             # %for.end272
                                        #   in Loop: Header=BB318_63 Depth=1
	jmp	.LBB318_73
.LBB318_73:                             # %for.inc273
                                        #   in Loop: Header=BB318_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_63
.LBB318_74:                             # %for.end275
	jmp	.LBB318_75
.LBB318_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1018950820, -56(%rbp)  # imm = 0x3CBBF4A4
	jne	.LBB318_77
.LBB318_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_76
.Lfunc_end318:
	.size	writeMotionInfo2NAL.277, .Lfunc_end318-writeMotionInfo2NAL.277
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.278   # -- Begin function writeLumaCoeff8x8.278
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.278,@function
writeLumaCoeff8x8.278:                  # @writeLumaCoeff8x8.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$538949675, -36(%rbp)   # imm = 0x201FB82B
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB319_2
# %bb.1:                                # %if.then
	jmp	.LBB319_2
.LBB319_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB319_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB319_15
.LBB319_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB319_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB319_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB319_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB319_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB319_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB319_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB319_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB319_10
.LBB319_9:                              # %cond.false
                                        #   in Loop: Header=BB319_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB319_10:                             # %cond.end
                                        #   in Loop: Header=BB319_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_12
.LBB319_11:                             # %if.else
                                        #   in Loop: Header=BB319_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB319_12:                             # %if.end17
                                        #   in Loop: Header=BB319_5 Depth=1
	jmp	.LBB319_13
.LBB319_13:                             # %for.inc
                                        #   in Loop: Header=BB319_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB319_5
.LBB319_14:                             # %for.end
	jmp	.LBB319_19
.LBB319_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB319_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_18
.LBB319_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB319_18:                             # %if.end27
	jmp	.LBB319_19
.LBB319_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$538949675, -36(%rbp)   # imm = 0x201FB82B
	jne	.LBB319_21
.LBB319_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_20
.Lfunc_end319:
	.size	writeLumaCoeff8x8.278, .Lfunc_end319-writeLumaCoeff8x8.278
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.279 # -- Begin function writeMotionInfo2NAL.279
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.279,@function
writeMotionInfo2NAL.279:                # @writeMotionInfo2NAL.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$581507403, -56(%rbp)   # imm = 0x22A9194B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB320_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB320_3
.LBB320_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB320_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB320_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB320_6
.LBB320_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB320_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB320_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB320_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB320_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB320_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB320_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB320_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB320_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB320_39
.LBB320_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB320_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB320_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB320_15 Depth=1
	movl	$0, -16(%rbp)
.LBB320_17:                             # %for.cond45
                                        #   Parent Loop BB320_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB320_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB320_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB320_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB320_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB320_22
.LBB320_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB320_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB320_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB320_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB320_22:                             # %if.end
                                        #   in Loop: Header=BB320_17 Depth=2
	jmp	.LBB320_23
.LBB320_23:                             # %for.inc
                                        #   in Loop: Header=BB320_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_17
.LBB320_24:                             # %for.end
                                        #   in Loop: Header=BB320_15 Depth=1
	jmp	.LBB320_25
.LBB320_25:                             # %for.inc79
                                        #   in Loop: Header=BB320_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_15
.LBB320_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB320_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB320_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB320_27 Depth=1
	movl	$0, -16(%rbp)
.LBB320_29:                             # %for.cond86
                                        #   Parent Loop BB320_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB320_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB320_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB320_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB320_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB320_34
.LBB320_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB320_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB320_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB320_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB320_34:                             # %if.end126
                                        #   in Loop: Header=BB320_29 Depth=2
	jmp	.LBB320_35
.LBB320_35:                             # %for.inc127
                                        #   in Loop: Header=BB320_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_29
.LBB320_36:                             # %for.end129
                                        #   in Loop: Header=BB320_27 Depth=1
	jmp	.LBB320_37
.LBB320_37:                             # %for.inc130
                                        #   in Loop: Header=BB320_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_27
.LBB320_38:                             # %for.end132
	jmp	.LBB320_39
.LBB320_39:                             # %if.end133
	jmp	.LBB320_40
.LBB320_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB320_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB320_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB320_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB320_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB320_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB320_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB320_45 Depth=1
	movl	$0, -16(%rbp)
.LBB320_47:                             # %for.cond155
                                        #   Parent Loop BB320_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB320_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB320_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB320_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB320_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB320_52
.LBB320_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB320_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB320_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB320_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB320_52:                             # %if.end197
                                        #   in Loop: Header=BB320_47 Depth=2
	jmp	.LBB320_53
.LBB320_53:                             # %for.inc198
                                        #   in Loop: Header=BB320_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_47
.LBB320_54:                             # %for.end200
                                        #   in Loop: Header=BB320_45 Depth=1
	jmp	.LBB320_55
.LBB320_55:                             # %for.inc201
                                        #   in Loop: Header=BB320_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_45
.LBB320_56:                             # %for.end203
	jmp	.LBB320_57
.LBB320_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB320_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB320_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB320_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB320_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB320_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB320_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB320_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB320_63 Depth=1
	movl	$0, -16(%rbp)
.LBB320_65:                             # %for.cond227
                                        #   Parent Loop BB320_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB320_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB320_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB320_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB320_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB320_70
.LBB320_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB320_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB320_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB320_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB320_70:                             # %if.end269
                                        #   in Loop: Header=BB320_65 Depth=2
	jmp	.LBB320_71
.LBB320_71:                             # %for.inc270
                                        #   in Loop: Header=BB320_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_65
.LBB320_72:                             # %for.end272
                                        #   in Loop: Header=BB320_63 Depth=1
	jmp	.LBB320_73
.LBB320_73:                             # %for.inc273
                                        #   in Loop: Header=BB320_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_63
.LBB320_74:                             # %for.end275
	jmp	.LBB320_75
.LBB320_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$581507403, -56(%rbp)   # imm = 0x22A9194B
	jne	.LBB320_77
.LBB320_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_76
.Lfunc_end320:
	.size	writeMotionInfo2NAL.279, .Lfunc_end320-writeMotionInfo2NAL.279
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.280 # -- Begin function ChromaResidualCoding.280
	.p2align	4, 0x90
	.type	ChromaResidualCoding.280,@function
ChromaResidualCoding.280:               # @ChromaResidualCoding.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1710508299, -76(%rbp)  # imm = 0x65F4490B
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB321_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB321_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB321_3:                              # %lor.end
.LBB321_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB321_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB321_7 Depth 2
                                        #       Child Loop BB321_9 Depth 3
                                        #     Child Loop BB321_16 Depth 2
                                        #       Child Loop BB321_18 Depth 3
                                        #     Child Loop BB321_33 Depth 2
                                        #       Child Loop BB321_35 Depth 3
                                        #     Child Loop BB321_43 Depth 2
                                        #       Child Loop BB321_45 Depth 3
                                        #     Child Loop BB321_58 Depth 2
                                        #       Child Loop BB321_60 Depth 3
                                        #     Child Loop BB321_87 Depth 2
                                        #       Child Loop BB321_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB321_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB321_7:                              # %for.cond5
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB321_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB321_7 Depth=2
	movl	$0, -16(%rbp)
.LBB321_9:                              # %for.cond8
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB321_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB321_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB321_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB321_9
.LBB321_12:                             # %for.end
                                        #   in Loop: Header=BB321_7 Depth=2
	jmp	.LBB321_13
.LBB321_13:                             # %for.inc18
                                        #   in Loop: Header=BB321_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB321_7
.LBB321_14:                             # %for.end20
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB321_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -4(%rbp)
.LBB321_16:                             # %for.cond21
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB321_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB321_16 Depth=2
	movl	$0, -8(%rbp)
.LBB321_18:                             # %for.cond26
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB321_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB321_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB321_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB321_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB321_25
.LBB321_21:                             # %if.else
                                        #   in Loop: Header=BB321_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB321_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB321_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB321_24
.LBB321_23:                             # %if.else52
                                        #   in Loop: Header=BB321_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB321_24:                             # %if.end
                                        #   in Loop: Header=BB321_18 Depth=3
	jmp	.LBB321_25
.LBB321_25:                             # %if.end57
                                        #   in Loop: Header=BB321_18 Depth=3
	jmp	.LBB321_26
.LBB321_26:                             # %for.inc58
                                        #   in Loop: Header=BB321_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_18
.LBB321_27:                             # %for.end59
                                        #   in Loop: Header=BB321_16 Depth=2
	jmp	.LBB321_28
.LBB321_28:                             # %for.inc60
                                        #   in Loop: Header=BB321_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_16
.LBB321_29:                             # %for.end62
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_74
.LBB321_30:                             # %if.else63
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB321_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB321_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -4(%rbp)
.LBB321_33:                             # %for.cond69
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB321_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB321_33 Depth=2
	movl	$0, -8(%rbp)
.LBB321_35:                             # %for.cond73
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB321_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB321_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB321_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_35
.LBB321_38:                             # %for.end83
                                        #   in Loop: Header=BB321_33 Depth=2
	jmp	.LBB321_39
.LBB321_39:                             # %for.inc84
                                        #   in Loop: Header=BB321_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_33
.LBB321_40:                             # %for.end86
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_73
.LBB321_41:                             # %if.else87
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB321_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -4(%rbp)
.LBB321_43:                             # %for.cond90
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB321_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB321_43 Depth=2
	movl	$0, -8(%rbp)
.LBB321_45:                             # %for.cond95
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB321_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB321_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB321_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB321_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB321_52
.LBB321_48:                             # %if.else119
                                        #   in Loop: Header=BB321_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB321_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB321_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB321_51
.LBB321_50:                             # %if.else127
                                        #   in Loop: Header=BB321_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB321_51:                             # %if.end132
                                        #   in Loop: Header=BB321_45 Depth=3
	jmp	.LBB321_52
.LBB321_52:                             # %if.end133
                                        #   in Loop: Header=BB321_45 Depth=3
	jmp	.LBB321_53
.LBB321_53:                             # %for.inc134
                                        #   in Loop: Header=BB321_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_45
.LBB321_54:                             # %for.end136
                                        #   in Loop: Header=BB321_43 Depth=2
	jmp	.LBB321_55
.LBB321_55:                             # %for.inc137
                                        #   in Loop: Header=BB321_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_43
.LBB321_56:                             # %for.end139
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_72
.LBB321_57:                             # %if.else140
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -4(%rbp)
.LBB321_58:                             # %for.cond141
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB321_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB321_58 Depth=2
	movl	$0, -8(%rbp)
.LBB321_60:                             # %for.cond146
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB321_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB321_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB321_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB321_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB321_67
.LBB321_63:                             # %if.else175
                                        #   in Loop: Header=BB321_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB321_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB321_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB321_66
.LBB321_65:                             # %if.else188
                                        #   in Loop: Header=BB321_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB321_66:                             # %if.end198
                                        #   in Loop: Header=BB321_60 Depth=3
	jmp	.LBB321_67
.LBB321_67:                             # %if.end199
                                        #   in Loop: Header=BB321_60 Depth=3
	jmp	.LBB321_68
.LBB321_68:                             # %for.inc200
                                        #   in Loop: Header=BB321_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_60
.LBB321_69:                             # %for.end202
                                        #   in Loop: Header=BB321_58 Depth=2
	jmp	.LBB321_70
.LBB321_70:                             # %for.inc203
                                        #   in Loop: Header=BB321_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_58
.LBB321_71:                             # %for.end205
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_72
.LBB321_72:                             # %if.end206
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_73
.LBB321_73:                             # %if.end207
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_74
.LBB321_74:                             # %if.end208
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB321_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB321_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB321_100
.LBB321_77:                             # %if.else215
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB321_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB321_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB321_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB321_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB321_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB321_84
.LBB321_83:                             # %if.then247
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB321_85
.LBB321_84:                             # %if.else249
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB321_85:                             # %if.end251
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB321_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	$0, -4(%rbp)
.LBB321_87:                             # %for.cond255
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB321_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB321_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB321_87 Depth=2
	movl	$0, -8(%rbp)
.LBB321_89:                             # %for.cond260
                                        #   Parent Loop BB321_5 Depth=1
                                        #     Parent Loop BB321_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB321_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB321_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB321_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB321_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB321_93
.LBB321_92:                             # %if.else277
                                        #   in Loop: Header=BB321_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB321_93:                             # %if.end287
                                        #   in Loop: Header=BB321_89 Depth=3
	jmp	.LBB321_94
.LBB321_94:                             # %for.inc288
                                        #   in Loop: Header=BB321_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_89
.LBB321_95:                             # %for.end290
                                        #   in Loop: Header=BB321_87 Depth=2
	jmp	.LBB321_96
.LBB321_96:                             # %for.inc291
                                        #   in Loop: Header=BB321_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_87
.LBB321_97:                             # %for.end293
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_98
.LBB321_98:                             # %if.end294
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_99
.LBB321_99:                             # %if.end295
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_100
.LBB321_100:                            # %if.end296
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_101
.LBB321_101:                            # %for.inc297
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_5
.LBB321_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB321_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB321_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB321_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB321_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB321_104 Depth=1
	movl	$0, -8(%rbp)
.LBB321_106:                            # %for.cond312
                                        #   Parent Loop BB321_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB321_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB321_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB321_110
.LBB321_109:                            # %cond.false
                                        #   in Loop: Header=BB321_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB321_110:                            # %cond.end
                                        #   in Loop: Header=BB321_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB321_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB321_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB321_116
.LBB321_112:                            # %cond.false358
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB321_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB321_115
.LBB321_114:                            # %cond.false367
                                        #   in Loop: Header=BB321_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB321_115:                            # %cond.end373
                                        #   in Loop: Header=BB321_106 Depth=2
.LBB321_116:                            # %cond.end375
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB321_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB321_119
.LBB321_118:                            # %cond.false394
                                        #   in Loop: Header=BB321_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB321_119:                            # %cond.end400
                                        #   in Loop: Header=BB321_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB321_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB321_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB321_125
.LBB321_121:                            # %cond.false406
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB321_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB321_124
.LBB321_123:                            # %cond.false415
                                        #   in Loop: Header=BB321_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB321_124:                            # %cond.end421
                                        #   in Loop: Header=BB321_106 Depth=2
.LBB321_125:                            # %cond.end423
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB321_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB321_128
.LBB321_127:                            # %cond.false443
                                        #   in Loop: Header=BB321_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB321_128:                            # %cond.end449
                                        #   in Loop: Header=BB321_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB321_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB321_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB321_134
.LBB321_130:                            # %cond.false455
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB321_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB321_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB321_133
.LBB321_132:                            # %cond.false464
                                        #   in Loop: Header=BB321_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB321_133:                            # %cond.end470
                                        #   in Loop: Header=BB321_106 Depth=2
.LBB321_134:                            # %cond.end472
                                        #   in Loop: Header=BB321_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB321_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB321_106
.LBB321_136:                            # %for.end487
                                        #   in Loop: Header=BB321_104 Depth=1
	jmp	.LBB321_137
.LBB321_137:                            # %for.inc488
                                        #   in Loop: Header=BB321_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_104
.LBB321_138:                            # %for.end490
	jmp	.LBB321_139
.LBB321_139:                            # %if.end491
	cmpl	$1710508299, -76(%rbp)  # imm = 0x65F4490B
	jne	.LBB321_141
.LBB321_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_140
.Lfunc_end321:
	.size	ChromaResidualCoding.280, .Lfunc_end321-ChromaResidualCoding.280
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.281 # -- Begin function writeMotionInfo2NAL.281
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.281,@function
writeMotionInfo2NAL.281:                # @writeMotionInfo2NAL.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1131504529, -56(%rbp)  # imm = 0x43716391
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB322_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB322_3
.LBB322_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB322_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB322_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB322_6
.LBB322_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB322_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB322_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB322_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB322_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB322_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB322_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB322_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB322_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB322_39
.LBB322_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB322_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB322_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB322_15 Depth=1
	movl	$0, -16(%rbp)
.LBB322_17:                             # %for.cond45
                                        #   Parent Loop BB322_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB322_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB322_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB322_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB322_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB322_22
.LBB322_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB322_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB322_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB322_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB322_22:                             # %if.end
                                        #   in Loop: Header=BB322_17 Depth=2
	jmp	.LBB322_23
.LBB322_23:                             # %for.inc
                                        #   in Loop: Header=BB322_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB322_17
.LBB322_24:                             # %for.end
                                        #   in Loop: Header=BB322_15 Depth=1
	jmp	.LBB322_25
.LBB322_25:                             # %for.inc79
                                        #   in Loop: Header=BB322_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_15
.LBB322_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB322_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB322_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB322_27 Depth=1
	movl	$0, -16(%rbp)
.LBB322_29:                             # %for.cond86
                                        #   Parent Loop BB322_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB322_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB322_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB322_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB322_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB322_34
.LBB322_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB322_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB322_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB322_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB322_34:                             # %if.end126
                                        #   in Loop: Header=BB322_29 Depth=2
	jmp	.LBB322_35
.LBB322_35:                             # %for.inc127
                                        #   in Loop: Header=BB322_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB322_29
.LBB322_36:                             # %for.end129
                                        #   in Loop: Header=BB322_27 Depth=1
	jmp	.LBB322_37
.LBB322_37:                             # %for.inc130
                                        #   in Loop: Header=BB322_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_27
.LBB322_38:                             # %for.end132
	jmp	.LBB322_39
.LBB322_39:                             # %if.end133
	jmp	.LBB322_40
.LBB322_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB322_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB322_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB322_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB322_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB322_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB322_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB322_45 Depth=1
	movl	$0, -16(%rbp)
.LBB322_47:                             # %for.cond155
                                        #   Parent Loop BB322_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB322_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB322_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB322_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB322_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB322_52
.LBB322_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB322_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB322_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB322_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB322_52:                             # %if.end197
                                        #   in Loop: Header=BB322_47 Depth=2
	jmp	.LBB322_53
.LBB322_53:                             # %for.inc198
                                        #   in Loop: Header=BB322_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB322_47
.LBB322_54:                             # %for.end200
                                        #   in Loop: Header=BB322_45 Depth=1
	jmp	.LBB322_55
.LBB322_55:                             # %for.inc201
                                        #   in Loop: Header=BB322_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_45
.LBB322_56:                             # %for.end203
	jmp	.LBB322_57
.LBB322_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB322_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB322_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB322_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB322_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB322_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB322_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB322_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB322_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB322_63 Depth=1
	movl	$0, -16(%rbp)
.LBB322_65:                             # %for.cond227
                                        #   Parent Loop BB322_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB322_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB322_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB322_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB322_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB322_70
.LBB322_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB322_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB322_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB322_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB322_70:                             # %if.end269
                                        #   in Loop: Header=BB322_65 Depth=2
	jmp	.LBB322_71
.LBB322_71:                             # %for.inc270
                                        #   in Loop: Header=BB322_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB322_65
.LBB322_72:                             # %for.end272
                                        #   in Loop: Header=BB322_63 Depth=1
	jmp	.LBB322_73
.LBB322_73:                             # %for.inc273
                                        #   in Loop: Header=BB322_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_63
.LBB322_74:                             # %for.end275
	jmp	.LBB322_75
.LBB322_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1131504529, -56(%rbp)  # imm = 0x43716391
	jne	.LBB322_77
.LBB322_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_76
.Lfunc_end322:
	.size	writeMotionInfo2NAL.281, .Lfunc_end322-writeMotionInfo2NAL.281
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.282 # -- Begin function ChromaResidualCoding.282
	.p2align	4, 0x90
	.type	ChromaResidualCoding.282,@function
ChromaResidualCoding.282:               # @ChromaResidualCoding.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1026554686, -72(%rbp)  # imm = 0x3D2FFB3E
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB323_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB323_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB323_3:                              # %lor.end
.LBB323_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB323_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_7 Depth 2
                                        #       Child Loop BB323_9 Depth 3
                                        #     Child Loop BB323_16 Depth 2
                                        #       Child Loop BB323_18 Depth 3
                                        #     Child Loop BB323_33 Depth 2
                                        #       Child Loop BB323_35 Depth 3
                                        #     Child Loop BB323_43 Depth 2
                                        #       Child Loop BB323_45 Depth 3
                                        #     Child Loop BB323_58 Depth 2
                                        #       Child Loop BB323_60 Depth 3
                                        #     Child Loop BB323_87 Depth 2
                                        #       Child Loop BB323_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB323_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB323_7:                              # %for.cond5
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB323_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB323_7 Depth=2
	movl	$0, -20(%rbp)
.LBB323_9:                              # %for.cond8
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB323_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB323_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB323_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB323_9
.LBB323_12:                             # %for.end
                                        #   in Loop: Header=BB323_7 Depth=2
	jmp	.LBB323_13
.LBB323_13:                             # %for.inc18
                                        #   in Loop: Header=BB323_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_7
.LBB323_14:                             # %for.end20
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB323_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -4(%rbp)
.LBB323_16:                             # %for.cond21
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB323_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB323_16 Depth=2
	movl	$0, -8(%rbp)
.LBB323_18:                             # %for.cond26
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB323_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB323_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB323_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB323_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB323_25
.LBB323_21:                             # %if.else
                                        #   in Loop: Header=BB323_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB323_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB323_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB323_24
.LBB323_23:                             # %if.else52
                                        #   in Loop: Header=BB323_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB323_24:                             # %if.end
                                        #   in Loop: Header=BB323_18 Depth=3
	jmp	.LBB323_25
.LBB323_25:                             # %if.end57
                                        #   in Loop: Header=BB323_18 Depth=3
	jmp	.LBB323_26
.LBB323_26:                             # %for.inc58
                                        #   in Loop: Header=BB323_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_18
.LBB323_27:                             # %for.end59
                                        #   in Loop: Header=BB323_16 Depth=2
	jmp	.LBB323_28
.LBB323_28:                             # %for.inc60
                                        #   in Loop: Header=BB323_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_16
.LBB323_29:                             # %for.end62
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_74
.LBB323_30:                             # %if.else63
                                        #   in Loop: Header=BB323_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB323_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB323_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -4(%rbp)
.LBB323_33:                             # %for.cond69
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB323_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB323_33 Depth=2
	movl	$0, -8(%rbp)
.LBB323_35:                             # %for.cond73
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB323_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB323_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB323_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_35
.LBB323_38:                             # %for.end83
                                        #   in Loop: Header=BB323_33 Depth=2
	jmp	.LBB323_39
.LBB323_39:                             # %for.inc84
                                        #   in Loop: Header=BB323_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_33
.LBB323_40:                             # %for.end86
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_73
.LBB323_41:                             # %if.else87
                                        #   in Loop: Header=BB323_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB323_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -4(%rbp)
.LBB323_43:                             # %for.cond90
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB323_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB323_43 Depth=2
	movl	$0, -8(%rbp)
.LBB323_45:                             # %for.cond95
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB323_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB323_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB323_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB323_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB323_52
.LBB323_48:                             # %if.else119
                                        #   in Loop: Header=BB323_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB323_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB323_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB323_51
.LBB323_50:                             # %if.else127
                                        #   in Loop: Header=BB323_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB323_51:                             # %if.end132
                                        #   in Loop: Header=BB323_45 Depth=3
	jmp	.LBB323_52
.LBB323_52:                             # %if.end133
                                        #   in Loop: Header=BB323_45 Depth=3
	jmp	.LBB323_53
.LBB323_53:                             # %for.inc134
                                        #   in Loop: Header=BB323_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_45
.LBB323_54:                             # %for.end136
                                        #   in Loop: Header=BB323_43 Depth=2
	jmp	.LBB323_55
.LBB323_55:                             # %for.inc137
                                        #   in Loop: Header=BB323_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_43
.LBB323_56:                             # %for.end139
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_72
.LBB323_57:                             # %if.else140
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -4(%rbp)
.LBB323_58:                             # %for.cond141
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB323_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB323_58 Depth=2
	movl	$0, -8(%rbp)
.LBB323_60:                             # %for.cond146
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB323_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB323_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB323_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB323_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB323_67
.LBB323_63:                             # %if.else175
                                        #   in Loop: Header=BB323_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB323_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB323_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB323_66
.LBB323_65:                             # %if.else188
                                        #   in Loop: Header=BB323_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB323_66:                             # %if.end198
                                        #   in Loop: Header=BB323_60 Depth=3
	jmp	.LBB323_67
.LBB323_67:                             # %if.end199
                                        #   in Loop: Header=BB323_60 Depth=3
	jmp	.LBB323_68
.LBB323_68:                             # %for.inc200
                                        #   in Loop: Header=BB323_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_60
.LBB323_69:                             # %for.end202
                                        #   in Loop: Header=BB323_58 Depth=2
	jmp	.LBB323_70
.LBB323_70:                             # %for.inc203
                                        #   in Loop: Header=BB323_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_58
.LBB323_71:                             # %for.end205
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_72
.LBB323_72:                             # %if.end206
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_73
.LBB323_73:                             # %if.end207
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_74
.LBB323_74:                             # %if.end208
                                        #   in Loop: Header=BB323_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB323_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB323_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB323_100
.LBB323_77:                             # %if.else215
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB323_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB323_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB323_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB323_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB323_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB323_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB323_84
.LBB323_83:                             # %if.then247
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB323_85
.LBB323_84:                             # %if.else249
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB323_85:                             # %if.end251
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB323_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	$0, -4(%rbp)
.LBB323_87:                             # %for.cond255
                                        #   Parent Loop BB323_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB323_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB323_87 Depth=2
	movl	$0, -8(%rbp)
.LBB323_89:                             # %for.cond260
                                        #   Parent Loop BB323_5 Depth=1
                                        #     Parent Loop BB323_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB323_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB323_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB323_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB323_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB323_93
.LBB323_92:                             # %if.else277
                                        #   in Loop: Header=BB323_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB323_93:                             # %if.end287
                                        #   in Loop: Header=BB323_89 Depth=3
	jmp	.LBB323_94
.LBB323_94:                             # %for.inc288
                                        #   in Loop: Header=BB323_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_89
.LBB323_95:                             # %for.end290
                                        #   in Loop: Header=BB323_87 Depth=2
	jmp	.LBB323_96
.LBB323_96:                             # %for.inc291
                                        #   in Loop: Header=BB323_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_87
.LBB323_97:                             # %for.end293
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_98
.LBB323_98:                             # %if.end294
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_99
.LBB323_99:                             # %if.end295
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_100
.LBB323_100:                            # %if.end296
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_101
.LBB323_101:                            # %for.inc297
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_5
.LBB323_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB323_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB323_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB323_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB323_104 Depth=1
	movl	$0, -8(%rbp)
.LBB323_106:                            # %for.cond312
                                        #   Parent Loop BB323_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB323_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB323_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_110
.LBB323_109:                            # %cond.false
                                        #   in Loop: Header=BB323_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB323_110:                            # %cond.end
                                        #   in Loop: Header=BB323_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB323_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB323_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB323_116
.LBB323_112:                            # %cond.false358
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB323_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_115
.LBB323_114:                            # %cond.false367
                                        #   in Loop: Header=BB323_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB323_115:                            # %cond.end373
                                        #   in Loop: Header=BB323_106 Depth=2
.LBB323_116:                            # %cond.end375
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB323_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB323_119
.LBB323_118:                            # %cond.false394
                                        #   in Loop: Header=BB323_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB323_119:                            # %cond.end400
                                        #   in Loop: Header=BB323_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB323_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB323_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB323_125
.LBB323_121:                            # %cond.false406
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB323_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_124
.LBB323_123:                            # %cond.false415
                                        #   in Loop: Header=BB323_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB323_124:                            # %cond.end421
                                        #   in Loop: Header=BB323_106 Depth=2
.LBB323_125:                            # %cond.end423
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB323_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB323_128
.LBB323_127:                            # %cond.false443
                                        #   in Loop: Header=BB323_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB323_128:                            # %cond.end449
                                        #   in Loop: Header=BB323_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB323_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB323_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB323_134
.LBB323_130:                            # %cond.false455
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB323_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB323_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB323_133
.LBB323_132:                            # %cond.false464
                                        #   in Loop: Header=BB323_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB323_133:                            # %cond.end470
                                        #   in Loop: Header=BB323_106 Depth=2
.LBB323_134:                            # %cond.end472
                                        #   in Loop: Header=BB323_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB323_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_106
.LBB323_136:                            # %for.end487
                                        #   in Loop: Header=BB323_104 Depth=1
	jmp	.LBB323_137
.LBB323_137:                            # %for.inc488
                                        #   in Loop: Header=BB323_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_104
.LBB323_138:                            # %for.end490
	jmp	.LBB323_139
.LBB323_139:                            # %if.end491
	cmpl	$1026554686, -72(%rbp)  # imm = 0x3D2FFB3E
	jne	.LBB323_141
.LBB323_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_140
.Lfunc_end323:
	.size	ChromaResidualCoding.282, .Lfunc_end323-ChromaResidualCoding.282
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.283             # -- Begin function ZeroRef.283
	.p2align	4, 0x90
	.type	ZeroRef.283,@function
ZeroRef.283:                            # @ZeroRef.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$829573679, -24(%rbp)   # imm = 0x31724A2F
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB324_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB324_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	$0, -16(%rbp)
.LBB324_3:                              # %for.cond1
                                        #   Parent Loop BB324_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB324_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB324_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB324_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB324_11
.LBB324_6:                              # %if.end
                                        #   in Loop: Header=BB324_3 Depth=2
	jmp	.LBB324_7
.LBB324_7:                              # %for.inc
                                        #   in Loop: Header=BB324_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_3
.LBB324_8:                              # %for.end
                                        #   in Loop: Header=BB324_1 Depth=1
	jmp	.LBB324_9
.LBB324_9:                              # %for.inc10
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_1
.LBB324_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB324_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$829573679, -24(%rbp)   # imm = 0x31724A2F
	jne	.LBB324_13
.LBB324_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_12
.Lfunc_end324:
	.size	ZeroRef.283, .Lfunc_end324-ZeroRef.283
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.284        # -- Begin function MBType2Value.284
	.p2align	4, 0x90
	.type	MBType2Value.284,@function
MBType2Value.284:                       # @MBType2Value.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1275933396, -36(%rbp)  # imm = 0x4C0D32D4
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB325_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB325_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB325_4
.LBB325_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB325_26
.LBB325_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB325_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB325_26
.LBB325_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB325_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB325_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB325_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB325_26
.LBB325_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB325_26
.LBB325_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_26
.LBB325_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB325_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB325_26
.LBB325_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB325_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB325_17
.LBB325_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB325_26
.LBB325_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB325_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_26
.LBB325_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB325_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB325_26
.LBB325_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB325_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_26
.LBB325_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB325_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_26
.LBB325_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB325_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1275933396, -36(%rbp)  # imm = 0x4C0D32D4
	jne	.LBB325_28
.LBB325_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_27
.Lfunc_end325:
	.size	MBType2Value.284, .Lfunc_end325-MBType2Value.284
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.285             # -- Begin function ZeroRef.285
	.p2align	4, 0x90
	.type	ZeroRef.285,@function
ZeroRef.285:                            # @ZeroRef.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$382576599, -24(%rbp)   # imm = 0x16CDA7D7
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB326_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB326_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB326_1 Depth=1
	movl	$0, -12(%rbp)
.LBB326_3:                              # %for.cond1
                                        #   Parent Loop BB326_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB326_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB326_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB326_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB326_11
.LBB326_6:                              # %if.end
                                        #   in Loop: Header=BB326_3 Depth=2
	jmp	.LBB326_7
.LBB326_7:                              # %for.inc
                                        #   in Loop: Header=BB326_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_3
.LBB326_8:                              # %for.end
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_9
.LBB326_9:                              # %for.inc10
                                        #   in Loop: Header=BB326_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB326_1
.LBB326_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB326_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$382576599, -24(%rbp)   # imm = 0x16CDA7D7
	jne	.LBB326_13
.LBB326_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_12
.Lfunc_end326:
	.size	ZeroRef.285, .Lfunc_end326-ZeroRef.285
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.286             # -- Begin function ZeroRef.286
	.p2align	4, 0x90
	.type	ZeroRef.286,@function
ZeroRef.286:                            # @ZeroRef.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1781641732, -24(%rbp)  # imm = 0x6A31B204
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB327_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB327_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	$0, -16(%rbp)
.LBB327_3:                              # %for.cond1
                                        #   Parent Loop BB327_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB327_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB327_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB327_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB327_11
.LBB327_6:                              # %if.end
                                        #   in Loop: Header=BB327_3 Depth=2
	jmp	.LBB327_7
.LBB327_7:                              # %for.inc
                                        #   in Loop: Header=BB327_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB327_3
.LBB327_8:                              # %for.end
                                        #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_9
.LBB327_9:                              # %for.inc10
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB327_1
.LBB327_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB327_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1781641732, -24(%rbp)  # imm = 0x6A31B204
	jne	.LBB327_13
.LBB327_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_12
.Lfunc_end327:
	.size	ZeroRef.286, .Lfunc_end327-ZeroRef.286
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.287             # -- Begin function ZeroRef.287
	.p2align	4, 0x90
	.type	ZeroRef.287,@function
ZeroRef.287:                            # @ZeroRef.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1574537771, -24(%rbp)  # imm = 0x5DD98A2B
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB328_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB328_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB328_1 Depth=1
	movl	$0, -16(%rbp)
.LBB328_3:                              # %for.cond1
                                        #   Parent Loop BB328_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB328_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB328_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB328_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB328_11
.LBB328_6:                              # %if.end
                                        #   in Loop: Header=BB328_3 Depth=2
	jmp	.LBB328_7
.LBB328_7:                              # %for.inc
                                        #   in Loop: Header=BB328_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB328_3
.LBB328_8:                              # %for.end
                                        #   in Loop: Header=BB328_1 Depth=1
	jmp	.LBB328_9
.LBB328_9:                              # %for.inc10
                                        #   in Loop: Header=BB328_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB328_1
.LBB328_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB328_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1574537771, -24(%rbp)  # imm = 0x5DD98A2B
	jne	.LBB328_13
.LBB328_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_12
.Lfunc_end328:
	.size	ZeroRef.287, .Lfunc_end328-ZeroRef.287
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.288   # -- Begin function LumaPrediction4x4.288
	.p2align	4, 0x90
	.type	LumaPrediction4x4.288,@function
LumaPrediction4x4.288:                  # @LumaPrediction4x4.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$788851924, -104(%rbp)  # imm = 0x2F04ECD4
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB329_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB329_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB329_6
.LBB329_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB329_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB329_5:                              # %land.end
.LBB329_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB329_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB329_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB329_10
.LBB329_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB329_10
.LBB329_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB329_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB329_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB329_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB329_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB329_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB329_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB329_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB329_19
.LBB329_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB329_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB329_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB329_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB329_23
.LBB329_22:                             # %if.then45
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB329_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB329_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB329_26
.LBB329_25:                             # %if.then64
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB329_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB329_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB329_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB329_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_31:                             # %for.cond85
                                        #   Parent Loop BB329_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB329_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB329_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_31
.LBB329_34:                             # %for.end
                                        #   in Loop: Header=BB329_29 Depth=1
	jmp	.LBB329_35
.LBB329_35:                             # %for.inc125
                                        #   in Loop: Header=BB329_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_29
.LBB329_36:                             # %for.end127
	jmp	.LBB329_57
.LBB329_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB329_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB329_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_41:                             # %for.cond135
                                        #   Parent Loop BB329_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB329_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB329_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_41
.LBB329_44:                             # %for.end161
                                        #   in Loop: Header=BB329_39 Depth=1
	jmp	.LBB329_45
.LBB329_45:                             # %for.inc162
                                        #   in Loop: Header=BB329_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_39
.LBB329_46:                             # %for.end164
	jmp	.LBB329_56
.LBB329_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB329_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_50:                             # %for.cond170
                                        #   Parent Loop BB329_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB329_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB329_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_50
.LBB329_53:                             # %for.end196
                                        #   in Loop: Header=BB329_48 Depth=1
	jmp	.LBB329_54
.LBB329_54:                             # %for.inc197
                                        #   in Loop: Header=BB329_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_48
.LBB329_55:                             # %for.end199
	jmp	.LBB329_56
.LBB329_56:                             # %if.end200
	jmp	.LBB329_57
.LBB329_57:                             # %if.end201
	jmp	.LBB329_89
.LBB329_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB329_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB329_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_62:                             # %for.cond210
                                        #   Parent Loop BB329_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB329_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB329_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_62
.LBB329_65:                             # %for.end226
                                        #   in Loop: Header=BB329_60 Depth=1
	jmp	.LBB329_66
.LBB329_66:                             # %for.inc227
                                        #   in Loop: Header=BB329_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_60
.LBB329_67:                             # %for.end229
	jmp	.LBB329_88
.LBB329_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB329_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB329_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_72:                             # %for.cond238
                                        #   Parent Loop BB329_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB329_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB329_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_72
.LBB329_75:                             # %for.end251
                                        #   in Loop: Header=BB329_70 Depth=1
	jmp	.LBB329_76
.LBB329_76:                             # %for.inc252
                                        #   in Loop: Header=BB329_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_70
.LBB329_77:                             # %for.end254
	jmp	.LBB329_87
.LBB329_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB329_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_81:                             # %for.cond260
                                        #   Parent Loop BB329_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB329_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB329_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_81
.LBB329_84:                             # %for.end273
                                        #   in Loop: Header=BB329_79 Depth=1
	jmp	.LBB329_85
.LBB329_85:                             # %for.inc274
                                        #   in Loop: Header=BB329_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_79
.LBB329_86:                             # %for.end276
	jmp	.LBB329_87
.LBB329_87:                             # %if.end277
	jmp	.LBB329_88
.LBB329_88:                             # %if.end278
	jmp	.LBB329_89
.LBB329_89:                             # %if.end279
	cmpl	$788851924, -104(%rbp)  # imm = 0x2F04ECD4
	jne	.LBB329_91
.LBB329_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_90
.Lfunc_end329:
	.size	LumaPrediction4x4.288, .Lfunc_end329-LumaPrediction4x4.288
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
