	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.8
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.84
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.87
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.98
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.5
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.32
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.104
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.112
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.119
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.10
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.3
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.3
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.4
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.30
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.37
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.39
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.51
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.64
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.69
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.72
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.97
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.105
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.121
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.124
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.127
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.128
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.130
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.2
	movq	%rbx, %rdi
	callq	Build_Status_Map.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.91
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.93
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.115
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.116
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.11
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.113
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.125
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.7
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.99
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.6
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.14
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.1 # -- Begin function compute_residue_b8block.1
	.p2align	4, 0x90
	.type	compute_residue_b8block.1,@function
compute_residue_b8block.1:              # @compute_residue_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$137400620, -36(%rbp)   # imm = 0x830912C
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB11_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond4
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc22
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end24
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$137400620, -36(%rbp)   # imm = 0x830912C
	jne	.LBB11_21
.LBB11_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	compute_residue_b8block.1, .Lfunc_end11-compute_residue_b8block.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.2
.LCPI12_0:
	.quad	4636737291354636288     # double 100
.LCPI12_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.2
	.p2align	4, 0x90
	.type	Build_Status_Map.2,@function
Build_Status_Map.2:                     # @Build_Status_Map.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$486742650, -40(%rbp)   # imm = 0x1D031A7A
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB12_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB12_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB12_13
.LBB12_6:                               # %if.then
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB12_8:                               # %if.end
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB12_10:                              # %if.end20
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$1, -4(%rbp)
.LBB12_12:                              # %if.end29
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB12_13:                              # %if.end30
                                        #   in Loop: Header=BB12_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB12_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB12_18
.LBB12_15:                              # %if.else
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB12_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB12_17:                              # %if.end49
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_18
.LBB12_18:                              # %if.end50
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_3
.LBB12_20:                              # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc53
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_1
.LBB12_22:                              # %for.end55
	cmpl	$486742650, -40(%rbp)   # imm = 0x1D031A7A
	jne	.LBB12_24
.LBB12_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_23
.Lfunc_end12:
	.size	Build_Status_Map.2, .Lfunc_end12-Build_Status_Map.2
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.3   # -- Begin function Get_Reference_Pixel.3
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.3,@function
Get_Reference_Pixel.3:                  # @Get_Reference_Pixel.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1523886076, -104(%rbp) # imm = 0x5AD4A7FC
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB13_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB13_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB13_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB13_5
.LBB13_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB13_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB13_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB13_11
.LBB13_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB13_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB13_10
.LBB13_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB13_10:                              # %cond.end14
.LBB13_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB13_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB13_14
.LBB13_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB13_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB13_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB13_20
.LBB13_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB13_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB13_19
.LBB13_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB13_19:                              # %cond.end29
.LBB13_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_332
.LBB13_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB13_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB13_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB13_25
.LBB13_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB13_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB13_31
.LBB13_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB13_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB13_30
.LBB13_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB13_30:                              # %cond.end52
.LBB13_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB13_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB13_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_36
.LBB13_35:                              # %cond.false61
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_36:                              # %cond.end63
                                        #   in Loop: Header=BB13_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB13_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_42
.LBB13_38:                              # %cond.false68
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_41
.LBB13_40:                              # %cond.false73
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_41:                              # %cond.end75
                                        #   in Loop: Header=BB13_32 Depth=1
.LBB13_42:                              # %cond.end77
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB13_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_32
.LBB13_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_47
.LBB13_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB13_53
.LBB13_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_52
.LBB13_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_52:                              # %cond.end113
.LBB13_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB13_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB13_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB13_57
.LBB13_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB13_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB13_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB13_63
.LBB13_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB13_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB13_62
.LBB13_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB13_62:                              # %cond.end136
.LBB13_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB13_76
.LBB13_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB13_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB13_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB13_68
.LBB13_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB13_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB13_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB13_74
.LBB13_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB13_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB13_73
.LBB13_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB13_73:                              # %cond.end169
.LBB13_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB13_75:                              # %if.end
	jmp	.LBB13_76
.LBB13_76:                              # %if.end178
	jmp	.LBB13_331
.LBB13_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB13_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB13_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB13_81
.LBB13_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB13_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB13_87
.LBB13_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB13_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB13_86
.LBB13_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB13_86:                              # %cond.end197
.LBB13_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB13_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB13_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_92
.LBB13_91:                              # %cond.false209
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_92:                              # %cond.end211
                                        #   in Loop: Header=BB13_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB13_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_98
.LBB13_94:                              # %cond.false216
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_97
.LBB13_96:                              # %cond.false221
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_97:                              # %cond.end223
                                        #   in Loop: Header=BB13_88 Depth=1
.LBB13_98:                              # %cond.end225
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB13_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_88
.LBB13_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_103
.LBB13_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB13_109
.LBB13_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_108
.LBB13_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_108:                             # %cond.end266
.LBB13_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB13_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB13_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB13_113
.LBB13_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB13_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB13_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB13_119
.LBB13_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB13_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB13_118
.LBB13_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB13_118:                             # %cond.end287
.LBB13_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB13_132
.LBB13_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB13_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB13_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB13_124
.LBB13_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB13_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB13_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB13_130
.LBB13_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB13_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB13_129
.LBB13_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB13_129:                             # %cond.end320
.LBB13_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB13_131:                             # %if.end331
	jmp	.LBB13_132
.LBB13_132:                             # %if.end332
	jmp	.LBB13_330
.LBB13_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB13_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB13_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_139
.LBB13_138:                             # %cond.false345
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_139:                             # %cond.end347
                                        #   in Loop: Header=BB13_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB13_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_145
.LBB13_141:                             # %cond.false352
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_144
.LBB13_143:                             # %cond.false357
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_144:                             # %cond.end359
                                        #   in Loop: Header=BB13_135 Depth=1
.LBB13_145:                             # %cond.end361
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB13_146:                             # %for.cond363
                                        #   Parent Loop BB13_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB13_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB13_150
.LBB13_149:                             # %cond.false371
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_150:                             # %cond.end373
                                        #   in Loop: Header=BB13_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB13_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB13_156
.LBB13_152:                             # %cond.false378
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB13_155
.LBB13_154:                             # %cond.false383
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_155:                             # %cond.end385
                                        #   in Loop: Header=BB13_146 Depth=2
.LBB13_156:                             # %cond.end387
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB13_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_146
.LBB13_158:                             # %for.end401
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_135
.LBB13_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB13_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB13_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB13_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB13_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_161
.LBB13_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_167
.LBB13_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB13_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB13_173
.LBB13_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_172
.LBB13_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB13_172:                             # %cond.end449
.LBB13_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB13_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_177
.LBB13_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB13_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB13_183
.LBB13_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_182
.LBB13_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_182:                             # %cond.end486
.LBB13_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB13_196
.LBB13_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB13_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_188
.LBB13_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB13_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB13_194
.LBB13_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_193
.LBB13_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_193:                             # %cond.end526
.LBB13_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB13_195:                             # %if.end532
	jmp	.LBB13_196
.LBB13_196:                             # %if.end533
	jmp	.LBB13_329
.LBB13_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB13_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB13_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB13_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_203
.LBB13_202:                             # %cond.false546
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_203:                             # %cond.end548
                                        #   in Loop: Header=BB13_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB13_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_209
.LBB13_205:                             # %cond.false553
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_208
.LBB13_207:                             # %cond.false558
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_208:                             # %cond.end560
                                        #   in Loop: Header=BB13_199 Depth=1
.LBB13_209:                             # %cond.end562
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB13_210:                             # %for.cond564
                                        #   Parent Loop BB13_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB13_214
.LBB13_213:                             # %cond.false572
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_214:                             # %cond.end574
                                        #   in Loop: Header=BB13_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB13_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB13_220
.LBB13_216:                             # %cond.false579
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB13_219
.LBB13_218:                             # %cond.false584
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_219:                             # %cond.end586
                                        #   in Loop: Header=BB13_210 Depth=2
.LBB13_220:                             # %cond.end588
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB13_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_210
.LBB13_222:                             # %for.end602
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB13_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_199
.LBB13_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB13_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB13_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB13_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB13_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_225
.LBB13_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_231
.LBB13_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB13_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB13_237
.LBB13_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_236
.LBB13_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB13_236:                             # %cond.end650
.LBB13_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB13_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_241
.LBB13_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB13_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB13_247
.LBB13_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_246
.LBB13_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_246:                             # %cond.end687
.LBB13_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB13_258
.LBB13_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_251
.LBB13_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB13_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB13_257
.LBB13_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB13_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_256
.LBB13_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB13_256:                             # %cond.end724
.LBB13_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB13_258:                             # %if.end730
	jmp	.LBB13_328
.LBB13_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB13_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB13_262
.LBB13_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB13_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB13_265
.LBB13_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB13_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB13_271
.LBB13_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB13_270
.LBB13_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB13_270:                             # %cond.end753
.LBB13_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB13_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB13_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_276
.LBB13_275:                             # %cond.false765
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_276:                             # %cond.end767
                                        #   in Loop: Header=BB13_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB13_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_282
.LBB13_278:                             # %cond.false772
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB13_281
.LBB13_280:                             # %cond.false777
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB13_281:                             # %cond.end779
                                        #   in Loop: Header=BB13_272 Depth=1
.LBB13_282:                             # %cond.end781
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB13_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_272
.LBB13_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_287
.LBB13_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB13_293
.LBB13_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_292
.LBB13_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_292:                             # %cond.end822
.LBB13_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB13_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB13_296
.LBB13_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB13_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB13_299
.LBB13_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB13_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB13_305
.LBB13_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB13_304
.LBB13_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB13_304:                             # %cond.end847
.LBB13_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB13_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB13_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_310
.LBB13_309:                             # %cond.false859
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_310:                             # %cond.end861
                                        #   in Loop: Header=BB13_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB13_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_316
.LBB13_312:                             # %cond.false866
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB13_315
.LBB13_314:                             # %cond.false871
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB13_315:                             # %cond.end873
                                        #   in Loop: Header=BB13_306 Depth=1
.LBB13_316:                             # %cond.end875
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB13_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_306
.LBB13_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_321
.LBB13_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB13_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB13_327
.LBB13_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_326
.LBB13_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB13_326:                             # %cond.end916
.LBB13_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB13_328:                             # %if.end922
	jmp	.LBB13_329
.LBB13_329:                             # %if.end923
	jmp	.LBB13_330
.LBB13_330:                             # %if.end924
	jmp	.LBB13_331
.LBB13_331:                             # %if.end925
	jmp	.LBB13_332
.LBB13_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1523886076, -104(%rbp) # imm = 0x5AD4A7FC
	jne	.LBB13_334
.LBB13_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_333
.Lfunc_end13:
	.size	Get_Reference_Pixel.3, .Lfunc_end13-Get_Reference_Pixel.3
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.4   # -- Begin function Get_Reference_Pixel.4
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.4,@function
Get_Reference_Pixel.4:                  # @Get_Reference_Pixel.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1620304501, -108(%rbp) # imm = 0x6093E275
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB14_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB14_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB14_5
.LBB14_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB14_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB14_11
.LBB14_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB14_10
.LBB14_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB14_10:                              # %cond.end14
.LBB14_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB14_14
.LBB14_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB14_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB14_20
.LBB14_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB14_19
.LBB14_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB14_19:                              # %cond.end29
.LBB14_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_332
.LBB14_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB14_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB14_25
.LBB14_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB14_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB14_31
.LBB14_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB14_30
.LBB14_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB14_30:                              # %cond.end52
.LBB14_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_36
.LBB14_35:                              # %cond.false61
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_36:                              # %cond.end63
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_42
.LBB14_38:                              # %cond.false68
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_41
.LBB14_40:                              # %cond.false73
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_41:                              # %cond.end75
                                        #   in Loop: Header=BB14_32 Depth=1
.LBB14_42:                              # %cond.end77
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_32
.LBB14_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_47
.LBB14_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB14_53
.LBB14_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_52
.LBB14_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_52:                              # %cond.end113
.LBB14_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB14_57
.LBB14_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB14_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB14_63
.LBB14_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB14_62
.LBB14_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB14_62:                              # %cond.end136
.LBB14_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_76
.LBB14_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB14_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB14_68
.LBB14_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB14_74
.LBB14_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB14_73
.LBB14_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_73:                              # %cond.end169
.LBB14_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_75:                              # %if.end
	jmp	.LBB14_76
.LBB14_76:                              # %if.end178
	jmp	.LBB14_331
.LBB14_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB14_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB14_81
.LBB14_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB14_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB14_87
.LBB14_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB14_86
.LBB14_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB14_86:                              # %cond.end197
.LBB14_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_92
.LBB14_91:                              # %cond.false209
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_92:                              # %cond.end211
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_98
.LBB14_94:                              # %cond.false216
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_97
.LBB14_96:                              # %cond.false221
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_97:                              # %cond.end223
                                        #   in Loop: Header=BB14_88 Depth=1
.LBB14_98:                              # %cond.end225
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_88
.LBB14_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_103
.LBB14_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB14_109
.LBB14_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_108
.LBB14_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_108:                             # %cond.end266
.LBB14_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB14_113
.LBB14_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB14_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB14_119
.LBB14_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB14_118
.LBB14_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB14_118:                             # %cond.end287
.LBB14_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_132
.LBB14_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB14_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB14_124
.LBB14_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB14_130
.LBB14_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB14_129
.LBB14_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_129:                             # %cond.end320
.LBB14_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_131:                             # %if.end331
	jmp	.LBB14_132
.LBB14_132:                             # %if.end332
	jmp	.LBB14_330
.LBB14_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB14_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB14_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_139
.LBB14_138:                             # %cond.false345
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_139:                             # %cond.end347
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_145
.LBB14_141:                             # %cond.false352
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_144
.LBB14_143:                             # %cond.false357
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_144:                             # %cond.end359
                                        #   in Loop: Header=BB14_135 Depth=1
.LBB14_145:                             # %cond.end361
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_146:                             # %for.cond363
                                        #   Parent Loop BB14_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_150
.LBB14_149:                             # %cond.false371
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_150:                             # %cond.end373
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_156
.LBB14_152:                             # %cond.false378
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_155
.LBB14_154:                             # %cond.false383
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_155:                             # %cond.end385
                                        #   in Loop: Header=BB14_146 Depth=2
.LBB14_156:                             # %cond.end387
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_146
.LBB14_158:                             # %for.end401
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_135
.LBB14_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_161
.LBB14_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_167
.LBB14_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB14_173
.LBB14_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_172
.LBB14_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_172:                             # %cond.end449
.LBB14_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_177
.LBB14_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB14_183
.LBB14_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_182
.LBB14_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_182:                             # %cond.end486
.LBB14_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_196
.LBB14_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB14_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_188
.LBB14_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB14_194
.LBB14_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_193
.LBB14_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_193:                             # %cond.end526
.LBB14_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_195:                             # %if.end532
	jmp	.LBB14_196
.LBB14_196:                             # %if.end533
	jmp	.LBB14_329
.LBB14_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB14_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB14_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_203
.LBB14_202:                             # %cond.false546
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_203:                             # %cond.end548
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_209
.LBB14_205:                             # %cond.false553
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_208
.LBB14_207:                             # %cond.false558
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_208:                             # %cond.end560
                                        #   in Loop: Header=BB14_199 Depth=1
.LBB14_209:                             # %cond.end562
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_210:                             # %for.cond564
                                        #   Parent Loop BB14_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_214
.LBB14_213:                             # %cond.false572
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_214:                             # %cond.end574
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_220
.LBB14_216:                             # %cond.false579
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_219
.LBB14_218:                             # %cond.false584
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_219:                             # %cond.end586
                                        #   in Loop: Header=BB14_210 Depth=2
.LBB14_220:                             # %cond.end588
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_210
.LBB14_222:                             # %for.end602
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_199
.LBB14_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_225
.LBB14_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_231
.LBB14_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB14_237
.LBB14_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_236
.LBB14_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_236:                             # %cond.end650
.LBB14_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_241
.LBB14_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB14_247
.LBB14_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_246
.LBB14_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_246:                             # %cond.end687
.LBB14_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_258
.LBB14_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_251
.LBB14_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB14_257
.LBB14_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_256
.LBB14_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_256:                             # %cond.end724
.LBB14_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_258:                             # %if.end730
	jmp	.LBB14_328
.LBB14_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB14_262
.LBB14_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB14_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB14_265
.LBB14_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB14_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB14_271
.LBB14_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB14_270
.LBB14_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB14_270:                             # %cond.end753
.LBB14_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_276
.LBB14_275:                             # %cond.false765
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_276:                             # %cond.end767
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_282
.LBB14_278:                             # %cond.false772
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_281
.LBB14_280:                             # %cond.false777
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_281:                             # %cond.end779
                                        #   in Loop: Header=BB14_272 Depth=1
.LBB14_282:                             # %cond.end781
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_272
.LBB14_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_287
.LBB14_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB14_293
.LBB14_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_292
.LBB14_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_292:                             # %cond.end822
.LBB14_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB14_296
.LBB14_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB14_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB14_299
.LBB14_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB14_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB14_305
.LBB14_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB14_304
.LBB14_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB14_304:                             # %cond.end847
.LBB14_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_310
.LBB14_309:                             # %cond.false859
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_310:                             # %cond.end861
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_316
.LBB14_312:                             # %cond.false866
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_315
.LBB14_314:                             # %cond.false871
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_315:                             # %cond.end873
                                        #   in Loop: Header=BB14_306 Depth=1
.LBB14_316:                             # %cond.end875
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_306
.LBB14_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_321
.LBB14_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB14_327
.LBB14_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_326
.LBB14_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_326:                             # %cond.end916
.LBB14_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_328:                             # %if.end922
	jmp	.LBB14_329
.LBB14_329:                             # %if.end923
	jmp	.LBB14_330
.LBB14_330:                             # %if.end924
	jmp	.LBB14_331
.LBB14_331:                             # %if.end925
	jmp	.LBB14_332
.LBB14_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1620304501, -108(%rbp) # imm = 0x6093E275
	jne	.LBB14_334
.LBB14_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_333
.Lfunc_end14:
	.size	Get_Reference_Pixel.4, .Lfunc_end14-Get_Reference_Pixel.4
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.5   # -- Begin function Get_Reference_Block.5
	.p2align	4, 0x90
	.type	Get_Reference_Block.5,@function
Get_Reference_Block.5:                  # @Get_Reference_Block.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1340828873, -28(%rbp)  # imm = 0x4FEB6CC9
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB15_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_3:                               # %for.cond5
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_3
.LBB15_6:                               # %for.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_7
.LBB15_7:                               # %for.inc14
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_1
.LBB15_8:                               # %for.end16
	cmpl	$1340828873, -28(%rbp)  # imm = 0x4FEB6CC9
	jne	.LBB15_10
.LBB15_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_9
.Lfunc_end15:
	.size	Get_Reference_Block.5, .Lfunc_end15-Get_Reference_Block.5
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.6 # -- Begin function compute_residue_b8block.6
	.p2align	4, 0x90
	.type	compute_residue_b8block.6,@function
compute_residue_b8block.6:              # @compute_residue_b8block.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1775605890, -36(%rbp)  # imm = 0x69D59882
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB16_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB16_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB16_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB16_4:                               # %for.cond4
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB16_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB16_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB16_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_4
.LBB16_7:                               # %for.end
                                        #   in Loop: Header=BB16_2 Depth=1
	jmp	.LBB16_8
.LBB16_8:                               # %for.inc22
                                        #   in Loop: Header=BB16_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_2
.LBB16_9:                               # %for.end24
	jmp	.LBB16_19
.LBB16_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB16_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB16_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB16_13:                              # %for.cond29
                                        #   Parent Loop BB16_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB16_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB16_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB16_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_13
.LBB16_16:                              # %for.end56
                                        #   in Loop: Header=BB16_11 Depth=1
	jmp	.LBB16_17
.LBB16_17:                              # %for.inc57
                                        #   in Loop: Header=BB16_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_11
.LBB16_18:                              # %for.end59
	jmp	.LBB16_19
.LBB16_19:                              # %if.end
	cmpl	$1775605890, -36(%rbp)  # imm = 0x69D59882
	jne	.LBB16_21
.LBB16_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_20
.Lfunc_end16:
	.size	compute_residue_b8block.6, .Lfunc_end16-compute_residue_b8block.6
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.7        # -- Begin function DecOneForthPix.7
	.p2align	4, 0x90
	.type	DecOneForthPix.7,@function
DecOneForthPix.7:                       # @DecOneForthPix.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1191452428, -12(%rbp)  # imm = 0x47041F0C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_4:                               # %for.end
	cmpl	$1191452428, -12(%rbp)  # imm = 0x47041F0C
	jne	.LBB17_6
.LBB17_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_5
.Lfunc_end17:
	.size	DecOneForthPix.7, .Lfunc_end17-DecOneForthPix.7
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.8    # -- Begin function decode_one_b8block.8
	.p2align	4, 0x90
	.type	decode_one_b8block.8,@function
decode_one_b8block.8:                   # @decode_one_b8block.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1713303257, -84(%rbp)  # imm = 0x661EEED9
	movl	%edi, -40(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_4:                               # %for.cond9
                                        #   Parent Loop BB18_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB18_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB18_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_4
.LBB18_7:                               # %for.end
                                        #   in Loop: Header=BB18_2 Depth=1
	jmp	.LBB18_8
.LBB18_8:                               # %for.inc26
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_2
.LBB18_9:                               # %for.end28
	jmp	.LBB18_96
.LBB18_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB18_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_31
.LBB18_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_17:                              # %for.cond40
                                        #   Parent Loop BB18_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB18_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB18_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_17
.LBB18_20:                              # %for.end49
                                        #   in Loop: Header=BB18_15 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc50
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_15
.LBB18_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_25:                              # %for.cond56
                                        #   Parent Loop BB18_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB18_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_25
.LBB18_28:                              # %for.end71
                                        #   in Loop: Header=BB18_23 Depth=1
	jmp	.LBB18_29
.LBB18_29:                              # %for.inc72
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_23
.LBB18_30:                              # %for.end74
	jmp	.LBB18_60
.LBB18_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB18_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB18_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_36:                              # %for.cond83
                                        #   Parent Loop BB18_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB18_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_36
.LBB18_39:                              # %for.end120
                                        #   in Loop: Header=BB18_34 Depth=1
	jmp	.LBB18_40
.LBB18_40:                              # %for.inc121
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_34
.LBB18_41:                              # %for.end123
	jmp	.LBB18_51
.LBB18_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_45:                              # %for.cond129
                                        #   Parent Loop BB18_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB18_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB18_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_45
.LBB18_48:                              # %for.end145
                                        #   in Loop: Header=BB18_43 Depth=1
	jmp	.LBB18_49
.LBB18_49:                              # %for.inc146
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_43
.LBB18_50:                              # %for.end148
	jmp	.LBB18_51
.LBB18_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_54:                              # %for.cond153
                                        #   Parent Loop BB18_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_54
.LBB18_57:                              # %for.end167
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_58
.LBB18_58:                              # %for.inc168
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_52
.LBB18_59:                              # %for.end170
	jmp	.LBB18_60
.LBB18_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB18_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB18_66
.LBB18_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB18_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_86
.LBB18_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_69 Depth 2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_69:                              # %for.cond197
                                        #   Parent Loop BB18_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB18_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB18_73:                              # %if.end218
                                        #   in Loop: Header=BB18_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB18_74:                              # %for.cond233
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB18_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	$0, -4(%rbp)
.LBB18_76:                              # %for.cond237
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        #       Parent Loop BB18_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB18_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_76
.LBB18_79:                              # %for.end269
                                        #   in Loop: Header=BB18_74 Depth=3
	jmp	.LBB18_80
.LBB18_80:                              # %for.inc270
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_74
.LBB18_81:                              # %for.end272
                                        #   in Loop: Header=BB18_69 Depth=2
	jmp	.LBB18_82
.LBB18_82:                              # %for.inc273
                                        #   in Loop: Header=BB18_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_69
.LBB18_83:                              # %for.end275
                                        #   in Loop: Header=BB18_67 Depth=1
	jmp	.LBB18_84
.LBB18_84:                              # %for.inc276
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_67
.LBB18_85:                              # %for.end278
	jmp	.LBB18_95
.LBB18_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_89:                              # %for.cond284
                                        #   Parent Loop BB18_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB18_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB18_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_89
.LBB18_92:                              # %for.end310
                                        #   in Loop: Header=BB18_87 Depth=1
	jmp	.LBB18_93
.LBB18_93:                              # %for.inc311
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_87
.LBB18_94:                              # %for.end313
	jmp	.LBB18_95
.LBB18_95:                              # %if.end314
	jmp	.LBB18_96
.LBB18_96:                              # %if.end315
	cmpl	$1713303257, -84(%rbp)  # imm = 0x661EEED9
	jne	.LBB18_98
.LBB18_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_97
.Lfunc_end18:
	.size	decode_one_b8block.8, .Lfunc_end18-decode_one_b8block.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.9
.LCPI19_0:
	.quad	4636737291354636288     # double 100
.LCPI19_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.9
	.p2align	4, 0x90
	.type	Build_Status_Map.9,@function
Build_Status_Map.9:                     # @Build_Status_Map.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$891071141, -40(%rbp)   # imm = 0x351CAAA5
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB19_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -12(%rbp)
.LBB19_3:                               # %for.cond2
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB19_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB19_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB19_13
.LBB19_6:                               # %if.then
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI19_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB19_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB19_8:                               # %if.end
                                        #   in Loop: Header=BB19_3 Depth=2
	callq	rand
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI19_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB19_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB19_10:                              # %if.end20
                                        #   in Loop: Header=BB19_3 Depth=2
	callq	rand
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI19_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB19_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	$1, -4(%rbp)
.LBB19_12:                              # %if.end29
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB19_13:                              # %if.end30
                                        #   in Loop: Header=BB19_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB19_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB19_18
.LBB19_15:                              # %if.else
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB19_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB19_17:                              # %if.end49
                                        #   in Loop: Header=BB19_3 Depth=2
	jmp	.LBB19_18
.LBB19_18:                              # %if.end50
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_3
.LBB19_20:                              # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_21
.LBB19_21:                              # %for.inc53
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_22:                              # %for.end55
	cmpl	$891071141, -40(%rbp)   # imm = 0x351CAAA5
	jne	.LBB19_24
.LBB19_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_23
.Lfunc_end19:
	.size	Build_Status_Map.9, .Lfunc_end19-Build_Status_Map.9
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.10        # -- Begin function decode_one_mb.10
	.p2align	4, 0x90
	.type	decode_one_mb.10,@function
decode_one_mb.10:                       # @decode_one_mb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$299855989, -4(%rbp)    # imm = 0x11DF7075
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$299855989, -4(%rbp)    # imm = 0x11DF7075
	jne	.LBB20_2
.LBB20_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_1
.Lfunc_end20:
	.size	decode_one_mb.10, .Lfunc_end20-decode_one_mb.10
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.11    # -- Begin function Error_Concealment.11
	.p2align	4, 0x90
	.type	Error_Concealment.11,@function
Error_Concealment.11:                   # @Error_Concealment.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$719587846, -20(%rbp)   # imm = 0x2AE40A06
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB21_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB21_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB21_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB21_6:                               # %if.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_7
.LBB21_7:                               # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_8:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_9
.LBB21_9:                               # %for.inc7
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_10:                              # %for.end9
	cmpl	$719587846, -20(%rbp)   # imm = 0x2AE40A06
	jne	.LBB21_12
.LBB21_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_11
.Lfunc_end21:
	.size	Error_Concealment.11, .Lfunc_end21-Error_Concealment.11
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.12       # -- Begin function DecOneForthPix.12
	.p2align	4, 0x90
	.type	DecOneForthPix.12,@function
DecOneForthPix.12:                      # @DecOneForthPix.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1420285051, -8(%rbp)   # imm = 0x54A7D47B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB22_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_1
.LBB22_4:                               # %for.end
	cmpl	$1420285051, -8(%rbp)   # imm = 0x54A7D47B
	jne	.LBB22_6
.LBB22_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_5
.Lfunc_end22:
	.size	DecOneForthPix.12, .Lfunc_end22-DecOneForthPix.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.13
.LCPI23_0:
	.quad	4636737291354636288     # double 100
.LCPI23_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.13
	.p2align	4, 0x90
	.type	Build_Status_Map.13,@function
Build_Status_Map.13:                    # @Build_Status_Map.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1445535352, -40(%rbp)  # imm = 0x56291E78
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -12(%rbp)
.LBB23_3:                               # %for.cond2
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB23_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB23_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB23_13
.LBB23_6:                               # %if.then
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB23_8:                               # %if.end
                                        #   in Loop: Header=BB23_3 Depth=2
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB23_10:                              # %if.end20
                                        #   in Loop: Header=BB23_3 Depth=2
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	$1, -4(%rbp)
.LBB23_12:                              # %if.end29
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB23_13:                              # %if.end30
                                        #   in Loop: Header=BB23_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB23_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB23_18
.LBB23_15:                              # %if.else
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB23_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB23_17:                              # %if.end49
                                        #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_18
.LBB23_18:                              # %if.end50
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_3
.LBB23_20:                              # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc53
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_22:                              # %for.end55
	cmpl	$1445535352, -40(%rbp)  # imm = 0x56291E78
	jne	.LBB23_24
.LBB23_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_23
.Lfunc_end23:
	.size	Build_Status_Map.13, .Lfunc_end23-Build_Status_Map.13
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.14        # -- Begin function Conceal_Error.14
	.p2align	4, 0x90
	.type	Conceal_Error.14,@function
Conceal_Error.14:                       # @Conceal_Error.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$159495435, -68(%rbp)   # imm = 0x981B50B
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB24_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB24_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB24_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB24_4:                               # %land.end
.LBB24_5:                               # %lor.end
.LBB24_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB24_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB24_9
.LBB24_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB24_14
.LBB24_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB24_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB24_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB24_12:                              # %land.end51
.LBB24_13:                              # %lor.end53
.LBB24_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB24_180
# %bb.15:                               # %land.end54
	movq	.LJTI24_0(,%rax,8), %rax
	jmpq	*%rax
.LBB24_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB24_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB24_18 Depth=1
	movl	$0, -4(%rbp)
.LBB24_20:                              # %for.cond68
                                        #   Parent Loop BB24_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB24_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB24_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_20
.LBB24_23:                              # %for.end
                                        #   in Loop: Header=BB24_18 Depth=1
	jmp	.LBB24_24
.LBB24_24:                              # %for.inc85
                                        #   in Loop: Header=BB24_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_18
.LBB24_25:                              # %for.end87
	jmp	.LBB24_35
.LBB24_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB24_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB24_27 Depth=1
	movl	$0, -4(%rbp)
.LBB24_29:                              # %for.cond92
                                        #   Parent Loop BB24_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB24_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB24_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_29
.LBB24_32:                              # %for.end104
                                        #   in Loop: Header=BB24_27 Depth=1
	jmp	.LBB24_33
.LBB24_33:                              # %for.inc105
                                        #   in Loop: Header=BB24_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_27
.LBB24_34:                              # %for.end107
	jmp	.LBB24_35
.LBB24_35:                              # %if.end
	jmp	.LBB24_180
.LBB24_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB24_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_39 Depth 2
                                        #       Child Loop BB24_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB24_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB24_37 Depth=1
	movl	$0, -16(%rbp)
.LBB24_39:                              # %for.cond113
                                        #   Parent Loop BB24_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB24_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	$0, -4(%rbp)
.LBB24_41:                              # %for.cond117
                                        #   Parent Loop BB24_37 Depth=1
                                        #     Parent Loop BB24_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB24_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB24_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB24_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_41
.LBB24_44:                              # %for.end141
                                        #   in Loop: Header=BB24_39 Depth=2
	jmp	.LBB24_45
.LBB24_45:                              # %for.inc142
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_39
.LBB24_46:                              # %for.end144
                                        #   in Loop: Header=BB24_37 Depth=1
	jmp	.LBB24_47
.LBB24_47:                              # %for.inc145
                                        #   in Loop: Header=BB24_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_37
.LBB24_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB24_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB24_49 Depth=1
	movl	$0, -8(%rbp)
.LBB24_51:                              # %for.cond152
                                        #   Parent Loop BB24_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB24_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_51
.LBB24_54:                              # %for.end162
                                        #   in Loop: Header=BB24_49 Depth=1
	jmp	.LBB24_55
.LBB24_55:                              # %for.inc163
                                        #   in Loop: Header=BB24_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_49
.LBB24_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB24_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB24_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB24_59 Depth=1
	movl	$0, -4(%rbp)
.LBB24_61:                              # %for.cond175
                                        #   Parent Loop BB24_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB24_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB24_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_61
.LBB24_64:                              # %for.end195
                                        #   in Loop: Header=BB24_59 Depth=1
	jmp	.LBB24_65
.LBB24_65:                              # %for.inc196
                                        #   in Loop: Header=BB24_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_59
.LBB24_66:                              # %for.end198
	jmp	.LBB24_95
.LBB24_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB24_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB24_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_71 Depth 2
                                        #       Child Loop BB24_73 Depth 3
                                        #         Child Loop BB24_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB24_71:                              # %for.cond210
                                        #   Parent Loop BB24_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_73 Depth 3
                                        #         Child Loop BB24_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB24_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB24_73:                              # %for.cond236
                                        #   Parent Loop BB24_69 Depth=1
                                        #     Parent Loop BB24_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB24_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB24_73 Depth=3
	movl	$0, -4(%rbp)
.LBB24_75:                              # %for.cond240
                                        #   Parent Loop BB24_69 Depth=1
                                        #     Parent Loop BB24_71 Depth=2
                                        #       Parent Loop BB24_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB24_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB24_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB24_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_75
.LBB24_78:                              # %for.end259
                                        #   in Loop: Header=BB24_73 Depth=3
	jmp	.LBB24_79
.LBB24_79:                              # %for.inc260
                                        #   in Loop: Header=BB24_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_73
.LBB24_80:                              # %for.end262
                                        #   in Loop: Header=BB24_71 Depth=2
	jmp	.LBB24_81
.LBB24_81:                              # %for.inc263
                                        #   in Loop: Header=BB24_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_71
.LBB24_82:                              # %for.end265
                                        #   in Loop: Header=BB24_69 Depth=1
	jmp	.LBB24_83
.LBB24_83:                              # %for.inc266
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_69
.LBB24_84:                              # %for.end268
	jmp	.LBB24_94
.LBB24_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB24_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	$0, -4(%rbp)
.LBB24_88:                              # %for.cond274
                                        #   Parent Loop BB24_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB24_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_88
.LBB24_91:                              # %for.end294
                                        #   in Loop: Header=BB24_86 Depth=1
	jmp	.LBB24_92
.LBB24_92:                              # %for.inc295
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_86
.LBB24_93:                              # %for.end297
	jmp	.LBB24_94
.LBB24_94:                              # %if.end298
	jmp	.LBB24_95
.LBB24_95:                              # %if.end299
	jmp	.LBB24_105
.LBB24_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB24_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB24_97 Depth=1
	movl	$0, -4(%rbp)
.LBB24_99:                              # %for.cond305
                                        #   Parent Loop BB24_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB24_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB24_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_99
.LBB24_102:                             # %for.end317
                                        #   in Loop: Header=BB24_97 Depth=1
	jmp	.LBB24_103
.LBB24_103:                             # %for.inc318
                                        #   in Loop: Header=BB24_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_97
.LBB24_104:                             # %for.end320
	jmp	.LBB24_105
.LBB24_105:                             # %if.end321
	jmp	.LBB24_180
.LBB24_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB24_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_110 Depth 2
                                        #       Child Loop BB24_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB24_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB24_108 Depth=1
	movl	$0, -16(%rbp)
.LBB24_110:                             # %for.cond331
                                        #   Parent Loop BB24_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB24_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB24_110 Depth=2
	movl	$0, -4(%rbp)
.LBB24_112:                             # %for.cond335
                                        #   Parent Loop BB24_108 Depth=1
                                        #     Parent Loop BB24_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB24_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB24_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB24_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_112
.LBB24_115:                             # %for.end359
                                        #   in Loop: Header=BB24_110 Depth=2
	jmp	.LBB24_116
.LBB24_116:                             # %for.inc360
                                        #   in Loop: Header=BB24_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_110
.LBB24_117:                             # %for.end362
                                        #   in Loop: Header=BB24_108 Depth=1
	jmp	.LBB24_118
.LBB24_118:                             # %for.inc363
                                        #   in Loop: Header=BB24_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_108
.LBB24_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB24_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB24_120 Depth=1
	movl	$0, -8(%rbp)
.LBB24_122:                             # %for.cond370
                                        #   Parent Loop BB24_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB24_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB24_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_122
.LBB24_125:                             # %for.end380
                                        #   in Loop: Header=BB24_120 Depth=1
	jmp	.LBB24_126
.LBB24_126:                             # %for.inc381
                                        #   in Loop: Header=BB24_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_120
.LBB24_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB24_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB24_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB24_129 Depth=1
	movl	$0, -4(%rbp)
.LBB24_131:                             # %for.cond390
                                        #   Parent Loop BB24_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB24_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB24_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_131
.LBB24_134:                             # %for.end410
                                        #   in Loop: Header=BB24_129 Depth=1
	jmp	.LBB24_135
.LBB24_135:                             # %for.inc411
                                        #   in Loop: Header=BB24_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_129
.LBB24_136:                             # %for.end413
	jmp	.LBB24_156
.LBB24_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB24_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB24_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_141 Depth 2
                                        #       Child Loop BB24_143 Depth 3
                                        #         Child Loop BB24_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB24_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB24_141:                             # %for.cond425
                                        #   Parent Loop BB24_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_143 Depth 3
                                        #         Child Loop BB24_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB24_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB24_143:                             # %for.cond452
                                        #   Parent Loop BB24_139 Depth=1
                                        #     Parent Loop BB24_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB24_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB24_143 Depth=3
	movl	$0, -4(%rbp)
.LBB24_145:                             # %for.cond456
                                        #   Parent Loop BB24_139 Depth=1
                                        #     Parent Loop BB24_141 Depth=2
                                        #       Parent Loop BB24_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB24_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB24_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB24_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_145
.LBB24_148:                             # %for.end475
                                        #   in Loop: Header=BB24_143 Depth=3
	jmp	.LBB24_149
.LBB24_149:                             # %for.inc476
                                        #   in Loop: Header=BB24_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_143
.LBB24_150:                             # %for.end478
                                        #   in Loop: Header=BB24_141 Depth=2
	jmp	.LBB24_151
.LBB24_151:                             # %for.inc479
                                        #   in Loop: Header=BB24_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_141
.LBB24_152:                             # %for.end481
                                        #   in Loop: Header=BB24_139 Depth=1
	jmp	.LBB24_153
.LBB24_153:                             # %for.inc482
                                        #   in Loop: Header=BB24_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_139
.LBB24_154:                             # %for.end484
	jmp	.LBB24_155
.LBB24_155:                             # %if.end485
	jmp	.LBB24_156
.LBB24_156:                             # %if.end486
	jmp	.LBB24_157
.LBB24_157:                             # %if.end487
	jmp	.LBB24_180
.LBB24_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB24_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB24_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	$0, -4(%rbp)
.LBB24_163:                             # %for.cond499
                                        #   Parent Loop BB24_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB24_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB24_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_163
.LBB24_166:                             # %for.end519
                                        #   in Loop: Header=BB24_161 Depth=1
	jmp	.LBB24_167
.LBB24_167:                             # %for.inc520
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_161
.LBB24_168:                             # %for.end522
	jmp	.LBB24_169
.LBB24_169:                             # %if.end523
	jmp	.LBB24_179
.LBB24_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB24_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	$0, -4(%rbp)
.LBB24_173:                             # %for.cond529
                                        #   Parent Loop BB24_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB24_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB24_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_173
.LBB24_176:                             # %for.end541
                                        #   in Loop: Header=BB24_171 Depth=1
	jmp	.LBB24_177
.LBB24_177:                             # %for.inc542
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_171
.LBB24_178:                             # %for.end544
	jmp	.LBB24_179
.LBB24_179:                             # %if.end545
	jmp	.LBB24_180
.LBB24_180:                             # %sw.epilog
	cmpl	$159495435, -68(%rbp)   # imm = 0x981B50B
	jne	.LBB24_182
.LBB24_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_181
.Lfunc_end24:
	.size	Conceal_Error.14, .Lfunc_end24-Conceal_Error.14
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI24_0:
	.quad	.LBB24_16
	.quad	.LBB24_158
	.quad	.LBB24_106
	.quad	.LBB24_180
	.quad	.LBB24_36
                                        # -- End function
	.text
	.globl	decode_one_mb.15        # -- Begin function decode_one_mb.15
	.p2align	4, 0x90
	.type	decode_one_mb.15,@function
decode_one_mb.15:                       # @decode_one_mb.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1723911750, -4(%rbp)   # imm = 0x66C0CE46
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1723911750, -4(%rbp)   # imm = 0x66C0CE46
	jne	.LBB25_2
.LBB25_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_1
.Lfunc_end25:
	.size	decode_one_mb.15, .Lfunc_end25-decode_one_mb.15
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.16 # -- Begin function compute_residue_b8block.16
	.p2align	4, 0x90
	.type	compute_residue_b8block.16,@function
compute_residue_b8block.16:             # @compute_residue_b8block.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$138038409, -36(%rbp)   # imm = 0x83A4C89
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB26_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_4:                               # %for.cond4
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB26_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB26_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB26_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_4
.LBB26_7:                               # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc22
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_2
.LBB26_9:                               # %for.end24
	jmp	.LBB26_19
.LBB26_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_13:                              # %for.cond29
                                        #   Parent Loop BB26_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB26_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB26_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_13
.LBB26_16:                              # %for.end56
                                        #   in Loop: Header=BB26_11 Depth=1
	jmp	.LBB26_17
.LBB26_17:                              # %for.inc57
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_11
.LBB26_18:                              # %for.end59
	jmp	.LBB26_19
.LBB26_19:                              # %if.end
	cmpl	$138038409, -36(%rbp)   # imm = 0x83A4C89
	jne	.LBB26_21
.LBB26_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_20
.Lfunc_end26:
	.size	compute_residue_b8block.16, .Lfunc_end26-compute_residue_b8block.16
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.17 # -- Begin function compute_residue_b8block.17
	.p2align	4, 0x90
	.type	compute_residue_b8block.17,@function
compute_residue_b8block.17:             # @compute_residue_b8block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1379866097, -36(%rbp)  # imm = 0x523F15F1
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB27_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_4:                               # %for.cond4
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc22
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end24
	jmp	.LBB27_19
.LBB27_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_13:                              # %for.cond29
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB27_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB27_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_13
.LBB27_16:                              # %for.end56
                                        #   in Loop: Header=BB27_11 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %for.inc57
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_11
.LBB27_18:                              # %for.end59
	jmp	.LBB27_19
.LBB27_19:                              # %if.end
	cmpl	$1379866097, -36(%rbp)  # imm = 0x523F15F1
	jne	.LBB27_21
.LBB27_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_20
.Lfunc_end27:
	.size	compute_residue_b8block.17, .Lfunc_end27-compute_residue_b8block.17
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.18        # -- Begin function Conceal_Error.18
	.p2align	4, 0x90
	.type	Conceal_Error.18,@function
Conceal_Error.18:                       # @Conceal_Error.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$417595988, -68(%rbp)   # imm = 0x18E40254
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB28_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB28_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB28_4:                               # %land.end
.LBB28_5:                               # %lor.end
.LBB28_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB28_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB28_9
.LBB28_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB28_14
.LBB28_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB28_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB28_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB28_12:                              # %land.end51
.LBB28_13:                              # %lor.end53
.LBB28_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB28_180
# %bb.15:                               # %land.end54
	movq	.LJTI28_0(,%rax,8), %rax
	jmpq	*%rax
.LBB28_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB28_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB28_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB28_18 Depth=1
	movl	$0, -4(%rbp)
.LBB28_20:                              # %for.cond68
                                        #   Parent Loop BB28_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB28_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB28_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_20
.LBB28_23:                              # %for.end
                                        #   in Loop: Header=BB28_18 Depth=1
	jmp	.LBB28_24
.LBB28_24:                              # %for.inc85
                                        #   in Loop: Header=BB28_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_18
.LBB28_25:                              # %for.end87
	jmp	.LBB28_35
.LBB28_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB28_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB28_27 Depth=1
	movl	$0, -4(%rbp)
.LBB28_29:                              # %for.cond92
                                        #   Parent Loop BB28_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB28_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB28_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_29
.LBB28_32:                              # %for.end104
                                        #   in Loop: Header=BB28_27 Depth=1
	jmp	.LBB28_33
.LBB28_33:                              # %for.inc105
                                        #   in Loop: Header=BB28_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_27
.LBB28_34:                              # %for.end107
	jmp	.LBB28_35
.LBB28_35:                              # %if.end
	jmp	.LBB28_180
.LBB28_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB28_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_39 Depth 2
                                        #       Child Loop BB28_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB28_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB28_37 Depth=1
	movl	$0, -16(%rbp)
.LBB28_39:                              # %for.cond113
                                        #   Parent Loop BB28_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB28_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB28_39 Depth=2
	movl	$0, -4(%rbp)
.LBB28_41:                              # %for.cond117
                                        #   Parent Loop BB28_37 Depth=1
                                        #     Parent Loop BB28_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB28_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB28_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB28_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_41
.LBB28_44:                              # %for.end141
                                        #   in Loop: Header=BB28_39 Depth=2
	jmp	.LBB28_45
.LBB28_45:                              # %for.inc142
                                        #   in Loop: Header=BB28_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_39
.LBB28_46:                              # %for.end144
                                        #   in Loop: Header=BB28_37 Depth=1
	jmp	.LBB28_47
.LBB28_47:                              # %for.inc145
                                        #   in Loop: Header=BB28_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_37
.LBB28_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB28_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB28_49 Depth=1
	movl	$0, -8(%rbp)
.LBB28_51:                              # %for.cond152
                                        #   Parent Loop BB28_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB28_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB28_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_51
.LBB28_54:                              # %for.end162
                                        #   in Loop: Header=BB28_49 Depth=1
	jmp	.LBB28_55
.LBB28_55:                              # %for.inc163
                                        #   in Loop: Header=BB28_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_49
.LBB28_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB28_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB28_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB28_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB28_59 Depth=1
	movl	$0, -4(%rbp)
.LBB28_61:                              # %for.cond175
                                        #   Parent Loop BB28_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB28_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB28_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_61
.LBB28_64:                              # %for.end195
                                        #   in Loop: Header=BB28_59 Depth=1
	jmp	.LBB28_65
.LBB28_65:                              # %for.inc196
                                        #   in Loop: Header=BB28_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_59
.LBB28_66:                              # %for.end198
	jmp	.LBB28_95
.LBB28_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB28_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB28_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_71 Depth 2
                                        #       Child Loop BB28_73 Depth 3
                                        #         Child Loop BB28_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB28_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB28_71:                              # %for.cond210
                                        #   Parent Loop BB28_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_73 Depth 3
                                        #         Child Loop BB28_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB28_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB28_73:                              # %for.cond236
                                        #   Parent Loop BB28_69 Depth=1
                                        #     Parent Loop BB28_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB28_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB28_73 Depth=3
	movl	$0, -4(%rbp)
.LBB28_75:                              # %for.cond240
                                        #   Parent Loop BB28_69 Depth=1
                                        #     Parent Loop BB28_71 Depth=2
                                        #       Parent Loop BB28_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB28_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB28_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB28_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_75
.LBB28_78:                              # %for.end259
                                        #   in Loop: Header=BB28_73 Depth=3
	jmp	.LBB28_79
.LBB28_79:                              # %for.inc260
                                        #   in Loop: Header=BB28_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_73
.LBB28_80:                              # %for.end262
                                        #   in Loop: Header=BB28_71 Depth=2
	jmp	.LBB28_81
.LBB28_81:                              # %for.inc263
                                        #   in Loop: Header=BB28_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_71
.LBB28_82:                              # %for.end265
                                        #   in Loop: Header=BB28_69 Depth=1
	jmp	.LBB28_83
.LBB28_83:                              # %for.inc266
                                        #   in Loop: Header=BB28_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_69
.LBB28_84:                              # %for.end268
	jmp	.LBB28_94
.LBB28_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB28_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	$0, -4(%rbp)
.LBB28_88:                              # %for.cond274
                                        #   Parent Loop BB28_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB28_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_88
.LBB28_91:                              # %for.end294
                                        #   in Loop: Header=BB28_86 Depth=1
	jmp	.LBB28_92
.LBB28_92:                              # %for.inc295
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_86
.LBB28_93:                              # %for.end297
	jmp	.LBB28_94
.LBB28_94:                              # %if.end298
	jmp	.LBB28_95
.LBB28_95:                              # %if.end299
	jmp	.LBB28_105
.LBB28_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB28_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB28_97 Depth=1
	movl	$0, -4(%rbp)
.LBB28_99:                              # %for.cond305
                                        #   Parent Loop BB28_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB28_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB28_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_99
.LBB28_102:                             # %for.end317
                                        #   in Loop: Header=BB28_97 Depth=1
	jmp	.LBB28_103
.LBB28_103:                             # %for.inc318
                                        #   in Loop: Header=BB28_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_97
.LBB28_104:                             # %for.end320
	jmp	.LBB28_105
.LBB28_105:                             # %if.end321
	jmp	.LBB28_180
.LBB28_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB28_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB28_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_110 Depth 2
                                        #       Child Loop BB28_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB28_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB28_108 Depth=1
	movl	$0, -16(%rbp)
.LBB28_110:                             # %for.cond331
                                        #   Parent Loop BB28_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB28_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB28_110 Depth=2
	movl	$0, -4(%rbp)
.LBB28_112:                             # %for.cond335
                                        #   Parent Loop BB28_108 Depth=1
                                        #     Parent Loop BB28_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB28_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB28_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB28_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_112
.LBB28_115:                             # %for.end359
                                        #   in Loop: Header=BB28_110 Depth=2
	jmp	.LBB28_116
.LBB28_116:                             # %for.inc360
                                        #   in Loop: Header=BB28_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_110
.LBB28_117:                             # %for.end362
                                        #   in Loop: Header=BB28_108 Depth=1
	jmp	.LBB28_118
.LBB28_118:                             # %for.inc363
                                        #   in Loop: Header=BB28_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_108
.LBB28_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB28_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB28_120 Depth=1
	movl	$0, -8(%rbp)
.LBB28_122:                             # %for.cond370
                                        #   Parent Loop BB28_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB28_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB28_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_122
.LBB28_125:                             # %for.end380
                                        #   in Loop: Header=BB28_120 Depth=1
	jmp	.LBB28_126
.LBB28_126:                             # %for.inc381
                                        #   in Loop: Header=BB28_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_120
.LBB28_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB28_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB28_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB28_129 Depth=1
	movl	$0, -4(%rbp)
.LBB28_131:                             # %for.cond390
                                        #   Parent Loop BB28_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB28_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB28_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_131
.LBB28_134:                             # %for.end410
                                        #   in Loop: Header=BB28_129 Depth=1
	jmp	.LBB28_135
.LBB28_135:                             # %for.inc411
                                        #   in Loop: Header=BB28_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_129
.LBB28_136:                             # %for.end413
	jmp	.LBB28_156
.LBB28_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB28_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB28_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_141 Depth 2
                                        #       Child Loop BB28_143 Depth 3
                                        #         Child Loop BB28_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB28_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB28_141:                             # %for.cond425
                                        #   Parent Loop BB28_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_143 Depth 3
                                        #         Child Loop BB28_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB28_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB28_143:                             # %for.cond452
                                        #   Parent Loop BB28_139 Depth=1
                                        #     Parent Loop BB28_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB28_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB28_143 Depth=3
	movl	$0, -4(%rbp)
.LBB28_145:                             # %for.cond456
                                        #   Parent Loop BB28_139 Depth=1
                                        #     Parent Loop BB28_141 Depth=2
                                        #       Parent Loop BB28_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB28_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB28_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB28_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_145
.LBB28_148:                             # %for.end475
                                        #   in Loop: Header=BB28_143 Depth=3
	jmp	.LBB28_149
.LBB28_149:                             # %for.inc476
                                        #   in Loop: Header=BB28_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_143
.LBB28_150:                             # %for.end478
                                        #   in Loop: Header=BB28_141 Depth=2
	jmp	.LBB28_151
.LBB28_151:                             # %for.inc479
                                        #   in Loop: Header=BB28_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_141
.LBB28_152:                             # %for.end481
                                        #   in Loop: Header=BB28_139 Depth=1
	jmp	.LBB28_153
.LBB28_153:                             # %for.inc482
                                        #   in Loop: Header=BB28_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_139
.LBB28_154:                             # %for.end484
	jmp	.LBB28_155
.LBB28_155:                             # %if.end485
	jmp	.LBB28_156
.LBB28_156:                             # %if.end486
	jmp	.LBB28_157
.LBB28_157:                             # %if.end487
	jmp	.LBB28_180
.LBB28_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB28_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB28_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB28_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB28_161 Depth=1
	movl	$0, -4(%rbp)
.LBB28_163:                             # %for.cond499
                                        #   Parent Loop BB28_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB28_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB28_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_163
.LBB28_166:                             # %for.end519
                                        #   in Loop: Header=BB28_161 Depth=1
	jmp	.LBB28_167
.LBB28_167:                             # %for.inc520
                                        #   in Loop: Header=BB28_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_161
.LBB28_168:                             # %for.end522
	jmp	.LBB28_169
.LBB28_169:                             # %if.end523
	jmp	.LBB28_179
.LBB28_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB28_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB28_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB28_171 Depth=1
	movl	$0, -4(%rbp)
.LBB28_173:                             # %for.cond529
                                        #   Parent Loop BB28_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB28_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB28_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB28_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_173
.LBB28_176:                             # %for.end541
                                        #   in Loop: Header=BB28_171 Depth=1
	jmp	.LBB28_177
.LBB28_177:                             # %for.inc542
                                        #   in Loop: Header=BB28_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_171
.LBB28_178:                             # %for.end544
	jmp	.LBB28_179
.LBB28_179:                             # %if.end545
	jmp	.LBB28_180
.LBB28_180:                             # %sw.epilog
	cmpl	$417595988, -68(%rbp)   # imm = 0x18E40254
	jne	.LBB28_182
.LBB28_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_181
.Lfunc_end28:
	.size	Conceal_Error.18, .Lfunc_end28-Conceal_Error.18
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI28_0:
	.quad	.LBB28_16
	.quad	.LBB28_158
	.quad	.LBB28_106
	.quad	.LBB28_180
	.quad	.LBB28_36
                                        # -- End function
	.text
	.globl	Error_Concealment.19    # -- Begin function Error_Concealment.19
	.p2align	4, 0x90
	.type	Error_Concealment.19,@function
Error_Concealment.19:                   # @Error_Concealment.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$661066055, -20(%rbp)   # imm = 0x27671147
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB29_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB29_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB29_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB29_6:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_7
.LBB29_7:                               # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_3
.LBB29_8:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_9
.LBB29_9:                               # %for.inc7
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_10:                              # %for.end9
	cmpl	$661066055, -20(%rbp)   # imm = 0x27671147
	jne	.LBB29_12
.LBB29_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_11
.Lfunc_end29:
	.size	Error_Concealment.19, .Lfunc_end29-Error_Concealment.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.20
.LCPI30_0:
	.quad	4636737291354636288     # double 100
.LCPI30_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.20
	.p2align	4, 0x90
	.type	Build_Status_Map.20,@function
Build_Status_Map.20:                    # @Build_Status_Map.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1104669182, -40(%rbp)  # imm = 0x41D7E9FE
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -12(%rbp)
.LBB30_3:                               # %for.cond2
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB30_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB30_13
.LBB30_6:                               # %if.then
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB30_8:                               # %if.end
                                        #   in Loop: Header=BB30_3 Depth=2
	callq	rand
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB30_10:                              # %if.end20
                                        #   in Loop: Header=BB30_3 Depth=2
	callq	rand
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	$1, -4(%rbp)
.LBB30_12:                              # %if.end29
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB30_13:                              # %if.end30
                                        #   in Loop: Header=BB30_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB30_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB30_18
.LBB30_15:                              # %if.else
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB30_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB30_17:                              # %if.end49
                                        #   in Loop: Header=BB30_3 Depth=2
	jmp	.LBB30_18
.LBB30_18:                              # %if.end50
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_3
.LBB30_20:                              # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_21
.LBB30_21:                              # %for.inc53
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_1
.LBB30_22:                              # %for.end55
	cmpl	$1104669182, -40(%rbp)  # imm = 0x41D7E9FE
	jne	.LBB30_24
.LBB30_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_23
.Lfunc_end30:
	.size	Build_Status_Map.20, .Lfunc_end30-Build_Status_Map.20
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.21 # -- Begin function compute_residue_b8block.21
	.p2align	4, 0x90
	.type	compute_residue_b8block.21,@function
compute_residue_b8block.21:             # @compute_residue_b8block.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1267261036, -36(%rbp)  # imm = 0x4B88DE6C
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB31_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_4:                               # %for.cond4
                                        #   Parent Loop BB31_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB31_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB31_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB31_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_4
.LBB31_7:                               # %for.end
                                        #   in Loop: Header=BB31_2 Depth=1
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc22
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_2
.LBB31_9:                               # %for.end24
	jmp	.LBB31_19
.LBB31_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB31_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_13:                              # %for.cond29
                                        #   Parent Loop BB31_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB31_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB31_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB31_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_13
.LBB31_16:                              # %for.end56
                                        #   in Loop: Header=BB31_11 Depth=1
	jmp	.LBB31_17
.LBB31_17:                              # %for.inc57
                                        #   in Loop: Header=BB31_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_11
.LBB31_18:                              # %for.end59
	jmp	.LBB31_19
.LBB31_19:                              # %if.end
	cmpl	$1267261036, -36(%rbp)  # imm = 0x4B88DE6C
	jne	.LBB31_21
.LBB31_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_20
.Lfunc_end31:
	.size	compute_residue_b8block.21, .Lfunc_end31-compute_residue_b8block.21
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.22 # -- Begin function compute_residue_b8block.22
	.p2align	4, 0x90
	.type	compute_residue_b8block.22,@function
compute_residue_b8block.22:             # @compute_residue_b8block.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1302230636, -36(%rbp)  # imm = 0x4D9E766C
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB32_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_4:                               # %for.cond4
                                        #   Parent Loop BB32_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB32_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB32_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB32_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_4
.LBB32_7:                               # %for.end
                                        #   in Loop: Header=BB32_2 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc22
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_2
.LBB32_9:                               # %for.end24
	jmp	.LBB32_19
.LBB32_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_13:                              # %for.cond29
                                        #   Parent Loop BB32_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB32_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB32_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end56
                                        #   in Loop: Header=BB32_11 Depth=1
	jmp	.LBB32_17
.LBB32_17:                              # %for.inc57
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_11
.LBB32_18:                              # %for.end59
	jmp	.LBB32_19
.LBB32_19:                              # %if.end
	cmpl	$1302230636, -36(%rbp)  # imm = 0x4D9E766C
	jne	.LBB32_21
.LBB32_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_20
.Lfunc_end32:
	.size	compute_residue_b8block.22, .Lfunc_end32-compute_residue_b8block.22
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.23       # -- Begin function DecOneForthPix.23
	.p2align	4, 0x90
	.type	DecOneForthPix.23,@function
DecOneForthPix.23:                      # @DecOneForthPix.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2739003, -12(%rbp)     # imm = 0x29CB3B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB33_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_1
.LBB33_4:                               # %for.end
	cmpl	$2739003, -12(%rbp)     # imm = 0x29CB3B
	jne	.LBB33_6
.LBB33_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_5
.Lfunc_end33:
	.size	DecOneForthPix.23, .Lfunc_end33-DecOneForthPix.23
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.24   # -- Begin function decode_one_b8block.24
	.p2align	4, 0x90
	.type	decode_one_b8block.24,@function
decode_one_b8block.24:                  # @decode_one_b8block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$899361371, -84(%rbp)   # imm = 0x359B2A5B
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_4:                               # %for.cond9
                                        #   Parent Loop BB34_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB34_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB34_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_4
.LBB34_7:                               # %for.end
                                        #   in Loop: Header=BB34_2 Depth=1
	jmp	.LBB34_8
.LBB34_8:                               # %for.inc26
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_2
.LBB34_9:                               # %for.end28
	jmp	.LBB34_96
.LBB34_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB34_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_31
.LBB34_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_17:                              # %for.cond40
                                        #   Parent Loop BB34_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB34_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end49
                                        #   in Loop: Header=BB34_15 Depth=1
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc50
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_15
.LBB34_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_25:                              # %for.cond56
                                        #   Parent Loop BB34_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB34_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_25
.LBB34_28:                              # %for.end71
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_29
.LBB34_29:                              # %for.inc72
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_23
.LBB34_30:                              # %for.end74
	jmp	.LBB34_60
.LBB34_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB34_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB34_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_36:                              # %for.cond83
                                        #   Parent Loop BB34_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB34_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end120
                                        #   in Loop: Header=BB34_34 Depth=1
	jmp	.LBB34_40
.LBB34_40:                              # %for.inc121
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_34
.LBB34_41:                              # %for.end123
	jmp	.LBB34_51
.LBB34_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_45:                              # %for.cond129
                                        #   Parent Loop BB34_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB34_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB34_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_45
.LBB34_48:                              # %for.end145
                                        #   in Loop: Header=BB34_43 Depth=1
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc146
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_43
.LBB34_50:                              # %for.end148
	jmp	.LBB34_51
.LBB34_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_54:                              # %for.cond153
                                        #   Parent Loop BB34_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB34_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_54
.LBB34_57:                              # %for.end167
                                        #   in Loop: Header=BB34_52 Depth=1
	jmp	.LBB34_58
.LBB34_58:                              # %for.inc168
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_52
.LBB34_59:                              # %for.end170
	jmp	.LBB34_60
.LBB34_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB34_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB34_66
.LBB34_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB34_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_86
.LBB34_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_69 Depth 2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_69:                              # %for.cond197
                                        #   Parent Loop BB34_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB34_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB34_73:                              # %if.end218
                                        #   in Loop: Header=BB34_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB34_74:                              # %for.cond233
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	$0, -4(%rbp)
.LBB34_76:                              # %for.cond237
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        #       Parent Loop BB34_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end269
                                        #   in Loop: Header=BB34_74 Depth=3
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc270
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end272
                                        #   in Loop: Header=BB34_69 Depth=2
	jmp	.LBB34_82
.LBB34_82:                              # %for.inc273
                                        #   in Loop: Header=BB34_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_83:                              # %for.end275
                                        #   in Loop: Header=BB34_67 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc276
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_67
.LBB34_85:                              # %for.end278
	jmp	.LBB34_95
.LBB34_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_89:                              # %for.cond284
                                        #   Parent Loop BB34_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB34_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB34_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_89
.LBB34_92:                              # %for.end310
                                        #   in Loop: Header=BB34_87 Depth=1
	jmp	.LBB34_93
.LBB34_93:                              # %for.inc311
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_87
.LBB34_94:                              # %for.end313
	jmp	.LBB34_95
.LBB34_95:                              # %if.end314
	jmp	.LBB34_96
.LBB34_96:                              # %if.end315
	cmpl	$899361371, -84(%rbp)   # imm = 0x359B2A5B
	jne	.LBB34_98
.LBB34_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_97
.Lfunc_end34:
	.size	decode_one_b8block.24, .Lfunc_end34-decode_one_b8block.24
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.25 # -- Begin function compute_residue_b8block.25
	.p2align	4, 0x90
	.type	compute_residue_b8block.25,@function
compute_residue_b8block.25:             # @compute_residue_b8block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$790082432, -36(%rbp)   # imm = 0x2F17B380
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB35_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_4:                               # %for.cond4
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB35_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB35_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB35_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_4
.LBB35_7:                               # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc22
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_2
.LBB35_9:                               # %for.end24
	jmp	.LBB35_19
.LBB35_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_13:                              # %for.cond29
                                        #   Parent Loop BB35_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB35_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB35_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_13
.LBB35_16:                              # %for.end56
                                        #   in Loop: Header=BB35_11 Depth=1
	jmp	.LBB35_17
.LBB35_17:                              # %for.inc57
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_11
.LBB35_18:                              # %for.end59
	jmp	.LBB35_19
.LBB35_19:                              # %if.end
	cmpl	$790082432, -36(%rbp)   # imm = 0x2F17B380
	jne	.LBB35_21
.LBB35_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_20
.Lfunc_end35:
	.size	compute_residue_b8block.25, .Lfunc_end35-compute_residue_b8block.25
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.26        # -- Begin function Conceal_Error.26
	.p2align	4, 0x90
	.type	Conceal_Error.26,@function
Conceal_Error.26:                       # @Conceal_Error.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1281158350, -68(%rbp)  # imm = 0x4C5CECCE
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB36_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB36_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB36_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB36_4:                               # %land.end
.LBB36_5:                               # %lor.end
.LBB36_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB36_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB36_9
.LBB36_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB36_14
.LBB36_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB36_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB36_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB36_12:                              # %land.end51
.LBB36_13:                              # %lor.end53
.LBB36_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB36_180
# %bb.15:                               # %land.end54
	movq	.LJTI36_0(,%rax,8), %rax
	jmpq	*%rax
.LBB36_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB36_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB36_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB36_18 Depth=1
	movl	$0, -4(%rbp)
.LBB36_20:                              # %for.cond68
                                        #   Parent Loop BB36_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB36_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB36_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_20
.LBB36_23:                              # %for.end
                                        #   in Loop: Header=BB36_18 Depth=1
	jmp	.LBB36_24
.LBB36_24:                              # %for.inc85
                                        #   in Loop: Header=BB36_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_18
.LBB36_25:                              # %for.end87
	jmp	.LBB36_35
.LBB36_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB36_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB36_27 Depth=1
	movl	$0, -4(%rbp)
.LBB36_29:                              # %for.cond92
                                        #   Parent Loop BB36_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB36_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB36_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_29
.LBB36_32:                              # %for.end104
                                        #   in Loop: Header=BB36_27 Depth=1
	jmp	.LBB36_33
.LBB36_33:                              # %for.inc105
                                        #   in Loop: Header=BB36_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_27
.LBB36_34:                              # %for.end107
	jmp	.LBB36_35
.LBB36_35:                              # %if.end
	jmp	.LBB36_180
.LBB36_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB36_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_39 Depth 2
                                        #       Child Loop BB36_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB36_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB36_37 Depth=1
	movl	$0, -12(%rbp)
.LBB36_39:                              # %for.cond113
                                        #   Parent Loop BB36_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB36_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB36_39 Depth=2
	movl	$0, -4(%rbp)
.LBB36_41:                              # %for.cond117
                                        #   Parent Loop BB36_37 Depth=1
                                        #     Parent Loop BB36_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB36_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB36_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB36_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_41
.LBB36_44:                              # %for.end141
                                        #   in Loop: Header=BB36_39 Depth=2
	jmp	.LBB36_45
.LBB36_45:                              # %for.inc142
                                        #   in Loop: Header=BB36_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_39
.LBB36_46:                              # %for.end144
                                        #   in Loop: Header=BB36_37 Depth=1
	jmp	.LBB36_47
.LBB36_47:                              # %for.inc145
                                        #   in Loop: Header=BB36_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_37
.LBB36_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB36_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB36_49 Depth=1
	movl	$0, -8(%rbp)
.LBB36_51:                              # %for.cond152
                                        #   Parent Loop BB36_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB36_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB36_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_51
.LBB36_54:                              # %for.end162
                                        #   in Loop: Header=BB36_49 Depth=1
	jmp	.LBB36_55
.LBB36_55:                              # %for.inc163
                                        #   in Loop: Header=BB36_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_49
.LBB36_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB36_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB36_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB36_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB36_59 Depth=1
	movl	$0, -4(%rbp)
.LBB36_61:                              # %for.cond175
                                        #   Parent Loop BB36_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB36_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_61
.LBB36_64:                              # %for.end195
                                        #   in Loop: Header=BB36_59 Depth=1
	jmp	.LBB36_65
.LBB36_65:                              # %for.inc196
                                        #   in Loop: Header=BB36_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_59
.LBB36_66:                              # %for.end198
	jmp	.LBB36_95
.LBB36_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB36_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB36_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_71 Depth 2
                                        #       Child Loop BB36_73 Depth 3
                                        #         Child Loop BB36_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB36_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB36_71:                              # %for.cond210
                                        #   Parent Loop BB36_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_73 Depth 3
                                        #         Child Loop BB36_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB36_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB36_73:                              # %for.cond236
                                        #   Parent Loop BB36_69 Depth=1
                                        #     Parent Loop BB36_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB36_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB36_73 Depth=3
	movl	$0, -4(%rbp)
.LBB36_75:                              # %for.cond240
                                        #   Parent Loop BB36_69 Depth=1
                                        #     Parent Loop BB36_71 Depth=2
                                        #       Parent Loop BB36_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB36_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB36_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB36_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_75
.LBB36_78:                              # %for.end259
                                        #   in Loop: Header=BB36_73 Depth=3
	jmp	.LBB36_79
.LBB36_79:                              # %for.inc260
                                        #   in Loop: Header=BB36_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_73
.LBB36_80:                              # %for.end262
                                        #   in Loop: Header=BB36_71 Depth=2
	jmp	.LBB36_81
.LBB36_81:                              # %for.inc263
                                        #   in Loop: Header=BB36_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_71
.LBB36_82:                              # %for.end265
                                        #   in Loop: Header=BB36_69 Depth=1
	jmp	.LBB36_83
.LBB36_83:                              # %for.inc266
                                        #   in Loop: Header=BB36_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_69
.LBB36_84:                              # %for.end268
	jmp	.LBB36_94
.LBB36_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB36_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	$0, -4(%rbp)
.LBB36_88:                              # %for.cond274
                                        #   Parent Loop BB36_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB36_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_88
.LBB36_91:                              # %for.end294
                                        #   in Loop: Header=BB36_86 Depth=1
	jmp	.LBB36_92
.LBB36_92:                              # %for.inc295
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_86
.LBB36_93:                              # %for.end297
	jmp	.LBB36_94
.LBB36_94:                              # %if.end298
	jmp	.LBB36_95
.LBB36_95:                              # %if.end299
	jmp	.LBB36_105
.LBB36_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB36_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB36_97 Depth=1
	movl	$0, -4(%rbp)
.LBB36_99:                              # %for.cond305
                                        #   Parent Loop BB36_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB36_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB36_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_99
.LBB36_102:                             # %for.end317
                                        #   in Loop: Header=BB36_97 Depth=1
	jmp	.LBB36_103
.LBB36_103:                             # %for.inc318
                                        #   in Loop: Header=BB36_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_97
.LBB36_104:                             # %for.end320
	jmp	.LBB36_105
.LBB36_105:                             # %if.end321
	jmp	.LBB36_180
.LBB36_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB36_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB36_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_110 Depth 2
                                        #       Child Loop BB36_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB36_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB36_108 Depth=1
	movl	$0, -12(%rbp)
.LBB36_110:                             # %for.cond331
                                        #   Parent Loop BB36_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB36_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB36_110 Depth=2
	movl	$0, -4(%rbp)
.LBB36_112:                             # %for.cond335
                                        #   Parent Loop BB36_108 Depth=1
                                        #     Parent Loop BB36_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB36_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB36_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB36_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_112
.LBB36_115:                             # %for.end359
                                        #   in Loop: Header=BB36_110 Depth=2
	jmp	.LBB36_116
.LBB36_116:                             # %for.inc360
                                        #   in Loop: Header=BB36_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_110
.LBB36_117:                             # %for.end362
                                        #   in Loop: Header=BB36_108 Depth=1
	jmp	.LBB36_118
.LBB36_118:                             # %for.inc363
                                        #   in Loop: Header=BB36_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_108
.LBB36_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB36_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB36_120 Depth=1
	movl	$0, -8(%rbp)
.LBB36_122:                             # %for.cond370
                                        #   Parent Loop BB36_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB36_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB36_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_122
.LBB36_125:                             # %for.end380
                                        #   in Loop: Header=BB36_120 Depth=1
	jmp	.LBB36_126
.LBB36_126:                             # %for.inc381
                                        #   in Loop: Header=BB36_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_120
.LBB36_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB36_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB36_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB36_129 Depth=1
	movl	$0, -4(%rbp)
.LBB36_131:                             # %for.cond390
                                        #   Parent Loop BB36_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB36_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB36_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_131
.LBB36_134:                             # %for.end410
                                        #   in Loop: Header=BB36_129 Depth=1
	jmp	.LBB36_135
.LBB36_135:                             # %for.inc411
                                        #   in Loop: Header=BB36_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_129
.LBB36_136:                             # %for.end413
	jmp	.LBB36_156
.LBB36_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB36_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB36_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_141 Depth 2
                                        #       Child Loop BB36_143 Depth 3
                                        #         Child Loop BB36_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB36_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB36_141:                             # %for.cond425
                                        #   Parent Loop BB36_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_143 Depth 3
                                        #         Child Loop BB36_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB36_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB36_143:                             # %for.cond452
                                        #   Parent Loop BB36_139 Depth=1
                                        #     Parent Loop BB36_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB36_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB36_143 Depth=3
	movl	$0, -4(%rbp)
.LBB36_145:                             # %for.cond456
                                        #   Parent Loop BB36_139 Depth=1
                                        #     Parent Loop BB36_141 Depth=2
                                        #       Parent Loop BB36_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB36_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB36_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB36_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_145
.LBB36_148:                             # %for.end475
                                        #   in Loop: Header=BB36_143 Depth=3
	jmp	.LBB36_149
.LBB36_149:                             # %for.inc476
                                        #   in Loop: Header=BB36_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_143
.LBB36_150:                             # %for.end478
                                        #   in Loop: Header=BB36_141 Depth=2
	jmp	.LBB36_151
.LBB36_151:                             # %for.inc479
                                        #   in Loop: Header=BB36_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_141
.LBB36_152:                             # %for.end481
                                        #   in Loop: Header=BB36_139 Depth=1
	jmp	.LBB36_153
.LBB36_153:                             # %for.inc482
                                        #   in Loop: Header=BB36_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_139
.LBB36_154:                             # %for.end484
	jmp	.LBB36_155
.LBB36_155:                             # %if.end485
	jmp	.LBB36_156
.LBB36_156:                             # %if.end486
	jmp	.LBB36_157
.LBB36_157:                             # %if.end487
	jmp	.LBB36_180
.LBB36_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB36_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB36_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB36_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB36_161 Depth=1
	movl	$0, -4(%rbp)
.LBB36_163:                             # %for.cond499
                                        #   Parent Loop BB36_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB36_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB36_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_163
.LBB36_166:                             # %for.end519
                                        #   in Loop: Header=BB36_161 Depth=1
	jmp	.LBB36_167
.LBB36_167:                             # %for.inc520
                                        #   in Loop: Header=BB36_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_161
.LBB36_168:                             # %for.end522
	jmp	.LBB36_169
.LBB36_169:                             # %if.end523
	jmp	.LBB36_179
.LBB36_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB36_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	$0, -4(%rbp)
.LBB36_173:                             # %for.cond529
                                        #   Parent Loop BB36_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB36_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_173
.LBB36_176:                             # %for.end541
                                        #   in Loop: Header=BB36_171 Depth=1
	jmp	.LBB36_177
.LBB36_177:                             # %for.inc542
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_171
.LBB36_178:                             # %for.end544
	jmp	.LBB36_179
.LBB36_179:                             # %if.end545
	jmp	.LBB36_180
.LBB36_180:                             # %sw.epilog
	cmpl	$1281158350, -68(%rbp)  # imm = 0x4C5CECCE
	jne	.LBB36_182
.LBB36_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_181
.Lfunc_end36:
	.size	Conceal_Error.26, .Lfunc_end36-Conceal_Error.26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI36_0:
	.quad	.LBB36_16
	.quad	.LBB36_158
	.quad	.LBB36_106
	.quad	.LBB36_180
	.quad	.LBB36_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.27 # -- Begin function compute_residue_b8block.27
	.p2align	4, 0x90
	.type	compute_residue_b8block.27,@function
compute_residue_b8block.27:             # @compute_residue_b8block.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$509339563, -36(%rbp)   # imm = 0x1E5BE7AB
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB37_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_4:                               # %for.cond4
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc22
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end24
	jmp	.LBB37_19
.LBB37_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB37_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_13:                              # %for.cond29
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB37_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_13
.LBB37_16:                              # %for.end56
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_17
.LBB37_17:                              # %for.inc57
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_11
.LBB37_18:                              # %for.end59
	jmp	.LBB37_19
.LBB37_19:                              # %if.end
	cmpl	$509339563, -36(%rbp)   # imm = 0x1E5BE7AB
	jne	.LBB37_21
.LBB37_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_20
.Lfunc_end37:
	.size	compute_residue_b8block.27, .Lfunc_end37-compute_residue_b8block.27
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.28   # -- Begin function decode_one_b8block.28
	.p2align	4, 0x90
	.type	decode_one_b8block.28,@function
decode_one_b8block.28:                  # @decode_one_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1850097987, -84(%rbp)  # imm = 0x6E464143
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_4:                               # %for.cond9
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc26
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end28
	jmp	.LBB38_96
.LBB38_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB38_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_31
.LBB38_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_17:                              # %for.cond40
                                        #   Parent Loop BB38_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB38_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB38_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_17
.LBB38_20:                              # %for.end49
                                        #   in Loop: Header=BB38_15 Depth=1
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc50
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_15
.LBB38_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_25:                              # %for.cond56
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB38_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end71
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc72
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end74
	jmp	.LBB38_60
.LBB38_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB38_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB38_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_36:                              # %for.cond83
                                        #   Parent Loop BB38_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB38_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end120
                                        #   in Loop: Header=BB38_34 Depth=1
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc121
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_34
.LBB38_41:                              # %for.end123
	jmp	.LBB38_51
.LBB38_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_45:                              # %for.cond129
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB38_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end145
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc146
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end148
	jmp	.LBB38_51
.LBB38_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_54:                              # %for.cond153
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end167
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc168
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end170
	jmp	.LBB38_60
.LBB38_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB38_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB38_66
.LBB38_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB38_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_86
.LBB38_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_69:                              # %for.cond197
                                        #   Parent Loop BB38_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB38_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB38_73:                              # %if.end218
                                        #   in Loop: Header=BB38_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB38_74:                              # %for.cond233
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	$0, -8(%rbp)
.LBB38_76:                              # %for.cond237
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_76
.LBB38_79:                              # %for.end269
                                        #   in Loop: Header=BB38_74 Depth=3
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc270
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_74
.LBB38_81:                              # %for.end272
                                        #   in Loop: Header=BB38_69 Depth=2
	jmp	.LBB38_82
.LBB38_82:                              # %for.inc273
                                        #   in Loop: Header=BB38_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_69
.LBB38_83:                              # %for.end275
                                        #   in Loop: Header=BB38_67 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc276
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_67
.LBB38_85:                              # %for.end278
	jmp	.LBB38_95
.LBB38_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_89:                              # %for.cond284
                                        #   Parent Loop BB38_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB38_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB38_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_89
.LBB38_92:                              # %for.end310
                                        #   in Loop: Header=BB38_87 Depth=1
	jmp	.LBB38_93
.LBB38_93:                              # %for.inc311
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_87
.LBB38_94:                              # %for.end313
	jmp	.LBB38_95
.LBB38_95:                              # %if.end314
	jmp	.LBB38_96
.LBB38_96:                              # %if.end315
	cmpl	$1850097987, -84(%rbp)  # imm = 0x6E464143
	jne	.LBB38_98
.LBB38_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_97
.Lfunc_end38:
	.size	decode_one_b8block.28, .Lfunc_end38-decode_one_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.29 # -- Begin function compute_residue_b8block.29
	.p2align	4, 0x90
	.type	compute_residue_b8block.29,@function
compute_residue_b8block.29:             # @compute_residue_b8block.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$784020389, -36(%rbp)   # imm = 0x2EBB33A5
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB39_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB39_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_4:                               # %for.cond4
                                        #   Parent Loop BB39_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB39_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB39_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_4
.LBB39_7:                               # %for.end
                                        #   in Loop: Header=BB39_2 Depth=1
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc22
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_2
.LBB39_9:                               # %for.end24
	jmp	.LBB39_19
.LBB39_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB39_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB39_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_13:                              # %for.cond29
                                        #   Parent Loop BB39_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB39_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB39_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_13
.LBB39_16:                              # %for.end56
                                        #   in Loop: Header=BB39_11 Depth=1
	jmp	.LBB39_17
.LBB39_17:                              # %for.inc57
                                        #   in Loop: Header=BB39_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_11
.LBB39_18:                              # %for.end59
	jmp	.LBB39_19
.LBB39_19:                              # %if.end
	cmpl	$784020389, -36(%rbp)   # imm = 0x2EBB33A5
	jne	.LBB39_21
.LBB39_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_20
.Lfunc_end39:
	.size	compute_residue_b8block.29, .Lfunc_end39-compute_residue_b8block.29
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.30  # -- Begin function Get_Reference_Pixel.30
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.30,@function
Get_Reference_Pixel.30:                 # @Get_Reference_Pixel.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1255402957, -100(%rbp) # imm = 0x4AD3EDCD
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB40_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB40_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB40_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB40_5
.LBB40_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB40_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB40_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB40_11
.LBB40_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB40_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB40_10
.LBB40_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB40_10:                              # %cond.end14
.LBB40_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB40_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB40_14
.LBB40_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB40_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB40_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB40_20
.LBB40_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB40_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB40_19
.LBB40_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB40_19:                              # %cond.end29
.LBB40_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_332
.LBB40_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB40_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB40_25
.LBB40_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB40_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB40_31
.LBB40_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB40_30
.LBB40_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB40_30:                              # %cond.end52
.LBB40_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_36
.LBB40_35:                              # %cond.false61
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_36:                              # %cond.end63
                                        #   in Loop: Header=BB40_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB40_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_42
.LBB40_38:                              # %cond.false68
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_41
.LBB40_40:                              # %cond.false73
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_41:                              # %cond.end75
                                        #   in Loop: Header=BB40_32 Depth=1
.LBB40_42:                              # %cond.end77
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_32
.LBB40_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_47
.LBB40_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB40_53
.LBB40_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_52
.LBB40_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_52:                              # %cond.end113
.LBB40_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB40_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB40_57
.LBB40_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB40_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB40_63
.LBB40_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB40_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB40_62
.LBB40_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB40_62:                              # %cond.end136
.LBB40_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_76
.LBB40_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB40_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB40_68
.LBB40_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB40_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB40_74
.LBB40_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB40_73
.LBB40_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB40_73:                              # %cond.end169
.LBB40_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_75:                              # %if.end
	jmp	.LBB40_76
.LBB40_76:                              # %if.end178
	jmp	.LBB40_331
.LBB40_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB40_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB40_81
.LBB40_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB40_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB40_87
.LBB40_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB40_86
.LBB40_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB40_86:                              # %cond.end197
.LBB40_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_92
.LBB40_91:                              # %cond.false209
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_92:                              # %cond.end211
                                        #   in Loop: Header=BB40_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB40_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_98
.LBB40_94:                              # %cond.false216
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_97
.LBB40_96:                              # %cond.false221
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_97:                              # %cond.end223
                                        #   in Loop: Header=BB40_88 Depth=1
.LBB40_98:                              # %cond.end225
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_88
.LBB40_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_103
.LBB40_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB40_109
.LBB40_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_108
.LBB40_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_108:                             # %cond.end266
.LBB40_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB40_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB40_113
.LBB40_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB40_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB40_119
.LBB40_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB40_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB40_118
.LBB40_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB40_118:                             # %cond.end287
.LBB40_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_132
.LBB40_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB40_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB40_124
.LBB40_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB40_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB40_130
.LBB40_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB40_129
.LBB40_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB40_129:                             # %cond.end320
.LBB40_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_131:                             # %if.end331
	jmp	.LBB40_132
.LBB40_132:                             # %if.end332
	jmp	.LBB40_330
.LBB40_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB40_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB40_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_139
.LBB40_138:                             # %cond.false345
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_139:                             # %cond.end347
                                        #   in Loop: Header=BB40_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB40_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_145
.LBB40_141:                             # %cond.false352
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_144
.LBB40_143:                             # %cond.false357
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_144:                             # %cond.end359
                                        #   in Loop: Header=BB40_135 Depth=1
.LBB40_145:                             # %cond.end361
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_146:                             # %for.cond363
                                        #   Parent Loop BB40_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB40_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB40_150
.LBB40_149:                             # %cond.false371
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_150:                             # %cond.end373
                                        #   in Loop: Header=BB40_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB40_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_156
.LBB40_152:                             # %cond.false378
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB40_155
.LBB40_154:                             # %cond.false383
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_155:                             # %cond.end385
                                        #   in Loop: Header=BB40_146 Depth=2
.LBB40_156:                             # %cond.end387
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_146
.LBB40_158:                             # %for.end401
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_135
.LBB40_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB40_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB40_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_161
.LBB40_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_167
.LBB40_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB40_173
.LBB40_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_172
.LBB40_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_172:                             # %cond.end449
.LBB40_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_177
.LBB40_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB40_183
.LBB40_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_182
.LBB40_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_182:                             # %cond.end486
.LBB40_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_196
.LBB40_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB40_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_188
.LBB40_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB40_194
.LBB40_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_193
.LBB40_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_193:                             # %cond.end526
.LBB40_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_195:                             # %if.end532
	jmp	.LBB40_196
.LBB40_196:                             # %if.end533
	jmp	.LBB40_329
.LBB40_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB40_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB40_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB40_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_203
.LBB40_202:                             # %cond.false546
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_203:                             # %cond.end548
                                        #   in Loop: Header=BB40_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB40_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_209
.LBB40_205:                             # %cond.false553
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_208
.LBB40_207:                             # %cond.false558
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_208:                             # %cond.end560
                                        #   in Loop: Header=BB40_199 Depth=1
.LBB40_209:                             # %cond.end562
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_210:                             # %for.cond564
                                        #   Parent Loop BB40_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB40_214
.LBB40_213:                             # %cond.false572
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_214:                             # %cond.end574
                                        #   in Loop: Header=BB40_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB40_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_220
.LBB40_216:                             # %cond.false579
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB40_219
.LBB40_218:                             # %cond.false584
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_219:                             # %cond.end586
                                        #   in Loop: Header=BB40_210 Depth=2
.LBB40_220:                             # %cond.end588
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_210
.LBB40_222:                             # %for.end602
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_199
.LBB40_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB40_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB40_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_225
.LBB40_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_231
.LBB40_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB40_237
.LBB40_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_236
.LBB40_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_236:                             # %cond.end650
.LBB40_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_241
.LBB40_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB40_247
.LBB40_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_246
.LBB40_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_246:                             # %cond.end687
.LBB40_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_258
.LBB40_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_251
.LBB40_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB40_257
.LBB40_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_256
.LBB40_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_256:                             # %cond.end724
.LBB40_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_258:                             # %if.end730
	jmp	.LBB40_328
.LBB40_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB40_262
.LBB40_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB40_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB40_265
.LBB40_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB40_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB40_271
.LBB40_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB40_270
.LBB40_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB40_270:                             # %cond.end753
.LBB40_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_276
.LBB40_275:                             # %cond.false765
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_276:                             # %cond.end767
                                        #   in Loop: Header=BB40_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB40_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_282
.LBB40_278:                             # %cond.false772
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_281
.LBB40_280:                             # %cond.false777
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_281:                             # %cond.end779
                                        #   in Loop: Header=BB40_272 Depth=1
.LBB40_282:                             # %cond.end781
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_272
.LBB40_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_287
.LBB40_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB40_293
.LBB40_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_292
.LBB40_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_292:                             # %cond.end822
.LBB40_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB40_296
.LBB40_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB40_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB40_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB40_299
.LBB40_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB40_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB40_305
.LBB40_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB40_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB40_304
.LBB40_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB40_304:                             # %cond.end847
.LBB40_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_310
.LBB40_309:                             # %cond.false859
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_310:                             # %cond.end861
                                        #   in Loop: Header=BB40_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB40_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_316
.LBB40_312:                             # %cond.false866
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_315
.LBB40_314:                             # %cond.false871
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_315:                             # %cond.end873
                                        #   in Loop: Header=BB40_306 Depth=1
.LBB40_316:                             # %cond.end875
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_306
.LBB40_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_321
.LBB40_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB40_327
.LBB40_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_326
.LBB40_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_326:                             # %cond.end916
.LBB40_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_328:                             # %if.end922
	jmp	.LBB40_329
.LBB40_329:                             # %if.end923
	jmp	.LBB40_330
.LBB40_330:                             # %if.end924
	jmp	.LBB40_331
.LBB40_331:                             # %if.end925
	jmp	.LBB40_332
.LBB40_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1255402957, -100(%rbp) # imm = 0x4AD3EDCD
	jne	.LBB40_334
.LBB40_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_333
.Lfunc_end40:
	.size	Get_Reference_Pixel.30, .Lfunc_end40-Get_Reference_Pixel.30
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.31        # -- Begin function Conceal_Error.31
	.p2align	4, 0x90
	.type	Conceal_Error.31,@function
Conceal_Error.31:                       # @Conceal_Error.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1934790941, -68(%rbp)  # imm = 0x7352911D
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB41_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB41_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB41_4:                               # %land.end
.LBB41_5:                               # %lor.end
.LBB41_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB41_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB41_9
.LBB41_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB41_14
.LBB41_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB41_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB41_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB41_12:                              # %land.end51
.LBB41_13:                              # %lor.end53
.LBB41_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB41_180
# %bb.15:                               # %land.end54
	movq	.LJTI41_0(,%rax,8), %rax
	jmpq	*%rax
.LBB41_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB41_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB41_18 Depth=1
	movl	$0, -4(%rbp)
.LBB41_20:                              # %for.cond68
                                        #   Parent Loop BB41_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB41_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB41_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_20
.LBB41_23:                              # %for.end
                                        #   in Loop: Header=BB41_18 Depth=1
	jmp	.LBB41_24
.LBB41_24:                              # %for.inc85
                                        #   in Loop: Header=BB41_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_18
.LBB41_25:                              # %for.end87
	jmp	.LBB41_35
.LBB41_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB41_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB41_27 Depth=1
	movl	$0, -4(%rbp)
.LBB41_29:                              # %for.cond92
                                        #   Parent Loop BB41_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB41_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB41_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_29
.LBB41_32:                              # %for.end104
                                        #   in Loop: Header=BB41_27 Depth=1
	jmp	.LBB41_33
.LBB41_33:                              # %for.inc105
                                        #   in Loop: Header=BB41_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_27
.LBB41_34:                              # %for.end107
	jmp	.LBB41_35
.LBB41_35:                              # %if.end
	jmp	.LBB41_180
.LBB41_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB41_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_39 Depth 2
                                        #       Child Loop BB41_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB41_37 Depth=1
	movl	$0, -12(%rbp)
.LBB41_39:                              # %for.cond113
                                        #   Parent Loop BB41_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB41_39 Depth=2
	movl	$0, -4(%rbp)
.LBB41_41:                              # %for.cond117
                                        #   Parent Loop BB41_37 Depth=1
                                        #     Parent Loop BB41_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB41_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB41_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB41_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_41
.LBB41_44:                              # %for.end141
                                        #   in Loop: Header=BB41_39 Depth=2
	jmp	.LBB41_45
.LBB41_45:                              # %for.inc142
                                        #   in Loop: Header=BB41_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_39
.LBB41_46:                              # %for.end144
                                        #   in Loop: Header=BB41_37 Depth=1
	jmp	.LBB41_47
.LBB41_47:                              # %for.inc145
                                        #   in Loop: Header=BB41_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_37
.LBB41_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB41_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB41_49 Depth=1
	movl	$0, -8(%rbp)
.LBB41_51:                              # %for.cond152
                                        #   Parent Loop BB41_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB41_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB41_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_51
.LBB41_54:                              # %for.end162
                                        #   in Loop: Header=BB41_49 Depth=1
	jmp	.LBB41_55
.LBB41_55:                              # %for.inc163
                                        #   in Loop: Header=BB41_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_49
.LBB41_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB41_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB41_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	$0, -4(%rbp)
.LBB41_61:                              # %for.cond175
                                        #   Parent Loop BB41_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB41_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB41_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_61
.LBB41_64:                              # %for.end195
                                        #   in Loop: Header=BB41_59 Depth=1
	jmp	.LBB41_65
.LBB41_65:                              # %for.inc196
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_59
.LBB41_66:                              # %for.end198
	jmp	.LBB41_95
.LBB41_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB41_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB41_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_71 Depth 2
                                        #       Child Loop BB41_73 Depth 3
                                        #         Child Loop BB41_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB41_71:                              # %for.cond210
                                        #   Parent Loop BB41_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_73 Depth 3
                                        #         Child Loop BB41_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB41_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB41_73:                              # %for.cond236
                                        #   Parent Loop BB41_69 Depth=1
                                        #     Parent Loop BB41_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB41_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB41_73 Depth=3
	movl	$0, -4(%rbp)
.LBB41_75:                              # %for.cond240
                                        #   Parent Loop BB41_69 Depth=1
                                        #     Parent Loop BB41_71 Depth=2
                                        #       Parent Loop BB41_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB41_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB41_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB41_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_75
.LBB41_78:                              # %for.end259
                                        #   in Loop: Header=BB41_73 Depth=3
	jmp	.LBB41_79
.LBB41_79:                              # %for.inc260
                                        #   in Loop: Header=BB41_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_73
.LBB41_80:                              # %for.end262
                                        #   in Loop: Header=BB41_71 Depth=2
	jmp	.LBB41_81
.LBB41_81:                              # %for.inc263
                                        #   in Loop: Header=BB41_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_71
.LBB41_82:                              # %for.end265
                                        #   in Loop: Header=BB41_69 Depth=1
	jmp	.LBB41_83
.LBB41_83:                              # %for.inc266
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_69
.LBB41_84:                              # %for.end268
	jmp	.LBB41_94
.LBB41_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB41_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	$0, -4(%rbp)
.LBB41_88:                              # %for.cond274
                                        #   Parent Loop BB41_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB41_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB41_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_88
.LBB41_91:                              # %for.end294
                                        #   in Loop: Header=BB41_86 Depth=1
	jmp	.LBB41_92
.LBB41_92:                              # %for.inc295
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_86
.LBB41_93:                              # %for.end297
	jmp	.LBB41_94
.LBB41_94:                              # %if.end298
	jmp	.LBB41_95
.LBB41_95:                              # %if.end299
	jmp	.LBB41_105
.LBB41_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB41_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB41_97 Depth=1
	movl	$0, -4(%rbp)
.LBB41_99:                              # %for.cond305
                                        #   Parent Loop BB41_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB41_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_99
.LBB41_102:                             # %for.end317
                                        #   in Loop: Header=BB41_97 Depth=1
	jmp	.LBB41_103
.LBB41_103:                             # %for.inc318
                                        #   in Loop: Header=BB41_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_97
.LBB41_104:                             # %for.end320
	jmp	.LBB41_105
.LBB41_105:                             # %if.end321
	jmp	.LBB41_180
.LBB41_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB41_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_110 Depth 2
                                        #       Child Loop BB41_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB41_108 Depth=1
	movl	$0, -12(%rbp)
.LBB41_110:                             # %for.cond331
                                        #   Parent Loop BB41_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB41_110 Depth=2
	movl	$0, -4(%rbp)
.LBB41_112:                             # %for.cond335
                                        #   Parent Loop BB41_108 Depth=1
                                        #     Parent Loop BB41_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB41_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB41_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB41_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_112
.LBB41_115:                             # %for.end359
                                        #   in Loop: Header=BB41_110 Depth=2
	jmp	.LBB41_116
.LBB41_116:                             # %for.inc360
                                        #   in Loop: Header=BB41_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_110
.LBB41_117:                             # %for.end362
                                        #   in Loop: Header=BB41_108 Depth=1
	jmp	.LBB41_118
.LBB41_118:                             # %for.inc363
                                        #   in Loop: Header=BB41_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_108
.LBB41_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB41_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	$0, -8(%rbp)
.LBB41_122:                             # %for.cond370
                                        #   Parent Loop BB41_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB41_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB41_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_122
.LBB41_125:                             # %for.end380
                                        #   in Loop: Header=BB41_120 Depth=1
	jmp	.LBB41_126
.LBB41_126:                             # %for.inc381
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_120
.LBB41_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB41_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB41_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	$0, -4(%rbp)
.LBB41_131:                             # %for.cond390
                                        #   Parent Loop BB41_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB41_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_131
.LBB41_134:                             # %for.end410
                                        #   in Loop: Header=BB41_129 Depth=1
	jmp	.LBB41_135
.LBB41_135:                             # %for.inc411
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_129
.LBB41_136:                             # %for.end413
	jmp	.LBB41_156
.LBB41_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB41_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB41_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_141 Depth 2
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB41_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB41_141:                             # %for.cond425
                                        #   Parent Loop BB41_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB41_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB41_143:                             # %for.cond452
                                        #   Parent Loop BB41_139 Depth=1
                                        #     Parent Loop BB41_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB41_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	$0, -4(%rbp)
.LBB41_145:                             # %for.cond456
                                        #   Parent Loop BB41_139 Depth=1
                                        #     Parent Loop BB41_141 Depth=2
                                        #       Parent Loop BB41_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB41_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB41_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB41_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_145
.LBB41_148:                             # %for.end475
                                        #   in Loop: Header=BB41_143 Depth=3
	jmp	.LBB41_149
.LBB41_149:                             # %for.inc476
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_143
.LBB41_150:                             # %for.end478
                                        #   in Loop: Header=BB41_141 Depth=2
	jmp	.LBB41_151
.LBB41_151:                             # %for.inc479
                                        #   in Loop: Header=BB41_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_141
.LBB41_152:                             # %for.end481
                                        #   in Loop: Header=BB41_139 Depth=1
	jmp	.LBB41_153
.LBB41_153:                             # %for.inc482
                                        #   in Loop: Header=BB41_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_139
.LBB41_154:                             # %for.end484
	jmp	.LBB41_155
.LBB41_155:                             # %if.end485
	jmp	.LBB41_156
.LBB41_156:                             # %if.end486
	jmp	.LBB41_157
.LBB41_157:                             # %if.end487
	jmp	.LBB41_180
.LBB41_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB41_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB41_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	$0, -4(%rbp)
.LBB41_163:                             # %for.cond499
                                        #   Parent Loop BB41_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB41_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB41_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_163
.LBB41_166:                             # %for.end519
                                        #   in Loop: Header=BB41_161 Depth=1
	jmp	.LBB41_167
.LBB41_167:                             # %for.inc520
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_161
.LBB41_168:                             # %for.end522
	jmp	.LBB41_169
.LBB41_169:                             # %if.end523
	jmp	.LBB41_179
.LBB41_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB41_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -4(%rbp)
.LBB41_173:                             # %for.cond529
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB41_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB41_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_173
.LBB41_176:                             # %for.end541
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_177
.LBB41_177:                             # %for.inc542
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_171
.LBB41_178:                             # %for.end544
	jmp	.LBB41_179
.LBB41_179:                             # %if.end545
	jmp	.LBB41_180
.LBB41_180:                             # %sw.epilog
	cmpl	$1934790941, -68(%rbp)  # imm = 0x7352911D
	jne	.LBB41_182
.LBB41_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_181
.Lfunc_end41:
	.size	Conceal_Error.31, .Lfunc_end41-Conceal_Error.31
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI41_0:
	.quad	.LBB41_16
	.quad	.LBB41_158
	.quad	.LBB41_106
	.quad	.LBB41_180
	.quad	.LBB41_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.32  # -- Begin function Get_Reference_Block.32
	.p2align	4, 0x90
	.type	Get_Reference_Block.32,@function
Get_Reference_Block.32:                 # @Get_Reference_Block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$372063264, -24(%rbp)   # imm = 0x162D3C20
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_3:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB42_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_3
.LBB42_6:                               # %for.end
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_7
.LBB42_7:                               # %for.inc14
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_1
.LBB42_8:                               # %for.end16
	cmpl	$372063264, -24(%rbp)   # imm = 0x162D3C20
	jne	.LBB42_10
.LBB42_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_9
.Lfunc_end42:
	.size	Get_Reference_Block.32, .Lfunc_end42-Get_Reference_Block.32
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.33        # -- Begin function Conceal_Error.33
	.p2align	4, 0x90
	.type	Conceal_Error.33,@function
Conceal_Error.33:                       # @Conceal_Error.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$195502467, -68(%rbp)   # imm = 0xBA72183
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB43_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB43_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB43_4:                               # %land.end
.LBB43_5:                               # %lor.end
.LBB43_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB43_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB43_9
.LBB43_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB43_14
.LBB43_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB43_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB43_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB43_12:                              # %land.end51
.LBB43_13:                              # %lor.end53
.LBB43_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB43_180
# %bb.15:                               # %land.end54
	movq	.LJTI43_0(,%rax,8), %rax
	jmpq	*%rax
.LBB43_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB43_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB43_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB43_18 Depth=1
	movl	$0, -4(%rbp)
.LBB43_20:                              # %for.cond68
                                        #   Parent Loop BB43_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB43_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB43_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_20
.LBB43_23:                              # %for.end
                                        #   in Loop: Header=BB43_18 Depth=1
	jmp	.LBB43_24
.LBB43_24:                              # %for.inc85
                                        #   in Loop: Header=BB43_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_18
.LBB43_25:                              # %for.end87
	jmp	.LBB43_35
.LBB43_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB43_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB43_27 Depth=1
	movl	$0, -4(%rbp)
.LBB43_29:                              # %for.cond92
                                        #   Parent Loop BB43_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB43_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB43_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_29
.LBB43_32:                              # %for.end104
                                        #   in Loop: Header=BB43_27 Depth=1
	jmp	.LBB43_33
.LBB43_33:                              # %for.inc105
                                        #   in Loop: Header=BB43_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_27
.LBB43_34:                              # %for.end107
	jmp	.LBB43_35
.LBB43_35:                              # %if.end
	jmp	.LBB43_180
.LBB43_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB43_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_39 Depth 2
                                        #       Child Loop BB43_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB43_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB43_37 Depth=1
	movl	$0, -12(%rbp)
.LBB43_39:                              # %for.cond113
                                        #   Parent Loop BB43_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB43_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB43_39 Depth=2
	movl	$0, -4(%rbp)
.LBB43_41:                              # %for.cond117
                                        #   Parent Loop BB43_37 Depth=1
                                        #     Parent Loop BB43_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB43_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB43_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB43_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_41
.LBB43_44:                              # %for.end141
                                        #   in Loop: Header=BB43_39 Depth=2
	jmp	.LBB43_45
.LBB43_45:                              # %for.inc142
                                        #   in Loop: Header=BB43_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_39
.LBB43_46:                              # %for.end144
                                        #   in Loop: Header=BB43_37 Depth=1
	jmp	.LBB43_47
.LBB43_47:                              # %for.inc145
                                        #   in Loop: Header=BB43_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_37
.LBB43_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB43_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB43_49 Depth=1
	movl	$0, -8(%rbp)
.LBB43_51:                              # %for.cond152
                                        #   Parent Loop BB43_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB43_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB43_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_51
.LBB43_54:                              # %for.end162
                                        #   in Loop: Header=BB43_49 Depth=1
	jmp	.LBB43_55
.LBB43_55:                              # %for.inc163
                                        #   in Loop: Header=BB43_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_49
.LBB43_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB43_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB43_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB43_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB43_59 Depth=1
	movl	$0, -4(%rbp)
.LBB43_61:                              # %for.cond175
                                        #   Parent Loop BB43_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB43_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_61
.LBB43_64:                              # %for.end195
                                        #   in Loop: Header=BB43_59 Depth=1
	jmp	.LBB43_65
.LBB43_65:                              # %for.inc196
                                        #   in Loop: Header=BB43_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_59
.LBB43_66:                              # %for.end198
	jmp	.LBB43_95
.LBB43_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB43_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB43_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_71 Depth 2
                                        #       Child Loop BB43_73 Depth 3
                                        #         Child Loop BB43_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB43_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB43_71:                              # %for.cond210
                                        #   Parent Loop BB43_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_73 Depth 3
                                        #         Child Loop BB43_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB43_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB43_73:                              # %for.cond236
                                        #   Parent Loop BB43_69 Depth=1
                                        #     Parent Loop BB43_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB43_73 Depth=3
	movl	$0, -4(%rbp)
.LBB43_75:                              # %for.cond240
                                        #   Parent Loop BB43_69 Depth=1
                                        #     Parent Loop BB43_71 Depth=2
                                        #       Parent Loop BB43_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB43_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB43_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB43_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_75
.LBB43_78:                              # %for.end259
                                        #   in Loop: Header=BB43_73 Depth=3
	jmp	.LBB43_79
.LBB43_79:                              # %for.inc260
                                        #   in Loop: Header=BB43_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_73
.LBB43_80:                              # %for.end262
                                        #   in Loop: Header=BB43_71 Depth=2
	jmp	.LBB43_81
.LBB43_81:                              # %for.inc263
                                        #   in Loop: Header=BB43_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_71
.LBB43_82:                              # %for.end265
                                        #   in Loop: Header=BB43_69 Depth=1
	jmp	.LBB43_83
.LBB43_83:                              # %for.inc266
                                        #   in Loop: Header=BB43_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_69
.LBB43_84:                              # %for.end268
	jmp	.LBB43_94
.LBB43_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB43_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	$0, -4(%rbp)
.LBB43_88:                              # %for.cond274
                                        #   Parent Loop BB43_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB43_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_88
.LBB43_91:                              # %for.end294
                                        #   in Loop: Header=BB43_86 Depth=1
	jmp	.LBB43_92
.LBB43_92:                              # %for.inc295
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_86
.LBB43_93:                              # %for.end297
	jmp	.LBB43_94
.LBB43_94:                              # %if.end298
	jmp	.LBB43_95
.LBB43_95:                              # %if.end299
	jmp	.LBB43_105
.LBB43_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB43_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB43_97 Depth=1
	movl	$0, -4(%rbp)
.LBB43_99:                              # %for.cond305
                                        #   Parent Loop BB43_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB43_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB43_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_99
.LBB43_102:                             # %for.end317
                                        #   in Loop: Header=BB43_97 Depth=1
	jmp	.LBB43_103
.LBB43_103:                             # %for.inc318
                                        #   in Loop: Header=BB43_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_97
.LBB43_104:                             # %for.end320
	jmp	.LBB43_105
.LBB43_105:                             # %if.end321
	jmp	.LBB43_180
.LBB43_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB43_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB43_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_110 Depth 2
                                        #       Child Loop BB43_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB43_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB43_108 Depth=1
	movl	$0, -12(%rbp)
.LBB43_110:                             # %for.cond331
                                        #   Parent Loop BB43_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB43_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB43_110 Depth=2
	movl	$0, -4(%rbp)
.LBB43_112:                             # %for.cond335
                                        #   Parent Loop BB43_108 Depth=1
                                        #     Parent Loop BB43_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB43_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB43_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB43_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_112
.LBB43_115:                             # %for.end359
                                        #   in Loop: Header=BB43_110 Depth=2
	jmp	.LBB43_116
.LBB43_116:                             # %for.inc360
                                        #   in Loop: Header=BB43_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_110
.LBB43_117:                             # %for.end362
                                        #   in Loop: Header=BB43_108 Depth=1
	jmp	.LBB43_118
.LBB43_118:                             # %for.inc363
                                        #   in Loop: Header=BB43_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_108
.LBB43_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB43_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB43_120 Depth=1
	movl	$0, -8(%rbp)
.LBB43_122:                             # %for.cond370
                                        #   Parent Loop BB43_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB43_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB43_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_122
.LBB43_125:                             # %for.end380
                                        #   in Loop: Header=BB43_120 Depth=1
	jmp	.LBB43_126
.LBB43_126:                             # %for.inc381
                                        #   in Loop: Header=BB43_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_120
.LBB43_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB43_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB43_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB43_129 Depth=1
	movl	$0, -4(%rbp)
.LBB43_131:                             # %for.cond390
                                        #   Parent Loop BB43_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB43_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB43_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_131
.LBB43_134:                             # %for.end410
                                        #   in Loop: Header=BB43_129 Depth=1
	jmp	.LBB43_135
.LBB43_135:                             # %for.inc411
                                        #   in Loop: Header=BB43_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_129
.LBB43_136:                             # %for.end413
	jmp	.LBB43_156
.LBB43_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB43_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB43_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_141 Depth 2
                                        #       Child Loop BB43_143 Depth 3
                                        #         Child Loop BB43_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB43_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB43_141:                             # %for.cond425
                                        #   Parent Loop BB43_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_143 Depth 3
                                        #         Child Loop BB43_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB43_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB43_143:                             # %for.cond452
                                        #   Parent Loop BB43_139 Depth=1
                                        #     Parent Loop BB43_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB43_143 Depth=3
	movl	$0, -4(%rbp)
.LBB43_145:                             # %for.cond456
                                        #   Parent Loop BB43_139 Depth=1
                                        #     Parent Loop BB43_141 Depth=2
                                        #       Parent Loop BB43_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB43_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB43_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB43_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_145
.LBB43_148:                             # %for.end475
                                        #   in Loop: Header=BB43_143 Depth=3
	jmp	.LBB43_149
.LBB43_149:                             # %for.inc476
                                        #   in Loop: Header=BB43_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_143
.LBB43_150:                             # %for.end478
                                        #   in Loop: Header=BB43_141 Depth=2
	jmp	.LBB43_151
.LBB43_151:                             # %for.inc479
                                        #   in Loop: Header=BB43_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_141
.LBB43_152:                             # %for.end481
                                        #   in Loop: Header=BB43_139 Depth=1
	jmp	.LBB43_153
.LBB43_153:                             # %for.inc482
                                        #   in Loop: Header=BB43_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_139
.LBB43_154:                             # %for.end484
	jmp	.LBB43_155
.LBB43_155:                             # %if.end485
	jmp	.LBB43_156
.LBB43_156:                             # %if.end486
	jmp	.LBB43_157
.LBB43_157:                             # %if.end487
	jmp	.LBB43_180
.LBB43_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB43_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB43_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB43_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	$0, -4(%rbp)
.LBB43_163:                             # %for.cond499
                                        #   Parent Loop BB43_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB43_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB43_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_163
.LBB43_166:                             # %for.end519
                                        #   in Loop: Header=BB43_161 Depth=1
	jmp	.LBB43_167
.LBB43_167:                             # %for.inc520
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_161
.LBB43_168:                             # %for.end522
	jmp	.LBB43_169
.LBB43_169:                             # %if.end523
	jmp	.LBB43_179
.LBB43_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB43_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB43_171 Depth=1
	movl	$0, -4(%rbp)
.LBB43_173:                             # %for.cond529
                                        #   Parent Loop BB43_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB43_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB43_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_173
.LBB43_176:                             # %for.end541
                                        #   in Loop: Header=BB43_171 Depth=1
	jmp	.LBB43_177
.LBB43_177:                             # %for.inc542
                                        #   in Loop: Header=BB43_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_171
.LBB43_178:                             # %for.end544
	jmp	.LBB43_179
.LBB43_179:                             # %if.end545
	jmp	.LBB43_180
.LBB43_180:                             # %sw.epilog
	cmpl	$195502467, -68(%rbp)   # imm = 0xBA72183
	jne	.LBB43_182
.LBB43_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_181
.Lfunc_end43:
	.size	Conceal_Error.33, .Lfunc_end43-Conceal_Error.33
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI43_0:
	.quad	.LBB43_16
	.quad	.LBB43_158
	.quad	.LBB43_106
	.quad	.LBB43_180
	.quad	.LBB43_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.34 # -- Begin function compute_residue_b8block.34
	.p2align	4, 0x90
	.type	compute_residue_b8block.34,@function
compute_residue_b8block.34:             # @compute_residue_b8block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1031100910, -36(%rbp)  # imm = 0x3D7559EE
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB44_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_4:                               # %for.cond4
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc22
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end24
	jmp	.LBB44_19
.LBB44_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_13:                              # %for.cond29
                                        #   Parent Loop BB44_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB44_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB44_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_13
.LBB44_16:                              # %for.end56
                                        #   in Loop: Header=BB44_11 Depth=1
	jmp	.LBB44_17
.LBB44_17:                              # %for.inc57
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_11
.LBB44_18:                              # %for.end59
	jmp	.LBB44_19
.LBB44_19:                              # %if.end
	cmpl	$1031100910, -36(%rbp)  # imm = 0x3D7559EE
	jne	.LBB44_21
.LBB44_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_20
.Lfunc_end44:
	.size	compute_residue_b8block.34, .Lfunc_end44-compute_residue_b8block.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.35
.LCPI45_0:
	.quad	4636737291354636288     # double 100
.LCPI45_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.35
	.p2align	4, 0x90
	.type	Build_Status_Map.35,@function
Build_Status_Map.35:                    # @Build_Status_Map.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$326903703, -40(%rbp)   # imm = 0x137C2797
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB45_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -12(%rbp)
.LBB45_3:                               # %for.cond2
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB45_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB45_13
.LBB45_6:                               # %if.then
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB45_8:                               # %if.end
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB45_10:                              # %if.end20
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$1, -4(%rbp)
.LBB45_12:                              # %if.end29
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB45_13:                              # %if.end30
                                        #   in Loop: Header=BB45_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB45_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB45_18
.LBB45_15:                              # %if.else
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB45_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB45_17:                              # %if.end49
                                        #   in Loop: Header=BB45_3 Depth=2
	jmp	.LBB45_18
.LBB45_18:                              # %if.end50
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_3
.LBB45_20:                              # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc53
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_1
.LBB45_22:                              # %for.end55
	cmpl	$326903703, -40(%rbp)   # imm = 0x137C2797
	jne	.LBB45_24
.LBB45_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_23
.Lfunc_end45:
	.size	Build_Status_Map.35, .Lfunc_end45-Build_Status_Map.35
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.36        # -- Begin function Conceal_Error.36
	.p2align	4, 0x90
	.type	Conceal_Error.36,@function
Conceal_Error.36:                       # @Conceal_Error.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1310626388, -68(%rbp)  # imm = 0x4E1E9254
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB46_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB46_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB46_4:                               # %land.end
.LBB46_5:                               # %lor.end
.LBB46_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB46_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB46_9
.LBB46_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB46_14
.LBB46_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB46_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB46_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB46_12:                              # %land.end51
.LBB46_13:                              # %lor.end53
.LBB46_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB46_180
# %bb.15:                               # %land.end54
	movq	.LJTI46_0(,%rax,8), %rax
	jmpq	*%rax
.LBB46_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB46_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB46_18 Depth=1
	movl	$0, -4(%rbp)
.LBB46_20:                              # %for.cond68
                                        #   Parent Loop BB46_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB46_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB46_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_20
.LBB46_23:                              # %for.end
                                        #   in Loop: Header=BB46_18 Depth=1
	jmp	.LBB46_24
.LBB46_24:                              # %for.inc85
                                        #   in Loop: Header=BB46_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_18
.LBB46_25:                              # %for.end87
	jmp	.LBB46_35
.LBB46_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB46_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB46_27 Depth=1
	movl	$0, -4(%rbp)
.LBB46_29:                              # %for.cond92
                                        #   Parent Loop BB46_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB46_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB46_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_29
.LBB46_32:                              # %for.end104
                                        #   in Loop: Header=BB46_27 Depth=1
	jmp	.LBB46_33
.LBB46_33:                              # %for.inc105
                                        #   in Loop: Header=BB46_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_27
.LBB46_34:                              # %for.end107
	jmp	.LBB46_35
.LBB46_35:                              # %if.end
	jmp	.LBB46_180
.LBB46_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB46_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_39 Depth 2
                                        #       Child Loop BB46_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB46_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB46_37 Depth=1
	movl	$0, -12(%rbp)
.LBB46_39:                              # %for.cond113
                                        #   Parent Loop BB46_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB46_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB46_39 Depth=2
	movl	$0, -4(%rbp)
.LBB46_41:                              # %for.cond117
                                        #   Parent Loop BB46_37 Depth=1
                                        #     Parent Loop BB46_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB46_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB46_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB46_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_41
.LBB46_44:                              # %for.end141
                                        #   in Loop: Header=BB46_39 Depth=2
	jmp	.LBB46_45
.LBB46_45:                              # %for.inc142
                                        #   in Loop: Header=BB46_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_39
.LBB46_46:                              # %for.end144
                                        #   in Loop: Header=BB46_37 Depth=1
	jmp	.LBB46_47
.LBB46_47:                              # %for.inc145
                                        #   in Loop: Header=BB46_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_37
.LBB46_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB46_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB46_49 Depth=1
	movl	$0, -8(%rbp)
.LBB46_51:                              # %for.cond152
                                        #   Parent Loop BB46_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB46_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB46_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_51
.LBB46_54:                              # %for.end162
                                        #   in Loop: Header=BB46_49 Depth=1
	jmp	.LBB46_55
.LBB46_55:                              # %for.inc163
                                        #   in Loop: Header=BB46_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_49
.LBB46_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB46_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB46_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	$0, -4(%rbp)
.LBB46_61:                              # %for.cond175
                                        #   Parent Loop BB46_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB46_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB46_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_61
.LBB46_64:                              # %for.end195
                                        #   in Loop: Header=BB46_59 Depth=1
	jmp	.LBB46_65
.LBB46_65:                              # %for.inc196
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_59
.LBB46_66:                              # %for.end198
	jmp	.LBB46_95
.LBB46_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB46_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB46_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_71 Depth 2
                                        #       Child Loop BB46_73 Depth 3
                                        #         Child Loop BB46_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB46_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB46_71:                              # %for.cond210
                                        #   Parent Loop BB46_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_73 Depth 3
                                        #         Child Loop BB46_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB46_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB46_73:                              # %for.cond236
                                        #   Parent Loop BB46_69 Depth=1
                                        #     Parent Loop BB46_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB46_73 Depth=3
	movl	$0, -4(%rbp)
.LBB46_75:                              # %for.cond240
                                        #   Parent Loop BB46_69 Depth=1
                                        #     Parent Loop BB46_71 Depth=2
                                        #       Parent Loop BB46_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB46_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB46_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB46_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_75
.LBB46_78:                              # %for.end259
                                        #   in Loop: Header=BB46_73 Depth=3
	jmp	.LBB46_79
.LBB46_79:                              # %for.inc260
                                        #   in Loop: Header=BB46_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_73
.LBB46_80:                              # %for.end262
                                        #   in Loop: Header=BB46_71 Depth=2
	jmp	.LBB46_81
.LBB46_81:                              # %for.inc263
                                        #   in Loop: Header=BB46_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_71
.LBB46_82:                              # %for.end265
                                        #   in Loop: Header=BB46_69 Depth=1
	jmp	.LBB46_83
.LBB46_83:                              # %for.inc266
                                        #   in Loop: Header=BB46_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_69
.LBB46_84:                              # %for.end268
	jmp	.LBB46_94
.LBB46_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB46_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB46_86 Depth=1
	movl	$0, -4(%rbp)
.LBB46_88:                              # %for.cond274
                                        #   Parent Loop BB46_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB46_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB46_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_88
.LBB46_91:                              # %for.end294
                                        #   in Loop: Header=BB46_86 Depth=1
	jmp	.LBB46_92
.LBB46_92:                              # %for.inc295
                                        #   in Loop: Header=BB46_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_86
.LBB46_93:                              # %for.end297
	jmp	.LBB46_94
.LBB46_94:                              # %if.end298
	jmp	.LBB46_95
.LBB46_95:                              # %if.end299
	jmp	.LBB46_105
.LBB46_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB46_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB46_97 Depth=1
	movl	$0, -4(%rbp)
.LBB46_99:                              # %for.cond305
                                        #   Parent Loop BB46_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB46_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_99
.LBB46_102:                             # %for.end317
                                        #   in Loop: Header=BB46_97 Depth=1
	jmp	.LBB46_103
.LBB46_103:                             # %for.inc318
                                        #   in Loop: Header=BB46_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_97
.LBB46_104:                             # %for.end320
	jmp	.LBB46_105
.LBB46_105:                             # %if.end321
	jmp	.LBB46_180
.LBB46_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB46_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_110 Depth 2
                                        #       Child Loop BB46_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB46_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB46_108 Depth=1
	movl	$0, -12(%rbp)
.LBB46_110:                             # %for.cond331
                                        #   Parent Loop BB46_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB46_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB46_110 Depth=2
	movl	$0, -4(%rbp)
.LBB46_112:                             # %for.cond335
                                        #   Parent Loop BB46_108 Depth=1
                                        #     Parent Loop BB46_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB46_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB46_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB46_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_112
.LBB46_115:                             # %for.end359
                                        #   in Loop: Header=BB46_110 Depth=2
	jmp	.LBB46_116
.LBB46_116:                             # %for.inc360
                                        #   in Loop: Header=BB46_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_110
.LBB46_117:                             # %for.end362
                                        #   in Loop: Header=BB46_108 Depth=1
	jmp	.LBB46_118
.LBB46_118:                             # %for.inc363
                                        #   in Loop: Header=BB46_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_108
.LBB46_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB46_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	$0, -8(%rbp)
.LBB46_122:                             # %for.cond370
                                        #   Parent Loop BB46_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB46_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB46_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_122
.LBB46_125:                             # %for.end380
                                        #   in Loop: Header=BB46_120 Depth=1
	jmp	.LBB46_126
.LBB46_126:                             # %for.inc381
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_120
.LBB46_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB46_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB46_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB46_129 Depth=1
	movl	$0, -4(%rbp)
.LBB46_131:                             # %for.cond390
                                        #   Parent Loop BB46_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB46_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB46_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_131
.LBB46_134:                             # %for.end410
                                        #   in Loop: Header=BB46_129 Depth=1
	jmp	.LBB46_135
.LBB46_135:                             # %for.inc411
                                        #   in Loop: Header=BB46_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_129
.LBB46_136:                             # %for.end413
	jmp	.LBB46_156
.LBB46_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB46_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB46_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_141 Depth 2
                                        #       Child Loop BB46_143 Depth 3
                                        #         Child Loop BB46_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB46_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB46_141:                             # %for.cond425
                                        #   Parent Loop BB46_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_143 Depth 3
                                        #         Child Loop BB46_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB46_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB46_143:                             # %for.cond452
                                        #   Parent Loop BB46_139 Depth=1
                                        #     Parent Loop BB46_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB46_143 Depth=3
	movl	$0, -4(%rbp)
.LBB46_145:                             # %for.cond456
                                        #   Parent Loop BB46_139 Depth=1
                                        #     Parent Loop BB46_141 Depth=2
                                        #       Parent Loop BB46_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB46_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB46_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB46_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_145
.LBB46_148:                             # %for.end475
                                        #   in Loop: Header=BB46_143 Depth=3
	jmp	.LBB46_149
.LBB46_149:                             # %for.inc476
                                        #   in Loop: Header=BB46_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_143
.LBB46_150:                             # %for.end478
                                        #   in Loop: Header=BB46_141 Depth=2
	jmp	.LBB46_151
.LBB46_151:                             # %for.inc479
                                        #   in Loop: Header=BB46_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_141
.LBB46_152:                             # %for.end481
                                        #   in Loop: Header=BB46_139 Depth=1
	jmp	.LBB46_153
.LBB46_153:                             # %for.inc482
                                        #   in Loop: Header=BB46_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_139
.LBB46_154:                             # %for.end484
	jmp	.LBB46_155
.LBB46_155:                             # %if.end485
	jmp	.LBB46_156
.LBB46_156:                             # %if.end486
	jmp	.LBB46_157
.LBB46_157:                             # %if.end487
	jmp	.LBB46_180
.LBB46_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB46_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB46_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB46_161 Depth=1
	movl	$0, -4(%rbp)
.LBB46_163:                             # %for.cond499
                                        #   Parent Loop BB46_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB46_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB46_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_163
.LBB46_166:                             # %for.end519
                                        #   in Loop: Header=BB46_161 Depth=1
	jmp	.LBB46_167
.LBB46_167:                             # %for.inc520
                                        #   in Loop: Header=BB46_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_161
.LBB46_168:                             # %for.end522
	jmp	.LBB46_169
.LBB46_169:                             # %if.end523
	jmp	.LBB46_179
.LBB46_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB46_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	$0, -4(%rbp)
.LBB46_173:                             # %for.cond529
                                        #   Parent Loop BB46_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB46_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB46_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_173
.LBB46_176:                             # %for.end541
                                        #   in Loop: Header=BB46_171 Depth=1
	jmp	.LBB46_177
.LBB46_177:                             # %for.inc542
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_171
.LBB46_178:                             # %for.end544
	jmp	.LBB46_179
.LBB46_179:                             # %if.end545
	jmp	.LBB46_180
.LBB46_180:                             # %sw.epilog
	cmpl	$1310626388, -68(%rbp)  # imm = 0x4E1E9254
	jne	.LBB46_182
.LBB46_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_181
.Lfunc_end46:
	.size	Conceal_Error.36, .Lfunc_end46-Conceal_Error.36
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI46_0:
	.quad	.LBB46_16
	.quad	.LBB46_158
	.quad	.LBB46_106
	.quad	.LBB46_180
	.quad	.LBB46_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.37  # -- Begin function Get_Reference_Pixel.37
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.37,@function
Get_Reference_Pixel.37:                 # @Get_Reference_Pixel.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$472088034, -108(%rbp)  # imm = 0x1C237DE2
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB47_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB47_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB47_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB47_5
.LBB47_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB47_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB47_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB47_11
.LBB47_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB47_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB47_10
.LBB47_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB47_10:                              # %cond.end14
.LBB47_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB47_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB47_14
.LBB47_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB47_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB47_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB47_20
.LBB47_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB47_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB47_19
.LBB47_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB47_19:                              # %cond.end29
.LBB47_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_332
.LBB47_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB47_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB47_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB47_25
.LBB47_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB47_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB47_31
.LBB47_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB47_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB47_30
.LBB47_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB47_30:                              # %cond.end52
.LBB47_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_36
.LBB47_35:                              # %cond.false61
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_36:                              # %cond.end63
                                        #   in Loop: Header=BB47_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB47_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_42
.LBB47_38:                              # %cond.false68
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_41
.LBB47_40:                              # %cond.false73
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_41:                              # %cond.end75
                                        #   in Loop: Header=BB47_32 Depth=1
.LBB47_42:                              # %cond.end77
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_32
.LBB47_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_47
.LBB47_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB47_53
.LBB47_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_52
.LBB47_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_52:                              # %cond.end113
.LBB47_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB47_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB47_57
.LBB47_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB47_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB47_63
.LBB47_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB47_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB47_62
.LBB47_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB47_62:                              # %cond.end136
.LBB47_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_76
.LBB47_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB47_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB47_68
.LBB47_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB47_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB47_74
.LBB47_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB47_73
.LBB47_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB47_73:                              # %cond.end169
.LBB47_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_75:                              # %if.end
	jmp	.LBB47_76
.LBB47_76:                              # %if.end178
	jmp	.LBB47_331
.LBB47_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB47_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB47_81
.LBB47_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB47_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB47_87
.LBB47_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB47_86
.LBB47_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB47_86:                              # %cond.end197
.LBB47_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_92
.LBB47_91:                              # %cond.false209
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_92:                              # %cond.end211
                                        #   in Loop: Header=BB47_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB47_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_98
.LBB47_94:                              # %cond.false216
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_97
.LBB47_96:                              # %cond.false221
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_97:                              # %cond.end223
                                        #   in Loop: Header=BB47_88 Depth=1
.LBB47_98:                              # %cond.end225
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_88
.LBB47_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_103
.LBB47_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB47_109
.LBB47_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_108
.LBB47_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_108:                             # %cond.end266
.LBB47_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB47_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB47_113
.LBB47_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB47_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB47_119
.LBB47_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB47_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB47_118
.LBB47_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB47_118:                             # %cond.end287
.LBB47_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_132
.LBB47_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB47_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB47_124
.LBB47_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB47_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB47_130
.LBB47_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB47_129
.LBB47_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB47_129:                             # %cond.end320
.LBB47_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_131:                             # %if.end331
	jmp	.LBB47_132
.LBB47_132:                             # %if.end332
	jmp	.LBB47_330
.LBB47_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB47_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB47_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB47_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_139
.LBB47_138:                             # %cond.false345
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_139:                             # %cond.end347
                                        #   in Loop: Header=BB47_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB47_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_145
.LBB47_141:                             # %cond.false352
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_144
.LBB47_143:                             # %cond.false357
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_144:                             # %cond.end359
                                        #   in Loop: Header=BB47_135 Depth=1
.LBB47_145:                             # %cond.end361
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_146:                             # %for.cond363
                                        #   Parent Loop BB47_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB47_150
.LBB47_149:                             # %cond.false371
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_150:                             # %cond.end373
                                        #   in Loop: Header=BB47_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB47_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_156
.LBB47_152:                             # %cond.false378
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB47_155
.LBB47_154:                             # %cond.false383
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_155:                             # %cond.end385
                                        #   in Loop: Header=BB47_146 Depth=2
.LBB47_156:                             # %cond.end387
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_146
.LBB47_158:                             # %for.end401
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_135
.LBB47_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_161
.LBB47_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_167
.LBB47_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB47_173
.LBB47_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_172
.LBB47_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_172:                             # %cond.end449
.LBB47_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_177
.LBB47_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB47_183
.LBB47_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_182
.LBB47_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_182:                             # %cond.end486
.LBB47_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_196
.LBB47_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB47_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_188
.LBB47_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB47_194
.LBB47_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_193
.LBB47_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_193:                             # %cond.end526
.LBB47_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_195:                             # %if.end532
	jmp	.LBB47_196
.LBB47_196:                             # %if.end533
	jmp	.LBB47_329
.LBB47_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB47_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB47_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_203
.LBB47_202:                             # %cond.false546
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_203:                             # %cond.end548
                                        #   in Loop: Header=BB47_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB47_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_209
.LBB47_205:                             # %cond.false553
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_208
.LBB47_207:                             # %cond.false558
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_208:                             # %cond.end560
                                        #   in Loop: Header=BB47_199 Depth=1
.LBB47_209:                             # %cond.end562
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_210:                             # %for.cond564
                                        #   Parent Loop BB47_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB47_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB47_214
.LBB47_213:                             # %cond.false572
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_214:                             # %cond.end574
                                        #   in Loop: Header=BB47_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB47_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_220
.LBB47_216:                             # %cond.false579
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB47_219
.LBB47_218:                             # %cond.false584
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_219:                             # %cond.end586
                                        #   in Loop: Header=BB47_210 Depth=2
.LBB47_220:                             # %cond.end588
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_210
.LBB47_222:                             # %for.end602
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_199
.LBB47_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB47_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB47_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_225
.LBB47_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_231
.LBB47_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB47_237
.LBB47_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_236
.LBB47_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_236:                             # %cond.end650
.LBB47_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_241
.LBB47_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB47_247
.LBB47_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_246
.LBB47_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_246:                             # %cond.end687
.LBB47_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_258
.LBB47_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_251
.LBB47_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB47_257
.LBB47_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_256
.LBB47_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_256:                             # %cond.end724
.LBB47_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_258:                             # %if.end730
	jmp	.LBB47_328
.LBB47_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB47_262
.LBB47_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB47_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB47_265
.LBB47_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB47_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB47_271
.LBB47_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB47_270
.LBB47_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB47_270:                             # %cond.end753
.LBB47_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_276
.LBB47_275:                             # %cond.false765
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_276:                             # %cond.end767
                                        #   in Loop: Header=BB47_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB47_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_282
.LBB47_278:                             # %cond.false772
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_281
.LBB47_280:                             # %cond.false777
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_281:                             # %cond.end779
                                        #   in Loop: Header=BB47_272 Depth=1
.LBB47_282:                             # %cond.end781
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_272
.LBB47_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_287
.LBB47_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB47_293
.LBB47_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_292
.LBB47_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_292:                             # %cond.end822
.LBB47_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB47_296
.LBB47_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB47_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB47_299
.LBB47_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB47_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB47_305
.LBB47_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB47_304
.LBB47_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB47_304:                             # %cond.end847
.LBB47_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_310
.LBB47_309:                             # %cond.false859
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_310:                             # %cond.end861
                                        #   in Loop: Header=BB47_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB47_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_316
.LBB47_312:                             # %cond.false866
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_315
.LBB47_314:                             # %cond.false871
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_315:                             # %cond.end873
                                        #   in Loop: Header=BB47_306 Depth=1
.LBB47_316:                             # %cond.end875
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_306
.LBB47_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_321
.LBB47_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB47_327
.LBB47_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_326
.LBB47_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_326:                             # %cond.end916
.LBB47_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_328:                             # %if.end922
	jmp	.LBB47_329
.LBB47_329:                             # %if.end923
	jmp	.LBB47_330
.LBB47_330:                             # %if.end924
	jmp	.LBB47_331
.LBB47_331:                             # %if.end925
	jmp	.LBB47_332
.LBB47_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$472088034, -108(%rbp)  # imm = 0x1C237DE2
	jne	.LBB47_334
.LBB47_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_333
.Lfunc_end47:
	.size	Get_Reference_Pixel.37, .Lfunc_end47-Get_Reference_Pixel.37
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.38  # -- Begin function Get_Reference_Block.38
	.p2align	4, 0x90
	.type	Get_Reference_Block.38,@function
Get_Reference_Block.38:                 # @Get_Reference_Block.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$631016675, -36(%rbp)   # imm = 0x259C8CE3
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -8(%rbp)
.LBB48_3:                               # %for.cond5
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_3
.LBB48_6:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_7
.LBB48_7:                               # %for.inc14
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_1
.LBB48_8:                               # %for.end16
	cmpl	$631016675, -36(%rbp)   # imm = 0x259C8CE3
	jne	.LBB48_10
.LBB48_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_9
.Lfunc_end48:
	.size	Get_Reference_Block.38, .Lfunc_end48-Get_Reference_Block.38
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.39  # -- Begin function Get_Reference_Pixel.39
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.39,@function
Get_Reference_Pixel.39:                 # @Get_Reference_Pixel.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$593515485, -104(%rbp)  # imm = 0x236053DD
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB49_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB49_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB49_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB49_5
.LBB49_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB49_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB49_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB49_11
.LBB49_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB49_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB49_10
.LBB49_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB49_10:                              # %cond.end14
.LBB49_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB49_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB49_14
.LBB49_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB49_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB49_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB49_20
.LBB49_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB49_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB49_19
.LBB49_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB49_19:                              # %cond.end29
.LBB49_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_332
.LBB49_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB49_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB49_25
.LBB49_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB49_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB49_31
.LBB49_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB49_30
.LBB49_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB49_30:                              # %cond.end52
.LBB49_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_36
.LBB49_35:                              # %cond.false61
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_36:                              # %cond.end63
                                        #   in Loop: Header=BB49_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB49_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_42
.LBB49_38:                              # %cond.false68
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_41
.LBB49_40:                              # %cond.false73
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_41:                              # %cond.end75
                                        #   in Loop: Header=BB49_32 Depth=1
.LBB49_42:                              # %cond.end77
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_32
.LBB49_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_47
.LBB49_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB49_53
.LBB49_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_52
.LBB49_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_52:                              # %cond.end113
.LBB49_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB49_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB49_57
.LBB49_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB49_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB49_63
.LBB49_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB49_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB49_62
.LBB49_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB49_62:                              # %cond.end136
.LBB49_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_76
.LBB49_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB49_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB49_68
.LBB49_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB49_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB49_74
.LBB49_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB49_73
.LBB49_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB49_73:                              # %cond.end169
.LBB49_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_75:                              # %if.end
	jmp	.LBB49_76
.LBB49_76:                              # %if.end178
	jmp	.LBB49_331
.LBB49_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB49_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB49_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB49_81
.LBB49_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB49_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB49_87
.LBB49_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB49_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB49_86
.LBB49_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB49_86:                              # %cond.end197
.LBB49_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_92
.LBB49_91:                              # %cond.false209
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_92:                              # %cond.end211
                                        #   in Loop: Header=BB49_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB49_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_98
.LBB49_94:                              # %cond.false216
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_97
.LBB49_96:                              # %cond.false221
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_97:                              # %cond.end223
                                        #   in Loop: Header=BB49_88 Depth=1
.LBB49_98:                              # %cond.end225
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_88
.LBB49_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_103
.LBB49_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB49_109
.LBB49_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_108
.LBB49_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_108:                             # %cond.end266
.LBB49_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB49_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB49_113
.LBB49_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB49_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB49_119
.LBB49_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB49_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB49_118
.LBB49_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB49_118:                             # %cond.end287
.LBB49_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_132
.LBB49_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB49_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB49_124
.LBB49_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB49_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB49_130
.LBB49_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB49_129
.LBB49_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB49_129:                             # %cond.end320
.LBB49_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_131:                             # %if.end331
	jmp	.LBB49_132
.LBB49_132:                             # %if.end332
	jmp	.LBB49_330
.LBB49_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB49_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB49_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_139
.LBB49_138:                             # %cond.false345
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_139:                             # %cond.end347
                                        #   in Loop: Header=BB49_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB49_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_145
.LBB49_141:                             # %cond.false352
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_144
.LBB49_143:                             # %cond.false357
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_144:                             # %cond.end359
                                        #   in Loop: Header=BB49_135 Depth=1
.LBB49_145:                             # %cond.end361
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_146:                             # %for.cond363
                                        #   Parent Loop BB49_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB49_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB49_150
.LBB49_149:                             # %cond.false371
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_150:                             # %cond.end373
                                        #   in Loop: Header=BB49_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB49_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_156
.LBB49_152:                             # %cond.false378
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB49_155
.LBB49_154:                             # %cond.false383
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_155:                             # %cond.end385
                                        #   in Loop: Header=BB49_146 Depth=2
.LBB49_156:                             # %cond.end387
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_146
.LBB49_158:                             # %for.end401
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_135
.LBB49_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB49_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB49_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_161
.LBB49_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_167
.LBB49_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB49_173
.LBB49_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_172
.LBB49_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_172:                             # %cond.end449
.LBB49_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_177
.LBB49_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB49_183
.LBB49_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_182
.LBB49_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_182:                             # %cond.end486
.LBB49_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_196
.LBB49_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB49_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_188
.LBB49_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB49_194
.LBB49_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_193
.LBB49_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_193:                             # %cond.end526
.LBB49_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_195:                             # %if.end532
	jmp	.LBB49_196
.LBB49_196:                             # %if.end533
	jmp	.LBB49_329
.LBB49_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB49_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB49_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB49_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_203
.LBB49_202:                             # %cond.false546
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_203:                             # %cond.end548
                                        #   in Loop: Header=BB49_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB49_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_209
.LBB49_205:                             # %cond.false553
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_208
.LBB49_207:                             # %cond.false558
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_208:                             # %cond.end560
                                        #   in Loop: Header=BB49_199 Depth=1
.LBB49_209:                             # %cond.end562
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_210:                             # %for.cond564
                                        #   Parent Loop BB49_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB49_214
.LBB49_213:                             # %cond.false572
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_214:                             # %cond.end574
                                        #   in Loop: Header=BB49_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB49_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_220
.LBB49_216:                             # %cond.false579
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB49_219
.LBB49_218:                             # %cond.false584
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_219:                             # %cond.end586
                                        #   in Loop: Header=BB49_210 Depth=2
.LBB49_220:                             # %cond.end588
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_210
.LBB49_222:                             # %for.end602
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_199
.LBB49_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB49_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB49_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_225
.LBB49_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_231
.LBB49_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB49_237
.LBB49_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_236
.LBB49_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_236:                             # %cond.end650
.LBB49_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_241
.LBB49_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB49_247
.LBB49_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_246
.LBB49_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_246:                             # %cond.end687
.LBB49_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_258
.LBB49_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_251
.LBB49_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB49_257
.LBB49_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_256
.LBB49_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_256:                             # %cond.end724
.LBB49_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_258:                             # %if.end730
	jmp	.LBB49_328
.LBB49_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB49_262
.LBB49_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB49_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB49_265
.LBB49_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB49_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB49_271
.LBB49_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB49_270
.LBB49_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB49_270:                             # %cond.end753
.LBB49_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_276
.LBB49_275:                             # %cond.false765
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_276:                             # %cond.end767
                                        #   in Loop: Header=BB49_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB49_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_282
.LBB49_278:                             # %cond.false772
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_281
.LBB49_280:                             # %cond.false777
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_281:                             # %cond.end779
                                        #   in Loop: Header=BB49_272 Depth=1
.LBB49_282:                             # %cond.end781
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_272
.LBB49_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_287
.LBB49_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB49_293
.LBB49_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_292
.LBB49_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_292:                             # %cond.end822
.LBB49_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB49_296
.LBB49_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB49_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB49_299
.LBB49_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB49_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB49_305
.LBB49_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB49_304
.LBB49_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB49_304:                             # %cond.end847
.LBB49_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_310
.LBB49_309:                             # %cond.false859
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_310:                             # %cond.end861
                                        #   in Loop: Header=BB49_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB49_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_316
.LBB49_312:                             # %cond.false866
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_315
.LBB49_314:                             # %cond.false871
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_315:                             # %cond.end873
                                        #   in Loop: Header=BB49_306 Depth=1
.LBB49_316:                             # %cond.end875
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_306
.LBB49_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_321
.LBB49_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB49_327
.LBB49_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_326
.LBB49_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_326:                             # %cond.end916
.LBB49_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_328:                             # %if.end922
	jmp	.LBB49_329
.LBB49_329:                             # %if.end923
	jmp	.LBB49_330
.LBB49_330:                             # %if.end924
	jmp	.LBB49_331
.LBB49_331:                             # %if.end925
	jmp	.LBB49_332
.LBB49_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$593515485, -104(%rbp)  # imm = 0x236053DD
	jne	.LBB49_334
.LBB49_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_333
.Lfunc_end49:
	.size	Get_Reference_Pixel.39, .Lfunc_end49-Get_Reference_Pixel.39
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.40  # -- Begin function Get_Reference_Block.40
	.p2align	4, 0x90
	.type	Get_Reference_Block.40,@function
Get_Reference_Block.40:                 # @Get_Reference_Block.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1766350633, -36(%rbp)  # imm = 0x69485F29
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_3:                               # %for.cond5
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB50_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_3
.LBB50_6:                               # %for.end
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_7
.LBB50_7:                               # %for.inc14
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_1
.LBB50_8:                               # %for.end16
	cmpl	$1766350633, -36(%rbp)  # imm = 0x69485F29
	jne	.LBB50_10
.LBB50_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_9
.Lfunc_end50:
	.size	Get_Reference_Block.40, .Lfunc_end50-Get_Reference_Block.40
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.41  # -- Begin function Get_Reference_Block.41
	.p2align	4, 0x90
	.type	Get_Reference_Block.41,@function
Get_Reference_Block.41:                 # @Get_Reference_Block.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1456741368, -12(%rbp)  # imm = 0x56D41BF8
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB51_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_3:                               # %for.cond5
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_3
.LBB51_6:                               # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_7
.LBB51_7:                               # %for.inc14
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_1
.LBB51_8:                               # %for.end16
	cmpl	$1456741368, -12(%rbp)  # imm = 0x56D41BF8
	jne	.LBB51_10
.LBB51_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_9
.Lfunc_end51:
	.size	Get_Reference_Block.41, .Lfunc_end51-Get_Reference_Block.41
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.42 # -- Begin function compute_residue_b8block.42
	.p2align	4, 0x90
	.type	compute_residue_b8block.42,@function
compute_residue_b8block.42:             # @compute_residue_b8block.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$805813687, -36(%rbp)   # imm = 0x3007BDB7
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB52_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_4:                               # %for.cond4
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc22
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end24
	jmp	.LBB52_19
.LBB52_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_13:                              # %for.cond29
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB52_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB52_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_13
.LBB52_16:                              # %for.end56
                                        #   in Loop: Header=BB52_11 Depth=1
	jmp	.LBB52_17
.LBB52_17:                              # %for.inc57
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_11
.LBB52_18:                              # %for.end59
	jmp	.LBB52_19
.LBB52_19:                              # %if.end
	cmpl	$805813687, -36(%rbp)   # imm = 0x3007BDB7
	jne	.LBB52_21
.LBB52_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_20
.Lfunc_end52:
	.size	compute_residue_b8block.42, .Lfunc_end52-compute_residue_b8block.42
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.43   # -- Begin function decode_one_b8block.43
	.p2align	4, 0x90
	.type	decode_one_b8block.43,@function
decode_one_b8block.43:                  # @decode_one_b8block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$798653142, -84(%rbp)   # imm = 0x2F9A7AD6
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_4:                               # %for.cond9
                                        #   Parent Loop BB53_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB53_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_4
.LBB53_7:                               # %for.end
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc26
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_2
.LBB53_9:                               # %for.end28
	jmp	.LBB53_96
.LBB53_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB53_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_31
.LBB53_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_17:                              # %for.cond40
                                        #   Parent Loop BB53_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB53_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB53_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_17
.LBB53_20:                              # %for.end49
                                        #   in Loop: Header=BB53_15 Depth=1
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc50
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_15
.LBB53_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_25:                              # %for.cond56
                                        #   Parent Loop BB53_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB53_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_25
.LBB53_28:                              # %for.end71
                                        #   in Loop: Header=BB53_23 Depth=1
	jmp	.LBB53_29
.LBB53_29:                              # %for.inc72
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_23
.LBB53_30:                              # %for.end74
	jmp	.LBB53_60
.LBB53_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB53_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB53_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_36:                              # %for.cond83
                                        #   Parent Loop BB53_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB53_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_36
.LBB53_39:                              # %for.end120
                                        #   in Loop: Header=BB53_34 Depth=1
	jmp	.LBB53_40
.LBB53_40:                              # %for.inc121
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_34
.LBB53_41:                              # %for.end123
	jmp	.LBB53_51
.LBB53_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_45:                              # %for.cond129
                                        #   Parent Loop BB53_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB53_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB53_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_45
.LBB53_48:                              # %for.end145
                                        #   in Loop: Header=BB53_43 Depth=1
	jmp	.LBB53_49
.LBB53_49:                              # %for.inc146
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_43
.LBB53_50:                              # %for.end148
	jmp	.LBB53_51
.LBB53_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_54:                              # %for.cond153
                                        #   Parent Loop BB53_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_54
.LBB53_57:                              # %for.end167
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_58
.LBB53_58:                              # %for.inc168
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_52
.LBB53_59:                              # %for.end170
	jmp	.LBB53_60
.LBB53_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB53_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB53_66
.LBB53_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB53_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_86
.LBB53_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_69 Depth 2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_69:                              # %for.cond197
                                        #   Parent Loop BB53_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB53_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB53_73:                              # %if.end218
                                        #   in Loop: Header=BB53_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB53_74:                              # %for.cond233
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB53_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	$0, -4(%rbp)
.LBB53_76:                              # %for.cond237
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        #       Parent Loop BB53_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB53_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_76
.LBB53_79:                              # %for.end269
                                        #   in Loop: Header=BB53_74 Depth=3
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc270
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_74
.LBB53_81:                              # %for.end272
                                        #   in Loop: Header=BB53_69 Depth=2
	jmp	.LBB53_82
.LBB53_82:                              # %for.inc273
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_69
.LBB53_83:                              # %for.end275
                                        #   in Loop: Header=BB53_67 Depth=1
	jmp	.LBB53_84
.LBB53_84:                              # %for.inc276
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_67
.LBB53_85:                              # %for.end278
	jmp	.LBB53_95
.LBB53_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_89:                              # %for.cond284
                                        #   Parent Loop BB53_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB53_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB53_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_89
.LBB53_92:                              # %for.end310
                                        #   in Loop: Header=BB53_87 Depth=1
	jmp	.LBB53_93
.LBB53_93:                              # %for.inc311
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_87
.LBB53_94:                              # %for.end313
	jmp	.LBB53_95
.LBB53_95:                              # %if.end314
	jmp	.LBB53_96
.LBB53_96:                              # %if.end315
	cmpl	$798653142, -84(%rbp)   # imm = 0x2F9A7AD6
	jne	.LBB53_98
.LBB53_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_97
.Lfunc_end53:
	.size	decode_one_b8block.43, .Lfunc_end53-decode_one_b8block.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.44
.LCPI54_0:
	.quad	4636737291354636288     # double 100
.LCPI54_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.44
	.p2align	4, 0x90
	.type	Build_Status_Map.44,@function
Build_Status_Map.44:                    # @Build_Status_Map.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1684314209, -44(%rbp)  # imm = 0x64649861
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB54_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_3:                               # %for.cond2
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB54_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB54_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB54_13
.LBB54_6:                               # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_8:                               # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB54_10:                              # %if.end20
                                        #   in Loop: Header=BB54_3 Depth=2
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	$1, -4(%rbp)
.LBB54_12:                              # %if.end29
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB54_13:                              # %if.end30
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB54_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB54_18
.LBB54_15:                              # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB54_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB54_17:                              # %if.end49
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_18
.LBB54_18:                              # %if.end50
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_3
.LBB54_20:                              # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc53
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_1
.LBB54_22:                              # %for.end55
	cmpl	$1684314209, -44(%rbp)  # imm = 0x64649861
	jne	.LBB54_24
.LBB54_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_23
.Lfunc_end54:
	.size	Build_Status_Map.44, .Lfunc_end54-Build_Status_Map.44
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.45   # -- Begin function decode_one_b8block.45
	.p2align	4, 0x90
	.type	decode_one_b8block.45,@function
decode_one_b8block.45:                  # @decode_one_b8block.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$446875855, -84(%rbp)   # imm = 0x1AA2C8CF
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_4:                               # %for.cond9
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB55_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB55_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_4
.LBB55_7:                               # %for.end
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc26
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_2
.LBB55_9:                               # %for.end28
	jmp	.LBB55_96
.LBB55_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB55_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB55_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB55_31
.LBB55_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB55_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_17:                              # %for.cond40
                                        #   Parent Loop BB55_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB55_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB55_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_17
.LBB55_20:                              # %for.end49
                                        #   in Loop: Header=BB55_15 Depth=1
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc50
                                        #   in Loop: Header=BB55_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_15
.LBB55_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB55_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB55_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB55_25:                              # %for.cond56
                                        #   Parent Loop BB55_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB55_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_25
.LBB55_28:                              # %for.end71
                                        #   in Loop: Header=BB55_23 Depth=1
	jmp	.LBB55_29
.LBB55_29:                              # %for.inc72
                                        #   in Loop: Header=BB55_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_23
.LBB55_30:                              # %for.end74
	jmp	.LBB55_60
.LBB55_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB55_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB55_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB55_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB55_36:                              # %for.cond83
                                        #   Parent Loop BB55_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB55_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_36
.LBB55_39:                              # %for.end120
                                        #   in Loop: Header=BB55_34 Depth=1
	jmp	.LBB55_40
.LBB55_40:                              # %for.inc121
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_34
.LBB55_41:                              # %for.end123
	jmp	.LBB55_51
.LBB55_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB55_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB55_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB55_45:                              # %for.cond129
                                        #   Parent Loop BB55_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB55_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB55_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_45
.LBB55_48:                              # %for.end145
                                        #   in Loop: Header=BB55_43 Depth=1
	jmp	.LBB55_49
.LBB55_49:                              # %for.inc146
                                        #   in Loop: Header=BB55_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_43
.LBB55_50:                              # %for.end148
	jmp	.LBB55_51
.LBB55_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB55_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_54:                              # %for.cond153
                                        #   Parent Loop BB55_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB55_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_54
.LBB55_57:                              # %for.end167
                                        #   in Loop: Header=BB55_52 Depth=1
	jmp	.LBB55_58
.LBB55_58:                              # %for.inc168
                                        #   in Loop: Header=BB55_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_52
.LBB55_59:                              # %for.end170
	jmp	.LBB55_60
.LBB55_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB55_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB55_66
.LBB55_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB55_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB55_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB55_86
.LBB55_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB55_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_69 Depth 2
                                        #       Child Loop BB55_74 Depth 3
                                        #         Child Loop BB55_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB55_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB55_69:                              # %for.cond197
                                        #   Parent Loop BB55_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_74 Depth 3
                                        #         Child Loop BB55_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB55_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB55_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB55_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB55_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB55_73:                              # %if.end218
                                        #   in Loop: Header=BB55_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB55_74:                              # %for.cond233
                                        #   Parent Loop BB55_67 Depth=1
                                        #     Parent Loop BB55_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB55_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB55_74 Depth=3
	movl	$0, -8(%rbp)
.LBB55_76:                              # %for.cond237
                                        #   Parent Loop BB55_67 Depth=1
                                        #     Parent Loop BB55_69 Depth=2
                                        #       Parent Loop BB55_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB55_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB55_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB55_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_76
.LBB55_79:                              # %for.end269
                                        #   in Loop: Header=BB55_74 Depth=3
	jmp	.LBB55_80
.LBB55_80:                              # %for.inc270
                                        #   in Loop: Header=BB55_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_74
.LBB55_81:                              # %for.end272
                                        #   in Loop: Header=BB55_69 Depth=2
	jmp	.LBB55_82
.LBB55_82:                              # %for.inc273
                                        #   in Loop: Header=BB55_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_69
.LBB55_83:                              # %for.end275
                                        #   in Loop: Header=BB55_67 Depth=1
	jmp	.LBB55_84
.LBB55_84:                              # %for.inc276
                                        #   in Loop: Header=BB55_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_67
.LBB55_85:                              # %for.end278
	jmp	.LBB55_95
.LBB55_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB55_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_89:                              # %for.cond284
                                        #   Parent Loop BB55_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB55_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB55_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_89
.LBB55_92:                              # %for.end310
                                        #   in Loop: Header=BB55_87 Depth=1
	jmp	.LBB55_93
.LBB55_93:                              # %for.inc311
                                        #   in Loop: Header=BB55_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_87
.LBB55_94:                              # %for.end313
	jmp	.LBB55_95
.LBB55_95:                              # %if.end314
	jmp	.LBB55_96
.LBB55_96:                              # %if.end315
	cmpl	$446875855, -84(%rbp)   # imm = 0x1AA2C8CF
	jne	.LBB55_98
.LBB55_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_97
.Lfunc_end55:
	.size	decode_one_b8block.45, .Lfunc_end55-decode_one_b8block.45
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.46        # -- Begin function Conceal_Error.46
	.p2align	4, 0x90
	.type	Conceal_Error.46,@function
Conceal_Error.46:                       # @Conceal_Error.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1095733836, -68(%rbp)  # imm = 0x414F924C
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB56_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB56_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB56_4:                               # %land.end
.LBB56_5:                               # %lor.end
.LBB56_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB56_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB56_9
.LBB56_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB56_14
.LBB56_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB56_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB56_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB56_12:                              # %land.end51
.LBB56_13:                              # %lor.end53
.LBB56_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB56_180
# %bb.15:                               # %land.end54
	movq	.LJTI56_0(,%rax,8), %rax
	jmpq	*%rax
.LBB56_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB56_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	$0, -4(%rbp)
.LBB56_20:                              # %for.cond68
                                        #   Parent Loop BB56_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB56_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB56_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_20
.LBB56_23:                              # %for.end
                                        #   in Loop: Header=BB56_18 Depth=1
	jmp	.LBB56_24
.LBB56_24:                              # %for.inc85
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_18
.LBB56_25:                              # %for.end87
	jmp	.LBB56_35
.LBB56_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB56_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB56_27 Depth=1
	movl	$0, -4(%rbp)
.LBB56_29:                              # %for.cond92
                                        #   Parent Loop BB56_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB56_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB56_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_29
.LBB56_32:                              # %for.end104
                                        #   in Loop: Header=BB56_27 Depth=1
	jmp	.LBB56_33
.LBB56_33:                              # %for.inc105
                                        #   in Loop: Header=BB56_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_27
.LBB56_34:                              # %for.end107
	jmp	.LBB56_35
.LBB56_35:                              # %if.end
	jmp	.LBB56_180
.LBB56_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB56_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_39 Depth 2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB56_37 Depth=1
	movl	$0, -12(%rbp)
.LBB56_39:                              # %for.cond113
                                        #   Parent Loop BB56_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	$0, -4(%rbp)
.LBB56_41:                              # %for.cond117
                                        #   Parent Loop BB56_37 Depth=1
                                        #     Parent Loop BB56_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB56_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB56_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB56_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_41
.LBB56_44:                              # %for.end141
                                        #   in Loop: Header=BB56_39 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc142
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_39
.LBB56_46:                              # %for.end144
                                        #   in Loop: Header=BB56_37 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc145
                                        #   in Loop: Header=BB56_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_37
.LBB56_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB56_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	$0, -8(%rbp)
.LBB56_51:                              # %for.cond152
                                        #   Parent Loop BB56_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB56_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_51
.LBB56_54:                              # %for.end162
                                        #   in Loop: Header=BB56_49 Depth=1
	jmp	.LBB56_55
.LBB56_55:                              # %for.inc163
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_49
.LBB56_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB56_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB56_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB56_59 Depth=1
	movl	$0, -4(%rbp)
.LBB56_61:                              # %for.cond175
                                        #   Parent Loop BB56_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB56_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_64:                              # %for.end195
                                        #   in Loop: Header=BB56_59 Depth=1
	jmp	.LBB56_65
.LBB56_65:                              # %for.inc196
                                        #   in Loop: Header=BB56_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_59
.LBB56_66:                              # %for.end198
	jmp	.LBB56_95
.LBB56_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB56_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB56_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_71 Depth 2
                                        #       Child Loop BB56_73 Depth 3
                                        #         Child Loop BB56_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB56_71:                              # %for.cond210
                                        #   Parent Loop BB56_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_73 Depth 3
                                        #         Child Loop BB56_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB56_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB56_73:                              # %for.cond236
                                        #   Parent Loop BB56_69 Depth=1
                                        #     Parent Loop BB56_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB56_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB56_73 Depth=3
	movl	$0, -4(%rbp)
.LBB56_75:                              # %for.cond240
                                        #   Parent Loop BB56_69 Depth=1
                                        #     Parent Loop BB56_71 Depth=2
                                        #       Parent Loop BB56_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB56_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB56_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB56_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_75
.LBB56_78:                              # %for.end259
                                        #   in Loop: Header=BB56_73 Depth=3
	jmp	.LBB56_79
.LBB56_79:                              # %for.inc260
                                        #   in Loop: Header=BB56_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_73
.LBB56_80:                              # %for.end262
                                        #   in Loop: Header=BB56_71 Depth=2
	jmp	.LBB56_81
.LBB56_81:                              # %for.inc263
                                        #   in Loop: Header=BB56_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_71
.LBB56_82:                              # %for.end265
                                        #   in Loop: Header=BB56_69 Depth=1
	jmp	.LBB56_83
.LBB56_83:                              # %for.inc266
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_69
.LBB56_84:                              # %for.end268
	jmp	.LBB56_94
.LBB56_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB56_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	$0, -4(%rbp)
.LBB56_88:                              # %for.cond274
                                        #   Parent Loop BB56_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB56_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_88
.LBB56_91:                              # %for.end294
                                        #   in Loop: Header=BB56_86 Depth=1
	jmp	.LBB56_92
.LBB56_92:                              # %for.inc295
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_86
.LBB56_93:                              # %for.end297
	jmp	.LBB56_94
.LBB56_94:                              # %if.end298
	jmp	.LBB56_95
.LBB56_95:                              # %if.end299
	jmp	.LBB56_105
.LBB56_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB56_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB56_97 Depth=1
	movl	$0, -4(%rbp)
.LBB56_99:                              # %for.cond305
                                        #   Parent Loop BB56_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB56_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB56_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_99
.LBB56_102:                             # %for.end317
                                        #   in Loop: Header=BB56_97 Depth=1
	jmp	.LBB56_103
.LBB56_103:                             # %for.inc318
                                        #   in Loop: Header=BB56_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_97
.LBB56_104:                             # %for.end320
	jmp	.LBB56_105
.LBB56_105:                             # %if.end321
	jmp	.LBB56_180
.LBB56_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB56_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_110 Depth 2
                                        #       Child Loop BB56_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB56_108 Depth=1
	movl	$0, -12(%rbp)
.LBB56_110:                             # %for.cond331
                                        #   Parent Loop BB56_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB56_110 Depth=2
	movl	$0, -4(%rbp)
.LBB56_112:                             # %for.cond335
                                        #   Parent Loop BB56_108 Depth=1
                                        #     Parent Loop BB56_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB56_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB56_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB56_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_112
.LBB56_115:                             # %for.end359
                                        #   in Loop: Header=BB56_110 Depth=2
	jmp	.LBB56_116
.LBB56_116:                             # %for.inc360
                                        #   in Loop: Header=BB56_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_110
.LBB56_117:                             # %for.end362
                                        #   in Loop: Header=BB56_108 Depth=1
	jmp	.LBB56_118
.LBB56_118:                             # %for.inc363
                                        #   in Loop: Header=BB56_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_108
.LBB56_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB56_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB56_120 Depth=1
	movl	$0, -8(%rbp)
.LBB56_122:                             # %for.cond370
                                        #   Parent Loop BB56_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB56_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB56_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_122
.LBB56_125:                             # %for.end380
                                        #   in Loop: Header=BB56_120 Depth=1
	jmp	.LBB56_126
.LBB56_126:                             # %for.inc381
                                        #   in Loop: Header=BB56_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_120
.LBB56_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB56_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB56_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	$0, -4(%rbp)
.LBB56_131:                             # %for.cond390
                                        #   Parent Loop BB56_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB56_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB56_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_131
.LBB56_134:                             # %for.end410
                                        #   in Loop: Header=BB56_129 Depth=1
	jmp	.LBB56_135
.LBB56_135:                             # %for.inc411
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_129
.LBB56_136:                             # %for.end413
	jmp	.LBB56_156
.LBB56_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB56_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB56_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_141 Depth 2
                                        #       Child Loop BB56_143 Depth 3
                                        #         Child Loop BB56_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB56_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB56_141:                             # %for.cond425
                                        #   Parent Loop BB56_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_143 Depth 3
                                        #         Child Loop BB56_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB56_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB56_143:                             # %for.cond452
                                        #   Parent Loop BB56_139 Depth=1
                                        #     Parent Loop BB56_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB56_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB56_143 Depth=3
	movl	$0, -4(%rbp)
.LBB56_145:                             # %for.cond456
                                        #   Parent Loop BB56_139 Depth=1
                                        #     Parent Loop BB56_141 Depth=2
                                        #       Parent Loop BB56_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB56_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB56_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB56_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_145
.LBB56_148:                             # %for.end475
                                        #   in Loop: Header=BB56_143 Depth=3
	jmp	.LBB56_149
.LBB56_149:                             # %for.inc476
                                        #   in Loop: Header=BB56_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_143
.LBB56_150:                             # %for.end478
                                        #   in Loop: Header=BB56_141 Depth=2
	jmp	.LBB56_151
.LBB56_151:                             # %for.inc479
                                        #   in Loop: Header=BB56_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_141
.LBB56_152:                             # %for.end481
                                        #   in Loop: Header=BB56_139 Depth=1
	jmp	.LBB56_153
.LBB56_153:                             # %for.inc482
                                        #   in Loop: Header=BB56_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_139
.LBB56_154:                             # %for.end484
	jmp	.LBB56_155
.LBB56_155:                             # %if.end485
	jmp	.LBB56_156
.LBB56_156:                             # %if.end486
	jmp	.LBB56_157
.LBB56_157:                             # %if.end487
	jmp	.LBB56_180
.LBB56_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB56_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB56_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	$0, -4(%rbp)
.LBB56_163:                             # %for.cond499
                                        #   Parent Loop BB56_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB56_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB56_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_163
.LBB56_166:                             # %for.end519
                                        #   in Loop: Header=BB56_161 Depth=1
	jmp	.LBB56_167
.LBB56_167:                             # %for.inc520
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_161
.LBB56_168:                             # %for.end522
	jmp	.LBB56_169
.LBB56_169:                             # %if.end523
	jmp	.LBB56_179
.LBB56_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB56_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -4(%rbp)
.LBB56_173:                             # %for.cond529
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB56_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB56_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_173
.LBB56_176:                             # %for.end541
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_177
.LBB56_177:                             # %for.inc542
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_171
.LBB56_178:                             # %for.end544
	jmp	.LBB56_179
.LBB56_179:                             # %if.end545
	jmp	.LBB56_180
.LBB56_180:                             # %sw.epilog
	cmpl	$1095733836, -68(%rbp)  # imm = 0x414F924C
	jne	.LBB56_182
.LBB56_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_181
.Lfunc_end56:
	.size	Conceal_Error.46, .Lfunc_end56-Conceal_Error.46
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI56_0:
	.quad	.LBB56_16
	.quad	.LBB56_158
	.quad	.LBB56_106
	.quad	.LBB56_180
	.quad	.LBB56_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.47 # -- Begin function compute_residue_b8block.47
	.p2align	4, 0x90
	.type	compute_residue_b8block.47,@function
compute_residue_b8block.47:             # @compute_residue_b8block.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1423571528, -36(%rbp)  # imm = 0x54D9FA48
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB57_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_4:                               # %for.cond4
                                        #   Parent Loop BB57_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB57_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB57_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB57_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_4
.LBB57_7:                               # %for.end
                                        #   in Loop: Header=BB57_2 Depth=1
	jmp	.LBB57_8
.LBB57_8:                               # %for.inc22
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_2
.LBB57_9:                               # %for.end24
	jmp	.LBB57_19
.LBB57_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_13:                              # %for.cond29
                                        #   Parent Loop BB57_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB57_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB57_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB57_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_13
.LBB57_16:                              # %for.end56
                                        #   in Loop: Header=BB57_11 Depth=1
	jmp	.LBB57_17
.LBB57_17:                              # %for.inc57
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_11
.LBB57_18:                              # %for.end59
	jmp	.LBB57_19
.LBB57_19:                              # %if.end
	cmpl	$1423571528, -36(%rbp)  # imm = 0x54D9FA48
	jne	.LBB57_21
.LBB57_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_20
.Lfunc_end57:
	.size	compute_residue_b8block.47, .Lfunc_end57-compute_residue_b8block.47
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.48       # -- Begin function DecOneForthPix.48
	.p2align	4, 0x90
	.type	DecOneForthPix.48,@function
DecOneForthPix.48:                      # @DecOneForthPix.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1875277181, -8(%rbp)   # imm = 0x6FC6757D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	cmpl	$1875277181, -8(%rbp)   # imm = 0x6FC6757D
	jne	.LBB58_6
.LBB58_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_5
.Lfunc_end58:
	.size	DecOneForthPix.48, .Lfunc_end58-DecOneForthPix.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$588618756, -68(%rbp)   # imm = 0x23159C04
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -12(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -12(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$588618756, -68(%rbp)   # imm = 0x23159C04
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.50 # -- Begin function compute_residue_b8block.50
	.p2align	4, 0x90
	.type	compute_residue_b8block.50,@function
compute_residue_b8block.50:             # @compute_residue_b8block.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$588273944, -36(%rbp)   # imm = 0x23105918
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB60_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_4:                               # %for.cond4
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc22
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end24
	jmp	.LBB60_19
.LBB60_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_13:                              # %for.cond29
                                        #   Parent Loop BB60_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB60_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB60_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_13
.LBB60_16:                              # %for.end56
                                        #   in Loop: Header=BB60_11 Depth=1
	jmp	.LBB60_17
.LBB60_17:                              # %for.inc57
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_11
.LBB60_18:                              # %for.end59
	jmp	.LBB60_19
.LBB60_19:                              # %if.end
	cmpl	$588273944, -36(%rbp)   # imm = 0x23105918
	jne	.LBB60_21
.LBB60_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_20
.Lfunc_end60:
	.size	compute_residue_b8block.50, .Lfunc_end60-compute_residue_b8block.50
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.51  # -- Begin function Get_Reference_Pixel.51
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.51,@function
Get_Reference_Pixel.51:                 # @Get_Reference_Pixel.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$214595228, -104(%rbp)  # imm = 0xCCA769C
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB61_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB61_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB61_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB61_5
.LBB61_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB61_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB61_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB61_11
.LBB61_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB61_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB61_10
.LBB61_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB61_10:                              # %cond.end14
.LBB61_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB61_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB61_14
.LBB61_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB61_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB61_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB61_20
.LBB61_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB61_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB61_19
.LBB61_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB61_19:                              # %cond.end29
.LBB61_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_332
.LBB61_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB61_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB61_25
.LBB61_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB61_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB61_31
.LBB61_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB61_30
.LBB61_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB61_30:                              # %cond.end52
.LBB61_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB61_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB61_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_36
.LBB61_35:                              # %cond.false61
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_36:                              # %cond.end63
                                        #   in Loop: Header=BB61_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB61_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_42
.LBB61_38:                              # %cond.false68
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_41
.LBB61_40:                              # %cond.false73
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_41:                              # %cond.end75
                                        #   in Loop: Header=BB61_32 Depth=1
.LBB61_42:                              # %cond.end77
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB61_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_32
.LBB61_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_47
.LBB61_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB61_53
.LBB61_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_52
.LBB61_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_52:                              # %cond.end113
.LBB61_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB61_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB61_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB61_57
.LBB61_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB61_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB61_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB61_63
.LBB61_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB61_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB61_62
.LBB61_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB61_62:                              # %cond.end136
.LBB61_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB61_76
.LBB61_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB61_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB61_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB61_68
.LBB61_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB61_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB61_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB61_74
.LBB61_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB61_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB61_73
.LBB61_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB61_73:                              # %cond.end169
.LBB61_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB61_75:                              # %if.end
	jmp	.LBB61_76
.LBB61_76:                              # %if.end178
	jmp	.LBB61_331
.LBB61_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB61_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB61_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB61_81
.LBB61_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB61_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB61_87
.LBB61_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB61_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB61_86
.LBB61_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB61_86:                              # %cond.end197
.LBB61_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB61_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB61_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_92
.LBB61_91:                              # %cond.false209
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_92:                              # %cond.end211
                                        #   in Loop: Header=BB61_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB61_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_98
.LBB61_94:                              # %cond.false216
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_97
.LBB61_96:                              # %cond.false221
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_97:                              # %cond.end223
                                        #   in Loop: Header=BB61_88 Depth=1
.LBB61_98:                              # %cond.end225
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_88
.LBB61_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_103
.LBB61_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB61_109
.LBB61_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_108
.LBB61_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_108:                             # %cond.end266
.LBB61_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB61_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB61_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB61_113
.LBB61_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB61_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB61_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB61_119
.LBB61_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB61_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB61_118
.LBB61_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB61_118:                             # %cond.end287
.LBB61_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB61_132
.LBB61_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB61_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB61_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB61_124
.LBB61_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB61_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB61_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB61_130
.LBB61_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB61_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB61_129
.LBB61_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB61_129:                             # %cond.end320
.LBB61_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB61_131:                             # %if.end331
	jmp	.LBB61_132
.LBB61_132:                             # %if.end332
	jmp	.LBB61_330
.LBB61_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB61_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB61_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB61_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_139
.LBB61_138:                             # %cond.false345
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_139:                             # %cond.end347
                                        #   in Loop: Header=BB61_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB61_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_145
.LBB61_141:                             # %cond.false352
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_144
.LBB61_143:                             # %cond.false357
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_144:                             # %cond.end359
                                        #   in Loop: Header=BB61_135 Depth=1
.LBB61_145:                             # %cond.end361
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB61_146:                             # %for.cond363
                                        #   Parent Loop BB61_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB61_150
.LBB61_149:                             # %cond.false371
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_150:                             # %cond.end373
                                        #   in Loop: Header=BB61_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB61_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_156
.LBB61_152:                             # %cond.false378
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB61_155
.LBB61_154:                             # %cond.false383
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_155:                             # %cond.end385
                                        #   in Loop: Header=BB61_146 Depth=2
.LBB61_156:                             # %cond.end387
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB61_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_146
.LBB61_158:                             # %for.end401
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_135
.LBB61_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB61_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB61_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB61_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB61_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_161
.LBB61_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_167
.LBB61_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB61_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB61_173
.LBB61_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_172
.LBB61_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB61_172:                             # %cond.end449
.LBB61_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB61_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_177
.LBB61_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB61_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB61_183
.LBB61_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_182
.LBB61_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_182:                             # %cond.end486
.LBB61_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB61_196
.LBB61_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB61_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_188
.LBB61_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB61_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB61_194
.LBB61_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_193
.LBB61_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_193:                             # %cond.end526
.LBB61_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB61_195:                             # %if.end532
	jmp	.LBB61_196
.LBB61_196:                             # %if.end533
	jmp	.LBB61_329
.LBB61_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB61_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB61_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_203
.LBB61_202:                             # %cond.false546
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_203:                             # %cond.end548
                                        #   in Loop: Header=BB61_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB61_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_209
.LBB61_205:                             # %cond.false553
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_208
.LBB61_207:                             # %cond.false558
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_208:                             # %cond.end560
                                        #   in Loop: Header=BB61_199 Depth=1
.LBB61_209:                             # %cond.end562
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB61_210:                             # %for.cond564
                                        #   Parent Loop BB61_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB61_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB61_214
.LBB61_213:                             # %cond.false572
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_214:                             # %cond.end574
                                        #   in Loop: Header=BB61_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB61_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_220
.LBB61_216:                             # %cond.false579
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB61_219
.LBB61_218:                             # %cond.false584
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_219:                             # %cond.end586
                                        #   in Loop: Header=BB61_210 Depth=2
.LBB61_220:                             # %cond.end588
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB61_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_210
.LBB61_222:                             # %for.end602
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB61_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_199
.LBB61_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB61_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB61_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB61_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB61_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_225
.LBB61_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_231
.LBB61_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB61_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB61_237
.LBB61_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_236
.LBB61_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB61_236:                             # %cond.end650
.LBB61_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB61_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_241
.LBB61_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB61_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB61_247
.LBB61_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_246
.LBB61_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_246:                             # %cond.end687
.LBB61_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB61_258
.LBB61_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_251
.LBB61_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB61_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB61_257
.LBB61_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB61_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_256
.LBB61_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB61_256:                             # %cond.end724
.LBB61_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB61_258:                             # %if.end730
	jmp	.LBB61_328
.LBB61_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB61_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB61_262
.LBB61_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB61_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB61_265
.LBB61_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB61_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB61_271
.LBB61_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB61_270
.LBB61_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB61_270:                             # %cond.end753
.LBB61_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB61_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB61_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_276
.LBB61_275:                             # %cond.false765
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_276:                             # %cond.end767
                                        #   in Loop: Header=BB61_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB61_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_282
.LBB61_278:                             # %cond.false772
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_281
.LBB61_280:                             # %cond.false777
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_281:                             # %cond.end779
                                        #   in Loop: Header=BB61_272 Depth=1
.LBB61_282:                             # %cond.end781
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB61_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_272
.LBB61_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_287
.LBB61_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB61_293
.LBB61_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_292
.LBB61_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_292:                             # %cond.end822
.LBB61_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB61_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB61_296
.LBB61_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB61_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB61_299
.LBB61_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB61_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB61_305
.LBB61_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB61_304
.LBB61_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB61_304:                             # %cond.end847
.LBB61_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB61_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB61_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_310
.LBB61_309:                             # %cond.false859
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_310:                             # %cond.end861
                                        #   in Loop: Header=BB61_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB61_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_316
.LBB61_312:                             # %cond.false866
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB61_315
.LBB61_314:                             # %cond.false871
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB61_315:                             # %cond.end873
                                        #   in Loop: Header=BB61_306 Depth=1
.LBB61_316:                             # %cond.end875
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB61_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_306
.LBB61_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_321
.LBB61_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB61_327
.LBB61_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_326
.LBB61_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB61_326:                             # %cond.end916
.LBB61_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB61_328:                             # %if.end922
	jmp	.LBB61_329
.LBB61_329:                             # %if.end923
	jmp	.LBB61_330
.LBB61_330:                             # %if.end924
	jmp	.LBB61_331
.LBB61_331:                             # %if.end925
	jmp	.LBB61_332
.LBB61_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$214595228, -104(%rbp)  # imm = 0xCCA769C
	jne	.LBB61_334
.LBB61_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_333
.Lfunc_end61:
	.size	Get_Reference_Pixel.51, .Lfunc_end61-Get_Reference_Pixel.51
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.52       # -- Begin function DecOneForthPix.52
	.p2align	4, 0x90
	.type	DecOneForthPix.52,@function
DecOneForthPix.52:                      # @DecOneForthPix.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$407331866, -12(%rbp)   # imm = 0x1847641A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB62_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_4:                               # %for.end
	cmpl	$407331866, -12(%rbp)   # imm = 0x1847641A
	jne	.LBB62_6
.LBB62_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_5
.Lfunc_end62:
	.size	DecOneForthPix.52, .Lfunc_end62-DecOneForthPix.52
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.53   # -- Begin function decode_one_b8block.53
	.p2align	4, 0x90
	.type	decode_one_b8block.53,@function
decode_one_b8block.53:                  # @decode_one_b8block.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1483389451, -84(%rbp)  # imm = 0x586ABA0B
	movl	%edi, -56(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_4:                               # %for.cond9
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB63_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc26
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end28
	jmp	.LBB63_96
.LBB63_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB63_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB63_31
.LBB63_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB63_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_17:                              # %for.cond40
                                        #   Parent Loop BB63_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB63_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB63_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_17
.LBB63_20:                              # %for.end49
                                        #   in Loop: Header=BB63_15 Depth=1
	jmp	.LBB63_21
.LBB63_21:                              # %for.inc50
                                        #   in Loop: Header=BB63_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_15
.LBB63_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_25:                              # %for.cond56
                                        #   Parent Loop BB63_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB63_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB63_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_25
.LBB63_28:                              # %for.end71
                                        #   in Loop: Header=BB63_23 Depth=1
	jmp	.LBB63_29
.LBB63_29:                              # %for.inc72
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_23
.LBB63_30:                              # %for.end74
	jmp	.LBB63_60
.LBB63_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB63_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB63_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_36:                              # %for.cond83
                                        #   Parent Loop BB63_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB63_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB63_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_36
.LBB63_39:                              # %for.end120
                                        #   in Loop: Header=BB63_34 Depth=1
	jmp	.LBB63_40
.LBB63_40:                              # %for.inc121
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_34
.LBB63_41:                              # %for.end123
	jmp	.LBB63_51
.LBB63_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_45:                              # %for.cond129
                                        #   Parent Loop BB63_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB63_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB63_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB63_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_45
.LBB63_48:                              # %for.end145
                                        #   in Loop: Header=BB63_43 Depth=1
	jmp	.LBB63_49
.LBB63_49:                              # %for.inc146
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_43
.LBB63_50:                              # %for.end148
	jmp	.LBB63_51
.LBB63_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_54:                              # %for.cond153
                                        #   Parent Loop BB63_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB63_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_54
.LBB63_57:                              # %for.end167
                                        #   in Loop: Header=BB63_52 Depth=1
	jmp	.LBB63_58
.LBB63_58:                              # %for.inc168
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_52
.LBB63_59:                              # %for.end170
	jmp	.LBB63_60
.LBB63_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB63_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB63_66
.LBB63_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB63_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB63_86
.LBB63_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_69 Depth 2
                                        #       Child Loop BB63_74 Depth 3
                                        #         Child Loop BB63_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB63_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_69:                              # %for.cond197
                                        #   Parent Loop BB63_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_74 Depth 3
                                        #         Child Loop BB63_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB63_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB63_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB63_73:                              # %if.end218
                                        #   in Loop: Header=BB63_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB63_74:                              # %for.cond233
                                        #   Parent Loop BB63_67 Depth=1
                                        #     Parent Loop BB63_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB63_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB63_74 Depth=3
	movl	$0, -8(%rbp)
.LBB63_76:                              # %for.cond237
                                        #   Parent Loop BB63_67 Depth=1
                                        #     Parent Loop BB63_69 Depth=2
                                        #       Parent Loop BB63_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB63_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB63_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB63_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_76
.LBB63_79:                              # %for.end269
                                        #   in Loop: Header=BB63_74 Depth=3
	jmp	.LBB63_80
.LBB63_80:                              # %for.inc270
                                        #   in Loop: Header=BB63_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_74
.LBB63_81:                              # %for.end272
                                        #   in Loop: Header=BB63_69 Depth=2
	jmp	.LBB63_82
.LBB63_82:                              # %for.inc273
                                        #   in Loop: Header=BB63_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_69
.LBB63_83:                              # %for.end275
                                        #   in Loop: Header=BB63_67 Depth=1
	jmp	.LBB63_84
.LBB63_84:                              # %for.inc276
                                        #   in Loop: Header=BB63_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_67
.LBB63_85:                              # %for.end278
	jmp	.LBB63_95
.LBB63_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_89:                              # %for.cond284
                                        #   Parent Loop BB63_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB63_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB63_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_89
.LBB63_92:                              # %for.end310
                                        #   in Loop: Header=BB63_87 Depth=1
	jmp	.LBB63_93
.LBB63_93:                              # %for.inc311
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_87
.LBB63_94:                              # %for.end313
	jmp	.LBB63_95
.LBB63_95:                              # %if.end314
	jmp	.LBB63_96
.LBB63_96:                              # %if.end315
	cmpl	$1483389451, -84(%rbp)  # imm = 0x586ABA0B
	jne	.LBB63_98
.LBB63_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_97
.Lfunc_end63:
	.size	decode_one_b8block.53, .Lfunc_end63-decode_one_b8block.53
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.54       # -- Begin function DecOneForthPix.54
	.p2align	4, 0x90
	.type	DecOneForthPix.54,@function
DecOneForthPix.54:                      # @DecOneForthPix.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1677770011, -12(%rbp)  # imm = 0x6400BD1B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	cmpl	$1677770011, -12(%rbp)  # imm = 0x6400BD1B
	jne	.LBB64_6
.LBB64_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_5
.Lfunc_end64:
	.size	DecOneForthPix.54, .Lfunc_end64-DecOneForthPix.54
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.55 # -- Begin function compute_residue_b8block.55
	.p2align	4, 0x90
	.type	compute_residue_b8block.55,@function
compute_residue_b8block.55:             # @compute_residue_b8block.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1754895623, -36(%rbp)  # imm = 0x68999507
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB65_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_4:                               # %for.cond4
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc22
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end24
	jmp	.LBB65_19
.LBB65_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_13:                              # %for.cond29
                                        #   Parent Loop BB65_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB65_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB65_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB65_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_13
.LBB65_16:                              # %for.end56
                                        #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_17
.LBB65_17:                              # %for.inc57
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_11
.LBB65_18:                              # %for.end59
	jmp	.LBB65_19
.LBB65_19:                              # %if.end
	cmpl	$1754895623, -36(%rbp)  # imm = 0x68999507
	jne	.LBB65_21
.LBB65_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_20
.Lfunc_end65:
	.size	compute_residue_b8block.55, .Lfunc_end65-compute_residue_b8block.55
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.56 # -- Begin function compute_residue_b8block.56
	.p2align	4, 0x90
	.type	compute_residue_b8block.56,@function
compute_residue_b8block.56:             # @compute_residue_b8block.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$654612512, -36(%rbp)   # imm = 0x27049820
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB66_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_4:                               # %for.cond4
                                        #   Parent Loop BB66_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB66_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB66_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_4
.LBB66_7:                               # %for.end
                                        #   in Loop: Header=BB66_2 Depth=1
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc22
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_2
.LBB66_9:                               # %for.end24
	jmp	.LBB66_19
.LBB66_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_13:                              # %for.cond29
                                        #   Parent Loop BB66_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB66_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB66_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_13
.LBB66_16:                              # %for.end56
                                        #   in Loop: Header=BB66_11 Depth=1
	jmp	.LBB66_17
.LBB66_17:                              # %for.inc57
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_11
.LBB66_18:                              # %for.end59
	jmp	.LBB66_19
.LBB66_19:                              # %if.end
	cmpl	$654612512, -36(%rbp)   # imm = 0x27049820
	jne	.LBB66_21
.LBB66_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_20
.Lfunc_end66:
	.size	compute_residue_b8block.56, .Lfunc_end66-compute_residue_b8block.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.57
.LCPI67_0:
	.quad	4636737291354636288     # double 100
.LCPI67_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.57
	.p2align	4, 0x90
	.type	Build_Status_Map.57,@function
Build_Status_Map.57:                    # @Build_Status_Map.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1230759599, -44(%rbp)  # imm = 0x495BE6AF
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB67_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -12(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB67_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB67_13
.LBB67_6:                               # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB67_8:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB67_10:                              # %if.end20
                                        #   in Loop: Header=BB67_3 Depth=2
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$1, -4(%rbp)
.LBB67_12:                              # %if.end29
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB67_13:                              # %if.end30
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB67_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB67_18
.LBB67_15:                              # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB67_17:                              # %if.end49
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_18
.LBB67_18:                              # %if.end50
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_3
.LBB67_20:                              # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc53
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_22:                              # %for.end55
	cmpl	$1230759599, -44(%rbp)  # imm = 0x495BE6AF
	jne	.LBB67_24
.LBB67_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_23
.Lfunc_end67:
	.size	Build_Status_Map.57, .Lfunc_end67-Build_Status_Map.57
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.58        # -- Begin function Conceal_Error.58
	.p2align	4, 0x90
	.type	Conceal_Error.58,@function
Conceal_Error.58:                       # @Conceal_Error.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$570230430, -68(%rbp)   # imm = 0x21FD069E
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB68_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB68_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB68_4:                               # %land.end
.LBB68_5:                               # %lor.end
.LBB68_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB68_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB68_9
.LBB68_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB68_14
.LBB68_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB68_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB68_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB68_12:                              # %land.end51
.LBB68_13:                              # %lor.end53
.LBB68_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB68_180
# %bb.15:                               # %land.end54
	movq	.LJTI68_0(,%rax,8), %rax
	jmpq	*%rax
.LBB68_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB68_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB68_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB68_18 Depth=1
	movl	$0, -4(%rbp)
.LBB68_20:                              # %for.cond68
                                        #   Parent Loop BB68_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB68_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB68_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_20
.LBB68_23:                              # %for.end
                                        #   in Loop: Header=BB68_18 Depth=1
	jmp	.LBB68_24
.LBB68_24:                              # %for.inc85
                                        #   in Loop: Header=BB68_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_18
.LBB68_25:                              # %for.end87
	jmp	.LBB68_35
.LBB68_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB68_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB68_27 Depth=1
	movl	$0, -4(%rbp)
.LBB68_29:                              # %for.cond92
                                        #   Parent Loop BB68_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB68_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB68_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_29
.LBB68_32:                              # %for.end104
                                        #   in Loop: Header=BB68_27 Depth=1
	jmp	.LBB68_33
.LBB68_33:                              # %for.inc105
                                        #   in Loop: Header=BB68_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_27
.LBB68_34:                              # %for.end107
	jmp	.LBB68_35
.LBB68_35:                              # %if.end
	jmp	.LBB68_180
.LBB68_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB68_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_39 Depth 2
                                        #       Child Loop BB68_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB68_37 Depth=1
	movl	$0, -12(%rbp)
.LBB68_39:                              # %for.cond113
                                        #   Parent Loop BB68_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB68_39 Depth=2
	movl	$0, -4(%rbp)
.LBB68_41:                              # %for.cond117
                                        #   Parent Loop BB68_37 Depth=1
                                        #     Parent Loop BB68_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB68_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB68_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB68_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_41
.LBB68_44:                              # %for.end141
                                        #   in Loop: Header=BB68_39 Depth=2
	jmp	.LBB68_45
.LBB68_45:                              # %for.inc142
                                        #   in Loop: Header=BB68_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_39
.LBB68_46:                              # %for.end144
                                        #   in Loop: Header=BB68_37 Depth=1
	jmp	.LBB68_47
.LBB68_47:                              # %for.inc145
                                        #   in Loop: Header=BB68_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_37
.LBB68_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB68_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB68_49 Depth=1
	movl	$0, -8(%rbp)
.LBB68_51:                              # %for.cond152
                                        #   Parent Loop BB68_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB68_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB68_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_51
.LBB68_54:                              # %for.end162
                                        #   in Loop: Header=BB68_49 Depth=1
	jmp	.LBB68_55
.LBB68_55:                              # %for.inc163
                                        #   in Loop: Header=BB68_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_49
.LBB68_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB68_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB68_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB68_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB68_59 Depth=1
	movl	$0, -4(%rbp)
.LBB68_61:                              # %for.cond175
                                        #   Parent Loop BB68_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB68_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_61
.LBB68_64:                              # %for.end195
                                        #   in Loop: Header=BB68_59 Depth=1
	jmp	.LBB68_65
.LBB68_65:                              # %for.inc196
                                        #   in Loop: Header=BB68_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_59
.LBB68_66:                              # %for.end198
	jmp	.LBB68_95
.LBB68_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB68_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB68_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_71 Depth 2
                                        #       Child Loop BB68_73 Depth 3
                                        #         Child Loop BB68_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB68_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB68_71:                              # %for.cond210
                                        #   Parent Loop BB68_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_73 Depth 3
                                        #         Child Loop BB68_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB68_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB68_73:                              # %for.cond236
                                        #   Parent Loop BB68_69 Depth=1
                                        #     Parent Loop BB68_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB68_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB68_73 Depth=3
	movl	$0, -4(%rbp)
.LBB68_75:                              # %for.cond240
                                        #   Parent Loop BB68_69 Depth=1
                                        #     Parent Loop BB68_71 Depth=2
                                        #       Parent Loop BB68_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB68_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB68_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB68_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_75
.LBB68_78:                              # %for.end259
                                        #   in Loop: Header=BB68_73 Depth=3
	jmp	.LBB68_79
.LBB68_79:                              # %for.inc260
                                        #   in Loop: Header=BB68_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_73
.LBB68_80:                              # %for.end262
                                        #   in Loop: Header=BB68_71 Depth=2
	jmp	.LBB68_81
.LBB68_81:                              # %for.inc263
                                        #   in Loop: Header=BB68_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_71
.LBB68_82:                              # %for.end265
                                        #   in Loop: Header=BB68_69 Depth=1
	jmp	.LBB68_83
.LBB68_83:                              # %for.inc266
                                        #   in Loop: Header=BB68_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_69
.LBB68_84:                              # %for.end268
	jmp	.LBB68_94
.LBB68_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB68_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB68_86 Depth=1
	movl	$0, -4(%rbp)
.LBB68_88:                              # %for.cond274
                                        #   Parent Loop BB68_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB68_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB68_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_88
.LBB68_91:                              # %for.end294
                                        #   in Loop: Header=BB68_86 Depth=1
	jmp	.LBB68_92
.LBB68_92:                              # %for.inc295
                                        #   in Loop: Header=BB68_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_86
.LBB68_93:                              # %for.end297
	jmp	.LBB68_94
.LBB68_94:                              # %if.end298
	jmp	.LBB68_95
.LBB68_95:                              # %if.end299
	jmp	.LBB68_105
.LBB68_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB68_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB68_97 Depth=1
	movl	$0, -4(%rbp)
.LBB68_99:                              # %for.cond305
                                        #   Parent Loop BB68_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB68_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB68_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_99
.LBB68_102:                             # %for.end317
                                        #   in Loop: Header=BB68_97 Depth=1
	jmp	.LBB68_103
.LBB68_103:                             # %for.inc318
                                        #   in Loop: Header=BB68_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_97
.LBB68_104:                             # %for.end320
	jmp	.LBB68_105
.LBB68_105:                             # %if.end321
	jmp	.LBB68_180
.LBB68_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB68_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB68_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_110 Depth 2
                                        #       Child Loop BB68_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB68_108 Depth=1
	movl	$0, -12(%rbp)
.LBB68_110:                             # %for.cond331
                                        #   Parent Loop BB68_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB68_110 Depth=2
	movl	$0, -4(%rbp)
.LBB68_112:                             # %for.cond335
                                        #   Parent Loop BB68_108 Depth=1
                                        #     Parent Loop BB68_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB68_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB68_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB68_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_112
.LBB68_115:                             # %for.end359
                                        #   in Loop: Header=BB68_110 Depth=2
	jmp	.LBB68_116
.LBB68_116:                             # %for.inc360
                                        #   in Loop: Header=BB68_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_110
.LBB68_117:                             # %for.end362
                                        #   in Loop: Header=BB68_108 Depth=1
	jmp	.LBB68_118
.LBB68_118:                             # %for.inc363
                                        #   in Loop: Header=BB68_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_108
.LBB68_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB68_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB68_120 Depth=1
	movl	$0, -8(%rbp)
.LBB68_122:                             # %for.cond370
                                        #   Parent Loop BB68_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB68_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB68_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_122
.LBB68_125:                             # %for.end380
                                        #   in Loop: Header=BB68_120 Depth=1
	jmp	.LBB68_126
.LBB68_126:                             # %for.inc381
                                        #   in Loop: Header=BB68_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_120
.LBB68_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB68_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB68_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB68_129 Depth=1
	movl	$0, -4(%rbp)
.LBB68_131:                             # %for.cond390
                                        #   Parent Loop BB68_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB68_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB68_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_131
.LBB68_134:                             # %for.end410
                                        #   in Loop: Header=BB68_129 Depth=1
	jmp	.LBB68_135
.LBB68_135:                             # %for.inc411
                                        #   in Loop: Header=BB68_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_129
.LBB68_136:                             # %for.end413
	jmp	.LBB68_156
.LBB68_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB68_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB68_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_141 Depth 2
                                        #       Child Loop BB68_143 Depth 3
                                        #         Child Loop BB68_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB68_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB68_141:                             # %for.cond425
                                        #   Parent Loop BB68_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_143 Depth 3
                                        #         Child Loop BB68_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB68_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB68_143:                             # %for.cond452
                                        #   Parent Loop BB68_139 Depth=1
                                        #     Parent Loop BB68_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB68_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB68_143 Depth=3
	movl	$0, -4(%rbp)
.LBB68_145:                             # %for.cond456
                                        #   Parent Loop BB68_139 Depth=1
                                        #     Parent Loop BB68_141 Depth=2
                                        #       Parent Loop BB68_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB68_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB68_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB68_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_145
.LBB68_148:                             # %for.end475
                                        #   in Loop: Header=BB68_143 Depth=3
	jmp	.LBB68_149
.LBB68_149:                             # %for.inc476
                                        #   in Loop: Header=BB68_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_143
.LBB68_150:                             # %for.end478
                                        #   in Loop: Header=BB68_141 Depth=2
	jmp	.LBB68_151
.LBB68_151:                             # %for.inc479
                                        #   in Loop: Header=BB68_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_141
.LBB68_152:                             # %for.end481
                                        #   in Loop: Header=BB68_139 Depth=1
	jmp	.LBB68_153
.LBB68_153:                             # %for.inc482
                                        #   in Loop: Header=BB68_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_139
.LBB68_154:                             # %for.end484
	jmp	.LBB68_155
.LBB68_155:                             # %if.end485
	jmp	.LBB68_156
.LBB68_156:                             # %if.end486
	jmp	.LBB68_157
.LBB68_157:                             # %if.end487
	jmp	.LBB68_180
.LBB68_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB68_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB68_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB68_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB68_161 Depth=1
	movl	$0, -4(%rbp)
.LBB68_163:                             # %for.cond499
                                        #   Parent Loop BB68_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB68_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB68_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_163
.LBB68_166:                             # %for.end519
                                        #   in Loop: Header=BB68_161 Depth=1
	jmp	.LBB68_167
.LBB68_167:                             # %for.inc520
                                        #   in Loop: Header=BB68_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_161
.LBB68_168:                             # %for.end522
	jmp	.LBB68_169
.LBB68_169:                             # %if.end523
	jmp	.LBB68_179
.LBB68_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB68_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB68_171 Depth=1
	movl	$0, -4(%rbp)
.LBB68_173:                             # %for.cond529
                                        #   Parent Loop BB68_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB68_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB68_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_173
.LBB68_176:                             # %for.end541
                                        #   in Loop: Header=BB68_171 Depth=1
	jmp	.LBB68_177
.LBB68_177:                             # %for.inc542
                                        #   in Loop: Header=BB68_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_171
.LBB68_178:                             # %for.end544
	jmp	.LBB68_179
.LBB68_179:                             # %if.end545
	jmp	.LBB68_180
.LBB68_180:                             # %sw.epilog
	cmpl	$570230430, -68(%rbp)   # imm = 0x21FD069E
	jne	.LBB68_182
.LBB68_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_181
.Lfunc_end68:
	.size	Conceal_Error.58, .Lfunc_end68-Conceal_Error.58
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI68_0:
	.quad	.LBB68_16
	.quad	.LBB68_158
	.quad	.LBB68_106
	.quad	.LBB68_180
	.quad	.LBB68_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.59   # -- Begin function decode_one_b8block.59
	.p2align	4, 0x90
	.type	decode_one_b8block.59,@function
decode_one_b8block.59:                  # @decode_one_b8block.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$130803415, -84(%rbp)   # imm = 0x7CBE6D7
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_4:                               # %for.cond9
                                        #   Parent Loop BB69_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB69_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB69_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_4
.LBB69_7:                               # %for.end
                                        #   in Loop: Header=BB69_2 Depth=1
	jmp	.LBB69_8
.LBB69_8:                               # %for.inc26
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_2
.LBB69_9:                               # %for.end28
	jmp	.LBB69_96
.LBB69_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB69_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB69_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB69_31
.LBB69_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB69_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_17:                              # %for.cond40
                                        #   Parent Loop BB69_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB69_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB69_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_17
.LBB69_20:                              # %for.end49
                                        #   in Loop: Header=BB69_15 Depth=1
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc50
                                        #   in Loop: Header=BB69_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_15
.LBB69_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_25:                              # %for.cond56
                                        #   Parent Loop BB69_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB69_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_25
.LBB69_28:                              # %for.end71
                                        #   in Loop: Header=BB69_23 Depth=1
	jmp	.LBB69_29
.LBB69_29:                              # %for.inc72
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_23
.LBB69_30:                              # %for.end74
	jmp	.LBB69_60
.LBB69_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB69_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB69_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_36:                              # %for.cond83
                                        #   Parent Loop BB69_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB69_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_36
.LBB69_39:                              # %for.end120
                                        #   in Loop: Header=BB69_34 Depth=1
	jmp	.LBB69_40
.LBB69_40:                              # %for.inc121
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_34
.LBB69_41:                              # %for.end123
	jmp	.LBB69_51
.LBB69_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_45:                              # %for.cond129
                                        #   Parent Loop BB69_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB69_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB69_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_45
.LBB69_48:                              # %for.end145
                                        #   in Loop: Header=BB69_43 Depth=1
	jmp	.LBB69_49
.LBB69_49:                              # %for.inc146
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_43
.LBB69_50:                              # %for.end148
	jmp	.LBB69_51
.LBB69_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_54:                              # %for.cond153
                                        #   Parent Loop BB69_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_54
.LBB69_57:                              # %for.end167
                                        #   in Loop: Header=BB69_52 Depth=1
	jmp	.LBB69_58
.LBB69_58:                              # %for.inc168
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_52
.LBB69_59:                              # %for.end170
	jmp	.LBB69_60
.LBB69_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB69_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB69_66
.LBB69_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB69_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB69_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB69_86
.LBB69_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_69 Depth 2
                                        #       Child Loop BB69_74 Depth 3
                                        #         Child Loop BB69_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB69_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_69:                              # %for.cond197
                                        #   Parent Loop BB69_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_74 Depth 3
                                        #         Child Loop BB69_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB69_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB69_73:                              # %if.end218
                                        #   in Loop: Header=BB69_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_74:                              # %for.cond233
                                        #   Parent Loop BB69_67 Depth=1
                                        #     Parent Loop BB69_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB69_74 Depth=3
	movl	$0, -4(%rbp)
.LBB69_76:                              # %for.cond237
                                        #   Parent Loop BB69_67 Depth=1
                                        #     Parent Loop BB69_69 Depth=2
                                        #       Parent Loop BB69_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB69_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB69_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_76
.LBB69_79:                              # %for.end269
                                        #   in Loop: Header=BB69_74 Depth=3
	jmp	.LBB69_80
.LBB69_80:                              # %for.inc270
                                        #   in Loop: Header=BB69_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_74
.LBB69_81:                              # %for.end272
                                        #   in Loop: Header=BB69_69 Depth=2
	jmp	.LBB69_82
.LBB69_82:                              # %for.inc273
                                        #   in Loop: Header=BB69_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_69
.LBB69_83:                              # %for.end275
                                        #   in Loop: Header=BB69_67 Depth=1
	jmp	.LBB69_84
.LBB69_84:                              # %for.inc276
                                        #   in Loop: Header=BB69_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_67
.LBB69_85:                              # %for.end278
	jmp	.LBB69_95
.LBB69_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB69_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_89:                              # %for.cond284
                                        #   Parent Loop BB69_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB69_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB69_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_89
.LBB69_92:                              # %for.end310
                                        #   in Loop: Header=BB69_87 Depth=1
	jmp	.LBB69_93
.LBB69_93:                              # %for.inc311
                                        #   in Loop: Header=BB69_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_87
.LBB69_94:                              # %for.end313
	jmp	.LBB69_95
.LBB69_95:                              # %if.end314
	jmp	.LBB69_96
.LBB69_96:                              # %if.end315
	cmpl	$130803415, -84(%rbp)   # imm = 0x7CBE6D7
	jne	.LBB69_98
.LBB69_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_97
.Lfunc_end69:
	.size	decode_one_b8block.59, .Lfunc_end69-decode_one_b8block.59
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.60  # -- Begin function Get_Reference_Block.60
	.p2align	4, 0x90
	.type	Get_Reference_Block.60,@function
Get_Reference_Block.60:                 # @Get_Reference_Block.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$999422826, -36(%rbp)   # imm = 0x3B91FB6A
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -8(%rbp)
.LBB70_3:                               # %for.cond5
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_3
.LBB70_6:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_7
.LBB70_7:                               # %for.inc14
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_8:                               # %for.end16
	cmpl	$999422826, -36(%rbp)   # imm = 0x3B91FB6A
	jne	.LBB70_10
.LBB70_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_9
.Lfunc_end70:
	.size	Get_Reference_Block.60, .Lfunc_end70-Get_Reference_Block.60
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.61  # -- Begin function Get_Reference_Block.61
	.p2align	4, 0x90
	.type	Get_Reference_Block.61,@function
Get_Reference_Block.61:                 # @Get_Reference_Block.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1680315400, -28(%rbp)  # imm = 0x64279408
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_3:                               # %for.cond5
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_3
.LBB71_6:                               # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_7
.LBB71_7:                               # %for.inc14
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_8:                               # %for.end16
	cmpl	$1680315400, -28(%rbp)  # imm = 0x64279408
	jne	.LBB71_10
.LBB71_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_9
.Lfunc_end71:
	.size	Get_Reference_Block.61, .Lfunc_end71-Get_Reference_Block.61
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.62       # -- Begin function DecOneForthPix.62
	.p2align	4, 0x90
	.type	DecOneForthPix.62,@function
DecOneForthPix.62:                      # @DecOneForthPix.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1911993652, -12(%rbp)  # imm = 0x71F6B534
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	cmpl	$1911993652, -12(%rbp)  # imm = 0x71F6B534
	jne	.LBB72_6
.LBB72_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_5
.Lfunc_end72:
	.size	DecOneForthPix.62, .Lfunc_end72-DecOneForthPix.62
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.63        # -- Begin function Conceal_Error.63
	.p2align	4, 0x90
	.type	Conceal_Error.63,@function
Conceal_Error.63:                       # @Conceal_Error.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1484869365, -68(%rbp)  # imm = 0x58814EF5
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB73_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB73_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB73_4:                               # %land.end
.LBB73_5:                               # %lor.end
.LBB73_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB73_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB73_9
.LBB73_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB73_14
.LBB73_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB73_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB73_12:                              # %land.end51
.LBB73_13:                              # %lor.end53
.LBB73_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB73_180
# %bb.15:                               # %land.end54
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	$0, -4(%rbp)
.LBB73_20:                              # %for.cond68
                                        #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB73_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB73_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_20
.LBB73_23:                              # %for.end
                                        #   in Loop: Header=BB73_18 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc85
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_25:                              # %for.end87
	jmp	.LBB73_35
.LBB73_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -4(%rbp)
.LBB73_29:                              # %for.cond92
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end104
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc105
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end107
	jmp	.LBB73_35
.LBB73_35:                              # %if.end
	jmp	.LBB73_180
.LBB73_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB73_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	$0, -16(%rbp)
.LBB73_39:                              # %for.cond113
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$0, -4(%rbp)
.LBB73_41:                              # %for.cond117
                                        #   Parent Loop BB73_37 Depth=1
                                        #     Parent Loop BB73_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB73_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB73_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_41
.LBB73_44:                              # %for.end141
                                        #   in Loop: Header=BB73_39 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc142
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_39
.LBB73_46:                              # %for.end144
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_47
.LBB73_47:                              # %for.inc145
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_37
.LBB73_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB73_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	$0, -8(%rbp)
.LBB73_51:                              # %for.cond152
                                        #   Parent Loop BB73_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_51
.LBB73_54:                              # %for.end162
                                        #   in Loop: Header=BB73_49 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc163
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_49
.LBB73_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB73_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB73_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond175
                                        #   Parent Loop BB73_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_64:                              # %for.end195
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_65
.LBB73_65:                              # %for.inc196
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_59
.LBB73_66:                              # %for.end198
	jmp	.LBB73_95
.LBB73_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB73_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_71 Depth 2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_71:                              # %for.cond210
                                        #   Parent Loop BB73_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB73_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_73:                              # %for.cond236
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond240
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        #       Parent Loop BB73_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB73_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB73_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_78:                              # %for.end259
                                        #   in Loop: Header=BB73_73 Depth=3
	jmp	.LBB73_79
.LBB73_79:                              # %for.inc260
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_73
.LBB73_80:                              # %for.end262
                                        #   in Loop: Header=BB73_71 Depth=2
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc263
                                        #   in Loop: Header=BB73_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_71
.LBB73_82:                              # %for.end265
                                        #   in Loop: Header=BB73_69 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc266
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_69
.LBB73_84:                              # %for.end268
	jmp	.LBB73_94
.LBB73_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB73_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	$0, -4(%rbp)
.LBB73_88:                              # %for.cond274
                                        #   Parent Loop BB73_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB73_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB73_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_88
.LBB73_91:                              # %for.end294
                                        #   in Loop: Header=BB73_86 Depth=1
	jmp	.LBB73_92
.LBB73_92:                              # %for.inc295
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_86
.LBB73_93:                              # %for.end297
	jmp	.LBB73_94
.LBB73_94:                              # %if.end298
	jmp	.LBB73_95
.LBB73_95:                              # %if.end299
	jmp	.LBB73_105
.LBB73_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB73_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	$0, -4(%rbp)
.LBB73_99:                              # %for.cond305
                                        #   Parent Loop BB73_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB73_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB73_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_99
.LBB73_102:                             # %for.end317
                                        #   in Loop: Header=BB73_97 Depth=1
	jmp	.LBB73_103
.LBB73_103:                             # %for.inc318
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_97
.LBB73_104:                             # %for.end320
	jmp	.LBB73_105
.LBB73_105:                             # %if.end321
	jmp	.LBB73_180
.LBB73_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB73_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_110 Depth 2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	$0, -16(%rbp)
.LBB73_110:                             # %for.cond331
                                        #   Parent Loop BB73_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	$0, -4(%rbp)
.LBB73_112:                             # %for.cond335
                                        #   Parent Loop BB73_108 Depth=1
                                        #     Parent Loop BB73_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB73_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB73_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_112
.LBB73_115:                             # %for.end359
                                        #   in Loop: Header=BB73_110 Depth=2
	jmp	.LBB73_116
.LBB73_116:                             # %for.inc360
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_110
.LBB73_117:                             # %for.end362
                                        #   in Loop: Header=BB73_108 Depth=1
	jmp	.LBB73_118
.LBB73_118:                             # %for.inc363
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_108
.LBB73_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB73_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	$0, -8(%rbp)
.LBB73_122:                             # %for.cond370
                                        #   Parent Loop BB73_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB73_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB73_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_122
.LBB73_125:                             # %for.end380
                                        #   in Loop: Header=BB73_120 Depth=1
	jmp	.LBB73_126
.LBB73_126:                             # %for.inc381
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_120
.LBB73_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB73_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB73_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	$0, -4(%rbp)
.LBB73_131:                             # %for.cond390
                                        #   Parent Loop BB73_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB73_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB73_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_131
.LBB73_134:                             # %for.end410
                                        #   in Loop: Header=BB73_129 Depth=1
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc411
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_129
.LBB73_136:                             # %for.end413
	jmp	.LBB73_156
.LBB73_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB73_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_141 Depth 2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_141:                             # %for.cond425
                                        #   Parent Loop BB73_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB73_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_143:                             # %for.cond452
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	$0, -4(%rbp)
.LBB73_145:                             # %for.cond456
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        #       Parent Loop BB73_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB73_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB73_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_145
.LBB73_148:                             # %for.end475
                                        #   in Loop: Header=BB73_143 Depth=3
	jmp	.LBB73_149
.LBB73_149:                             # %for.inc476
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_143
.LBB73_150:                             # %for.end478
                                        #   in Loop: Header=BB73_141 Depth=2
	jmp	.LBB73_151
.LBB73_151:                             # %for.inc479
                                        #   in Loop: Header=BB73_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_141
.LBB73_152:                             # %for.end481
                                        #   in Loop: Header=BB73_139 Depth=1
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc482
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_139
.LBB73_154:                             # %for.end484
	jmp	.LBB73_155
.LBB73_155:                             # %if.end485
	jmp	.LBB73_156
.LBB73_156:                             # %if.end486
	jmp	.LBB73_157
.LBB73_157:                             # %if.end487
	jmp	.LBB73_180
.LBB73_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB73_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB73_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	$0, -4(%rbp)
.LBB73_163:                             # %for.cond499
                                        #   Parent Loop BB73_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB73_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB73_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_163
.LBB73_166:                             # %for.end519
                                        #   in Loop: Header=BB73_161 Depth=1
	jmp	.LBB73_167
.LBB73_167:                             # %for.inc520
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_161
.LBB73_168:                             # %for.end522
	jmp	.LBB73_169
.LBB73_169:                             # %if.end523
	jmp	.LBB73_179
.LBB73_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB73_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	$0, -4(%rbp)
.LBB73_173:                             # %for.cond529
                                        #   Parent Loop BB73_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB73_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB73_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_173
.LBB73_176:                             # %for.end541
                                        #   in Loop: Header=BB73_171 Depth=1
	jmp	.LBB73_177
.LBB73_177:                             # %for.inc542
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_171
.LBB73_178:                             # %for.end544
	jmp	.LBB73_179
.LBB73_179:                             # %if.end545
	jmp	.LBB73_180
.LBB73_180:                             # %sw.epilog
	cmpl	$1484869365, -68(%rbp)  # imm = 0x58814EF5
	jne	.LBB73_182
.LBB73_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_181
.Lfunc_end73:
	.size	Conceal_Error.63, .Lfunc_end73-Conceal_Error.63
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_16
	.quad	.LBB73_158
	.quad	.LBB73_106
	.quad	.LBB73_180
	.quad	.LBB73_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.64  # -- Begin function Get_Reference_Pixel.64
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.64,@function
Get_Reference_Pixel.64:                 # @Get_Reference_Pixel.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$90097362, -104(%rbp)   # imm = 0x55EC6D2
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB74_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB74_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB74_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB74_5
.LBB74_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB74_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB74_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB74_11
.LBB74_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB74_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB74_10
.LBB74_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB74_10:                              # %cond.end14
.LBB74_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB74_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB74_14
.LBB74_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB74_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB74_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB74_20
.LBB74_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB74_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB74_19
.LBB74_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB74_19:                              # %cond.end29
.LBB74_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_332
.LBB74_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB74_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB74_25
.LBB74_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB74_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB74_31
.LBB74_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB74_30
.LBB74_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB74_30:                              # %cond.end52
.LBB74_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_36
.LBB74_35:                              # %cond.false61
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_36:                              # %cond.end63
                                        #   in Loop: Header=BB74_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB74_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_42
.LBB74_38:                              # %cond.false68
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_41
.LBB74_40:                              # %cond.false73
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_41:                              # %cond.end75
                                        #   in Loop: Header=BB74_32 Depth=1
.LBB74_42:                              # %cond.end77
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_32
.LBB74_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_47
.LBB74_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB74_53
.LBB74_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_52
.LBB74_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_52:                              # %cond.end113
.LBB74_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB74_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB74_57
.LBB74_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB74_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB74_63
.LBB74_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB74_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB74_62
.LBB74_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB74_62:                              # %cond.end136
.LBB74_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_76
.LBB74_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB74_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB74_68
.LBB74_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB74_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB74_74
.LBB74_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB74_73
.LBB74_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB74_73:                              # %cond.end169
.LBB74_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_75:                              # %if.end
	jmp	.LBB74_76
.LBB74_76:                              # %if.end178
	jmp	.LBB74_331
.LBB74_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB74_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB74_81
.LBB74_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB74_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB74_87
.LBB74_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB74_86
.LBB74_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB74_86:                              # %cond.end197
.LBB74_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_92
.LBB74_91:                              # %cond.false209
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_92:                              # %cond.end211
                                        #   in Loop: Header=BB74_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB74_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_98
.LBB74_94:                              # %cond.false216
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_97
.LBB74_96:                              # %cond.false221
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_97:                              # %cond.end223
                                        #   in Loop: Header=BB74_88 Depth=1
.LBB74_98:                              # %cond.end225
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_88
.LBB74_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_103
.LBB74_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB74_109
.LBB74_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_108
.LBB74_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_108:                             # %cond.end266
.LBB74_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB74_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB74_113
.LBB74_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB74_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB74_119
.LBB74_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB74_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB74_118
.LBB74_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB74_118:                             # %cond.end287
.LBB74_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_132
.LBB74_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB74_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB74_124
.LBB74_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB74_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB74_130
.LBB74_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB74_129
.LBB74_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB74_129:                             # %cond.end320
.LBB74_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_131:                             # %if.end331
	jmp	.LBB74_132
.LBB74_132:                             # %if.end332
	jmp	.LBB74_330
.LBB74_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB74_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB74_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_139
.LBB74_138:                             # %cond.false345
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_139:                             # %cond.end347
                                        #   in Loop: Header=BB74_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB74_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_145
.LBB74_141:                             # %cond.false352
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_144
.LBB74_143:                             # %cond.false357
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_144:                             # %cond.end359
                                        #   in Loop: Header=BB74_135 Depth=1
.LBB74_145:                             # %cond.end361
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_146:                             # %for.cond363
                                        #   Parent Loop BB74_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB74_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB74_150
.LBB74_149:                             # %cond.false371
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_150:                             # %cond.end373
                                        #   in Loop: Header=BB74_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB74_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_156
.LBB74_152:                             # %cond.false378
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB74_155
.LBB74_154:                             # %cond.false383
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_155:                             # %cond.end385
                                        #   in Loop: Header=BB74_146 Depth=2
.LBB74_156:                             # %cond.end387
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_146
.LBB74_158:                             # %for.end401
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_135
.LBB74_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_161
.LBB74_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_167
.LBB74_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB74_173
.LBB74_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_172
.LBB74_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_172:                             # %cond.end449
.LBB74_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_177
.LBB74_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB74_183
.LBB74_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_182
.LBB74_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_182:                             # %cond.end486
.LBB74_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_196
.LBB74_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB74_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_188
.LBB74_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB74_194
.LBB74_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_193
.LBB74_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_193:                             # %cond.end526
.LBB74_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_195:                             # %if.end532
	jmp	.LBB74_196
.LBB74_196:                             # %if.end533
	jmp	.LBB74_329
.LBB74_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB74_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB74_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB74_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_203
.LBB74_202:                             # %cond.false546
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_203:                             # %cond.end548
                                        #   in Loop: Header=BB74_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB74_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_209
.LBB74_205:                             # %cond.false553
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_208
.LBB74_207:                             # %cond.false558
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_208:                             # %cond.end560
                                        #   in Loop: Header=BB74_199 Depth=1
.LBB74_209:                             # %cond.end562
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_210:                             # %for.cond564
                                        #   Parent Loop BB74_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB74_214
.LBB74_213:                             # %cond.false572
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_214:                             # %cond.end574
                                        #   in Loop: Header=BB74_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB74_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_220
.LBB74_216:                             # %cond.false579
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB74_219
.LBB74_218:                             # %cond.false584
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_219:                             # %cond.end586
                                        #   in Loop: Header=BB74_210 Depth=2
.LBB74_220:                             # %cond.end588
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_210
.LBB74_222:                             # %for.end602
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_199
.LBB74_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB74_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB74_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_225
.LBB74_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_231
.LBB74_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB74_237
.LBB74_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_236
.LBB74_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_236:                             # %cond.end650
.LBB74_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_241
.LBB74_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB74_247
.LBB74_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_246
.LBB74_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_246:                             # %cond.end687
.LBB74_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_258
.LBB74_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_251
.LBB74_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB74_257
.LBB74_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_256
.LBB74_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_256:                             # %cond.end724
.LBB74_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_258:                             # %if.end730
	jmp	.LBB74_328
.LBB74_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB74_262
.LBB74_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB74_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB74_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB74_265
.LBB74_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB74_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB74_271
.LBB74_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB74_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB74_270
.LBB74_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB74_270:                             # %cond.end753
.LBB74_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_276
.LBB74_275:                             # %cond.false765
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_276:                             # %cond.end767
                                        #   in Loop: Header=BB74_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB74_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_282
.LBB74_278:                             # %cond.false772
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_281
.LBB74_280:                             # %cond.false777
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_281:                             # %cond.end779
                                        #   in Loop: Header=BB74_272 Depth=1
.LBB74_282:                             # %cond.end781
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_272
.LBB74_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_287
.LBB74_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB74_293
.LBB74_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_292
.LBB74_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_292:                             # %cond.end822
.LBB74_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB74_296
.LBB74_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB74_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB74_299
.LBB74_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB74_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB74_305
.LBB74_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB74_304
.LBB74_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB74_304:                             # %cond.end847
.LBB74_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_310
.LBB74_309:                             # %cond.false859
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_310:                             # %cond.end861
                                        #   in Loop: Header=BB74_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB74_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_316
.LBB74_312:                             # %cond.false866
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_315
.LBB74_314:                             # %cond.false871
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_315:                             # %cond.end873
                                        #   in Loop: Header=BB74_306 Depth=1
.LBB74_316:                             # %cond.end875
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_306
.LBB74_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_321
.LBB74_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB74_327
.LBB74_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_326
.LBB74_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_326:                             # %cond.end916
.LBB74_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_328:                             # %if.end922
	jmp	.LBB74_329
.LBB74_329:                             # %if.end923
	jmp	.LBB74_330
.LBB74_330:                             # %if.end924
	jmp	.LBB74_331
.LBB74_331:                             # %if.end925
	jmp	.LBB74_332
.LBB74_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$90097362, -104(%rbp)   # imm = 0x55EC6D2
	jne	.LBB74_334
.LBB74_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_333
.Lfunc_end74:
	.size	Get_Reference_Pixel.64, .Lfunc_end74-Get_Reference_Pixel.64
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.65    # -- Begin function Error_Concealment.65
	.p2align	4, 0x90
	.type	Error_Concealment.65,@function
Error_Concealment.65:                   # @Error_Concealment.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2000034925, -20(%rbp)  # imm = 0x77361C6D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB75_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_3:                               # %for.cond2
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB75_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB75_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB75_6:                               # %if.end
                                        #   in Loop: Header=BB75_3 Depth=2
	jmp	.LBB75_7
.LBB75_7:                               # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_3
.LBB75_8:                               # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_9
.LBB75_9:                               # %for.inc7
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_1
.LBB75_10:                              # %for.end9
	cmpl	$2000034925, -20(%rbp)  # imm = 0x77361C6D
	jne	.LBB75_12
.LBB75_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_11
.Lfunc_end75:
	.size	Error_Concealment.65, .Lfunc_end75-Error_Concealment.65
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.66   # -- Begin function decode_one_b8block.66
	.p2align	4, 0x90
	.type	decode_one_b8block.66,@function
decode_one_b8block.66:                  # @decode_one_b8block.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1997621111, -84(%rbp)  # imm = 0x77114777
	movl	%edi, -56(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_4:                               # %for.cond9
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB76_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB76_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_4
.LBB76_7:                               # %for.end
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_8
.LBB76_8:                               # %for.inc26
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_2
.LBB76_9:                               # %for.end28
	jmp	.LBB76_96
.LBB76_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB76_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB76_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB76_31
.LBB76_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB76_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_17:                              # %for.cond40
                                        #   Parent Loop BB76_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB76_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB76_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_17
.LBB76_20:                              # %for.end49
                                        #   in Loop: Header=BB76_15 Depth=1
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc50
                                        #   in Loop: Header=BB76_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_15
.LBB76_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_25:                              # %for.cond56
                                        #   Parent Loop BB76_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB76_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_25
.LBB76_28:                              # %for.end71
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_29
.LBB76_29:                              # %for.inc72
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_23
.LBB76_30:                              # %for.end74
	jmp	.LBB76_60
.LBB76_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB76_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB76_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_36:                              # %for.cond83
                                        #   Parent Loop BB76_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB76_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_36
.LBB76_39:                              # %for.end120
                                        #   in Loop: Header=BB76_34 Depth=1
	jmp	.LBB76_40
.LBB76_40:                              # %for.inc121
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_34
.LBB76_41:                              # %for.end123
	jmp	.LBB76_51
.LBB76_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_45:                              # %for.cond129
                                        #   Parent Loop BB76_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB76_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB76_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_45
.LBB76_48:                              # %for.end145
                                        #   in Loop: Header=BB76_43 Depth=1
	jmp	.LBB76_49
.LBB76_49:                              # %for.inc146
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_43
.LBB76_50:                              # %for.end148
	jmp	.LBB76_51
.LBB76_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_54:                              # %for.cond153
                                        #   Parent Loop BB76_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_57:                              # %for.end167
                                        #   in Loop: Header=BB76_52 Depth=1
	jmp	.LBB76_58
.LBB76_58:                              # %for.inc168
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_52
.LBB76_59:                              # %for.end170
	jmp	.LBB76_60
.LBB76_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB76_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB76_66
.LBB76_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB76_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB76_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB76_86
.LBB76_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_69 Depth 2
                                        #       Child Loop BB76_74 Depth 3
                                        #         Child Loop BB76_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB76_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_69:                              # %for.cond197
                                        #   Parent Loop BB76_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_74 Depth 3
                                        #         Child Loop BB76_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB76_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB76_73:                              # %if.end218
                                        #   in Loop: Header=BB76_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB76_74:                              # %for.cond233
                                        #   Parent Loop BB76_67 Depth=1
                                        #     Parent Loop BB76_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB76_74 Depth=3
	movl	$0, -8(%rbp)
.LBB76_76:                              # %for.cond237
                                        #   Parent Loop BB76_67 Depth=1
                                        #     Parent Loop BB76_69 Depth=2
                                        #       Parent Loop BB76_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB76_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB76_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_76
.LBB76_79:                              # %for.end269
                                        #   in Loop: Header=BB76_74 Depth=3
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc270
                                        #   in Loop: Header=BB76_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_74
.LBB76_81:                              # %for.end272
                                        #   in Loop: Header=BB76_69 Depth=2
	jmp	.LBB76_82
.LBB76_82:                              # %for.inc273
                                        #   in Loop: Header=BB76_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_69
.LBB76_83:                              # %for.end275
                                        #   in Loop: Header=BB76_67 Depth=1
	jmp	.LBB76_84
.LBB76_84:                              # %for.inc276
                                        #   in Loop: Header=BB76_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_67
.LBB76_85:                              # %for.end278
	jmp	.LBB76_95
.LBB76_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB76_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_89:                              # %for.cond284
                                        #   Parent Loop BB76_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB76_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB76_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_89
.LBB76_92:                              # %for.end310
                                        #   in Loop: Header=BB76_87 Depth=1
	jmp	.LBB76_93
.LBB76_93:                              # %for.inc311
                                        #   in Loop: Header=BB76_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_87
.LBB76_94:                              # %for.end313
	jmp	.LBB76_95
.LBB76_95:                              # %if.end314
	jmp	.LBB76_96
.LBB76_96:                              # %if.end315
	cmpl	$1997621111, -84(%rbp)  # imm = 0x77114777
	jne	.LBB76_98
.LBB76_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_97
.Lfunc_end76:
	.size	decode_one_b8block.66, .Lfunc_end76-decode_one_b8block.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.67
.LCPI77_0:
	.quad	4636737291354636288     # double 100
.LCPI77_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.67
	.p2align	4, 0x90
	.type	Build_Status_Map.67,@function
Build_Status_Map.67:                    # @Build_Status_Map.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$156397215, -36(%rbp)   # imm = 0x9526E9F
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -12(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB77_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB77_13
.LBB77_6:                               # %if.then
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB77_8:                               # %if.end
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB77_10:                              # %if.end20
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$1, -4(%rbp)
.LBB77_12:                              # %if.end29
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB77_13:                              # %if.end30
                                        #   in Loop: Header=BB77_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB77_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB77_18
.LBB77_15:                              # %if.else
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB77_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB77_17:                              # %if.end49
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_18
.LBB77_18:                              # %if.end50
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_3
.LBB77_20:                              # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc53
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_1
.LBB77_22:                              # %for.end55
	cmpl	$156397215, -36(%rbp)   # imm = 0x9526E9F
	jne	.LBB77_24
.LBB77_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_23
.Lfunc_end77:
	.size	Build_Status_Map.67, .Lfunc_end77-Build_Status_Map.67
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.68       # -- Begin function DecOneForthPix.68
	.p2align	4, 0x90
	.type	DecOneForthPix.68,@function
DecOneForthPix.68:                      # @DecOneForthPix.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$363999048, -12(%rbp)   # imm = 0x15B22F48
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	cmpl	$363999048, -12(%rbp)   # imm = 0x15B22F48
	jne	.LBB78_6
.LBB78_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_5
.Lfunc_end78:
	.size	DecOneForthPix.68, .Lfunc_end78-DecOneForthPix.68
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.69  # -- Begin function Get_Reference_Pixel.69
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.69,@function
Get_Reference_Pixel.69:                 # @Get_Reference_Pixel.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$125971693, -108(%rbp)  # imm = 0x7822CED
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB79_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB79_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB79_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB79_5
.LBB79_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB79_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB79_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB79_11
.LBB79_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB79_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB79_10
.LBB79_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB79_10:                              # %cond.end14
.LBB79_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB79_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB79_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB79_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB79_20
.LBB79_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB79_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB79_19:                              # %cond.end29
.LBB79_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_332
.LBB79_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB79_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB79_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB79_25
.LBB79_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB79_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB79_31
.LBB79_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB79_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB79_30
.LBB79_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB79_30:                              # %cond.end52
.LBB79_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_36
.LBB79_35:                              # %cond.false61
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_36:                              # %cond.end63
                                        #   in Loop: Header=BB79_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB79_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_42
.LBB79_38:                              # %cond.false68
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_41
.LBB79_40:                              # %cond.false73
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_41:                              # %cond.end75
                                        #   in Loop: Header=BB79_32 Depth=1
.LBB79_42:                              # %cond.end77
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_32
.LBB79_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_47
.LBB79_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB79_53
.LBB79_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_52
.LBB79_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_52:                              # %cond.end113
.LBB79_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB79_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB79_57
.LBB79_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB79_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB79_63
.LBB79_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB79_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB79_62
.LBB79_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB79_62:                              # %cond.end136
.LBB79_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_76
.LBB79_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB79_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB79_68
.LBB79_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB79_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB79_74
.LBB79_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB79_73
.LBB79_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB79_73:                              # %cond.end169
.LBB79_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_75:                              # %if.end
	jmp	.LBB79_76
.LBB79_76:                              # %if.end178
	jmp	.LBB79_331
.LBB79_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB79_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB79_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB79_81
.LBB79_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB79_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB79_87
.LBB79_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB79_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB79_86
.LBB79_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB79_86:                              # %cond.end197
.LBB79_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_92
.LBB79_91:                              # %cond.false209
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_92:                              # %cond.end211
                                        #   in Loop: Header=BB79_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB79_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_98
.LBB79_94:                              # %cond.false216
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_97
.LBB79_96:                              # %cond.false221
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_97:                              # %cond.end223
                                        #   in Loop: Header=BB79_88 Depth=1
.LBB79_98:                              # %cond.end225
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_88
.LBB79_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_103
.LBB79_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB79_109
.LBB79_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_108
.LBB79_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_108:                             # %cond.end266
.LBB79_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB79_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB79_113
.LBB79_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB79_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB79_119
.LBB79_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB79_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB79_118
.LBB79_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB79_118:                             # %cond.end287
.LBB79_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_132
.LBB79_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB79_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB79_124
.LBB79_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB79_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB79_130
.LBB79_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB79_129
.LBB79_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB79_129:                             # %cond.end320
.LBB79_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_131:                             # %if.end331
	jmp	.LBB79_132
.LBB79_132:                             # %if.end332
	jmp	.LBB79_330
.LBB79_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB79_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB79_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_139
.LBB79_138:                             # %cond.false345
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_139:                             # %cond.end347
                                        #   in Loop: Header=BB79_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB79_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_145
.LBB79_141:                             # %cond.false352
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_144
.LBB79_143:                             # %cond.false357
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_144:                             # %cond.end359
                                        #   in Loop: Header=BB79_135 Depth=1
.LBB79_145:                             # %cond.end361
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_146:                             # %for.cond363
                                        #   Parent Loop BB79_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB79_150
.LBB79_149:                             # %cond.false371
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_150:                             # %cond.end373
                                        #   in Loop: Header=BB79_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB79_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_156
.LBB79_152:                             # %cond.false378
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB79_155
.LBB79_154:                             # %cond.false383
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_155:                             # %cond.end385
                                        #   in Loop: Header=BB79_146 Depth=2
.LBB79_156:                             # %cond.end387
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_146
.LBB79_158:                             # %for.end401
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_135
.LBB79_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_161
.LBB79_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_167
.LBB79_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB79_173
.LBB79_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_172
.LBB79_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_172:                             # %cond.end449
.LBB79_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_177
.LBB79_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB79_183
.LBB79_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_182
.LBB79_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_182:                             # %cond.end486
.LBB79_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_196
.LBB79_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB79_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_188
.LBB79_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB79_194
.LBB79_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_193
.LBB79_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_193:                             # %cond.end526
.LBB79_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_195:                             # %if.end532
	jmp	.LBB79_196
.LBB79_196:                             # %if.end533
	jmp	.LBB79_329
.LBB79_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB79_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB79_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_203
.LBB79_202:                             # %cond.false546
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_203:                             # %cond.end548
                                        #   in Loop: Header=BB79_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB79_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_209
.LBB79_205:                             # %cond.false553
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_208
.LBB79_207:                             # %cond.false558
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_208:                             # %cond.end560
                                        #   in Loop: Header=BB79_199 Depth=1
.LBB79_209:                             # %cond.end562
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_210:                             # %for.cond564
                                        #   Parent Loop BB79_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB79_214
.LBB79_213:                             # %cond.false572
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_214:                             # %cond.end574
                                        #   in Loop: Header=BB79_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB79_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_220
.LBB79_216:                             # %cond.false579
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB79_219
.LBB79_218:                             # %cond.false584
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_219:                             # %cond.end586
                                        #   in Loop: Header=BB79_210 Depth=2
.LBB79_220:                             # %cond.end588
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_210
.LBB79_222:                             # %for.end602
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_199
.LBB79_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB79_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB79_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_225
.LBB79_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_231
.LBB79_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB79_237
.LBB79_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_236
.LBB79_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_236:                             # %cond.end650
.LBB79_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_241
.LBB79_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB79_247
.LBB79_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_246
.LBB79_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_246:                             # %cond.end687
.LBB79_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_258
.LBB79_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_251
.LBB79_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB79_257
.LBB79_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_256
.LBB79_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_256:                             # %cond.end724
.LBB79_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_258:                             # %if.end730
	jmp	.LBB79_328
.LBB79_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB79_262
.LBB79_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB79_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB79_265
.LBB79_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB79_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB79_271
.LBB79_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB79_270
.LBB79_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB79_270:                             # %cond.end753
.LBB79_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_276
.LBB79_275:                             # %cond.false765
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_276:                             # %cond.end767
                                        #   in Loop: Header=BB79_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB79_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_282
.LBB79_278:                             # %cond.false772
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_281
.LBB79_280:                             # %cond.false777
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_281:                             # %cond.end779
                                        #   in Loop: Header=BB79_272 Depth=1
.LBB79_282:                             # %cond.end781
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_272
.LBB79_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_287
.LBB79_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB79_293
.LBB79_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_292
.LBB79_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_292:                             # %cond.end822
.LBB79_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB79_296
.LBB79_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB79_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB79_299
.LBB79_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB79_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB79_305
.LBB79_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB79_304
.LBB79_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB79_304:                             # %cond.end847
.LBB79_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_310
.LBB79_309:                             # %cond.false859
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_310:                             # %cond.end861
                                        #   in Loop: Header=BB79_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB79_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_316
.LBB79_312:                             # %cond.false866
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_315
.LBB79_314:                             # %cond.false871
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_315:                             # %cond.end873
                                        #   in Loop: Header=BB79_306 Depth=1
.LBB79_316:                             # %cond.end875
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_306
.LBB79_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_321
.LBB79_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB79_327
.LBB79_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_326
.LBB79_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_326:                             # %cond.end916
.LBB79_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_328:                             # %if.end922
	jmp	.LBB79_329
.LBB79_329:                             # %if.end923
	jmp	.LBB79_330
.LBB79_330:                             # %if.end924
	jmp	.LBB79_331
.LBB79_331:                             # %if.end925
	jmp	.LBB79_332
.LBB79_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$125971693, -108(%rbp)  # imm = 0x7822CED
	jne	.LBB79_334
.LBB79_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_333
.Lfunc_end79:
	.size	Get_Reference_Pixel.69, .Lfunc_end79-Get_Reference_Pixel.69
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.70    # -- Begin function Error_Concealment.70
	.p2align	4, 0x90
	.type	Error_Concealment.70,@function
Error_Concealment.70:                   # @Error_Concealment.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1604868396, -12(%rbp)  # imm = 0x5FA8592C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB80_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_3:                               # %for.cond2
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB80_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB80_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB80_6:                               # %if.end
                                        #   in Loop: Header=BB80_3 Depth=2
	jmp	.LBB80_7
.LBB80_7:                               # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_8:                               # %for.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_9
.LBB80_9:                               # %for.inc7
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_1
.LBB80_10:                              # %for.end9
	cmpl	$1604868396, -12(%rbp)  # imm = 0x5FA8592C
	jne	.LBB80_12
.LBB80_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_11
.Lfunc_end80:
	.size	Error_Concealment.70, .Lfunc_end80-Error_Concealment.70
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.71        # -- Begin function Conceal_Error.71
	.p2align	4, 0x90
	.type	Conceal_Error.71,@function
Conceal_Error.71:                       # @Conceal_Error.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$843963243, -68(%rbp)   # imm = 0x324DDB6B
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB81_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB81_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB81_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB81_4:                               # %land.end
.LBB81_5:                               # %lor.end
.LBB81_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB81_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB81_9
.LBB81_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB81_14
.LBB81_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB81_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB81_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB81_12:                              # %land.end51
.LBB81_13:                              # %lor.end53
.LBB81_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB81_180
# %bb.15:                               # %land.end54
	movq	.LJTI81_0(,%rax,8), %rax
	jmpq	*%rax
.LBB81_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB81_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB81_18 Depth=1
	movl	$0, -4(%rbp)
.LBB81_20:                              # %for.cond68
                                        #   Parent Loop BB81_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB81_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB81_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_20
.LBB81_23:                              # %for.end
                                        #   in Loop: Header=BB81_18 Depth=1
	jmp	.LBB81_24
.LBB81_24:                              # %for.inc85
                                        #   in Loop: Header=BB81_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_18
.LBB81_25:                              # %for.end87
	jmp	.LBB81_35
.LBB81_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB81_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB81_27 Depth=1
	movl	$0, -4(%rbp)
.LBB81_29:                              # %for.cond92
                                        #   Parent Loop BB81_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB81_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB81_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_29
.LBB81_32:                              # %for.end104
                                        #   in Loop: Header=BB81_27 Depth=1
	jmp	.LBB81_33
.LBB81_33:                              # %for.inc105
                                        #   in Loop: Header=BB81_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_27
.LBB81_34:                              # %for.end107
	jmp	.LBB81_35
.LBB81_35:                              # %if.end
	jmp	.LBB81_180
.LBB81_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB81_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_39 Depth 2
                                        #       Child Loop BB81_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB81_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB81_37 Depth=1
	movl	$0, -12(%rbp)
.LBB81_39:                              # %for.cond113
                                        #   Parent Loop BB81_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB81_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB81_39 Depth=2
	movl	$0, -4(%rbp)
.LBB81_41:                              # %for.cond117
                                        #   Parent Loop BB81_37 Depth=1
                                        #     Parent Loop BB81_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB81_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB81_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB81_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_41
.LBB81_44:                              # %for.end141
                                        #   in Loop: Header=BB81_39 Depth=2
	jmp	.LBB81_45
.LBB81_45:                              # %for.inc142
                                        #   in Loop: Header=BB81_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_39
.LBB81_46:                              # %for.end144
                                        #   in Loop: Header=BB81_37 Depth=1
	jmp	.LBB81_47
.LBB81_47:                              # %for.inc145
                                        #   in Loop: Header=BB81_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_37
.LBB81_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB81_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB81_49 Depth=1
	movl	$0, -8(%rbp)
.LBB81_51:                              # %for.cond152
                                        #   Parent Loop BB81_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB81_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB81_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_51
.LBB81_54:                              # %for.end162
                                        #   in Loop: Header=BB81_49 Depth=1
	jmp	.LBB81_55
.LBB81_55:                              # %for.inc163
                                        #   in Loop: Header=BB81_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_49
.LBB81_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB81_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB81_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB81_59 Depth=1
	movl	$0, -4(%rbp)
.LBB81_61:                              # %for.cond175
                                        #   Parent Loop BB81_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB81_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB81_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_61
.LBB81_64:                              # %for.end195
                                        #   in Loop: Header=BB81_59 Depth=1
	jmp	.LBB81_65
.LBB81_65:                              # %for.inc196
                                        #   in Loop: Header=BB81_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_59
.LBB81_66:                              # %for.end198
	jmp	.LBB81_95
.LBB81_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB81_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB81_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_71 Depth 2
                                        #       Child Loop BB81_73 Depth 3
                                        #         Child Loop BB81_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB81_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB81_71:                              # %for.cond210
                                        #   Parent Loop BB81_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_73 Depth 3
                                        #         Child Loop BB81_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB81_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB81_73:                              # %for.cond236
                                        #   Parent Loop BB81_69 Depth=1
                                        #     Parent Loop BB81_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB81_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB81_73 Depth=3
	movl	$0, -4(%rbp)
.LBB81_75:                              # %for.cond240
                                        #   Parent Loop BB81_69 Depth=1
                                        #     Parent Loop BB81_71 Depth=2
                                        #       Parent Loop BB81_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB81_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB81_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB81_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_75
.LBB81_78:                              # %for.end259
                                        #   in Loop: Header=BB81_73 Depth=3
	jmp	.LBB81_79
.LBB81_79:                              # %for.inc260
                                        #   in Loop: Header=BB81_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_73
.LBB81_80:                              # %for.end262
                                        #   in Loop: Header=BB81_71 Depth=2
	jmp	.LBB81_81
.LBB81_81:                              # %for.inc263
                                        #   in Loop: Header=BB81_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_71
.LBB81_82:                              # %for.end265
                                        #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_83
.LBB81_83:                              # %for.inc266
                                        #   in Loop: Header=BB81_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_69
.LBB81_84:                              # %for.end268
	jmp	.LBB81_94
.LBB81_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB81_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	$0, -4(%rbp)
.LBB81_88:                              # %for.cond274
                                        #   Parent Loop BB81_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB81_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB81_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_88
.LBB81_91:                              # %for.end294
                                        #   in Loop: Header=BB81_86 Depth=1
	jmp	.LBB81_92
.LBB81_92:                              # %for.inc295
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_86
.LBB81_93:                              # %for.end297
	jmp	.LBB81_94
.LBB81_94:                              # %if.end298
	jmp	.LBB81_95
.LBB81_95:                              # %if.end299
	jmp	.LBB81_105
.LBB81_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB81_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB81_97 Depth=1
	movl	$0, -4(%rbp)
.LBB81_99:                              # %for.cond305
                                        #   Parent Loop BB81_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB81_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB81_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_99
.LBB81_102:                             # %for.end317
                                        #   in Loop: Header=BB81_97 Depth=1
	jmp	.LBB81_103
.LBB81_103:                             # %for.inc318
                                        #   in Loop: Header=BB81_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_97
.LBB81_104:                             # %for.end320
	jmp	.LBB81_105
.LBB81_105:                             # %if.end321
	jmp	.LBB81_180
.LBB81_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB81_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_110 Depth 2
                                        #       Child Loop BB81_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB81_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	$0, -12(%rbp)
.LBB81_110:                             # %for.cond331
                                        #   Parent Loop BB81_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB81_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB81_110 Depth=2
	movl	$0, -4(%rbp)
.LBB81_112:                             # %for.cond335
                                        #   Parent Loop BB81_108 Depth=1
                                        #     Parent Loop BB81_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB81_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB81_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB81_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_112
.LBB81_115:                             # %for.end359
                                        #   in Loop: Header=BB81_110 Depth=2
	jmp	.LBB81_116
.LBB81_116:                             # %for.inc360
                                        #   in Loop: Header=BB81_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_110
.LBB81_117:                             # %for.end362
                                        #   in Loop: Header=BB81_108 Depth=1
	jmp	.LBB81_118
.LBB81_118:                             # %for.inc363
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_108
.LBB81_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB81_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB81_120 Depth=1
	movl	$0, -8(%rbp)
.LBB81_122:                             # %for.cond370
                                        #   Parent Loop BB81_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB81_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB81_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_122
.LBB81_125:                             # %for.end380
                                        #   in Loop: Header=BB81_120 Depth=1
	jmp	.LBB81_126
.LBB81_126:                             # %for.inc381
                                        #   in Loop: Header=BB81_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_120
.LBB81_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB81_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB81_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB81_129 Depth=1
	movl	$0, -4(%rbp)
.LBB81_131:                             # %for.cond390
                                        #   Parent Loop BB81_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB81_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB81_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_131
.LBB81_134:                             # %for.end410
                                        #   in Loop: Header=BB81_129 Depth=1
	jmp	.LBB81_135
.LBB81_135:                             # %for.inc411
                                        #   in Loop: Header=BB81_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_129
.LBB81_136:                             # %for.end413
	jmp	.LBB81_156
.LBB81_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB81_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB81_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_141 Depth 2
                                        #       Child Loop BB81_143 Depth 3
                                        #         Child Loop BB81_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB81_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB81_141:                             # %for.cond425
                                        #   Parent Loop BB81_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_143 Depth 3
                                        #         Child Loop BB81_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB81_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB81_143:                             # %for.cond452
                                        #   Parent Loop BB81_139 Depth=1
                                        #     Parent Loop BB81_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB81_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB81_143 Depth=3
	movl	$0, -4(%rbp)
.LBB81_145:                             # %for.cond456
                                        #   Parent Loop BB81_139 Depth=1
                                        #     Parent Loop BB81_141 Depth=2
                                        #       Parent Loop BB81_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB81_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB81_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB81_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_145
.LBB81_148:                             # %for.end475
                                        #   in Loop: Header=BB81_143 Depth=3
	jmp	.LBB81_149
.LBB81_149:                             # %for.inc476
                                        #   in Loop: Header=BB81_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_143
.LBB81_150:                             # %for.end478
                                        #   in Loop: Header=BB81_141 Depth=2
	jmp	.LBB81_151
.LBB81_151:                             # %for.inc479
                                        #   in Loop: Header=BB81_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_141
.LBB81_152:                             # %for.end481
                                        #   in Loop: Header=BB81_139 Depth=1
	jmp	.LBB81_153
.LBB81_153:                             # %for.inc482
                                        #   in Loop: Header=BB81_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_139
.LBB81_154:                             # %for.end484
	jmp	.LBB81_155
.LBB81_155:                             # %if.end485
	jmp	.LBB81_156
.LBB81_156:                             # %if.end486
	jmp	.LBB81_157
.LBB81_157:                             # %if.end487
	jmp	.LBB81_180
.LBB81_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB81_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB81_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB81_161 Depth=1
	movl	$0, -4(%rbp)
.LBB81_163:                             # %for.cond499
                                        #   Parent Loop BB81_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB81_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB81_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_163
.LBB81_166:                             # %for.end519
                                        #   in Loop: Header=BB81_161 Depth=1
	jmp	.LBB81_167
.LBB81_167:                             # %for.inc520
                                        #   in Loop: Header=BB81_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_161
.LBB81_168:                             # %for.end522
	jmp	.LBB81_169
.LBB81_169:                             # %if.end523
	jmp	.LBB81_179
.LBB81_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB81_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB81_171 Depth=1
	movl	$0, -4(%rbp)
.LBB81_173:                             # %for.cond529
                                        #   Parent Loop BB81_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB81_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB81_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_173
.LBB81_176:                             # %for.end541
                                        #   in Loop: Header=BB81_171 Depth=1
	jmp	.LBB81_177
.LBB81_177:                             # %for.inc542
                                        #   in Loop: Header=BB81_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_171
.LBB81_178:                             # %for.end544
	jmp	.LBB81_179
.LBB81_179:                             # %if.end545
	jmp	.LBB81_180
.LBB81_180:                             # %sw.epilog
	cmpl	$843963243, -68(%rbp)   # imm = 0x324DDB6B
	jne	.LBB81_182
.LBB81_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_181
.Lfunc_end81:
	.size	Conceal_Error.71, .Lfunc_end81-Conceal_Error.71
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI81_0:
	.quad	.LBB81_16
	.quad	.LBB81_158
	.quad	.LBB81_106
	.quad	.LBB81_180
	.quad	.LBB81_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.72  # -- Begin function Get_Reference_Pixel.72
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.72,@function
Get_Reference_Pixel.72:                 # @Get_Reference_Pixel.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1525282303, -104(%rbp) # imm = 0x5AE9F5FF
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB82_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB82_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB82_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB82_5
.LBB82_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB82_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB82_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB82_11
.LBB82_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB82_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB82_10
.LBB82_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB82_10:                              # %cond.end14
.LBB82_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB82_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB82_14
.LBB82_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB82_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB82_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB82_20
.LBB82_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB82_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB82_19
.LBB82_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB82_19:                              # %cond.end29
.LBB82_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_332
.LBB82_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB82_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB82_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB82_25
.LBB82_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB82_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB82_31
.LBB82_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB82_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB82_30
.LBB82_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB82_30:                              # %cond.end52
.LBB82_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB82_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB82_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_36
.LBB82_35:                              # %cond.false61
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_36:                              # %cond.end63
                                        #   in Loop: Header=BB82_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB82_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_42
.LBB82_38:                              # %cond.false68
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_41
.LBB82_40:                              # %cond.false73
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_41:                              # %cond.end75
                                        #   in Loop: Header=BB82_32 Depth=1
.LBB82_42:                              # %cond.end77
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_32
.LBB82_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_47
.LBB82_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB82_53
.LBB82_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_52
.LBB82_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_52:                              # %cond.end113
.LBB82_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB82_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB82_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB82_57
.LBB82_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB82_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB82_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB82_63
.LBB82_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB82_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB82_62
.LBB82_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB82_62:                              # %cond.end136
.LBB82_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB82_76
.LBB82_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB82_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB82_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB82_68
.LBB82_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB82_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB82_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB82_74
.LBB82_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB82_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB82_73
.LBB82_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB82_73:                              # %cond.end169
.LBB82_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB82_75:                              # %if.end
	jmp	.LBB82_76
.LBB82_76:                              # %if.end178
	jmp	.LBB82_331
.LBB82_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB82_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB82_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB82_81
.LBB82_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB82_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB82_87
.LBB82_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB82_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB82_86
.LBB82_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB82_86:                              # %cond.end197
.LBB82_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB82_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB82_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_92
.LBB82_91:                              # %cond.false209
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_92:                              # %cond.end211
                                        #   in Loop: Header=BB82_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB82_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_98
.LBB82_94:                              # %cond.false216
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_97
.LBB82_96:                              # %cond.false221
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_97:                              # %cond.end223
                                        #   in Loop: Header=BB82_88 Depth=1
.LBB82_98:                              # %cond.end225
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB82_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_88
.LBB82_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_103
.LBB82_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB82_109
.LBB82_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_108
.LBB82_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_108:                             # %cond.end266
.LBB82_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB82_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB82_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB82_113
.LBB82_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB82_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB82_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB82_119
.LBB82_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB82_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB82_118
.LBB82_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB82_118:                             # %cond.end287
.LBB82_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB82_132
.LBB82_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB82_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB82_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB82_124
.LBB82_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB82_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB82_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB82_130
.LBB82_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB82_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB82_129
.LBB82_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB82_129:                             # %cond.end320
.LBB82_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB82_131:                             # %if.end331
	jmp	.LBB82_132
.LBB82_132:                             # %if.end332
	jmp	.LBB82_330
.LBB82_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB82_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB82_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB82_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_139
.LBB82_138:                             # %cond.false345
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_139:                             # %cond.end347
                                        #   in Loop: Header=BB82_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB82_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_145
.LBB82_141:                             # %cond.false352
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_144
.LBB82_143:                             # %cond.false357
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_144:                             # %cond.end359
                                        #   in Loop: Header=BB82_135 Depth=1
.LBB82_145:                             # %cond.end361
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB82_146:                             # %for.cond363
                                        #   Parent Loop BB82_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB82_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB82_150
.LBB82_149:                             # %cond.false371
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_150:                             # %cond.end373
                                        #   in Loop: Header=BB82_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB82_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB82_156
.LBB82_152:                             # %cond.false378
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB82_155
.LBB82_154:                             # %cond.false383
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_155:                             # %cond.end385
                                        #   in Loop: Header=BB82_146 Depth=2
.LBB82_156:                             # %cond.end387
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB82_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_146
.LBB82_158:                             # %for.end401
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_135
.LBB82_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB82_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB82_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB82_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB82_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_161
.LBB82_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_167
.LBB82_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB82_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB82_173
.LBB82_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_172
.LBB82_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB82_172:                             # %cond.end449
.LBB82_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB82_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_177
.LBB82_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB82_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB82_183
.LBB82_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_182
.LBB82_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_182:                             # %cond.end486
.LBB82_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB82_196
.LBB82_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB82_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_188
.LBB82_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB82_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB82_194
.LBB82_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_193
.LBB82_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_193:                             # %cond.end526
.LBB82_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB82_195:                             # %if.end532
	jmp	.LBB82_196
.LBB82_196:                             # %if.end533
	jmp	.LBB82_329
.LBB82_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB82_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB82_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB82_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_203
.LBB82_202:                             # %cond.false546
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_203:                             # %cond.end548
                                        #   in Loop: Header=BB82_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB82_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_209
.LBB82_205:                             # %cond.false553
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_208
.LBB82_207:                             # %cond.false558
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_208:                             # %cond.end560
                                        #   in Loop: Header=BB82_199 Depth=1
.LBB82_209:                             # %cond.end562
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB82_210:                             # %for.cond564
                                        #   Parent Loop BB82_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB82_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB82_214
.LBB82_213:                             # %cond.false572
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_214:                             # %cond.end574
                                        #   in Loop: Header=BB82_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB82_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB82_220
.LBB82_216:                             # %cond.false579
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB82_219
.LBB82_218:                             # %cond.false584
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_219:                             # %cond.end586
                                        #   in Loop: Header=BB82_210 Depth=2
.LBB82_220:                             # %cond.end588
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB82_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_210
.LBB82_222:                             # %for.end602
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB82_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_199
.LBB82_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB82_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB82_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB82_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB82_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_225
.LBB82_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_231
.LBB82_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB82_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB82_237
.LBB82_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_236
.LBB82_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB82_236:                             # %cond.end650
.LBB82_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB82_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_241
.LBB82_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB82_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB82_247
.LBB82_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_246
.LBB82_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_246:                             # %cond.end687
.LBB82_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB82_258
.LBB82_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_251
.LBB82_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB82_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB82_257
.LBB82_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB82_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_256
.LBB82_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB82_256:                             # %cond.end724
.LBB82_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB82_258:                             # %if.end730
	jmp	.LBB82_328
.LBB82_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB82_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB82_262
.LBB82_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB82_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB82_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB82_265
.LBB82_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB82_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB82_271
.LBB82_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB82_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB82_270
.LBB82_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB82_270:                             # %cond.end753
.LBB82_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB82_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB82_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_276
.LBB82_275:                             # %cond.false765
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_276:                             # %cond.end767
                                        #   in Loop: Header=BB82_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB82_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_282
.LBB82_278:                             # %cond.false772
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB82_281
.LBB82_280:                             # %cond.false777
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB82_281:                             # %cond.end779
                                        #   in Loop: Header=BB82_272 Depth=1
.LBB82_282:                             # %cond.end781
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB82_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_272
.LBB82_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_287
.LBB82_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB82_293
.LBB82_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_292
.LBB82_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_292:                             # %cond.end822
.LBB82_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB82_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB82_296
.LBB82_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB82_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB82_299
.LBB82_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB82_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB82_305
.LBB82_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB82_304
.LBB82_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB82_304:                             # %cond.end847
.LBB82_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB82_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB82_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_310
.LBB82_309:                             # %cond.false859
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_310:                             # %cond.end861
                                        #   in Loop: Header=BB82_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB82_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB82_316
.LBB82_312:                             # %cond.false866
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB82_315
.LBB82_314:                             # %cond.false871
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB82_315:                             # %cond.end873
                                        #   in Loop: Header=BB82_306 Depth=1
.LBB82_316:                             # %cond.end875
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB82_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_306
.LBB82_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_321
.LBB82_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB82_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB82_327
.LBB82_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB82_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_326
.LBB82_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB82_326:                             # %cond.end916
.LBB82_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB82_328:                             # %if.end922
	jmp	.LBB82_329
.LBB82_329:                             # %if.end923
	jmp	.LBB82_330
.LBB82_330:                             # %if.end924
	jmp	.LBB82_331
.LBB82_331:                             # %if.end925
	jmp	.LBB82_332
.LBB82_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1525282303, -104(%rbp) # imm = 0x5AE9F5FF
	jne	.LBB82_334
.LBB82_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_333
.Lfunc_end82:
	.size	Get_Reference_Pixel.72, .Lfunc_end82-Get_Reference_Pixel.72
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.73   # -- Begin function decode_one_b8block.73
	.p2align	4, 0x90
	.type	decode_one_b8block.73,@function
decode_one_b8block.73:                  # @decode_one_b8block.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1273128073, -84(%rbp)  # imm = 0x4BE26489
	movl	%edi, -56(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB83_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_4:                               # %for.cond9
                                        #   Parent Loop BB83_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB83_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB83_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_4
.LBB83_7:                               # %for.end
                                        #   in Loop: Header=BB83_2 Depth=1
	jmp	.LBB83_8
.LBB83_8:                               # %for.inc26
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_2
.LBB83_9:                               # %for.end28
	jmp	.LBB83_96
.LBB83_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB83_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB83_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB83_31
.LBB83_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB83_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB83_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_17:                              # %for.cond40
                                        #   Parent Loop BB83_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB83_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB83_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_17
.LBB83_20:                              # %for.end49
                                        #   in Loop: Header=BB83_15 Depth=1
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc50
                                        #   in Loop: Header=BB83_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_15
.LBB83_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB83_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB83_25:                              # %for.cond56
                                        #   Parent Loop BB83_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB83_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_25
.LBB83_28:                              # %for.end71
                                        #   in Loop: Header=BB83_23 Depth=1
	jmp	.LBB83_29
.LBB83_29:                              # %for.inc72
                                        #   in Loop: Header=BB83_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_23
.LBB83_30:                              # %for.end74
	jmp	.LBB83_60
.LBB83_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB83_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB83_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB83_36:                              # %for.cond83
                                        #   Parent Loop BB83_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB83_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_36
.LBB83_39:                              # %for.end120
                                        #   in Loop: Header=BB83_34 Depth=1
	jmp	.LBB83_40
.LBB83_40:                              # %for.inc121
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_34
.LBB83_41:                              # %for.end123
	jmp	.LBB83_51
.LBB83_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB83_45:                              # %for.cond129
                                        #   Parent Loop BB83_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB83_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB83_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_45
.LBB83_48:                              # %for.end145
                                        #   in Loop: Header=BB83_43 Depth=1
	jmp	.LBB83_49
.LBB83_49:                              # %for.inc146
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_43
.LBB83_50:                              # %for.end148
	jmp	.LBB83_51
.LBB83_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB83_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_54:                              # %for.cond153
                                        #   Parent Loop BB83_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB83_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_54
.LBB83_57:                              # %for.end167
                                        #   in Loop: Header=BB83_52 Depth=1
	jmp	.LBB83_58
.LBB83_58:                              # %for.inc168
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_52
.LBB83_59:                              # %for.end170
	jmp	.LBB83_60
.LBB83_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB83_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB83_66
.LBB83_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB83_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB83_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB83_86
.LBB83_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_69 Depth 2
                                        #       Child Loop BB83_74 Depth 3
                                        #         Child Loop BB83_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB83_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB83_69:                              # %for.cond197
                                        #   Parent Loop BB83_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_74 Depth 3
                                        #         Child Loop BB83_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB83_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB83_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB83_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB83_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB83_73:                              # %if.end218
                                        #   in Loop: Header=BB83_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB83_74:                              # %for.cond233
                                        #   Parent Loop BB83_67 Depth=1
                                        #     Parent Loop BB83_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB83_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB83_74 Depth=3
	movl	$0, -4(%rbp)
.LBB83_76:                              # %for.cond237
                                        #   Parent Loop BB83_67 Depth=1
                                        #     Parent Loop BB83_69 Depth=2
                                        #       Parent Loop BB83_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB83_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB83_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB83_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_76
.LBB83_79:                              # %for.end269
                                        #   in Loop: Header=BB83_74 Depth=3
	jmp	.LBB83_80
.LBB83_80:                              # %for.inc270
                                        #   in Loop: Header=BB83_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_74
.LBB83_81:                              # %for.end272
                                        #   in Loop: Header=BB83_69 Depth=2
	jmp	.LBB83_82
.LBB83_82:                              # %for.inc273
                                        #   in Loop: Header=BB83_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_69
.LBB83_83:                              # %for.end275
                                        #   in Loop: Header=BB83_67 Depth=1
	jmp	.LBB83_84
.LBB83_84:                              # %for.inc276
                                        #   in Loop: Header=BB83_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_67
.LBB83_85:                              # %for.end278
	jmp	.LBB83_95
.LBB83_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB83_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB83_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_89:                              # %for.cond284
                                        #   Parent Loop BB83_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB83_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB83_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_89
.LBB83_92:                              # %for.end310
                                        #   in Loop: Header=BB83_87 Depth=1
	jmp	.LBB83_93
.LBB83_93:                              # %for.inc311
                                        #   in Loop: Header=BB83_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_87
.LBB83_94:                              # %for.end313
	jmp	.LBB83_95
.LBB83_95:                              # %if.end314
	jmp	.LBB83_96
.LBB83_96:                              # %if.end315
	cmpl	$1273128073, -84(%rbp)  # imm = 0x4BE26489
	jne	.LBB83_98
.LBB83_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_97
.Lfunc_end83:
	.size	decode_one_b8block.73, .Lfunc_end83-decode_one_b8block.73
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.74        # -- Begin function Conceal_Error.74
	.p2align	4, 0x90
	.type	Conceal_Error.74,@function
Conceal_Error.74:                       # @Conceal_Error.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$847879039, -68(%rbp)   # imm = 0x32899B7F
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB84_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB84_4:                               # %land.end
.LBB84_5:                               # %lor.end
.LBB84_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB84_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB84_9
.LBB84_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB84_14
.LBB84_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB84_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB84_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB84_12:                              # %land.end51
.LBB84_13:                              # %lor.end53
.LBB84_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB84_180
# %bb.15:                               # %land.end54
	movq	.LJTI84_0(,%rax,8), %rax
	jmpq	*%rax
.LBB84_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB84_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB84_18 Depth=1
	movl	$0, -4(%rbp)
.LBB84_20:                              # %for.cond68
                                        #   Parent Loop BB84_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB84_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB84_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_20
.LBB84_23:                              # %for.end
                                        #   in Loop: Header=BB84_18 Depth=1
	jmp	.LBB84_24
.LBB84_24:                              # %for.inc85
                                        #   in Loop: Header=BB84_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_18
.LBB84_25:                              # %for.end87
	jmp	.LBB84_35
.LBB84_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB84_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB84_27 Depth=1
	movl	$0, -4(%rbp)
.LBB84_29:                              # %for.cond92
                                        #   Parent Loop BB84_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB84_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB84_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_29
.LBB84_32:                              # %for.end104
                                        #   in Loop: Header=BB84_27 Depth=1
	jmp	.LBB84_33
.LBB84_33:                              # %for.inc105
                                        #   in Loop: Header=BB84_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_27
.LBB84_34:                              # %for.end107
	jmp	.LBB84_35
.LBB84_35:                              # %if.end
	jmp	.LBB84_180
.LBB84_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB84_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_39 Depth 2
                                        #       Child Loop BB84_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB84_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB84_37 Depth=1
	movl	$0, -12(%rbp)
.LBB84_39:                              # %for.cond113
                                        #   Parent Loop BB84_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB84_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB84_39 Depth=2
	movl	$0, -4(%rbp)
.LBB84_41:                              # %for.cond117
                                        #   Parent Loop BB84_37 Depth=1
                                        #     Parent Loop BB84_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB84_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB84_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB84_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_41
.LBB84_44:                              # %for.end141
                                        #   in Loop: Header=BB84_39 Depth=2
	jmp	.LBB84_45
.LBB84_45:                              # %for.inc142
                                        #   in Loop: Header=BB84_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_39
.LBB84_46:                              # %for.end144
                                        #   in Loop: Header=BB84_37 Depth=1
	jmp	.LBB84_47
.LBB84_47:                              # %for.inc145
                                        #   in Loop: Header=BB84_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_37
.LBB84_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB84_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB84_49 Depth=1
	movl	$0, -8(%rbp)
.LBB84_51:                              # %for.cond152
                                        #   Parent Loop BB84_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB84_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB84_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_51
.LBB84_54:                              # %for.end162
                                        #   in Loop: Header=BB84_49 Depth=1
	jmp	.LBB84_55
.LBB84_55:                              # %for.inc163
                                        #   in Loop: Header=BB84_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_49
.LBB84_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB84_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB84_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	$0, -4(%rbp)
.LBB84_61:                              # %for.cond175
                                        #   Parent Loop BB84_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB84_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB84_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_61
.LBB84_64:                              # %for.end195
                                        #   in Loop: Header=BB84_59 Depth=1
	jmp	.LBB84_65
.LBB84_65:                              # %for.inc196
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_59
.LBB84_66:                              # %for.end198
	jmp	.LBB84_95
.LBB84_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB84_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB84_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_71 Depth 2
                                        #       Child Loop BB84_73 Depth 3
                                        #         Child Loop BB84_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB84_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB84_71:                              # %for.cond210
                                        #   Parent Loop BB84_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_73 Depth 3
                                        #         Child Loop BB84_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB84_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB84_73:                              # %for.cond236
                                        #   Parent Loop BB84_69 Depth=1
                                        #     Parent Loop BB84_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB84_73 Depth=3
	movl	$0, -4(%rbp)
.LBB84_75:                              # %for.cond240
                                        #   Parent Loop BB84_69 Depth=1
                                        #     Parent Loop BB84_71 Depth=2
                                        #       Parent Loop BB84_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB84_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB84_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB84_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_75
.LBB84_78:                              # %for.end259
                                        #   in Loop: Header=BB84_73 Depth=3
	jmp	.LBB84_79
.LBB84_79:                              # %for.inc260
                                        #   in Loop: Header=BB84_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_73
.LBB84_80:                              # %for.end262
                                        #   in Loop: Header=BB84_71 Depth=2
	jmp	.LBB84_81
.LBB84_81:                              # %for.inc263
                                        #   in Loop: Header=BB84_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_71
.LBB84_82:                              # %for.end265
                                        #   in Loop: Header=BB84_69 Depth=1
	jmp	.LBB84_83
.LBB84_83:                              # %for.inc266
                                        #   in Loop: Header=BB84_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_69
.LBB84_84:                              # %for.end268
	jmp	.LBB84_94
.LBB84_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB84_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	$0, -4(%rbp)
.LBB84_88:                              # %for.cond274
                                        #   Parent Loop BB84_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB84_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB84_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_88
.LBB84_91:                              # %for.end294
                                        #   in Loop: Header=BB84_86 Depth=1
	jmp	.LBB84_92
.LBB84_92:                              # %for.inc295
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_86
.LBB84_93:                              # %for.end297
	jmp	.LBB84_94
.LBB84_94:                              # %if.end298
	jmp	.LBB84_95
.LBB84_95:                              # %if.end299
	jmp	.LBB84_105
.LBB84_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB84_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB84_97 Depth=1
	movl	$0, -4(%rbp)
.LBB84_99:                              # %for.cond305
                                        #   Parent Loop BB84_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB84_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB84_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_99
.LBB84_102:                             # %for.end317
                                        #   in Loop: Header=BB84_97 Depth=1
	jmp	.LBB84_103
.LBB84_103:                             # %for.inc318
                                        #   in Loop: Header=BB84_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_97
.LBB84_104:                             # %for.end320
	jmp	.LBB84_105
.LBB84_105:                             # %if.end321
	jmp	.LBB84_180
.LBB84_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB84_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_110 Depth 2
                                        #       Child Loop BB84_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB84_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB84_108 Depth=1
	movl	$0, -12(%rbp)
.LBB84_110:                             # %for.cond331
                                        #   Parent Loop BB84_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB84_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB84_110 Depth=2
	movl	$0, -4(%rbp)
.LBB84_112:                             # %for.cond335
                                        #   Parent Loop BB84_108 Depth=1
                                        #     Parent Loop BB84_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB84_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB84_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB84_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_112
.LBB84_115:                             # %for.end359
                                        #   in Loop: Header=BB84_110 Depth=2
	jmp	.LBB84_116
.LBB84_116:                             # %for.inc360
                                        #   in Loop: Header=BB84_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_110
.LBB84_117:                             # %for.end362
                                        #   in Loop: Header=BB84_108 Depth=1
	jmp	.LBB84_118
.LBB84_118:                             # %for.inc363
                                        #   in Loop: Header=BB84_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_108
.LBB84_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB84_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	$0, -8(%rbp)
.LBB84_122:                             # %for.cond370
                                        #   Parent Loop BB84_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB84_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB84_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_122
.LBB84_125:                             # %for.end380
                                        #   in Loop: Header=BB84_120 Depth=1
	jmp	.LBB84_126
.LBB84_126:                             # %for.inc381
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_120
.LBB84_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB84_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB84_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	$0, -4(%rbp)
.LBB84_131:                             # %for.cond390
                                        #   Parent Loop BB84_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB84_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB84_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_131
.LBB84_134:                             # %for.end410
                                        #   in Loop: Header=BB84_129 Depth=1
	jmp	.LBB84_135
.LBB84_135:                             # %for.inc411
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_129
.LBB84_136:                             # %for.end413
	jmp	.LBB84_156
.LBB84_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB84_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB84_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_141 Depth 2
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB84_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB84_141:                             # %for.cond425
                                        #   Parent Loop BB84_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB84_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB84_143:                             # %for.cond452
                                        #   Parent Loop BB84_139 Depth=1
                                        #     Parent Loop BB84_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	$0, -4(%rbp)
.LBB84_145:                             # %for.cond456
                                        #   Parent Loop BB84_139 Depth=1
                                        #     Parent Loop BB84_141 Depth=2
                                        #       Parent Loop BB84_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB84_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB84_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB84_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_145
.LBB84_148:                             # %for.end475
                                        #   in Loop: Header=BB84_143 Depth=3
	jmp	.LBB84_149
.LBB84_149:                             # %for.inc476
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_143
.LBB84_150:                             # %for.end478
                                        #   in Loop: Header=BB84_141 Depth=2
	jmp	.LBB84_151
.LBB84_151:                             # %for.inc479
                                        #   in Loop: Header=BB84_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_141
.LBB84_152:                             # %for.end481
                                        #   in Loop: Header=BB84_139 Depth=1
	jmp	.LBB84_153
.LBB84_153:                             # %for.inc482
                                        #   in Loop: Header=BB84_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_139
.LBB84_154:                             # %for.end484
	jmp	.LBB84_155
.LBB84_155:                             # %if.end485
	jmp	.LBB84_156
.LBB84_156:                             # %if.end486
	jmp	.LBB84_157
.LBB84_157:                             # %if.end487
	jmp	.LBB84_180
.LBB84_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB84_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB84_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB84_161 Depth=1
	movl	$0, -4(%rbp)
.LBB84_163:                             # %for.cond499
                                        #   Parent Loop BB84_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB84_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB84_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_163
.LBB84_166:                             # %for.end519
                                        #   in Loop: Header=BB84_161 Depth=1
	jmp	.LBB84_167
.LBB84_167:                             # %for.inc520
                                        #   in Loop: Header=BB84_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_161
.LBB84_168:                             # %for.end522
	jmp	.LBB84_169
.LBB84_169:                             # %if.end523
	jmp	.LBB84_179
.LBB84_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB84_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB84_171 Depth=1
	movl	$0, -4(%rbp)
.LBB84_173:                             # %for.cond529
                                        #   Parent Loop BB84_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB84_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB84_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_173
.LBB84_176:                             # %for.end541
                                        #   in Loop: Header=BB84_171 Depth=1
	jmp	.LBB84_177
.LBB84_177:                             # %for.inc542
                                        #   in Loop: Header=BB84_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_171
.LBB84_178:                             # %for.end544
	jmp	.LBB84_179
.LBB84_179:                             # %if.end545
	jmp	.LBB84_180
.LBB84_180:                             # %sw.epilog
	cmpl	$847879039, -68(%rbp)   # imm = 0x32899B7F
	jne	.LBB84_182
.LBB84_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_181
.Lfunc_end84:
	.size	Conceal_Error.74, .Lfunc_end84-Conceal_Error.74
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI84_0:
	.quad	.LBB84_16
	.quad	.LBB84_158
	.quad	.LBB84_106
	.quad	.LBB84_180
	.quad	.LBB84_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.75   # -- Begin function decode_one_b8block.75
	.p2align	4, 0x90
	.type	decode_one_b8block.75,@function
decode_one_b8block.75:                  # @decode_one_b8block.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$615320449, -84(%rbp)   # imm = 0x24AD0B81
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_4:                               # %for.cond9
                                        #   Parent Loop BB85_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB85_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB85_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_4
.LBB85_7:                               # %for.end
                                        #   in Loop: Header=BB85_2 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc26
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_2
.LBB85_9:                               # %for.end28
	jmp	.LBB85_96
.LBB85_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB85_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB85_31
.LBB85_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB85_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_17:                              # %for.cond40
                                        #   Parent Loop BB85_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB85_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB85_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_17
.LBB85_20:                              # %for.end49
                                        #   in Loop: Header=BB85_15 Depth=1
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc50
                                        #   in Loop: Header=BB85_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_15
.LBB85_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_25:                              # %for.cond56
                                        #   Parent Loop BB85_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB85_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_25
.LBB85_28:                              # %for.end71
                                        #   in Loop: Header=BB85_23 Depth=1
	jmp	.LBB85_29
.LBB85_29:                              # %for.inc72
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_23
.LBB85_30:                              # %for.end74
	jmp	.LBB85_60
.LBB85_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB85_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB85_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_36:                              # %for.cond83
                                        #   Parent Loop BB85_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB85_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_36
.LBB85_39:                              # %for.end120
                                        #   in Loop: Header=BB85_34 Depth=1
	jmp	.LBB85_40
.LBB85_40:                              # %for.inc121
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_34
.LBB85_41:                              # %for.end123
	jmp	.LBB85_51
.LBB85_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB85_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_45:                              # %for.cond129
                                        #   Parent Loop BB85_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB85_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB85_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_45
.LBB85_48:                              # %for.end145
                                        #   in Loop: Header=BB85_43 Depth=1
	jmp	.LBB85_49
.LBB85_49:                              # %for.inc146
                                        #   in Loop: Header=BB85_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_43
.LBB85_50:                              # %for.end148
	jmp	.LBB85_51
.LBB85_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_54:                              # %for.cond153
                                        #   Parent Loop BB85_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB85_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_54
.LBB85_57:                              # %for.end167
                                        #   in Loop: Header=BB85_52 Depth=1
	jmp	.LBB85_58
.LBB85_58:                              # %for.inc168
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_52
.LBB85_59:                              # %for.end170
	jmp	.LBB85_60
.LBB85_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB85_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB85_66
.LBB85_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB85_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB85_86
.LBB85_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_69 Depth 2
                                        #       Child Loop BB85_74 Depth 3
                                        #         Child Loop BB85_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB85_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_69:                              # %for.cond197
                                        #   Parent Loop BB85_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_74 Depth 3
                                        #         Child Loop BB85_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB85_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB85_73:                              # %if.end218
                                        #   in Loop: Header=BB85_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB85_74:                              # %for.cond233
                                        #   Parent Loop BB85_67 Depth=1
                                        #     Parent Loop BB85_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB85_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB85_74 Depth=3
	movl	$0, -8(%rbp)
.LBB85_76:                              # %for.cond237
                                        #   Parent Loop BB85_67 Depth=1
                                        #     Parent Loop BB85_69 Depth=2
                                        #       Parent Loop BB85_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB85_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB85_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB85_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_76
.LBB85_79:                              # %for.end269
                                        #   in Loop: Header=BB85_74 Depth=3
	jmp	.LBB85_80
.LBB85_80:                              # %for.inc270
                                        #   in Loop: Header=BB85_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_74
.LBB85_81:                              # %for.end272
                                        #   in Loop: Header=BB85_69 Depth=2
	jmp	.LBB85_82
.LBB85_82:                              # %for.inc273
                                        #   in Loop: Header=BB85_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_69
.LBB85_83:                              # %for.end275
                                        #   in Loop: Header=BB85_67 Depth=1
	jmp	.LBB85_84
.LBB85_84:                              # %for.inc276
                                        #   in Loop: Header=BB85_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_67
.LBB85_85:                              # %for.end278
	jmp	.LBB85_95
.LBB85_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB85_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_89:                              # %for.cond284
                                        #   Parent Loop BB85_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB85_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB85_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_89
.LBB85_92:                              # %for.end310
                                        #   in Loop: Header=BB85_87 Depth=1
	jmp	.LBB85_93
.LBB85_93:                              # %for.inc311
                                        #   in Loop: Header=BB85_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_87
.LBB85_94:                              # %for.end313
	jmp	.LBB85_95
.LBB85_95:                              # %if.end314
	jmp	.LBB85_96
.LBB85_96:                              # %if.end315
	cmpl	$615320449, -84(%rbp)   # imm = 0x24AD0B81
	jne	.LBB85_98
.LBB85_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_97
.Lfunc_end85:
	.size	decode_one_b8block.75, .Lfunc_end85-decode_one_b8block.75
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.76  # -- Begin function Get_Reference_Block.76
	.p2align	4, 0x90
	.type	Get_Reference_Block.76,@function
Get_Reference_Block.76:                 # @Get_Reference_Block.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1318881124, -20(%rbp)  # imm = 0x4E9C8764
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB86_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_3:                               # %for.cond5
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_6:                               # %for.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_7
.LBB86_7:                               # %for.inc14
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_8:                               # %for.end16
	cmpl	$1318881124, -20(%rbp)  # imm = 0x4E9C8764
	jne	.LBB86_10
.LBB86_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_9
.Lfunc_end86:
	.size	Get_Reference_Block.76, .Lfunc_end86-Get_Reference_Block.76
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.77       # -- Begin function DecOneForthPix.77
	.p2align	4, 0x90
	.type	DecOneForthPix.77,@function
DecOneForthPix.77:                      # @DecOneForthPix.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1985757905, -12(%rbp)  # imm = 0x765C42D1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB87_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_1
.LBB87_4:                               # %for.end
	cmpl	$1985757905, -12(%rbp)  # imm = 0x765C42D1
	jne	.LBB87_6
.LBB87_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_5
.Lfunc_end87:
	.size	DecOneForthPix.77, .Lfunc_end87-DecOneForthPix.77
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.78       # -- Begin function DecOneForthPix.78
	.p2align	4, 0x90
	.type	DecOneForthPix.78,@function
DecOneForthPix.78:                      # @DecOneForthPix.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1587011679, -8(%rbp)   # imm = 0x5E97E05F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB88_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_1
.LBB88_4:                               # %for.end
	cmpl	$1587011679, -8(%rbp)   # imm = 0x5E97E05F
	jne	.LBB88_6
.LBB88_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_5
.Lfunc_end88:
	.size	DecOneForthPix.78, .Lfunc_end88-DecOneForthPix.78
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.79   # -- Begin function decode_one_b8block.79
	.p2align	4, 0x90
	.type	decode_one_b8block.79,@function
decode_one_b8block.79:                  # @decode_one_b8block.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$827263947, -84(%rbp)   # imm = 0x314F0BCB
	movl	%edi, -40(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_4:                               # %for.cond9
                                        #   Parent Loop BB89_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB89_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB89_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB89_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_4
.LBB89_7:                               # %for.end
                                        #   in Loop: Header=BB89_2 Depth=1
	jmp	.LBB89_8
.LBB89_8:                               # %for.inc26
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_2
.LBB89_9:                               # %for.end28
	jmp	.LBB89_96
.LBB89_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB89_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB89_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB89_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB89_31
.LBB89_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB89_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_17:                              # %for.cond40
                                        #   Parent Loop BB89_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB89_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB89_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB89_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_17
.LBB89_20:                              # %for.end49
                                        #   in Loop: Header=BB89_15 Depth=1
	jmp	.LBB89_21
.LBB89_21:                              # %for.inc50
                                        #   in Loop: Header=BB89_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_15
.LBB89_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB89_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_25:                              # %for.cond56
                                        #   Parent Loop BB89_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB89_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB89_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_25
.LBB89_28:                              # %for.end71
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_29
.LBB89_29:                              # %for.inc72
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_23
.LBB89_30:                              # %for.end74
	jmp	.LBB89_60
.LBB89_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB89_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB89_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB89_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_36:                              # %for.cond83
                                        #   Parent Loop BB89_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB89_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB89_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end120
                                        #   in Loop: Header=BB89_34 Depth=1
	jmp	.LBB89_40
.LBB89_40:                              # %for.inc121
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_34
.LBB89_41:                              # %for.end123
	jmp	.LBB89_51
.LBB89_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB89_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB89_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_45:                              # %for.cond129
                                        #   Parent Loop BB89_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB89_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB89_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_45
.LBB89_48:                              # %for.end145
                                        #   in Loop: Header=BB89_43 Depth=1
	jmp	.LBB89_49
.LBB89_49:                              # %for.inc146
                                        #   in Loop: Header=BB89_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_43
.LBB89_50:                              # %for.end148
	jmp	.LBB89_51
.LBB89_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB89_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_54:                              # %for.cond153
                                        #   Parent Loop BB89_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB89_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB89_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB89_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_54
.LBB89_57:                              # %for.end167
                                        #   in Loop: Header=BB89_52 Depth=1
	jmp	.LBB89_58
.LBB89_58:                              # %for.inc168
                                        #   in Loop: Header=BB89_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_52
.LBB89_59:                              # %for.end170
	jmp	.LBB89_60
.LBB89_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB89_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB89_66
.LBB89_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB89_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB89_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB89_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB89_86
.LBB89_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB89_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_69 Depth 2
                                        #       Child Loop BB89_74 Depth 3
                                        #         Child Loop BB89_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB89_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_69:                              # %for.cond197
                                        #   Parent Loop BB89_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_74 Depth 3
                                        #         Child Loop BB89_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB89_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB89_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB89_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB89_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB89_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB89_73:                              # %if.end218
                                        #   in Loop: Header=BB89_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB89_74:                              # %for.cond233
                                        #   Parent Loop BB89_67 Depth=1
                                        #     Parent Loop BB89_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB89_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB89_74 Depth=3
	movl	$0, -4(%rbp)
.LBB89_76:                              # %for.cond237
                                        #   Parent Loop BB89_67 Depth=1
                                        #     Parent Loop BB89_69 Depth=2
                                        #       Parent Loop BB89_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB89_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB89_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB89_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_76
.LBB89_79:                              # %for.end269
                                        #   in Loop: Header=BB89_74 Depth=3
	jmp	.LBB89_80
.LBB89_80:                              # %for.inc270
                                        #   in Loop: Header=BB89_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_74
.LBB89_81:                              # %for.end272
                                        #   in Loop: Header=BB89_69 Depth=2
	jmp	.LBB89_82
.LBB89_82:                              # %for.inc273
                                        #   in Loop: Header=BB89_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_69
.LBB89_83:                              # %for.end275
                                        #   in Loop: Header=BB89_67 Depth=1
	jmp	.LBB89_84
.LBB89_84:                              # %for.inc276
                                        #   in Loop: Header=BB89_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_67
.LBB89_85:                              # %for.end278
	jmp	.LBB89_95
.LBB89_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB89_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_89:                              # %for.cond284
                                        #   Parent Loop BB89_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB89_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB89_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB89_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_89
.LBB89_92:                              # %for.end310
                                        #   in Loop: Header=BB89_87 Depth=1
	jmp	.LBB89_93
.LBB89_93:                              # %for.inc311
                                        #   in Loop: Header=BB89_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_87
.LBB89_94:                              # %for.end313
	jmp	.LBB89_95
.LBB89_95:                              # %if.end314
	jmp	.LBB89_96
.LBB89_96:                              # %if.end315
	cmpl	$827263947, -84(%rbp)   # imm = 0x314F0BCB
	jne	.LBB89_98
.LBB89_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_97
.Lfunc_end89:
	.size	decode_one_b8block.79, .Lfunc_end89-decode_one_b8block.79
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.80  # -- Begin function Get_Reference_Block.80
	.p2align	4, 0x90
	.type	Get_Reference_Block.80,@function
Get_Reference_Block.80:                 # @Get_Reference_Block.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1659959582, -36(%rbp)  # imm = 0x62F0F91E
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	$0, -8(%rbp)
.LBB90_3:                               # %for.cond5
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_3
.LBB90_6:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_7
.LBB90_7:                               # %for.inc14
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_1
.LBB90_8:                               # %for.end16
	cmpl	$1659959582, -36(%rbp)  # imm = 0x62F0F91E
	jne	.LBB90_10
.LBB90_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_9
.Lfunc_end90:
	.size	Get_Reference_Block.80, .Lfunc_end90-Get_Reference_Block.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.81
.LCPI91_0:
	.quad	4636737291354636288     # double 100
.LCPI91_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.81
	.p2align	4, 0x90
	.type	Build_Status_Map.81,@function
Build_Status_Map.81:                    # @Build_Status_Map.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1654766275, -44(%rbp)  # imm = 0x62A1BAC3
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB91_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	$0, -12(%rbp)
.LBB91_3:                               # %for.cond2
                                        #   Parent Loop BB91_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB91_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB91_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB91_13
.LBB91_6:                               # %if.then
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB91_8:                               # %if.end
                                        #   in Loop: Header=BB91_3 Depth=2
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB91_10:                              # %if.end20
                                        #   in Loop: Header=BB91_3 Depth=2
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	$1, -4(%rbp)
.LBB91_12:                              # %if.end29
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB91_13:                              # %if.end30
                                        #   in Loop: Header=BB91_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB91_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB91_18
.LBB91_15:                              # %if.else
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB91_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB91_17:                              # %if.end49
                                        #   in Loop: Header=BB91_3 Depth=2
	jmp	.LBB91_18
.LBB91_18:                              # %if.end50
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_3
.LBB91_20:                              # %for.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_21
.LBB91_21:                              # %for.inc53
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_1
.LBB91_22:                              # %for.end55
	cmpl	$1654766275, -44(%rbp)  # imm = 0x62A1BAC3
	jne	.LBB91_24
.LBB91_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_23
.Lfunc_end91:
	.size	Build_Status_Map.81, .Lfunc_end91-Build_Status_Map.81
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.82   # -- Begin function decode_one_b8block.82
	.p2align	4, 0x90
	.type	decode_one_b8block.82,@function
decode_one_b8block.82:                  # @decode_one_b8block.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$28363746, -84(%rbp)    # imm = 0x1B0CBE2
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB92_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB92_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB92_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_4:                               # %for.cond9
                                        #   Parent Loop BB92_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB92_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB92_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_4
.LBB92_7:                               # %for.end
                                        #   in Loop: Header=BB92_2 Depth=1
	jmp	.LBB92_8
.LBB92_8:                               # %for.inc26
                                        #   in Loop: Header=BB92_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_2
.LBB92_9:                               # %for.end28
	jmp	.LBB92_96
.LBB92_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB92_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB92_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB92_31
.LBB92_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB92_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB92_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_17:                              # %for.cond40
                                        #   Parent Loop BB92_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB92_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB92_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_17
.LBB92_20:                              # %for.end49
                                        #   in Loop: Header=BB92_15 Depth=1
	jmp	.LBB92_21
.LBB92_21:                              # %for.inc50
                                        #   in Loop: Header=BB92_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_15
.LBB92_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB92_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_25:                              # %for.cond56
                                        #   Parent Loop BB92_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB92_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB92_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_25
.LBB92_28:                              # %for.end71
                                        #   in Loop: Header=BB92_23 Depth=1
	jmp	.LBB92_29
.LBB92_29:                              # %for.inc72
                                        #   in Loop: Header=BB92_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_23
.LBB92_30:                              # %for.end74
	jmp	.LBB92_60
.LBB92_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB92_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB92_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB92_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_36:                              # %for.cond83
                                        #   Parent Loop BB92_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB92_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB92_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_36
.LBB92_39:                              # %for.end120
                                        #   in Loop: Header=BB92_34 Depth=1
	jmp	.LBB92_40
.LBB92_40:                              # %for.inc121
                                        #   in Loop: Header=BB92_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_34
.LBB92_41:                              # %for.end123
	jmp	.LBB92_51
.LBB92_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_45:                              # %for.cond129
                                        #   Parent Loop BB92_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB92_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB92_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_45
.LBB92_48:                              # %for.end145
                                        #   in Loop: Header=BB92_43 Depth=1
	jmp	.LBB92_49
.LBB92_49:                              # %for.inc146
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_43
.LBB92_50:                              # %for.end148
	jmp	.LBB92_51
.LBB92_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB92_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB92_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_54:                              # %for.cond153
                                        #   Parent Loop BB92_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB92_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB92_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_54
.LBB92_57:                              # %for.end167
                                        #   in Loop: Header=BB92_52 Depth=1
	jmp	.LBB92_58
.LBB92_58:                              # %for.inc168
                                        #   in Loop: Header=BB92_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_52
.LBB92_59:                              # %for.end170
	jmp	.LBB92_60
.LBB92_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB92_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB92_66
.LBB92_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB92_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB92_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB92_86
.LBB92_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_69 Depth 2
                                        #       Child Loop BB92_74 Depth 3
                                        #         Child Loop BB92_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_69:                              # %for.cond197
                                        #   Parent Loop BB92_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_74 Depth 3
                                        #         Child Loop BB92_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB92_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB92_73:                              # %if.end218
                                        #   in Loop: Header=BB92_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB92_74:                              # %for.cond233
                                        #   Parent Loop BB92_67 Depth=1
                                        #     Parent Loop BB92_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB92_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB92_74 Depth=3
	movl	$0, -4(%rbp)
.LBB92_76:                              # %for.cond237
                                        #   Parent Loop BB92_67 Depth=1
                                        #     Parent Loop BB92_69 Depth=2
                                        #       Parent Loop BB92_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB92_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB92_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB92_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_76
.LBB92_79:                              # %for.end269
                                        #   in Loop: Header=BB92_74 Depth=3
	jmp	.LBB92_80
.LBB92_80:                              # %for.inc270
                                        #   in Loop: Header=BB92_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_74
.LBB92_81:                              # %for.end272
                                        #   in Loop: Header=BB92_69 Depth=2
	jmp	.LBB92_82
.LBB92_82:                              # %for.inc273
                                        #   in Loop: Header=BB92_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_69
.LBB92_83:                              # %for.end275
                                        #   in Loop: Header=BB92_67 Depth=1
	jmp	.LBB92_84
.LBB92_84:                              # %for.inc276
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_67
.LBB92_85:                              # %for.end278
	jmp	.LBB92_95
.LBB92_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB92_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB92_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_89:                              # %for.cond284
                                        #   Parent Loop BB92_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB92_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB92_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_89
.LBB92_92:                              # %for.end310
                                        #   in Loop: Header=BB92_87 Depth=1
	jmp	.LBB92_93
.LBB92_93:                              # %for.inc311
                                        #   in Loop: Header=BB92_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_87
.LBB92_94:                              # %for.end313
	jmp	.LBB92_95
.LBB92_95:                              # %if.end314
	jmp	.LBB92_96
.LBB92_96:                              # %if.end315
	cmpl	$28363746, -84(%rbp)    # imm = 0x1B0CBE2
	jne	.LBB92_98
.LBB92_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_97
.Lfunc_end92:
	.size	decode_one_b8block.82, .Lfunc_end92-decode_one_b8block.82
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.83    # -- Begin function Error_Concealment.83
	.p2align	4, 0x90
	.type	Error_Concealment.83,@function
Error_Concealment.83:                   # @Error_Concealment.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1000179951, -16(%rbp)  # imm = 0x3B9D88EF
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB93_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	$0, -8(%rbp)
.LBB93_3:                               # %for.cond2
                                        #   Parent Loop BB93_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB93_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB93_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB93_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB93_6:                               # %if.end
                                        #   in Loop: Header=BB93_3 Depth=2
	jmp	.LBB93_7
.LBB93_7:                               # %for.inc
                                        #   in Loop: Header=BB93_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_3
.LBB93_8:                               # %for.end
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_9
.LBB93_9:                               # %for.inc7
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_10:                              # %for.end9
	cmpl	$1000179951, -16(%rbp)  # imm = 0x3B9D88EF
	jne	.LBB93_12
.LBB93_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_11
.Lfunc_end93:
	.size	Error_Concealment.83, .Lfunc_end93-Error_Concealment.83
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.84   # -- Begin function decode_one_b8block.84
	.p2align	4, 0x90
	.type	decode_one_b8block.84,@function
decode_one_b8block.84:                  # @decode_one_b8block.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1622985008, -84(%rbp)  # imm = 0x60BCC930
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB94_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB94_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_4:                               # %for.cond9
                                        #   Parent Loop BB94_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB94_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB94_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_4
.LBB94_7:                               # %for.end
                                        #   in Loop: Header=BB94_2 Depth=1
	jmp	.LBB94_8
.LBB94_8:                               # %for.inc26
                                        #   in Loop: Header=BB94_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_2
.LBB94_9:                               # %for.end28
	jmp	.LBB94_96
.LBB94_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB94_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB94_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB94_31
.LBB94_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB94_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_17:                              # %for.cond40
                                        #   Parent Loop BB94_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB94_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB94_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_17
.LBB94_20:                              # %for.end49
                                        #   in Loop: Header=BB94_15 Depth=1
	jmp	.LBB94_21
.LBB94_21:                              # %for.inc50
                                        #   in Loop: Header=BB94_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_15
.LBB94_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB94_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB94_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB94_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB94_25:                              # %for.cond56
                                        #   Parent Loop BB94_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB94_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB94_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_25
.LBB94_28:                              # %for.end71
                                        #   in Loop: Header=BB94_23 Depth=1
	jmp	.LBB94_29
.LBB94_29:                              # %for.inc72
                                        #   in Loop: Header=BB94_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_23
.LBB94_30:                              # %for.end74
	jmp	.LBB94_60
.LBB94_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB94_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB94_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB94_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB94_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB94_36:                              # %for.cond83
                                        #   Parent Loop BB94_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB94_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB94_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_36
.LBB94_39:                              # %for.end120
                                        #   in Loop: Header=BB94_34 Depth=1
	jmp	.LBB94_40
.LBB94_40:                              # %for.inc121
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_34
.LBB94_41:                              # %for.end123
	jmp	.LBB94_51
.LBB94_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB94_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB94_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB94_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB94_45:                              # %for.cond129
                                        #   Parent Loop BB94_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB94_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB94_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_45
.LBB94_48:                              # %for.end145
                                        #   in Loop: Header=BB94_43 Depth=1
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc146
                                        #   in Loop: Header=BB94_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_43
.LBB94_50:                              # %for.end148
	jmp	.LBB94_51
.LBB94_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_54:                              # %for.cond153
                                        #   Parent Loop BB94_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB94_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB94_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_54
.LBB94_57:                              # %for.end167
                                        #   in Loop: Header=BB94_52 Depth=1
	jmp	.LBB94_58
.LBB94_58:                              # %for.inc168
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_52
.LBB94_59:                              # %for.end170
	jmp	.LBB94_60
.LBB94_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB94_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB94_66
.LBB94_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB94_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB94_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB94_86
.LBB94_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB94_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_69 Depth 2
                                        #       Child Loop BB94_74 Depth 3
                                        #         Child Loop BB94_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB94_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB94_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB94_69:                              # %for.cond197
                                        #   Parent Loop BB94_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_74 Depth 3
                                        #         Child Loop BB94_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB94_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB94_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB94_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB94_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB94_73:                              # %if.end218
                                        #   in Loop: Header=BB94_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB94_74:                              # %for.cond233
                                        #   Parent Loop BB94_67 Depth=1
                                        #     Parent Loop BB94_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB94_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB94_74 Depth=3
	movl	$0, -8(%rbp)
.LBB94_76:                              # %for.cond237
                                        #   Parent Loop BB94_67 Depth=1
                                        #     Parent Loop BB94_69 Depth=2
                                        #       Parent Loop BB94_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB94_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB94_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB94_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_76
.LBB94_79:                              # %for.end269
                                        #   in Loop: Header=BB94_74 Depth=3
	jmp	.LBB94_80
.LBB94_80:                              # %for.inc270
                                        #   in Loop: Header=BB94_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_74
.LBB94_81:                              # %for.end272
                                        #   in Loop: Header=BB94_69 Depth=2
	jmp	.LBB94_82
.LBB94_82:                              # %for.inc273
                                        #   in Loop: Header=BB94_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_69
.LBB94_83:                              # %for.end275
                                        #   in Loop: Header=BB94_67 Depth=1
	jmp	.LBB94_84
.LBB94_84:                              # %for.inc276
                                        #   in Loop: Header=BB94_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_67
.LBB94_85:                              # %for.end278
	jmp	.LBB94_95
.LBB94_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_89:                              # %for.cond284
                                        #   Parent Loop BB94_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB94_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB94_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_89
.LBB94_92:                              # %for.end310
                                        #   in Loop: Header=BB94_87 Depth=1
	jmp	.LBB94_93
.LBB94_93:                              # %for.inc311
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_87
.LBB94_94:                              # %for.end313
	jmp	.LBB94_95
.LBB94_95:                              # %if.end314
	jmp	.LBB94_96
.LBB94_96:                              # %if.end315
	cmpl	$1622985008, -84(%rbp)  # imm = 0x60BCC930
	jne	.LBB94_98
.LBB94_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_97
.Lfunc_end94:
	.size	decode_one_b8block.84, .Lfunc_end94-decode_one_b8block.84
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.85        # -- Begin function Conceal_Error.85
	.p2align	4, 0x90
	.type	Conceal_Error.85,@function
Conceal_Error.85:                       # @Conceal_Error.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1873101506, -68(%rbp)  # imm = 0x6FA542C2
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB95_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB95_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB95_4:                               # %land.end
.LBB95_5:                               # %lor.end
.LBB95_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB95_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB95_9
.LBB95_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB95_14
.LBB95_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB95_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB95_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB95_12:                              # %land.end51
.LBB95_13:                              # %lor.end53
.LBB95_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB95_180
# %bb.15:                               # %land.end54
	movq	.LJTI95_0(,%rax,8), %rax
	jmpq	*%rax
.LBB95_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB95_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB95_18 Depth=1
	movl	$0, -4(%rbp)
.LBB95_20:                              # %for.cond68
                                        #   Parent Loop BB95_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB95_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB95_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_20
.LBB95_23:                              # %for.end
                                        #   in Loop: Header=BB95_18 Depth=1
	jmp	.LBB95_24
.LBB95_24:                              # %for.inc85
                                        #   in Loop: Header=BB95_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_18
.LBB95_25:                              # %for.end87
	jmp	.LBB95_35
.LBB95_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB95_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB95_27 Depth=1
	movl	$0, -4(%rbp)
.LBB95_29:                              # %for.cond92
                                        #   Parent Loop BB95_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB95_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB95_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_29
.LBB95_32:                              # %for.end104
                                        #   in Loop: Header=BB95_27 Depth=1
	jmp	.LBB95_33
.LBB95_33:                              # %for.inc105
                                        #   in Loop: Header=BB95_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_27
.LBB95_34:                              # %for.end107
	jmp	.LBB95_35
.LBB95_35:                              # %if.end
	jmp	.LBB95_180
.LBB95_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB95_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_39 Depth 2
                                        #       Child Loop BB95_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB95_37 Depth=1
	movl	$0, -12(%rbp)
.LBB95_39:                              # %for.cond113
                                        #   Parent Loop BB95_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB95_39 Depth=2
	movl	$0, -4(%rbp)
.LBB95_41:                              # %for.cond117
                                        #   Parent Loop BB95_37 Depth=1
                                        #     Parent Loop BB95_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB95_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB95_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB95_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_41
.LBB95_44:                              # %for.end141
                                        #   in Loop: Header=BB95_39 Depth=2
	jmp	.LBB95_45
.LBB95_45:                              # %for.inc142
                                        #   in Loop: Header=BB95_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_39
.LBB95_46:                              # %for.end144
                                        #   in Loop: Header=BB95_37 Depth=1
	jmp	.LBB95_47
.LBB95_47:                              # %for.inc145
                                        #   in Loop: Header=BB95_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_37
.LBB95_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB95_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB95_49 Depth=1
	movl	$0, -8(%rbp)
.LBB95_51:                              # %for.cond152
                                        #   Parent Loop BB95_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB95_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB95_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_51
.LBB95_54:                              # %for.end162
                                        #   in Loop: Header=BB95_49 Depth=1
	jmp	.LBB95_55
.LBB95_55:                              # %for.inc163
                                        #   in Loop: Header=BB95_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_49
.LBB95_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB95_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB95_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB95_59 Depth=1
	movl	$0, -4(%rbp)
.LBB95_61:                              # %for.cond175
                                        #   Parent Loop BB95_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB95_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB95_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_61
.LBB95_64:                              # %for.end195
                                        #   in Loop: Header=BB95_59 Depth=1
	jmp	.LBB95_65
.LBB95_65:                              # %for.inc196
                                        #   in Loop: Header=BB95_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_59
.LBB95_66:                              # %for.end198
	jmp	.LBB95_95
.LBB95_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB95_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB95_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_71 Depth 2
                                        #       Child Loop BB95_73 Depth 3
                                        #         Child Loop BB95_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB95_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB95_71:                              # %for.cond210
                                        #   Parent Loop BB95_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_73 Depth 3
                                        #         Child Loop BB95_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB95_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB95_73:                              # %for.cond236
                                        #   Parent Loop BB95_69 Depth=1
                                        #     Parent Loop BB95_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB95_73 Depth=3
	movl	$0, -4(%rbp)
.LBB95_75:                              # %for.cond240
                                        #   Parent Loop BB95_69 Depth=1
                                        #     Parent Loop BB95_71 Depth=2
                                        #       Parent Loop BB95_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB95_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB95_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB95_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_75
.LBB95_78:                              # %for.end259
                                        #   in Loop: Header=BB95_73 Depth=3
	jmp	.LBB95_79
.LBB95_79:                              # %for.inc260
                                        #   in Loop: Header=BB95_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_73
.LBB95_80:                              # %for.end262
                                        #   in Loop: Header=BB95_71 Depth=2
	jmp	.LBB95_81
.LBB95_81:                              # %for.inc263
                                        #   in Loop: Header=BB95_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_71
.LBB95_82:                              # %for.end265
                                        #   in Loop: Header=BB95_69 Depth=1
	jmp	.LBB95_83
.LBB95_83:                              # %for.inc266
                                        #   in Loop: Header=BB95_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_69
.LBB95_84:                              # %for.end268
	jmp	.LBB95_94
.LBB95_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB95_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB95_86 Depth=1
	movl	$0, -4(%rbp)
.LBB95_88:                              # %for.cond274
                                        #   Parent Loop BB95_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB95_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB95_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_88
.LBB95_91:                              # %for.end294
                                        #   in Loop: Header=BB95_86 Depth=1
	jmp	.LBB95_92
.LBB95_92:                              # %for.inc295
                                        #   in Loop: Header=BB95_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_86
.LBB95_93:                              # %for.end297
	jmp	.LBB95_94
.LBB95_94:                              # %if.end298
	jmp	.LBB95_95
.LBB95_95:                              # %if.end299
	jmp	.LBB95_105
.LBB95_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB95_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB95_97 Depth=1
	movl	$0, -4(%rbp)
.LBB95_99:                              # %for.cond305
                                        #   Parent Loop BB95_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB95_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB95_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_99
.LBB95_102:                             # %for.end317
                                        #   in Loop: Header=BB95_97 Depth=1
	jmp	.LBB95_103
.LBB95_103:                             # %for.inc318
                                        #   in Loop: Header=BB95_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_97
.LBB95_104:                             # %for.end320
	jmp	.LBB95_105
.LBB95_105:                             # %if.end321
	jmp	.LBB95_180
.LBB95_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB95_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_110 Depth 2
                                        #       Child Loop BB95_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	$0, -12(%rbp)
.LBB95_110:                             # %for.cond331
                                        #   Parent Loop BB95_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	$0, -4(%rbp)
.LBB95_112:                             # %for.cond335
                                        #   Parent Loop BB95_108 Depth=1
                                        #     Parent Loop BB95_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB95_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB95_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB95_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_112
.LBB95_115:                             # %for.end359
                                        #   in Loop: Header=BB95_110 Depth=2
	jmp	.LBB95_116
.LBB95_116:                             # %for.inc360
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_110
.LBB95_117:                             # %for.end362
                                        #   in Loop: Header=BB95_108 Depth=1
	jmp	.LBB95_118
.LBB95_118:                             # %for.inc363
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_108
.LBB95_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB95_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB95_120 Depth=1
	movl	$0, -8(%rbp)
.LBB95_122:                             # %for.cond370
                                        #   Parent Loop BB95_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB95_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB95_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_122
.LBB95_125:                             # %for.end380
                                        #   in Loop: Header=BB95_120 Depth=1
	jmp	.LBB95_126
.LBB95_126:                             # %for.inc381
                                        #   in Loop: Header=BB95_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_120
.LBB95_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB95_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB95_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB95_129 Depth=1
	movl	$0, -4(%rbp)
.LBB95_131:                             # %for.cond390
                                        #   Parent Loop BB95_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB95_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB95_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_131
.LBB95_134:                             # %for.end410
                                        #   in Loop: Header=BB95_129 Depth=1
	jmp	.LBB95_135
.LBB95_135:                             # %for.inc411
                                        #   in Loop: Header=BB95_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_129
.LBB95_136:                             # %for.end413
	jmp	.LBB95_156
.LBB95_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB95_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB95_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_141 Depth 2
                                        #       Child Loop BB95_143 Depth 3
                                        #         Child Loop BB95_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB95_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB95_141:                             # %for.cond425
                                        #   Parent Loop BB95_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_143 Depth 3
                                        #         Child Loop BB95_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB95_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB95_143:                             # %for.cond452
                                        #   Parent Loop BB95_139 Depth=1
                                        #     Parent Loop BB95_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB95_143 Depth=3
	movl	$0, -4(%rbp)
.LBB95_145:                             # %for.cond456
                                        #   Parent Loop BB95_139 Depth=1
                                        #     Parent Loop BB95_141 Depth=2
                                        #       Parent Loop BB95_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB95_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB95_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB95_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_145
.LBB95_148:                             # %for.end475
                                        #   in Loop: Header=BB95_143 Depth=3
	jmp	.LBB95_149
.LBB95_149:                             # %for.inc476
                                        #   in Loop: Header=BB95_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_143
.LBB95_150:                             # %for.end478
                                        #   in Loop: Header=BB95_141 Depth=2
	jmp	.LBB95_151
.LBB95_151:                             # %for.inc479
                                        #   in Loop: Header=BB95_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_141
.LBB95_152:                             # %for.end481
                                        #   in Loop: Header=BB95_139 Depth=1
	jmp	.LBB95_153
.LBB95_153:                             # %for.inc482
                                        #   in Loop: Header=BB95_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_139
.LBB95_154:                             # %for.end484
	jmp	.LBB95_155
.LBB95_155:                             # %if.end485
	jmp	.LBB95_156
.LBB95_156:                             # %if.end486
	jmp	.LBB95_157
.LBB95_157:                             # %if.end487
	jmp	.LBB95_180
.LBB95_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB95_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB95_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	$0, -4(%rbp)
.LBB95_163:                             # %for.cond499
                                        #   Parent Loop BB95_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB95_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB95_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_163
.LBB95_166:                             # %for.end519
                                        #   in Loop: Header=BB95_161 Depth=1
	jmp	.LBB95_167
.LBB95_167:                             # %for.inc520
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_161
.LBB95_168:                             # %for.end522
	jmp	.LBB95_169
.LBB95_169:                             # %if.end523
	jmp	.LBB95_179
.LBB95_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB95_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB95_171 Depth=1
	movl	$0, -4(%rbp)
.LBB95_173:                             # %for.cond529
                                        #   Parent Loop BB95_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB95_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB95_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_173
.LBB95_176:                             # %for.end541
                                        #   in Loop: Header=BB95_171 Depth=1
	jmp	.LBB95_177
.LBB95_177:                             # %for.inc542
                                        #   in Loop: Header=BB95_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_171
.LBB95_178:                             # %for.end544
	jmp	.LBB95_179
.LBB95_179:                             # %if.end545
	jmp	.LBB95_180
.LBB95_180:                             # %sw.epilog
	cmpl	$1873101506, -68(%rbp)  # imm = 0x6FA542C2
	jne	.LBB95_182
.LBB95_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_181
.Lfunc_end95:
	.size	Conceal_Error.85, .Lfunc_end95-Conceal_Error.85
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI95_0:
	.quad	.LBB95_16
	.quad	.LBB95_158
	.quad	.LBB95_106
	.quad	.LBB95_180
	.quad	.LBB95_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.86   # -- Begin function decode_one_b8block.86
	.p2align	4, 0x90
	.type	decode_one_b8block.86,@function
decode_one_b8block.86:                  # @decode_one_b8block.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1032371010, -84(%rbp)  # imm = 0x3D88BB42
	movl	%edi, -44(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB96_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_4:                               # %for.cond9
                                        #   Parent Loop BB96_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB96_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB96_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_4
.LBB96_7:                               # %for.end
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_8
.LBB96_8:                               # %for.inc26
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_2
.LBB96_9:                               # %for.end28
	jmp	.LBB96_96
.LBB96_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB96_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB96_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB96_31
.LBB96_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB96_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_17:                              # %for.cond40
                                        #   Parent Loop BB96_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB96_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB96_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_17
.LBB96_20:                              # %for.end49
                                        #   in Loop: Header=BB96_15 Depth=1
	jmp	.LBB96_21
.LBB96_21:                              # %for.inc50
                                        #   in Loop: Header=BB96_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_15
.LBB96_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_25:                              # %for.cond56
                                        #   Parent Loop BB96_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB96_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB96_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_25
.LBB96_28:                              # %for.end71
                                        #   in Loop: Header=BB96_23 Depth=1
	jmp	.LBB96_29
.LBB96_29:                              # %for.inc72
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_23
.LBB96_30:                              # %for.end74
	jmp	.LBB96_60
.LBB96_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB96_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB96_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_36:                              # %for.cond83
                                        #   Parent Loop BB96_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB96_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB96_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_36
.LBB96_39:                              # %for.end120
                                        #   in Loop: Header=BB96_34 Depth=1
	jmp	.LBB96_40
.LBB96_40:                              # %for.inc121
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_34
.LBB96_41:                              # %for.end123
	jmp	.LBB96_51
.LBB96_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_45:                              # %for.cond129
                                        #   Parent Loop BB96_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB96_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end145
                                        #   in Loop: Header=BB96_43 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc146
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_43
.LBB96_50:                              # %for.end148
	jmp	.LBB96_51
.LBB96_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_54:                              # %for.cond153
                                        #   Parent Loop BB96_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB96_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_54
.LBB96_57:                              # %for.end167
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc168
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_52
.LBB96_59:                              # %for.end170
	jmp	.LBB96_60
.LBB96_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB96_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB96_66
.LBB96_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB96_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB96_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB96_86
.LBB96_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_69 Depth 2
                                        #       Child Loop BB96_74 Depth 3
                                        #         Child Loop BB96_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB96_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_69:                              # %for.cond197
                                        #   Parent Loop BB96_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_74 Depth 3
                                        #         Child Loop BB96_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB96_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB96_73:                              # %if.end218
                                        #   in Loop: Header=BB96_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB96_74:                              # %for.cond233
                                        #   Parent Loop BB96_67 Depth=1
                                        #     Parent Loop BB96_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB96_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB96_74 Depth=3
	movl	$0, -4(%rbp)
.LBB96_76:                              # %for.cond237
                                        #   Parent Loop BB96_67 Depth=1
                                        #     Parent Loop BB96_69 Depth=2
                                        #       Parent Loop BB96_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB96_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB96_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB96_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_76
.LBB96_79:                              # %for.end269
                                        #   in Loop: Header=BB96_74 Depth=3
	jmp	.LBB96_80
.LBB96_80:                              # %for.inc270
                                        #   in Loop: Header=BB96_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_74
.LBB96_81:                              # %for.end272
                                        #   in Loop: Header=BB96_69 Depth=2
	jmp	.LBB96_82
.LBB96_82:                              # %for.inc273
                                        #   in Loop: Header=BB96_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_69
.LBB96_83:                              # %for.end275
                                        #   in Loop: Header=BB96_67 Depth=1
	jmp	.LBB96_84
.LBB96_84:                              # %for.inc276
                                        #   in Loop: Header=BB96_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_67
.LBB96_85:                              # %for.end278
	jmp	.LBB96_95
.LBB96_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB96_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_89:                              # %for.cond284
                                        #   Parent Loop BB96_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB96_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB96_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_89
.LBB96_92:                              # %for.end310
                                        #   in Loop: Header=BB96_87 Depth=1
	jmp	.LBB96_93
.LBB96_93:                              # %for.inc311
                                        #   in Loop: Header=BB96_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_87
.LBB96_94:                              # %for.end313
	jmp	.LBB96_95
.LBB96_95:                              # %if.end314
	jmp	.LBB96_96
.LBB96_96:                              # %if.end315
	cmpl	$1032371010, -84(%rbp)  # imm = 0x3D88BB42
	jne	.LBB96_98
.LBB96_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_97
.Lfunc_end96:
	.size	decode_one_b8block.86, .Lfunc_end96-decode_one_b8block.86
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.87   # -- Begin function decode_one_b8block.87
	.p2align	4, 0x90
	.type	decode_one_b8block.87,@function
decode_one_b8block.87:                  # @decode_one_b8block.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$464107503, -84(%rbp)   # imm = 0x1BA9B7EF
	movl	%edi, -40(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB97_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB97_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_4:                               # %for.cond9
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB97_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %for.inc26
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_2
.LBB97_9:                               # %for.end28
	jmp	.LBB97_96
.LBB97_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB97_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB97_31
.LBB97_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB97_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB97_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_17:                              # %for.cond40
                                        #   Parent Loop BB97_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB97_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB97_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_17
.LBB97_20:                              # %for.end49
                                        #   in Loop: Header=BB97_15 Depth=1
	jmp	.LBB97_21
.LBB97_21:                              # %for.inc50
                                        #   in Loop: Header=BB97_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_15
.LBB97_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB97_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_25:                              # %for.cond56
                                        #   Parent Loop BB97_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB97_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB97_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_25
.LBB97_28:                              # %for.end71
                                        #   in Loop: Header=BB97_23 Depth=1
	jmp	.LBB97_29
.LBB97_29:                              # %for.inc72
                                        #   in Loop: Header=BB97_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_23
.LBB97_30:                              # %for.end74
	jmp	.LBB97_60
.LBB97_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB97_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB97_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB97_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_36:                              # %for.cond83
                                        #   Parent Loop BB97_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB97_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB97_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_36
.LBB97_39:                              # %for.end120
                                        #   in Loop: Header=BB97_34 Depth=1
	jmp	.LBB97_40
.LBB97_40:                              # %for.inc121
                                        #   in Loop: Header=BB97_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_34
.LBB97_41:                              # %for.end123
	jmp	.LBB97_51
.LBB97_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB97_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_45:                              # %for.cond129
                                        #   Parent Loop BB97_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB97_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB97_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_45
.LBB97_48:                              # %for.end145
                                        #   in Loop: Header=BB97_43 Depth=1
	jmp	.LBB97_49
.LBB97_49:                              # %for.inc146
                                        #   in Loop: Header=BB97_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_43
.LBB97_50:                              # %for.end148
	jmp	.LBB97_51
.LBB97_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB97_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB97_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_54:                              # %for.cond153
                                        #   Parent Loop BB97_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB97_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB97_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_54
.LBB97_57:                              # %for.end167
                                        #   in Loop: Header=BB97_52 Depth=1
	jmp	.LBB97_58
.LBB97_58:                              # %for.inc168
                                        #   in Loop: Header=BB97_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_52
.LBB97_59:                              # %for.end170
	jmp	.LBB97_60
.LBB97_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB97_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB97_66
.LBB97_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB97_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB97_86
.LBB97_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_69 Depth 2
                                        #       Child Loop BB97_74 Depth 3
                                        #         Child Loop BB97_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB97_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_69:                              # %for.cond197
                                        #   Parent Loop BB97_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_74 Depth 3
                                        #         Child Loop BB97_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB97_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB97_73:                              # %if.end218
                                        #   in Loop: Header=BB97_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB97_74:                              # %for.cond233
                                        #   Parent Loop BB97_67 Depth=1
                                        #     Parent Loop BB97_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB97_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB97_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB97_74 Depth=3
	movl	$0, -8(%rbp)
.LBB97_76:                              # %for.cond237
                                        #   Parent Loop BB97_67 Depth=1
                                        #     Parent Loop BB97_69 Depth=2
                                        #       Parent Loop BB97_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB97_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB97_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB97_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_76
.LBB97_79:                              # %for.end269
                                        #   in Loop: Header=BB97_74 Depth=3
	jmp	.LBB97_80
.LBB97_80:                              # %for.inc270
                                        #   in Loop: Header=BB97_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_74
.LBB97_81:                              # %for.end272
                                        #   in Loop: Header=BB97_69 Depth=2
	jmp	.LBB97_82
.LBB97_82:                              # %for.inc273
                                        #   in Loop: Header=BB97_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_69
.LBB97_83:                              # %for.end275
                                        #   in Loop: Header=BB97_67 Depth=1
	jmp	.LBB97_84
.LBB97_84:                              # %for.inc276
                                        #   in Loop: Header=BB97_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_67
.LBB97_85:                              # %for.end278
	jmp	.LBB97_95
.LBB97_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB97_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB97_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_89:                              # %for.cond284
                                        #   Parent Loop BB97_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB97_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB97_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_89
.LBB97_92:                              # %for.end310
                                        #   in Loop: Header=BB97_87 Depth=1
	jmp	.LBB97_93
.LBB97_93:                              # %for.inc311
                                        #   in Loop: Header=BB97_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_87
.LBB97_94:                              # %for.end313
	jmp	.LBB97_95
.LBB97_95:                              # %if.end314
	jmp	.LBB97_96
.LBB97_96:                              # %if.end315
	cmpl	$464107503, -84(%rbp)   # imm = 0x1BA9B7EF
	jne	.LBB97_98
.LBB97_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_97
.Lfunc_end97:
	.size	decode_one_b8block.87, .Lfunc_end97-decode_one_b8block.87
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.88       # -- Begin function DecOneForthPix.88
	.p2align	4, 0x90
	.type	DecOneForthPix.88,@function
DecOneForthPix.88:                      # @DecOneForthPix.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1252588125, -8(%rbp)   # imm = 0x4AA8FA5D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB98_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:                               # %for.end
	cmpl	$1252588125, -8(%rbp)   # imm = 0x4AA8FA5D
	jne	.LBB98_6
.LBB98_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_5
.Lfunc_end98:
	.size	DecOneForthPix.88, .Lfunc_end98-DecOneForthPix.88
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.89        # -- Begin function Conceal_Error.89
	.p2align	4, 0x90
	.type	Conceal_Error.89,@function
Conceal_Error.89:                       # @Conceal_Error.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1632169844, -68(%rbp)  # imm = 0x6148EF74
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB99_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB99_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB99_4:                               # %land.end
.LBB99_5:                               # %lor.end
.LBB99_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB99_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB99_9
.LBB99_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB99_14
.LBB99_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB99_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB99_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB99_12:                              # %land.end51
.LBB99_13:                              # %lor.end53
.LBB99_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB99_180
# %bb.15:                               # %land.end54
	movq	.LJTI99_0(,%rax,8), %rax
	jmpq	*%rax
.LBB99_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB99_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	$0, -4(%rbp)
.LBB99_20:                              # %for.cond68
                                        #   Parent Loop BB99_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB99_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB99_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_20
.LBB99_23:                              # %for.end
                                        #   in Loop: Header=BB99_18 Depth=1
	jmp	.LBB99_24
.LBB99_24:                              # %for.inc85
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_18
.LBB99_25:                              # %for.end87
	jmp	.LBB99_35
.LBB99_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB99_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	$0, -4(%rbp)
.LBB99_29:                              # %for.cond92
                                        #   Parent Loop BB99_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB99_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB99_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_29
.LBB99_32:                              # %for.end104
                                        #   in Loop: Header=BB99_27 Depth=1
	jmp	.LBB99_33
.LBB99_33:                              # %for.inc105
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_27
.LBB99_34:                              # %for.end107
	jmp	.LBB99_35
.LBB99_35:                              # %if.end
	jmp	.LBB99_180
.LBB99_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB99_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_39 Depth 2
                                        #       Child Loop BB99_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB99_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	$0, -12(%rbp)
.LBB99_39:                              # %for.cond113
                                        #   Parent Loop BB99_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB99_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB99_39 Depth=2
	movl	$0, -4(%rbp)
.LBB99_41:                              # %for.cond117
                                        #   Parent Loop BB99_37 Depth=1
                                        #     Parent Loop BB99_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB99_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB99_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB99_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_41
.LBB99_44:                              # %for.end141
                                        #   in Loop: Header=BB99_39 Depth=2
	jmp	.LBB99_45
.LBB99_45:                              # %for.inc142
                                        #   in Loop: Header=BB99_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_39
.LBB99_46:                              # %for.end144
                                        #   in Loop: Header=BB99_37 Depth=1
	jmp	.LBB99_47
.LBB99_47:                              # %for.inc145
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_37
.LBB99_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB99_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	$0, -8(%rbp)
.LBB99_51:                              # %for.cond152
                                        #   Parent Loop BB99_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB99_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB99_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_51
.LBB99_54:                              # %for.end162
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_55
.LBB99_55:                              # %for.inc163
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_49
.LBB99_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB99_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB99_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB99_59 Depth=1
	movl	$0, -4(%rbp)
.LBB99_61:                              # %for.cond175
                                        #   Parent Loop BB99_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB99_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB99_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_61
.LBB99_64:                              # %for.end195
                                        #   in Loop: Header=BB99_59 Depth=1
	jmp	.LBB99_65
.LBB99_65:                              # %for.inc196
                                        #   in Loop: Header=BB99_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_59
.LBB99_66:                              # %for.end198
	jmp	.LBB99_95
.LBB99_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB99_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB99_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_71 Depth 2
                                        #       Child Loop BB99_73 Depth 3
                                        #         Child Loop BB99_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB99_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB99_71:                              # %for.cond210
                                        #   Parent Loop BB99_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_73 Depth 3
                                        #         Child Loop BB99_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB99_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB99_73:                              # %for.cond236
                                        #   Parent Loop BB99_69 Depth=1
                                        #     Parent Loop BB99_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB99_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB99_73 Depth=3
	movl	$0, -4(%rbp)
.LBB99_75:                              # %for.cond240
                                        #   Parent Loop BB99_69 Depth=1
                                        #     Parent Loop BB99_71 Depth=2
                                        #       Parent Loop BB99_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB99_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB99_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB99_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_75
.LBB99_78:                              # %for.end259
                                        #   in Loop: Header=BB99_73 Depth=3
	jmp	.LBB99_79
.LBB99_79:                              # %for.inc260
                                        #   in Loop: Header=BB99_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_73
.LBB99_80:                              # %for.end262
                                        #   in Loop: Header=BB99_71 Depth=2
	jmp	.LBB99_81
.LBB99_81:                              # %for.inc263
                                        #   in Loop: Header=BB99_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_71
.LBB99_82:                              # %for.end265
                                        #   in Loop: Header=BB99_69 Depth=1
	jmp	.LBB99_83
.LBB99_83:                              # %for.inc266
                                        #   in Loop: Header=BB99_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_69
.LBB99_84:                              # %for.end268
	jmp	.LBB99_94
.LBB99_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB99_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB99_86 Depth=1
	movl	$0, -4(%rbp)
.LBB99_88:                              # %for.cond274
                                        #   Parent Loop BB99_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB99_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB99_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_88
.LBB99_91:                              # %for.end294
                                        #   in Loop: Header=BB99_86 Depth=1
	jmp	.LBB99_92
.LBB99_92:                              # %for.inc295
                                        #   in Loop: Header=BB99_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_86
.LBB99_93:                              # %for.end297
	jmp	.LBB99_94
.LBB99_94:                              # %if.end298
	jmp	.LBB99_95
.LBB99_95:                              # %if.end299
	jmp	.LBB99_105
.LBB99_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB99_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB99_97 Depth=1
	movl	$0, -4(%rbp)
.LBB99_99:                              # %for.cond305
                                        #   Parent Loop BB99_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB99_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB99_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_99
.LBB99_102:                             # %for.end317
                                        #   in Loop: Header=BB99_97 Depth=1
	jmp	.LBB99_103
.LBB99_103:                             # %for.inc318
                                        #   in Loop: Header=BB99_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_97
.LBB99_104:                             # %for.end320
	jmp	.LBB99_105
.LBB99_105:                             # %if.end321
	jmp	.LBB99_180
.LBB99_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB99_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_110 Depth 2
                                        #       Child Loop BB99_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB99_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB99_108 Depth=1
	movl	$0, -12(%rbp)
.LBB99_110:                             # %for.cond331
                                        #   Parent Loop BB99_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB99_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB99_110 Depth=2
	movl	$0, -4(%rbp)
.LBB99_112:                             # %for.cond335
                                        #   Parent Loop BB99_108 Depth=1
                                        #     Parent Loop BB99_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB99_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB99_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB99_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_112
.LBB99_115:                             # %for.end359
                                        #   in Loop: Header=BB99_110 Depth=2
	jmp	.LBB99_116
.LBB99_116:                             # %for.inc360
                                        #   in Loop: Header=BB99_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_110
.LBB99_117:                             # %for.end362
                                        #   in Loop: Header=BB99_108 Depth=1
	jmp	.LBB99_118
.LBB99_118:                             # %for.inc363
                                        #   in Loop: Header=BB99_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_108
.LBB99_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB99_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB99_120 Depth=1
	movl	$0, -8(%rbp)
.LBB99_122:                             # %for.cond370
                                        #   Parent Loop BB99_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB99_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB99_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_122
.LBB99_125:                             # %for.end380
                                        #   in Loop: Header=BB99_120 Depth=1
	jmp	.LBB99_126
.LBB99_126:                             # %for.inc381
                                        #   in Loop: Header=BB99_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_120
.LBB99_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB99_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB99_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB99_129 Depth=1
	movl	$0, -4(%rbp)
.LBB99_131:                             # %for.cond390
                                        #   Parent Loop BB99_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB99_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB99_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_131
.LBB99_134:                             # %for.end410
                                        #   in Loop: Header=BB99_129 Depth=1
	jmp	.LBB99_135
.LBB99_135:                             # %for.inc411
                                        #   in Loop: Header=BB99_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_129
.LBB99_136:                             # %for.end413
	jmp	.LBB99_156
.LBB99_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB99_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB99_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_141 Depth 2
                                        #       Child Loop BB99_143 Depth 3
                                        #         Child Loop BB99_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB99_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB99_141:                             # %for.cond425
                                        #   Parent Loop BB99_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_143 Depth 3
                                        #         Child Loop BB99_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB99_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB99_143:                             # %for.cond452
                                        #   Parent Loop BB99_139 Depth=1
                                        #     Parent Loop BB99_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB99_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB99_143 Depth=3
	movl	$0, -4(%rbp)
.LBB99_145:                             # %for.cond456
                                        #   Parent Loop BB99_139 Depth=1
                                        #     Parent Loop BB99_141 Depth=2
                                        #       Parent Loop BB99_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB99_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB99_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB99_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_145
.LBB99_148:                             # %for.end475
                                        #   in Loop: Header=BB99_143 Depth=3
	jmp	.LBB99_149
.LBB99_149:                             # %for.inc476
                                        #   in Loop: Header=BB99_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_143
.LBB99_150:                             # %for.end478
                                        #   in Loop: Header=BB99_141 Depth=2
	jmp	.LBB99_151
.LBB99_151:                             # %for.inc479
                                        #   in Loop: Header=BB99_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_141
.LBB99_152:                             # %for.end481
                                        #   in Loop: Header=BB99_139 Depth=1
	jmp	.LBB99_153
.LBB99_153:                             # %for.inc482
                                        #   in Loop: Header=BB99_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_139
.LBB99_154:                             # %for.end484
	jmp	.LBB99_155
.LBB99_155:                             # %if.end485
	jmp	.LBB99_156
.LBB99_156:                             # %if.end486
	jmp	.LBB99_157
.LBB99_157:                             # %if.end487
	jmp	.LBB99_180
.LBB99_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB99_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB99_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	$0, -4(%rbp)
.LBB99_163:                             # %for.cond499
                                        #   Parent Loop BB99_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB99_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB99_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_163
.LBB99_166:                             # %for.end519
                                        #   in Loop: Header=BB99_161 Depth=1
	jmp	.LBB99_167
.LBB99_167:                             # %for.inc520
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_161
.LBB99_168:                             # %for.end522
	jmp	.LBB99_169
.LBB99_169:                             # %if.end523
	jmp	.LBB99_179
.LBB99_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB99_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB99_171 Depth=1
	movl	$0, -4(%rbp)
.LBB99_173:                             # %for.cond529
                                        #   Parent Loop BB99_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB99_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB99_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_173
.LBB99_176:                             # %for.end541
                                        #   in Loop: Header=BB99_171 Depth=1
	jmp	.LBB99_177
.LBB99_177:                             # %for.inc542
                                        #   in Loop: Header=BB99_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_171
.LBB99_178:                             # %for.end544
	jmp	.LBB99_179
.LBB99_179:                             # %if.end545
	jmp	.LBB99_180
.LBB99_180:                             # %sw.epilog
	cmpl	$1632169844, -68(%rbp)  # imm = 0x6148EF74
	jne	.LBB99_182
.LBB99_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_181
.Lfunc_end99:
	.size	Conceal_Error.89, .Lfunc_end99-Conceal_Error.89
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI99_0:
	.quad	.LBB99_16
	.quad	.LBB99_158
	.quad	.LBB99_106
	.quad	.LBB99_180
	.quad	.LBB99_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.90  # -- Begin function Get_Reference_Block.90
	.p2align	4, 0x90
	.type	Get_Reference_Block.90,@function
Get_Reference_Block.90:                 # @Get_Reference_Block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$219443570, -16(%rbp)   # imm = 0xD147172
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	$0, -8(%rbp)
.LBB100_3:                              # %for.cond5
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_3
.LBB100_6:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc14
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_8:                              # %for.end16
	cmpl	$219443570, -16(%rbp)   # imm = 0xD147172
	jne	.LBB100_10
.LBB100_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_9
.Lfunc_end100:
	.size	Get_Reference_Block.90, .Lfunc_end100-Get_Reference_Block.90
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.91
.LCPI101_0:
	.quad	4636737291354636288     # double 100
.LCPI101_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.91
	.p2align	4, 0x90
	.type	Build_Status_Map.91,@function
Build_Status_Map.91:                    # @Build_Status_Map.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1731511818, -44(%rbp)  # imm = 0x6734C60A
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB101_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$0, -8(%rbp)
.LBB101_3:                              # %for.cond2
                                        #   Parent Loop BB101_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB101_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB101_13
.LBB101_6:                              # %if.then
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB101_8:                              # %if.end
                                        #   in Loop: Header=BB101_3 Depth=2
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB101_10:                             # %if.end20
                                        #   in Loop: Header=BB101_3 Depth=2
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	$1, -4(%rbp)
.LBB101_12:                             # %if.end29
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB101_13:                             # %if.end30
                                        #   in Loop: Header=BB101_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB101_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB101_18
.LBB101_15:                             # %if.else
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB101_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB101_17:                             # %if.end49
                                        #   in Loop: Header=BB101_3 Depth=2
	jmp	.LBB101_18
.LBB101_18:                             # %if.end50
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_3
.LBB101_20:                             # %for.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_21
.LBB101_21:                             # %for.inc53
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_1
.LBB101_22:                             # %for.end55
	cmpl	$1731511818, -44(%rbp)  # imm = 0x6734C60A
	jne	.LBB101_24
.LBB101_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_23
.Lfunc_end101:
	.size	Build_Status_Map.91, .Lfunc_end101-Build_Status_Map.91
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.92       # -- Begin function DecOneForthPix.92
	.p2align	4, 0x90
	.type	DecOneForthPix.92,@function
DecOneForthPix.92:                      # @DecOneForthPix.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$595083005, -8(%rbp)    # imm = 0x23783EFD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB102_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_1
.LBB102_4:                              # %for.end
	cmpl	$595083005, -8(%rbp)    # imm = 0x23783EFD
	jne	.LBB102_6
.LBB102_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_5
.Lfunc_end102:
	.size	DecOneForthPix.92, .Lfunc_end102-DecOneForthPix.92
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.93
.LCPI103_0:
	.quad	4636737291354636288     # double 100
.LCPI103_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.93
	.p2align	4, 0x90
	.type	Build_Status_Map.93,@function
Build_Status_Map.93:                    # @Build_Status_Map.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1202666830, -44(%rbp)  # imm = 0x47AF3D4E
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	$0, -12(%rbp)
.LBB103_3:                              # %for.cond2
                                        #   Parent Loop BB103_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB103_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB103_13
.LBB103_6:                              # %if.then
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI103_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI103_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB103_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB103_8:                              # %if.end
                                        #   in Loop: Header=BB103_3 Depth=2
	callq	rand
	vmovsd	.LCPI103_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI103_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB103_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB103_10:                             # %if.end20
                                        #   in Loop: Header=BB103_3 Depth=2
	callq	rand
	vmovsd	.LCPI103_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI103_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB103_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	$1, -4(%rbp)
.LBB103_12:                             # %if.end29
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB103_13:                             # %if.end30
                                        #   in Loop: Header=BB103_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB103_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB103_18
.LBB103_15:                             # %if.else
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB103_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB103_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB103_17:                             # %if.end49
                                        #   in Loop: Header=BB103_3 Depth=2
	jmp	.LBB103_18
.LBB103_18:                             # %if.end50
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB103_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_3
.LBB103_20:                             # %for.end
                                        #   in Loop: Header=BB103_1 Depth=1
	jmp	.LBB103_21
.LBB103_21:                             # %for.inc53
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_1
.LBB103_22:                             # %for.end55
	cmpl	$1202666830, -44(%rbp)  # imm = 0x47AF3D4E
	jne	.LBB103_24
.LBB103_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_23
.Lfunc_end103:
	.size	Build_Status_Map.93, .Lfunc_end103-Build_Status_Map.93
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.94 # -- Begin function compute_residue_b8block.94
	.p2align	4, 0x90
	.type	compute_residue_b8block.94,@function
compute_residue_b8block.94:             # @compute_residue_b8block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1381026127, -36(%rbp)  # imm = 0x5250C94F
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB104_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_4:                              # %for.cond4
                                        #   Parent Loop BB104_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB104_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB104_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_4
.LBB104_7:                              # %for.end
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc22
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_2
.LBB104_9:                              # %for.end24
	jmp	.LBB104_19
.LBB104_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_13:                             # %for.cond29
                                        #   Parent Loop BB104_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB104_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_13
.LBB104_16:                             # %for.end56
                                        #   in Loop: Header=BB104_11 Depth=1
	jmp	.LBB104_17
.LBB104_17:                             # %for.inc57
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_11
.LBB104_18:                             # %for.end59
	jmp	.LBB104_19
.LBB104_19:                             # %if.end
	cmpl	$1381026127, -36(%rbp)  # imm = 0x5250C94F
	jne	.LBB104_21
.LBB104_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_20
.Lfunc_end104:
	.size	compute_residue_b8block.94, .Lfunc_end104-compute_residue_b8block.94
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.95       # -- Begin function DecOneForthPix.95
	.p2align	4, 0x90
	.type	DecOneForthPix.95,@function
DecOneForthPix.95:                      # @DecOneForthPix.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$309028242, -8(%rbp)    # imm = 0x126B6592
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB105_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_1
.LBB105_4:                              # %for.end
	cmpl	$309028242, -8(%rbp)    # imm = 0x126B6592
	jne	.LBB105_6
.LBB105_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_5
.Lfunc_end105:
	.size	DecOneForthPix.95, .Lfunc_end105-DecOneForthPix.95
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.96       # -- Begin function DecOneForthPix.96
	.p2align	4, 0x90
	.type	DecOneForthPix.96,@function
DecOneForthPix.96:                      # @DecOneForthPix.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1490889400, -8(%rbp)   # imm = 0x58DD2AB8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$1490889400, -8(%rbp)   # imm = 0x58DD2AB8
	jne	.LBB106_6
.LBB106_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_5
.Lfunc_end106:
	.size	DecOneForthPix.96, .Lfunc_end106-DecOneForthPix.96
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.97  # -- Begin function Get_Reference_Pixel.97
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.97,@function
Get_Reference_Pixel.97:                 # @Get_Reference_Pixel.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1113435416, -104(%rbp) # imm = 0x425DAD18
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB107_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB107_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB107_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB107_5
.LBB107_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB107_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB107_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB107_11
.LBB107_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB107_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB107_10
.LBB107_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB107_10:                             # %cond.end14
.LBB107_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB107_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB107_14
.LBB107_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB107_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB107_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB107_20
.LBB107_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB107_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB107_19
.LBB107_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB107_19:                             # %cond.end29
.LBB107_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_332
.LBB107_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB107_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB107_25
.LBB107_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB107_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB107_31
.LBB107_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB107_30
.LBB107_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB107_30:                             # %cond.end52
.LBB107_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_36
.LBB107_35:                             # %cond.false61
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_36:                             # %cond.end63
                                        #   in Loop: Header=BB107_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB107_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_42
.LBB107_38:                             # %cond.false68
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_41
.LBB107_40:                             # %cond.false73
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_41:                             # %cond.end75
                                        #   in Loop: Header=BB107_32 Depth=1
.LBB107_42:                             # %cond.end77
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_32
.LBB107_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_47
.LBB107_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB107_53
.LBB107_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_52
.LBB107_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_52:                             # %cond.end113
.LBB107_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB107_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB107_57
.LBB107_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB107_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB107_63
.LBB107_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB107_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB107_62
.LBB107_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB107_62:                             # %cond.end136
.LBB107_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_76
.LBB107_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB107_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB107_68
.LBB107_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB107_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB107_74
.LBB107_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB107_73
.LBB107_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB107_73:                             # %cond.end169
.LBB107_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_75:                             # %if.end
	jmp	.LBB107_76
.LBB107_76:                             # %if.end178
	jmp	.LBB107_331
.LBB107_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB107_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB107_81
.LBB107_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB107_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB107_87
.LBB107_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB107_86
.LBB107_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB107_86:                             # %cond.end197
.LBB107_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_92
.LBB107_91:                             # %cond.false209
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_92:                             # %cond.end211
                                        #   in Loop: Header=BB107_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB107_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_98
.LBB107_94:                             # %cond.false216
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_97
.LBB107_96:                             # %cond.false221
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_97:                             # %cond.end223
                                        #   in Loop: Header=BB107_88 Depth=1
.LBB107_98:                             # %cond.end225
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_88
.LBB107_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_103
.LBB107_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB107_109
.LBB107_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_108
.LBB107_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_108:                            # %cond.end266
.LBB107_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB107_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB107_113
.LBB107_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB107_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB107_119
.LBB107_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB107_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB107_118
.LBB107_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB107_118:                            # %cond.end287
.LBB107_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_132
.LBB107_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB107_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB107_124
.LBB107_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB107_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB107_130
.LBB107_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB107_129
.LBB107_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB107_129:                            # %cond.end320
.LBB107_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_131:                            # %if.end331
	jmp	.LBB107_132
.LBB107_132:                            # %if.end332
	jmp	.LBB107_330
.LBB107_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB107_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB107_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB107_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_139
.LBB107_138:                            # %cond.false345
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_139:                            # %cond.end347
                                        #   in Loop: Header=BB107_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB107_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_145
.LBB107_141:                            # %cond.false352
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_144
.LBB107_143:                            # %cond.false357
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_144:                            # %cond.end359
                                        #   in Loop: Header=BB107_135 Depth=1
.LBB107_145:                            # %cond.end361
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_146:                            # %for.cond363
                                        #   Parent Loop BB107_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB107_150
.LBB107_149:                            # %cond.false371
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_150:                            # %cond.end373
                                        #   in Loop: Header=BB107_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB107_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_156
.LBB107_152:                            # %cond.false378
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB107_155
.LBB107_154:                            # %cond.false383
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_155:                            # %cond.end385
                                        #   in Loop: Header=BB107_146 Depth=2
.LBB107_156:                            # %cond.end387
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_146
.LBB107_158:                            # %for.end401
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_135
.LBB107_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_161
.LBB107_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_167
.LBB107_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB107_173
.LBB107_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_172
.LBB107_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_172:                            # %cond.end449
.LBB107_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_177
.LBB107_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB107_183
.LBB107_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_182
.LBB107_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_182:                            # %cond.end486
.LBB107_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_196
.LBB107_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB107_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_188
.LBB107_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB107_194
.LBB107_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_193
.LBB107_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_193:                            # %cond.end526
.LBB107_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_195:                            # %if.end532
	jmp	.LBB107_196
.LBB107_196:                            # %if.end533
	jmp	.LBB107_329
.LBB107_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB107_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB107_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_203
.LBB107_202:                            # %cond.false546
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_203:                            # %cond.end548
                                        #   in Loop: Header=BB107_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB107_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_209
.LBB107_205:                            # %cond.false553
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_208
.LBB107_207:                            # %cond.false558
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_208:                            # %cond.end560
                                        #   in Loop: Header=BB107_199 Depth=1
.LBB107_209:                            # %cond.end562
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_210:                            # %for.cond564
                                        #   Parent Loop BB107_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB107_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB107_214
.LBB107_213:                            # %cond.false572
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_214:                            # %cond.end574
                                        #   in Loop: Header=BB107_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB107_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_220
.LBB107_216:                            # %cond.false579
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB107_219
.LBB107_218:                            # %cond.false584
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_219:                            # %cond.end586
                                        #   in Loop: Header=BB107_210 Depth=2
.LBB107_220:                            # %cond.end588
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_210
.LBB107_222:                            # %for.end602
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_199
.LBB107_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB107_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB107_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_225
.LBB107_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_231
.LBB107_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB107_237
.LBB107_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_236
.LBB107_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_236:                            # %cond.end650
.LBB107_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_241
.LBB107_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB107_247
.LBB107_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_246
.LBB107_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_246:                            # %cond.end687
.LBB107_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_258
.LBB107_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_251
.LBB107_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB107_257
.LBB107_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_256
.LBB107_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_256:                            # %cond.end724
.LBB107_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_258:                            # %if.end730
	jmp	.LBB107_328
.LBB107_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB107_262
.LBB107_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB107_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB107_265
.LBB107_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB107_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB107_271
.LBB107_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB107_270
.LBB107_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB107_270:                            # %cond.end753
.LBB107_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_276
.LBB107_275:                            # %cond.false765
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_276:                            # %cond.end767
                                        #   in Loop: Header=BB107_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB107_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_282
.LBB107_278:                            # %cond.false772
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_281
.LBB107_280:                            # %cond.false777
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_281:                            # %cond.end779
                                        #   in Loop: Header=BB107_272 Depth=1
.LBB107_282:                            # %cond.end781
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_272
.LBB107_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_287
.LBB107_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB107_293
.LBB107_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_292
.LBB107_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_292:                            # %cond.end822
.LBB107_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB107_296
.LBB107_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB107_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB107_299
.LBB107_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB107_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB107_305
.LBB107_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB107_304
.LBB107_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB107_304:                            # %cond.end847
.LBB107_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_310
.LBB107_309:                            # %cond.false859
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_310:                            # %cond.end861
                                        #   in Loop: Header=BB107_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB107_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_316
.LBB107_312:                            # %cond.false866
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_315
.LBB107_314:                            # %cond.false871
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_315:                            # %cond.end873
                                        #   in Loop: Header=BB107_306 Depth=1
.LBB107_316:                            # %cond.end875
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_306
.LBB107_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_321
.LBB107_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB107_327
.LBB107_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_326
.LBB107_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_326:                            # %cond.end916
.LBB107_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_328:                            # %if.end922
	jmp	.LBB107_329
.LBB107_329:                            # %if.end923
	jmp	.LBB107_330
.LBB107_330:                            # %if.end924
	jmp	.LBB107_331
.LBB107_331:                            # %if.end925
	jmp	.LBB107_332
.LBB107_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1113435416, -104(%rbp) # imm = 0x425DAD18
	jne	.LBB107_334
.LBB107_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_333
.Lfunc_end107:
	.size	Get_Reference_Pixel.97, .Lfunc_end107-Get_Reference_Pixel.97
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.98   # -- Begin function decode_one_b8block.98
	.p2align	4, 0x90
	.type	decode_one_b8block.98,@function
decode_one_b8block.98:                  # @decode_one_b8block.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$368983014, -84(%rbp)   # imm = 0x15FE3BE6
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB108_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_4:                              # %for.cond9
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB108_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB108_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_4
.LBB108_7:                              # %for.end
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %for.inc26
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_2
.LBB108_9:                              # %for.end28
	jmp	.LBB108_96
.LBB108_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB108_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB108_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB108_31
.LBB108_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB108_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_17:                             # %for.cond40
                                        #   Parent Loop BB108_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB108_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB108_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_17
.LBB108_20:                             # %for.end49
                                        #   in Loop: Header=BB108_15 Depth=1
	jmp	.LBB108_21
.LBB108_21:                             # %for.inc50
                                        #   in Loop: Header=BB108_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_15
.LBB108_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB108_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_25:                             # %for.cond56
                                        #   Parent Loop BB108_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB108_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB108_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_28:                             # %for.end71
                                        #   in Loop: Header=BB108_23 Depth=1
	jmp	.LBB108_29
.LBB108_29:                             # %for.inc72
                                        #   in Loop: Header=BB108_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_23
.LBB108_30:                             # %for.end74
	jmp	.LBB108_60
.LBB108_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB108_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB108_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_36:                             # %for.cond83
                                        #   Parent Loop BB108_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB108_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB108_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_36
.LBB108_39:                             # %for.end120
                                        #   in Loop: Header=BB108_34 Depth=1
	jmp	.LBB108_40
.LBB108_40:                             # %for.inc121
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_34
.LBB108_41:                             # %for.end123
	jmp	.LBB108_51
.LBB108_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_45:                             # %for.cond129
                                        #   Parent Loop BB108_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB108_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB108_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_45
.LBB108_48:                             # %for.end145
                                        #   in Loop: Header=BB108_43 Depth=1
	jmp	.LBB108_49
.LBB108_49:                             # %for.inc146
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_43
.LBB108_50:                             # %for.end148
	jmp	.LBB108_51
.LBB108_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_54:                             # %for.cond153
                                        #   Parent Loop BB108_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB108_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB108_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_54
.LBB108_57:                             # %for.end167
                                        #   in Loop: Header=BB108_52 Depth=1
	jmp	.LBB108_58
.LBB108_58:                             # %for.inc168
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_52
.LBB108_59:                             # %for.end170
	jmp	.LBB108_60
.LBB108_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB108_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB108_66
.LBB108_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB108_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB108_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB108_86
.LBB108_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_69 Depth 2
                                        #       Child Loop BB108_74 Depth 3
                                        #         Child Loop BB108_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_69:                             # %for.cond197
                                        #   Parent Loop BB108_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_74 Depth 3
                                        #         Child Loop BB108_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB108_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB108_73:                             # %if.end218
                                        #   in Loop: Header=BB108_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB108_74:                             # %for.cond233
                                        #   Parent Loop BB108_67 Depth=1
                                        #     Parent Loop BB108_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB108_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	$0, -8(%rbp)
.LBB108_76:                             # %for.cond237
                                        #   Parent Loop BB108_67 Depth=1
                                        #     Parent Loop BB108_69 Depth=2
                                        #       Parent Loop BB108_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB108_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB108_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB108_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_76
.LBB108_79:                             # %for.end269
                                        #   in Loop: Header=BB108_74 Depth=3
	jmp	.LBB108_80
.LBB108_80:                             # %for.inc270
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_74
.LBB108_81:                             # %for.end272
                                        #   in Loop: Header=BB108_69 Depth=2
	jmp	.LBB108_82
.LBB108_82:                             # %for.inc273
                                        #   in Loop: Header=BB108_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_69
.LBB108_83:                             # %for.end275
                                        #   in Loop: Header=BB108_67 Depth=1
	jmp	.LBB108_84
.LBB108_84:                             # %for.inc276
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_67
.LBB108_85:                             # %for.end278
	jmp	.LBB108_95
.LBB108_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB108_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_89:                             # %for.cond284
                                        #   Parent Loop BB108_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB108_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB108_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_89
.LBB108_92:                             # %for.end310
                                        #   in Loop: Header=BB108_87 Depth=1
	jmp	.LBB108_93
.LBB108_93:                             # %for.inc311
                                        #   in Loop: Header=BB108_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_87
.LBB108_94:                             # %for.end313
	jmp	.LBB108_95
.LBB108_95:                             # %if.end314
	jmp	.LBB108_96
.LBB108_96:                             # %if.end315
	cmpl	$368983014, -84(%rbp)   # imm = 0x15FE3BE6
	jne	.LBB108_98
.LBB108_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_97
.Lfunc_end108:
	.size	decode_one_b8block.98, .Lfunc_end108-decode_one_b8block.98
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.99       # -- Begin function DecOneForthPix.99
	.p2align	4, 0x90
	.type	DecOneForthPix.99,@function
DecOneForthPix.99:                      # @DecOneForthPix.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$47927389, -12(%rbp)    # imm = 0x2DB505D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB109_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_1
.LBB109_4:                              # %for.end
	cmpl	$47927389, -12(%rbp)    # imm = 0x2DB505D
	jne	.LBB109_6
.LBB109_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_5
.Lfunc_end109:
	.size	DecOneForthPix.99, .Lfunc_end109-DecOneForthPix.99
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.100      # -- Begin function DecOneForthPix.100
	.p2align	4, 0x90
	.type	DecOneForthPix.100,@function
DecOneForthPix.100:                     # @DecOneForthPix.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$127304908, -12(%rbp)   # imm = 0x79684CC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB110_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_1
.LBB110_4:                              # %for.end
	cmpl	$127304908, -12(%rbp)   # imm = 0x79684CC
	jne	.LBB110_6
.LBB110_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_5
.Lfunc_end110:
	.size	DecOneForthPix.100, .Lfunc_end110-DecOneForthPix.100
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.101 # -- Begin function Get_Reference_Block.101
	.p2align	4, 0x90
	.type	Get_Reference_Block.101,@function
Get_Reference_Block.101:                # @Get_Reference_Block.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$937001303, -28(%rbp)   # imm = 0x37D98157
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -4(%rbp)
.LBB111_3:                              # %for.cond5
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_3
.LBB111_6:                              # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_7
.LBB111_7:                              # %for.inc14
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_1
.LBB111_8:                              # %for.end16
	cmpl	$937001303, -28(%rbp)   # imm = 0x37D98157
	jne	.LBB111_10
.LBB111_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_9
.Lfunc_end111:
	.size	Get_Reference_Block.101, .Lfunc_end111-Get_Reference_Block.101
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.102   # -- Begin function Error_Concealment.102
	.p2align	4, 0x90
	.type	Error_Concealment.102,@function
Error_Concealment.102:                  # @Error_Concealment.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$166931616, -20(%rbp)   # imm = 0x9F32CA0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB112_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	$0, -4(%rbp)
.LBB112_3:                              # %for.cond2
                                        #   Parent Loop BB112_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB112_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB112_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB112_6:                              # %if.end
                                        #   in Loop: Header=BB112_3 Depth=2
	jmp	.LBB112_7
.LBB112_7:                              # %for.inc
                                        #   in Loop: Header=BB112_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_3
.LBB112_8:                              # %for.end
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_9
.LBB112_9:                              # %for.inc7
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_1
.LBB112_10:                             # %for.end9
	cmpl	$166931616, -20(%rbp)   # imm = 0x9F32CA0
	jne	.LBB112_12
.LBB112_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_11
.Lfunc_end112:
	.size	Error_Concealment.102, .Lfunc_end112-Error_Concealment.102
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.103   # -- Begin function Error_Concealment.103
	.p2align	4, 0x90
	.type	Error_Concealment.103,@function
Error_Concealment.103:                  # @Error_Concealment.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$941492548, -20(%rbp)   # imm = 0x381E0944
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	$0, -8(%rbp)
.LBB113_3:                              # %for.cond2
                                        #   Parent Loop BB113_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB113_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB113_6:                              # %if.end
                                        #   in Loop: Header=BB113_3 Depth=2
	jmp	.LBB113_7
.LBB113_7:                              # %for.inc
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_3
.LBB113_8:                              # %for.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_9
.LBB113_9:                              # %for.inc7
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_10:                             # %for.end9
	cmpl	$941492548, -20(%rbp)   # imm = 0x381E0944
	jne	.LBB113_12
.LBB113_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_11
.Lfunc_end113:
	.size	Error_Concealment.103, .Lfunc_end113-Error_Concealment.103
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.104 # -- Begin function Get_Reference_Block.104
	.p2align	4, 0x90
	.type	Get_Reference_Block.104,@function
Get_Reference_Block.104:                # @Get_Reference_Block.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$860745933, -20(%rbp)   # imm = 0x334DF0CD
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB114_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	$0, -8(%rbp)
.LBB114_3:                              # %for.cond5
                                        #   Parent Loop BB114_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB114_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_3
.LBB114_6:                              # %for.end
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_7
.LBB114_7:                              # %for.inc14
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_1
.LBB114_8:                              # %for.end16
	cmpl	$860745933, -20(%rbp)   # imm = 0x334DF0CD
	jne	.LBB114_10
.LBB114_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_9
.Lfunc_end114:
	.size	Get_Reference_Block.104, .Lfunc_end114-Get_Reference_Block.104
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.105 # -- Begin function Get_Reference_Pixel.105
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.105,@function
Get_Reference_Pixel.105:                # @Get_Reference_Pixel.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2025793168, -108(%rbp) # imm = 0x78BF2690
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB115_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB115_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB115_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB115_5
.LBB115_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB115_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB115_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB115_11
.LBB115_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB115_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB115_10
.LBB115_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB115_10:                             # %cond.end14
.LBB115_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB115_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB115_14
.LBB115_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB115_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB115_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB115_20
.LBB115_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB115_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB115_19
.LBB115_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB115_19:                             # %cond.end29
.LBB115_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_332
.LBB115_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB115_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB115_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB115_25
.LBB115_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB115_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB115_31
.LBB115_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB115_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB115_30
.LBB115_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB115_30:                             # %cond.end52
.LBB115_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_36
.LBB115_35:                             # %cond.false61
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_36:                             # %cond.end63
                                        #   in Loop: Header=BB115_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB115_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_42
.LBB115_38:                             # %cond.false68
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_41
.LBB115_40:                             # %cond.false73
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_41:                             # %cond.end75
                                        #   in Loop: Header=BB115_32 Depth=1
.LBB115_42:                             # %cond.end77
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_32
.LBB115_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_47
.LBB115_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB115_53
.LBB115_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_52
.LBB115_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_52:                             # %cond.end113
.LBB115_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB115_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB115_57
.LBB115_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB115_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB115_63
.LBB115_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB115_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB115_62
.LBB115_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB115_62:                             # %cond.end136
.LBB115_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_76
.LBB115_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB115_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB115_68
.LBB115_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB115_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB115_74
.LBB115_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB115_73
.LBB115_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB115_73:                             # %cond.end169
.LBB115_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_75:                             # %if.end
	jmp	.LBB115_76
.LBB115_76:                             # %if.end178
	jmp	.LBB115_331
.LBB115_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB115_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB115_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB115_81
.LBB115_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB115_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB115_87
.LBB115_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB115_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB115_86
.LBB115_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB115_86:                             # %cond.end197
.LBB115_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_92
.LBB115_91:                             # %cond.false209
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_92:                             # %cond.end211
                                        #   in Loop: Header=BB115_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB115_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_98
.LBB115_94:                             # %cond.false216
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_97
.LBB115_96:                             # %cond.false221
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_97:                             # %cond.end223
                                        #   in Loop: Header=BB115_88 Depth=1
.LBB115_98:                             # %cond.end225
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_88
.LBB115_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_103
.LBB115_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB115_109
.LBB115_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_108
.LBB115_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_108:                            # %cond.end266
.LBB115_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB115_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB115_113
.LBB115_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB115_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB115_119
.LBB115_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB115_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB115_118
.LBB115_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB115_118:                            # %cond.end287
.LBB115_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_132
.LBB115_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB115_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB115_124
.LBB115_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB115_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB115_130
.LBB115_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB115_129
.LBB115_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB115_129:                            # %cond.end320
.LBB115_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_131:                            # %if.end331
	jmp	.LBB115_132
.LBB115_132:                            # %if.end332
	jmp	.LBB115_330
.LBB115_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB115_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB115_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_139
.LBB115_138:                            # %cond.false345
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_139:                            # %cond.end347
                                        #   in Loop: Header=BB115_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB115_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_145
.LBB115_141:                            # %cond.false352
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_144
.LBB115_143:                            # %cond.false357
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_144:                            # %cond.end359
                                        #   in Loop: Header=BB115_135 Depth=1
.LBB115_145:                            # %cond.end361
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_146:                            # %for.cond363
                                        #   Parent Loop BB115_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB115_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB115_150
.LBB115_149:                            # %cond.false371
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_150:                            # %cond.end373
                                        #   in Loop: Header=BB115_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB115_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_156
.LBB115_152:                            # %cond.false378
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB115_155
.LBB115_154:                            # %cond.false383
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_155:                            # %cond.end385
                                        #   in Loop: Header=BB115_146 Depth=2
.LBB115_156:                            # %cond.end387
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_146
.LBB115_158:                            # %for.end401
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_135
.LBB115_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB115_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB115_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_161
.LBB115_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_167
.LBB115_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB115_173
.LBB115_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_172
.LBB115_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_172:                            # %cond.end449
.LBB115_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_177
.LBB115_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB115_183
.LBB115_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_182
.LBB115_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_182:                            # %cond.end486
.LBB115_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_196
.LBB115_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB115_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_188
.LBB115_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB115_194
.LBB115_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_193
.LBB115_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_193:                            # %cond.end526
.LBB115_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_195:                            # %if.end532
	jmp	.LBB115_196
.LBB115_196:                            # %if.end533
	jmp	.LBB115_329
.LBB115_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB115_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB115_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB115_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_203
.LBB115_202:                            # %cond.false546
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_203:                            # %cond.end548
                                        #   in Loop: Header=BB115_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB115_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_209
.LBB115_205:                            # %cond.false553
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_208
.LBB115_207:                            # %cond.false558
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_208:                            # %cond.end560
                                        #   in Loop: Header=BB115_199 Depth=1
.LBB115_209:                            # %cond.end562
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_210:                            # %for.cond564
                                        #   Parent Loop BB115_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB115_214
.LBB115_213:                            # %cond.false572
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_214:                            # %cond.end574
                                        #   in Loop: Header=BB115_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB115_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_220
.LBB115_216:                            # %cond.false579
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB115_219
.LBB115_218:                            # %cond.false584
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_219:                            # %cond.end586
                                        #   in Loop: Header=BB115_210 Depth=2
.LBB115_220:                            # %cond.end588
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_210
.LBB115_222:                            # %for.end602
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_199
.LBB115_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB115_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB115_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_225
.LBB115_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_231
.LBB115_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB115_237
.LBB115_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_236
.LBB115_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_236:                            # %cond.end650
.LBB115_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_241
.LBB115_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB115_247
.LBB115_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_246
.LBB115_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_246:                            # %cond.end687
.LBB115_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_258
.LBB115_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_251
.LBB115_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB115_257
.LBB115_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_256
.LBB115_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_256:                            # %cond.end724
.LBB115_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_258:                            # %if.end730
	jmp	.LBB115_328
.LBB115_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB115_262
.LBB115_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB115_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB115_265
.LBB115_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB115_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB115_271
.LBB115_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB115_270
.LBB115_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB115_270:                            # %cond.end753
.LBB115_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_276
.LBB115_275:                            # %cond.false765
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_276:                            # %cond.end767
                                        #   in Loop: Header=BB115_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB115_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_282
.LBB115_278:                            # %cond.false772
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_281
.LBB115_280:                            # %cond.false777
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_281:                            # %cond.end779
                                        #   in Loop: Header=BB115_272 Depth=1
.LBB115_282:                            # %cond.end781
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_272
.LBB115_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_287
.LBB115_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB115_293
.LBB115_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_292
.LBB115_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_292:                            # %cond.end822
.LBB115_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB115_296
.LBB115_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB115_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB115_299
.LBB115_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB115_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB115_305
.LBB115_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB115_304
.LBB115_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB115_304:                            # %cond.end847
.LBB115_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_310
.LBB115_309:                            # %cond.false859
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_310:                            # %cond.end861
                                        #   in Loop: Header=BB115_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB115_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_316
.LBB115_312:                            # %cond.false866
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_315
.LBB115_314:                            # %cond.false871
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_315:                            # %cond.end873
                                        #   in Loop: Header=BB115_306 Depth=1
.LBB115_316:                            # %cond.end875
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_306
.LBB115_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_321
.LBB115_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB115_327
.LBB115_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_326
.LBB115_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_326:                            # %cond.end916
.LBB115_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_328:                            # %if.end922
	jmp	.LBB115_329
.LBB115_329:                            # %if.end923
	jmp	.LBB115_330
.LBB115_330:                            # %if.end924
	jmp	.LBB115_331
.LBB115_331:                            # %if.end925
	jmp	.LBB115_332
.LBB115_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2025793168, -108(%rbp) # imm = 0x78BF2690
	jne	.LBB115_334
.LBB115_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_333
.Lfunc_end115:
	.size	Get_Reference_Pixel.105, .Lfunc_end115-Get_Reference_Pixel.105
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.106   # -- Begin function Error_Concealment.106
	.p2align	4, 0x90
	.type	Error_Concealment.106,@function
Error_Concealment.106:                  # @Error_Concealment.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1702366490, -16(%rbp)  # imm = 0x65780D1A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB116_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	$0, -4(%rbp)
.LBB116_3:                              # %for.cond2
                                        #   Parent Loop BB116_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB116_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB116_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB116_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB116_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB116_6:                              # %if.end
                                        #   in Loop: Header=BB116_3 Depth=2
	jmp	.LBB116_7
.LBB116_7:                              # %for.inc
                                        #   in Loop: Header=BB116_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_3
.LBB116_8:                              # %for.end
                                        #   in Loop: Header=BB116_1 Depth=1
	jmp	.LBB116_9
.LBB116_9:                              # %for.inc7
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_1
.LBB116_10:                             # %for.end9
	cmpl	$1702366490, -16(%rbp)  # imm = 0x65780D1A
	jne	.LBB116_12
.LBB116_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_11
.Lfunc_end116:
	.size	Error_Concealment.106, .Lfunc_end116-Error_Concealment.106
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.107       # -- Begin function Conceal_Error.107
	.p2align	4, 0x90
	.type	Conceal_Error.107,@function
Conceal_Error.107:                      # @Conceal_Error.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1357225277, -68(%rbp)  # imm = 0x50E59D3D
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB117_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB117_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB117_4:                              # %land.end
.LBB117_5:                              # %lor.end
.LBB117_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB117_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB117_9
.LBB117_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB117_14
.LBB117_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB117_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB117_12:                             # %land.end51
.LBB117_13:                             # %lor.end53
.LBB117_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB117_180
# %bb.15:                               # %land.end54
	movq	.LJTI117_0(,%rax,8), %rax
	jmpq	*%rax
.LBB117_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB117_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	$0, -4(%rbp)
.LBB117_20:                             # %for.cond68
                                        #   Parent Loop BB117_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB117_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB117_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_20
.LBB117_23:                             # %for.end
                                        #   in Loop: Header=BB117_18 Depth=1
	jmp	.LBB117_24
.LBB117_24:                             # %for.inc85
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_18
.LBB117_25:                             # %for.end87
	jmp	.LBB117_35
.LBB117_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB117_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	$0, -4(%rbp)
.LBB117_29:                             # %for.cond92
                                        #   Parent Loop BB117_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB117_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB117_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_29
.LBB117_32:                             # %for.end104
                                        #   in Loop: Header=BB117_27 Depth=1
	jmp	.LBB117_33
.LBB117_33:                             # %for.inc105
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_27
.LBB117_34:                             # %for.end107
	jmp	.LBB117_35
.LBB117_35:                             # %if.end
	jmp	.LBB117_180
.LBB117_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB117_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_39 Depth 2
                                        #       Child Loop BB117_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB117_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	$0, -12(%rbp)
.LBB117_39:                             # %for.cond113
                                        #   Parent Loop BB117_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB117_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	$0, -4(%rbp)
.LBB117_41:                             # %for.cond117
                                        #   Parent Loop BB117_37 Depth=1
                                        #     Parent Loop BB117_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB117_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB117_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB117_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_41
.LBB117_44:                             # %for.end141
                                        #   in Loop: Header=BB117_39 Depth=2
	jmp	.LBB117_45
.LBB117_45:                             # %for.inc142
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_39
.LBB117_46:                             # %for.end144
                                        #   in Loop: Header=BB117_37 Depth=1
	jmp	.LBB117_47
.LBB117_47:                             # %for.inc145
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_37
.LBB117_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB117_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	$0, -8(%rbp)
.LBB117_51:                             # %for.cond152
                                        #   Parent Loop BB117_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB117_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB117_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_51
.LBB117_54:                             # %for.end162
                                        #   in Loop: Header=BB117_49 Depth=1
	jmp	.LBB117_55
.LBB117_55:                             # %for.inc163
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_49
.LBB117_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB117_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB117_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB117_59 Depth=1
	movl	$0, -4(%rbp)
.LBB117_61:                             # %for.cond175
                                        #   Parent Loop BB117_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB117_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB117_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_61
.LBB117_64:                             # %for.end195
                                        #   in Loop: Header=BB117_59 Depth=1
	jmp	.LBB117_65
.LBB117_65:                             # %for.inc196
                                        #   in Loop: Header=BB117_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_59
.LBB117_66:                             # %for.end198
	jmp	.LBB117_95
.LBB117_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB117_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB117_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_71 Depth 2
                                        #       Child Loop BB117_73 Depth 3
                                        #         Child Loop BB117_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB117_71:                             # %for.cond210
                                        #   Parent Loop BB117_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_73 Depth 3
                                        #         Child Loop BB117_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB117_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB117_73:                             # %for.cond236
                                        #   Parent Loop BB117_69 Depth=1
                                        #     Parent Loop BB117_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB117_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB117_73 Depth=3
	movl	$0, -4(%rbp)
.LBB117_75:                             # %for.cond240
                                        #   Parent Loop BB117_69 Depth=1
                                        #     Parent Loop BB117_71 Depth=2
                                        #       Parent Loop BB117_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB117_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB117_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB117_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_75
.LBB117_78:                             # %for.end259
                                        #   in Loop: Header=BB117_73 Depth=3
	jmp	.LBB117_79
.LBB117_79:                             # %for.inc260
                                        #   in Loop: Header=BB117_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_73
.LBB117_80:                             # %for.end262
                                        #   in Loop: Header=BB117_71 Depth=2
	jmp	.LBB117_81
.LBB117_81:                             # %for.inc263
                                        #   in Loop: Header=BB117_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_71
.LBB117_82:                             # %for.end265
                                        #   in Loop: Header=BB117_69 Depth=1
	jmp	.LBB117_83
.LBB117_83:                             # %for.inc266
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_69
.LBB117_84:                             # %for.end268
	jmp	.LBB117_94
.LBB117_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB117_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB117_86 Depth=1
	movl	$0, -4(%rbp)
.LBB117_88:                             # %for.cond274
                                        #   Parent Loop BB117_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB117_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB117_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_88
.LBB117_91:                             # %for.end294
                                        #   in Loop: Header=BB117_86 Depth=1
	jmp	.LBB117_92
.LBB117_92:                             # %for.inc295
                                        #   in Loop: Header=BB117_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_86
.LBB117_93:                             # %for.end297
	jmp	.LBB117_94
.LBB117_94:                             # %if.end298
	jmp	.LBB117_95
.LBB117_95:                             # %if.end299
	jmp	.LBB117_105
.LBB117_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB117_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB117_97 Depth=1
	movl	$0, -4(%rbp)
.LBB117_99:                             # %for.cond305
                                        #   Parent Loop BB117_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB117_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB117_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_99
.LBB117_102:                            # %for.end317
                                        #   in Loop: Header=BB117_97 Depth=1
	jmp	.LBB117_103
.LBB117_103:                            # %for.inc318
                                        #   in Loop: Header=BB117_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_97
.LBB117_104:                            # %for.end320
	jmp	.LBB117_105
.LBB117_105:                            # %if.end321
	jmp	.LBB117_180
.LBB117_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB117_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_110 Depth 2
                                        #       Child Loop BB117_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB117_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB117_108 Depth=1
	movl	$0, -12(%rbp)
.LBB117_110:                            # %for.cond331
                                        #   Parent Loop BB117_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB117_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB117_110 Depth=2
	movl	$0, -4(%rbp)
.LBB117_112:                            # %for.cond335
                                        #   Parent Loop BB117_108 Depth=1
                                        #     Parent Loop BB117_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB117_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB117_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB117_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_112
.LBB117_115:                            # %for.end359
                                        #   in Loop: Header=BB117_110 Depth=2
	jmp	.LBB117_116
.LBB117_116:                            # %for.inc360
                                        #   in Loop: Header=BB117_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_110
.LBB117_117:                            # %for.end362
                                        #   in Loop: Header=BB117_108 Depth=1
	jmp	.LBB117_118
.LBB117_118:                            # %for.inc363
                                        #   in Loop: Header=BB117_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_108
.LBB117_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB117_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB117_120 Depth=1
	movl	$0, -8(%rbp)
.LBB117_122:                            # %for.cond370
                                        #   Parent Loop BB117_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB117_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB117_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_122
.LBB117_125:                            # %for.end380
                                        #   in Loop: Header=BB117_120 Depth=1
	jmp	.LBB117_126
.LBB117_126:                            # %for.inc381
                                        #   in Loop: Header=BB117_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_120
.LBB117_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB117_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB117_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB117_129 Depth=1
	movl	$0, -4(%rbp)
.LBB117_131:                            # %for.cond390
                                        #   Parent Loop BB117_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB117_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB117_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_131
.LBB117_134:                            # %for.end410
                                        #   in Loop: Header=BB117_129 Depth=1
	jmp	.LBB117_135
.LBB117_135:                            # %for.inc411
                                        #   in Loop: Header=BB117_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_129
.LBB117_136:                            # %for.end413
	jmp	.LBB117_156
.LBB117_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB117_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB117_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_141 Depth 2
                                        #       Child Loop BB117_143 Depth 3
                                        #         Child Loop BB117_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB117_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB117_141:                            # %for.cond425
                                        #   Parent Loop BB117_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_143 Depth 3
                                        #         Child Loop BB117_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB117_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB117_143:                            # %for.cond452
                                        #   Parent Loop BB117_139 Depth=1
                                        #     Parent Loop BB117_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB117_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB117_143 Depth=3
	movl	$0, -4(%rbp)
.LBB117_145:                            # %for.cond456
                                        #   Parent Loop BB117_139 Depth=1
                                        #     Parent Loop BB117_141 Depth=2
                                        #       Parent Loop BB117_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB117_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB117_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB117_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_145
.LBB117_148:                            # %for.end475
                                        #   in Loop: Header=BB117_143 Depth=3
	jmp	.LBB117_149
.LBB117_149:                            # %for.inc476
                                        #   in Loop: Header=BB117_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_143
.LBB117_150:                            # %for.end478
                                        #   in Loop: Header=BB117_141 Depth=2
	jmp	.LBB117_151
.LBB117_151:                            # %for.inc479
                                        #   in Loop: Header=BB117_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_141
.LBB117_152:                            # %for.end481
                                        #   in Loop: Header=BB117_139 Depth=1
	jmp	.LBB117_153
.LBB117_153:                            # %for.inc482
                                        #   in Loop: Header=BB117_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_139
.LBB117_154:                            # %for.end484
	jmp	.LBB117_155
.LBB117_155:                            # %if.end485
	jmp	.LBB117_156
.LBB117_156:                            # %if.end486
	jmp	.LBB117_157
.LBB117_157:                            # %if.end487
	jmp	.LBB117_180
.LBB117_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB117_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB117_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB117_161 Depth=1
	movl	$0, -4(%rbp)
.LBB117_163:                            # %for.cond499
                                        #   Parent Loop BB117_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB117_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB117_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_163
.LBB117_166:                            # %for.end519
                                        #   in Loop: Header=BB117_161 Depth=1
	jmp	.LBB117_167
.LBB117_167:                            # %for.inc520
                                        #   in Loop: Header=BB117_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_161
.LBB117_168:                            # %for.end522
	jmp	.LBB117_169
.LBB117_169:                            # %if.end523
	jmp	.LBB117_179
.LBB117_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB117_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -4(%rbp)
.LBB117_173:                            # %for.cond529
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB117_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB117_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_173
.LBB117_176:                            # %for.end541
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_177
.LBB117_177:                            # %for.inc542
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_171
.LBB117_178:                            # %for.end544
	jmp	.LBB117_179
.LBB117_179:                            # %if.end545
	jmp	.LBB117_180
.LBB117_180:                            # %sw.epilog
	cmpl	$1357225277, -68(%rbp)  # imm = 0x50E59D3D
	jne	.LBB117_182
.LBB117_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_181
.Lfunc_end117:
	.size	Conceal_Error.107, .Lfunc_end117-Conceal_Error.107
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI117_0:
	.quad	.LBB117_16
	.quad	.LBB117_158
	.quad	.LBB117_106
	.quad	.LBB117_180
	.quad	.LBB117_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.108 # -- Begin function Get_Reference_Block.108
	.p2align	4, 0x90
	.type	Get_Reference_Block.108,@function
Get_Reference_Block.108:                # @Get_Reference_Block.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$178524011, -32(%rbp)   # imm = 0xAA40F6B
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	$0, -4(%rbp)
.LBB118_3:                              # %for.cond5
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_3
.LBB118_6:                              # %for.end
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_7
.LBB118_7:                              # %for.inc14
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_1
.LBB118_8:                              # %for.end16
	cmpl	$178524011, -32(%rbp)   # imm = 0xAA40F6B
	jne	.LBB118_10
.LBB118_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_9
.Lfunc_end118:
	.size	Get_Reference_Block.108, .Lfunc_end118-Get_Reference_Block.108
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.109 # -- Begin function Get_Reference_Block.109
	.p2align	4, 0x90
	.type	Get_Reference_Block.109,@function
Get_Reference_Block.109:                # @Get_Reference_Block.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$472071279, -32(%rbp)   # imm = 0x1C233C6F
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB119_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -4(%rbp)
.LBB119_3:                              # %for.cond5
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB119_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_3
.LBB119_6:                              # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_7
.LBB119_7:                              # %for.inc14
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_1
.LBB119_8:                              # %for.end16
	cmpl	$472071279, -32(%rbp)   # imm = 0x1C233C6F
	jne	.LBB119_10
.LBB119_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_9
.Lfunc_end119:
	.size	Get_Reference_Block.109, .Lfunc_end119-Get_Reference_Block.109
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.110       # -- Begin function Conceal_Error.110
	.p2align	4, 0x90
	.type	Conceal_Error.110,@function
Conceal_Error.110:                      # @Conceal_Error.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1024646069, -68(%rbp)  # imm = 0x3D12DBB5
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB120_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB120_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB120_4:                              # %land.end
.LBB120_5:                              # %lor.end
.LBB120_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB120_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB120_9
.LBB120_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB120_14
.LBB120_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB120_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB120_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB120_12:                             # %land.end51
.LBB120_13:                             # %lor.end53
.LBB120_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB120_180
# %bb.15:                               # %land.end54
	movq	.LJTI120_0(,%rax,8), %rax
	jmpq	*%rax
.LBB120_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB120_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	$0, -4(%rbp)
.LBB120_20:                             # %for.cond68
                                        #   Parent Loop BB120_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB120_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB120_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_20
.LBB120_23:                             # %for.end
                                        #   in Loop: Header=BB120_18 Depth=1
	jmp	.LBB120_24
.LBB120_24:                             # %for.inc85
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_18
.LBB120_25:                             # %for.end87
	jmp	.LBB120_35
.LBB120_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB120_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB120_27 Depth=1
	movl	$0, -4(%rbp)
.LBB120_29:                             # %for.cond92
                                        #   Parent Loop BB120_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB120_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB120_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_29
.LBB120_32:                             # %for.end104
                                        #   in Loop: Header=BB120_27 Depth=1
	jmp	.LBB120_33
.LBB120_33:                             # %for.inc105
                                        #   in Loop: Header=BB120_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_27
.LBB120_34:                             # %for.end107
	jmp	.LBB120_35
.LBB120_35:                             # %if.end
	jmp	.LBB120_180
.LBB120_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB120_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_39 Depth 2
                                        #       Child Loop BB120_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB120_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB120_37 Depth=1
	movl	$0, -16(%rbp)
.LBB120_39:                             # %for.cond113
                                        #   Parent Loop BB120_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB120_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB120_39 Depth=2
	movl	$0, -4(%rbp)
.LBB120_41:                             # %for.cond117
                                        #   Parent Loop BB120_37 Depth=1
                                        #     Parent Loop BB120_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB120_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB120_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB120_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_41
.LBB120_44:                             # %for.end141
                                        #   in Loop: Header=BB120_39 Depth=2
	jmp	.LBB120_45
.LBB120_45:                             # %for.inc142
                                        #   in Loop: Header=BB120_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_39
.LBB120_46:                             # %for.end144
                                        #   in Loop: Header=BB120_37 Depth=1
	jmp	.LBB120_47
.LBB120_47:                             # %for.inc145
                                        #   in Loop: Header=BB120_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_37
.LBB120_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB120_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	$0, -8(%rbp)
.LBB120_51:                             # %for.cond152
                                        #   Parent Loop BB120_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB120_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB120_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_51
.LBB120_54:                             # %for.end162
                                        #   in Loop: Header=BB120_49 Depth=1
	jmp	.LBB120_55
.LBB120_55:                             # %for.inc163
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_49
.LBB120_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB120_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB120_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB120_59 Depth=1
	movl	$0, -4(%rbp)
.LBB120_61:                             # %for.cond175
                                        #   Parent Loop BB120_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB120_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB120_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_61
.LBB120_64:                             # %for.end195
                                        #   in Loop: Header=BB120_59 Depth=1
	jmp	.LBB120_65
.LBB120_65:                             # %for.inc196
                                        #   in Loop: Header=BB120_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_59
.LBB120_66:                             # %for.end198
	jmp	.LBB120_95
.LBB120_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB120_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB120_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_71 Depth 2
                                        #       Child Loop BB120_73 Depth 3
                                        #         Child Loop BB120_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB120_71:                             # %for.cond210
                                        #   Parent Loop BB120_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_73 Depth 3
                                        #         Child Loop BB120_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB120_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB120_73:                             # %for.cond236
                                        #   Parent Loop BB120_69 Depth=1
                                        #     Parent Loop BB120_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB120_73 Depth=3
	movl	$0, -4(%rbp)
.LBB120_75:                             # %for.cond240
                                        #   Parent Loop BB120_69 Depth=1
                                        #     Parent Loop BB120_71 Depth=2
                                        #       Parent Loop BB120_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB120_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB120_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB120_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_75
.LBB120_78:                             # %for.end259
                                        #   in Loop: Header=BB120_73 Depth=3
	jmp	.LBB120_79
.LBB120_79:                             # %for.inc260
                                        #   in Loop: Header=BB120_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_73
.LBB120_80:                             # %for.end262
                                        #   in Loop: Header=BB120_71 Depth=2
	jmp	.LBB120_81
.LBB120_81:                             # %for.inc263
                                        #   in Loop: Header=BB120_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_71
.LBB120_82:                             # %for.end265
                                        #   in Loop: Header=BB120_69 Depth=1
	jmp	.LBB120_83
.LBB120_83:                             # %for.inc266
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_69
.LBB120_84:                             # %for.end268
	jmp	.LBB120_94
.LBB120_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB120_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB120_86 Depth=1
	movl	$0, -4(%rbp)
.LBB120_88:                             # %for.cond274
                                        #   Parent Loop BB120_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB120_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB120_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_88
.LBB120_91:                             # %for.end294
                                        #   in Loop: Header=BB120_86 Depth=1
	jmp	.LBB120_92
.LBB120_92:                             # %for.inc295
                                        #   in Loop: Header=BB120_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_86
.LBB120_93:                             # %for.end297
	jmp	.LBB120_94
.LBB120_94:                             # %if.end298
	jmp	.LBB120_95
.LBB120_95:                             # %if.end299
	jmp	.LBB120_105
.LBB120_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB120_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB120_97 Depth=1
	movl	$0, -4(%rbp)
.LBB120_99:                             # %for.cond305
                                        #   Parent Loop BB120_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB120_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB120_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_99
.LBB120_102:                            # %for.end317
                                        #   in Loop: Header=BB120_97 Depth=1
	jmp	.LBB120_103
.LBB120_103:                            # %for.inc318
                                        #   in Loop: Header=BB120_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_97
.LBB120_104:                            # %for.end320
	jmp	.LBB120_105
.LBB120_105:                            # %if.end321
	jmp	.LBB120_180
.LBB120_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB120_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_110 Depth 2
                                        #       Child Loop BB120_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB120_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB120_108 Depth=1
	movl	$0, -16(%rbp)
.LBB120_110:                            # %for.cond331
                                        #   Parent Loop BB120_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB120_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB120_110 Depth=2
	movl	$0, -4(%rbp)
.LBB120_112:                            # %for.cond335
                                        #   Parent Loop BB120_108 Depth=1
                                        #     Parent Loop BB120_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB120_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB120_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB120_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_112
.LBB120_115:                            # %for.end359
                                        #   in Loop: Header=BB120_110 Depth=2
	jmp	.LBB120_116
.LBB120_116:                            # %for.inc360
                                        #   in Loop: Header=BB120_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_110
.LBB120_117:                            # %for.end362
                                        #   in Loop: Header=BB120_108 Depth=1
	jmp	.LBB120_118
.LBB120_118:                            # %for.inc363
                                        #   in Loop: Header=BB120_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_108
.LBB120_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB120_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	$0, -8(%rbp)
.LBB120_122:                            # %for.cond370
                                        #   Parent Loop BB120_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB120_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB120_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_122
.LBB120_125:                            # %for.end380
                                        #   in Loop: Header=BB120_120 Depth=1
	jmp	.LBB120_126
.LBB120_126:                            # %for.inc381
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_120
.LBB120_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB120_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB120_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB120_129 Depth=1
	movl	$0, -4(%rbp)
.LBB120_131:                            # %for.cond390
                                        #   Parent Loop BB120_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB120_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB120_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_131
.LBB120_134:                            # %for.end410
                                        #   in Loop: Header=BB120_129 Depth=1
	jmp	.LBB120_135
.LBB120_135:                            # %for.inc411
                                        #   in Loop: Header=BB120_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_129
.LBB120_136:                            # %for.end413
	jmp	.LBB120_156
.LBB120_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB120_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB120_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_141 Depth 2
                                        #       Child Loop BB120_143 Depth 3
                                        #         Child Loop BB120_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB120_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB120_141:                            # %for.cond425
                                        #   Parent Loop BB120_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_143 Depth 3
                                        #         Child Loop BB120_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB120_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB120_143:                            # %for.cond452
                                        #   Parent Loop BB120_139 Depth=1
                                        #     Parent Loop BB120_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB120_143 Depth=3
	movl	$0, -4(%rbp)
.LBB120_145:                            # %for.cond456
                                        #   Parent Loop BB120_139 Depth=1
                                        #     Parent Loop BB120_141 Depth=2
                                        #       Parent Loop BB120_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB120_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB120_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB120_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_145
.LBB120_148:                            # %for.end475
                                        #   in Loop: Header=BB120_143 Depth=3
	jmp	.LBB120_149
.LBB120_149:                            # %for.inc476
                                        #   in Loop: Header=BB120_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_143
.LBB120_150:                            # %for.end478
                                        #   in Loop: Header=BB120_141 Depth=2
	jmp	.LBB120_151
.LBB120_151:                            # %for.inc479
                                        #   in Loop: Header=BB120_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_141
.LBB120_152:                            # %for.end481
                                        #   in Loop: Header=BB120_139 Depth=1
	jmp	.LBB120_153
.LBB120_153:                            # %for.inc482
                                        #   in Loop: Header=BB120_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_139
.LBB120_154:                            # %for.end484
	jmp	.LBB120_155
.LBB120_155:                            # %if.end485
	jmp	.LBB120_156
.LBB120_156:                            # %if.end486
	jmp	.LBB120_157
.LBB120_157:                            # %if.end487
	jmp	.LBB120_180
.LBB120_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB120_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB120_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	$0, -4(%rbp)
.LBB120_163:                            # %for.cond499
                                        #   Parent Loop BB120_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB120_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB120_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_163
.LBB120_166:                            # %for.end519
                                        #   in Loop: Header=BB120_161 Depth=1
	jmp	.LBB120_167
.LBB120_167:                            # %for.inc520
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_161
.LBB120_168:                            # %for.end522
	jmp	.LBB120_169
.LBB120_169:                            # %if.end523
	jmp	.LBB120_179
.LBB120_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB120_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -4(%rbp)
.LBB120_173:                            # %for.cond529
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB120_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB120_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_173
.LBB120_176:                            # %for.end541
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_177
.LBB120_177:                            # %for.inc542
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_171
.LBB120_178:                            # %for.end544
	jmp	.LBB120_179
.LBB120_179:                            # %if.end545
	jmp	.LBB120_180
.LBB120_180:                            # %sw.epilog
	cmpl	$1024646069, -68(%rbp)  # imm = 0x3D12DBB5
	jne	.LBB120_182
.LBB120_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_181
.Lfunc_end120:
	.size	Conceal_Error.110, .Lfunc_end120-Conceal_Error.110
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI120_0:
	.quad	.LBB120_16
	.quad	.LBB120_158
	.quad	.LBB120_106
	.quad	.LBB120_180
	.quad	.LBB120_36
                                        # -- End function
	.text
	.globl	Error_Concealment.111   # -- Begin function Error_Concealment.111
	.p2align	4, 0x90
	.type	Error_Concealment.111,@function
Error_Concealment.111:                  # @Error_Concealment.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1974587796, -12(%rbp)  # imm = 0x75B1D194
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB121_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -4(%rbp)
.LBB121_3:                              # %for.cond2
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB121_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB121_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB121_6:                              # %if.end
                                        #   in Loop: Header=BB121_3 Depth=2
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_8:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_9
.LBB121_9:                              # %for.inc7
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_1
.LBB121_10:                             # %for.end9
	cmpl	$1974587796, -12(%rbp)  # imm = 0x75B1D194
	jne	.LBB121_12
.LBB121_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_11
.Lfunc_end121:
	.size	Error_Concealment.111, .Lfunc_end121-Error_Concealment.111
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.112 # -- Begin function Get_Reference_Block.112
	.p2align	4, 0x90
	.type	Get_Reference_Block.112,@function
Get_Reference_Block.112:                # @Get_Reference_Block.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$722781548, -36(%rbp)   # imm = 0x2B14C56C
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB122_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -4(%rbp)
.LBB122_3:                              # %for.cond5
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB122_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_3
.LBB122_6:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc14
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_1
.LBB122_8:                              # %for.end16
	cmpl	$722781548, -36(%rbp)   # imm = 0x2B14C56C
	jne	.LBB122_10
.LBB122_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_9
.Lfunc_end122:
	.size	Get_Reference_Block.112, .Lfunc_end122-Get_Reference_Block.112
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.113   # -- Begin function Error_Concealment.113
	.p2align	4, 0x90
	.type	Error_Concealment.113,@function
Error_Concealment.113:                  # @Error_Concealment.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1951751700, -20(%rbp)  # imm = 0x74555E14
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	$0, -4(%rbp)
.LBB123_3:                              # %for.cond2
                                        #   Parent Loop BB123_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB123_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB123_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB123_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB123_6:                              # %if.end
                                        #   in Loop: Header=BB123_3 Depth=2
	jmp	.LBB123_7
.LBB123_7:                              # %for.inc
                                        #   in Loop: Header=BB123_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_3
.LBB123_8:                              # %for.end
                                        #   in Loop: Header=BB123_1 Depth=1
	jmp	.LBB123_9
.LBB123_9:                              # %for.inc7
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_1
.LBB123_10:                             # %for.end9
	cmpl	$1951751700, -20(%rbp)  # imm = 0x74555E14
	jne	.LBB123_12
.LBB123_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_11
.Lfunc_end123:
	.size	Error_Concealment.113, .Lfunc_end123-Error_Concealment.113
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.114   # -- Begin function Error_Concealment.114
	.p2align	4, 0x90
	.type	Error_Concealment.114,@function
Error_Concealment.114:                  # @Error_Concealment.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$829941172, -16(%rbp)   # imm = 0x3177E5B4
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB124_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	$0, -8(%rbp)
.LBB124_3:                              # %for.cond2
                                        #   Parent Loop BB124_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB124_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB124_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB124_6:                              # %if.end
                                        #   in Loop: Header=BB124_3 Depth=2
	jmp	.LBB124_7
.LBB124_7:                              # %for.inc
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_3
.LBB124_8:                              # %for.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_9
.LBB124_9:                              # %for.inc7
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_10:                             # %for.end9
	cmpl	$829941172, -16(%rbp)   # imm = 0x3177E5B4
	jne	.LBB124_12
.LBB124_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_11
.Lfunc_end124:
	.size	Error_Concealment.114, .Lfunc_end124-Error_Concealment.114
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.115
.LCPI125_0:
	.quad	4636737291354636288     # double 100
.LCPI125_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.115
	.p2align	4, 0x90
	.type	Build_Status_Map.115,@function
Build_Status_Map.115:                   # @Build_Status_Map.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1025427874, -44(%rbp)  # imm = 0x3D1EC9A2
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB125_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	$0, -12(%rbp)
.LBB125_3:                              # %for.cond2
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB125_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB125_13
.LBB125_6:                              # %if.then
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB125_8:                              # %if.end
                                        #   in Loop: Header=BB125_3 Depth=2
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB125_10:                             # %if.end20
                                        #   in Loop: Header=BB125_3 Depth=2
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	$1, -4(%rbp)
.LBB125_12:                             # %if.end29
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB125_13:                             # %if.end30
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB125_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB125_18
.LBB125_15:                             # %if.else
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB125_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB125_17:                             # %if.end49
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_18
.LBB125_18:                             # %if.end50
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_3
.LBB125_20:                             # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_21
.LBB125_21:                             # %for.inc53
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_1
.LBB125_22:                             # %for.end55
	cmpl	$1025427874, -44(%rbp)  # imm = 0x3D1EC9A2
	jne	.LBB125_24
.LBB125_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_23
.Lfunc_end125:
	.size	Build_Status_Map.115, .Lfunc_end125-Build_Status_Map.115
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.116
.LCPI126_0:
	.quad	4636737291354636288     # double 100
.LCPI126_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.116
	.p2align	4, 0x90
	.type	Build_Status_Map.116,@function
Build_Status_Map.116:                   # @Build_Status_Map.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$702632022, -36(%rbp)   # imm = 0x29E15056
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB126_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	$0, -8(%rbp)
.LBB126_3:                              # %for.cond2
                                        #   Parent Loop BB126_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB126_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB126_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB126_13
.LBB126_6:                              # %if.then
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI126_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI126_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB126_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB126_8:                              # %if.end
                                        #   in Loop: Header=BB126_3 Depth=2
	callq	rand
	vmovsd	.LCPI126_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI126_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB126_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB126_10:                             # %if.end20
                                        #   in Loop: Header=BB126_3 Depth=2
	callq	rand
	vmovsd	.LCPI126_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI126_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB126_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	$1, -4(%rbp)
.LBB126_12:                             # %if.end29
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB126_13:                             # %if.end30
                                        #   in Loop: Header=BB126_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB126_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB126_18
.LBB126_15:                             # %if.else
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB126_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB126_17:                             # %if.end49
                                        #   in Loop: Header=BB126_3 Depth=2
	jmp	.LBB126_18
.LBB126_18:                             # %if.end50
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_3
.LBB126_20:                             # %for.end
                                        #   in Loop: Header=BB126_1 Depth=1
	jmp	.LBB126_21
.LBB126_21:                             # %for.inc53
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_1
.LBB126_22:                             # %for.end55
	cmpl	$702632022, -36(%rbp)   # imm = 0x29E15056
	jne	.LBB126_24
.LBB126_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_23
.Lfunc_end126:
	.size	Build_Status_Map.116, .Lfunc_end126-Build_Status_Map.116
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.117
.LCPI127_0:
	.quad	4636737291354636288     # double 100
.LCPI127_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.117
	.p2align	4, 0x90
	.type	Build_Status_Map.117,@function
Build_Status_Map.117:                   # @Build_Status_Map.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1072029384, -36(%rbp)  # imm = 0x3FE5DEC8
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond2
                                        #   Parent Loop BB127_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB127_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB127_13
.LBB127_6:                              # %if.then
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB127_8:                              # %if.end
                                        #   in Loop: Header=BB127_3 Depth=2
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB127_10:                             # %if.end20
                                        #   in Loop: Header=BB127_3 Depth=2
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	$1, -4(%rbp)
.LBB127_12:                             # %if.end29
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB127_13:                             # %if.end30
                                        #   in Loop: Header=BB127_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB127_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB127_18
.LBB127_15:                             # %if.else
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB127_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB127_17:                             # %if.end49
                                        #   in Loop: Header=BB127_3 Depth=2
	jmp	.LBB127_18
.LBB127_18:                             # %if.end50
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_20:                             # %for.end
                                        #   in Loop: Header=BB127_1 Depth=1
	jmp	.LBB127_21
.LBB127_21:                             # %for.inc53
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_1
.LBB127_22:                             # %for.end55
	cmpl	$1072029384, -36(%rbp)  # imm = 0x3FE5DEC8
	jne	.LBB127_24
.LBB127_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_23
.Lfunc_end127:
	.size	Build_Status_Map.117, .Lfunc_end127-Build_Status_Map.117
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.118
.LCPI128_0:
	.quad	4636737291354636288     # double 100
.LCPI128_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.118
	.p2align	4, 0x90
	.type	Build_Status_Map.118,@function
Build_Status_Map.118:                   # @Build_Status_Map.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$978427156, -36(%rbp)   # imm = 0x3A519D14
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB128_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -12(%rbp)
.LBB128_3:                              # %for.cond2
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB128_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB128_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB128_13
.LBB128_6:                              # %if.then
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI128_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB128_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB128_8:                              # %if.end
                                        #   in Loop: Header=BB128_3 Depth=2
	callq	rand
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI128_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB128_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB128_10:                             # %if.end20
                                        #   in Loop: Header=BB128_3 Depth=2
	callq	rand
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI128_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB128_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	$1, -4(%rbp)
.LBB128_12:                             # %if.end29
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB128_13:                             # %if.end30
                                        #   in Loop: Header=BB128_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB128_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB128_18
.LBB128_15:                             # %if.else
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB128_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB128_17:                             # %if.end49
                                        #   in Loop: Header=BB128_3 Depth=2
	jmp	.LBB128_18
.LBB128_18:                             # %if.end50
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_3
.LBB128_20:                             # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_21
.LBB128_21:                             # %for.inc53
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_1
.LBB128_22:                             # %for.end55
	cmpl	$978427156, -36(%rbp)   # imm = 0x3A519D14
	jne	.LBB128_24
.LBB128_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_23
.Lfunc_end128:
	.size	Build_Status_Map.118, .Lfunc_end128-Build_Status_Map.118
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.119 # -- Begin function Get_Reference_Block.119
	.p2align	4, 0x90
	.type	Get_Reference_Block.119,@function
Get_Reference_Block.119:                # @Get_Reference_Block.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1666213047, -12(%rbp)  # imm = 0x635064B7
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	$0, -4(%rbp)
.LBB129_3:                              # %for.cond5
                                        #   Parent Loop BB129_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_3
.LBB129_6:                              # %for.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_7
.LBB129_7:                              # %for.inc14
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_1
.LBB129_8:                              # %for.end16
	cmpl	$1666213047, -12(%rbp)  # imm = 0x635064B7
	jne	.LBB129_10
.LBB129_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_9
.Lfunc_end129:
	.size	Get_Reference_Block.119, .Lfunc_end129-Get_Reference_Block.119
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.120   # -- Begin function Error_Concealment.120
	.p2align	4, 0x90
	.type	Error_Concealment.120,@function
Error_Concealment.120:                  # @Error_Concealment.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1426946435, -20(%rbp)  # imm = 0x550D7983
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB130_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	$0, -4(%rbp)
.LBB130_3:                              # %for.cond2
                                        #   Parent Loop BB130_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB130_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB130_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB130_6:                              # %if.end
                                        #   in Loop: Header=BB130_3 Depth=2
	jmp	.LBB130_7
.LBB130_7:                              # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_3
.LBB130_8:                              # %for.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_9
.LBB130_9:                              # %for.inc7
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_1
.LBB130_10:                             # %for.end9
	cmpl	$1426946435, -20(%rbp)  # imm = 0x550D7983
	jne	.LBB130_12
.LBB130_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_11
.Lfunc_end130:
	.size	Error_Concealment.120, .Lfunc_end130-Error_Concealment.120
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.121 # -- Begin function Get_Reference_Pixel.121
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.121,@function
Get_Reference_Pixel.121:                # @Get_Reference_Pixel.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2002706146, -108(%rbp) # imm = 0x775EDEE2
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB131_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB131_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB131_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB131_5
.LBB131_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB131_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB131_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB131_11
.LBB131_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB131_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB131_10
.LBB131_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB131_10:                             # %cond.end14
.LBB131_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB131_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB131_14
.LBB131_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB131_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB131_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB131_20
.LBB131_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB131_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB131_19
.LBB131_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB131_19:                             # %cond.end29
.LBB131_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_332
.LBB131_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB131_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB131_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB131_25
.LBB131_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB131_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB131_31
.LBB131_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB131_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB131_30
.LBB131_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB131_30:                             # %cond.end52
.LBB131_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB131_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB131_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_36
.LBB131_35:                             # %cond.false61
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_36:                             # %cond.end63
                                        #   in Loop: Header=BB131_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB131_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_42
.LBB131_38:                             # %cond.false68
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_41
.LBB131_40:                             # %cond.false73
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_41:                             # %cond.end75
                                        #   in Loop: Header=BB131_32 Depth=1
.LBB131_42:                             # %cond.end77
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB131_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_32
.LBB131_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_47
.LBB131_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB131_53
.LBB131_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_52
.LBB131_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_52:                             # %cond.end113
.LBB131_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB131_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB131_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB131_57
.LBB131_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB131_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB131_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB131_63
.LBB131_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB131_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB131_62
.LBB131_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB131_62:                             # %cond.end136
.LBB131_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB131_76
.LBB131_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB131_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB131_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB131_68
.LBB131_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB131_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB131_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB131_74
.LBB131_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB131_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB131_73
.LBB131_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB131_73:                             # %cond.end169
.LBB131_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_75:                             # %if.end
	jmp	.LBB131_76
.LBB131_76:                             # %if.end178
	jmp	.LBB131_331
.LBB131_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB131_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB131_81
.LBB131_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB131_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB131_87
.LBB131_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB131_86
.LBB131_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB131_86:                             # %cond.end197
.LBB131_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB131_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB131_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_92
.LBB131_91:                             # %cond.false209
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_92:                             # %cond.end211
                                        #   in Loop: Header=BB131_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB131_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_98
.LBB131_94:                             # %cond.false216
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_97
.LBB131_96:                             # %cond.false221
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_97:                             # %cond.end223
                                        #   in Loop: Header=BB131_88 Depth=1
.LBB131_98:                             # %cond.end225
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB131_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_88
.LBB131_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_103
.LBB131_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB131_109
.LBB131_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_108
.LBB131_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_108:                            # %cond.end266
.LBB131_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB131_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB131_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB131_113
.LBB131_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB131_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB131_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB131_119
.LBB131_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB131_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB131_118
.LBB131_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB131_118:                            # %cond.end287
.LBB131_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB131_132
.LBB131_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB131_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB131_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB131_124
.LBB131_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB131_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB131_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB131_130
.LBB131_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB131_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB131_129
.LBB131_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB131_129:                            # %cond.end320
.LBB131_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_131:                            # %if.end331
	jmp	.LBB131_132
.LBB131_132:                            # %if.end332
	jmp	.LBB131_330
.LBB131_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB131_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB131_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB131_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_139
.LBB131_138:                            # %cond.false345
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_139:                            # %cond.end347
                                        #   in Loop: Header=BB131_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB131_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_145
.LBB131_141:                            # %cond.false352
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_144
.LBB131_143:                            # %cond.false357
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_144:                            # %cond.end359
                                        #   in Loop: Header=BB131_135 Depth=1
.LBB131_145:                            # %cond.end361
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB131_146:                            # %for.cond363
                                        #   Parent Loop BB131_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB131_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB131_150
.LBB131_149:                            # %cond.false371
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_150:                            # %cond.end373
                                        #   in Loop: Header=BB131_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB131_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB131_156
.LBB131_152:                            # %cond.false378
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB131_155
.LBB131_154:                            # %cond.false383
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_155:                            # %cond.end385
                                        #   in Loop: Header=BB131_146 Depth=2
.LBB131_156:                            # %cond.end387
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB131_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_146
.LBB131_158:                            # %for.end401
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB131_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_135
.LBB131_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB131_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB131_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB131_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB131_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_161
.LBB131_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_167
.LBB131_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB131_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB131_173
.LBB131_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_172
.LBB131_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB131_172:                            # %cond.end449
.LBB131_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB131_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_177
.LBB131_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB131_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB131_183
.LBB131_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_182
.LBB131_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_182:                            # %cond.end486
.LBB131_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB131_196
.LBB131_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB131_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_188
.LBB131_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB131_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB131_194
.LBB131_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_193
.LBB131_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_193:                            # %cond.end526
.LBB131_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_195:                            # %if.end532
	jmp	.LBB131_196
.LBB131_196:                            # %if.end533
	jmp	.LBB131_329
.LBB131_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB131_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB131_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB131_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_203
.LBB131_202:                            # %cond.false546
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_203:                            # %cond.end548
                                        #   in Loop: Header=BB131_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB131_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_209
.LBB131_205:                            # %cond.false553
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_208
.LBB131_207:                            # %cond.false558
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_208:                            # %cond.end560
                                        #   in Loop: Header=BB131_199 Depth=1
.LBB131_209:                            # %cond.end562
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB131_210:                            # %for.cond564
                                        #   Parent Loop BB131_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB131_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB131_214
.LBB131_213:                            # %cond.false572
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_214:                            # %cond.end574
                                        #   in Loop: Header=BB131_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB131_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB131_220
.LBB131_216:                            # %cond.false579
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB131_219
.LBB131_218:                            # %cond.false584
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_219:                            # %cond.end586
                                        #   in Loop: Header=BB131_210 Depth=2
.LBB131_220:                            # %cond.end588
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB131_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_210
.LBB131_222:                            # %for.end602
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB131_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_199
.LBB131_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB131_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB131_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB131_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB131_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_225
.LBB131_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_231
.LBB131_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB131_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB131_237
.LBB131_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_236
.LBB131_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB131_236:                            # %cond.end650
.LBB131_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB131_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_241
.LBB131_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB131_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB131_247
.LBB131_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_246
.LBB131_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_246:                            # %cond.end687
.LBB131_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB131_258
.LBB131_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_251
.LBB131_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB131_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB131_257
.LBB131_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB131_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_256
.LBB131_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB131_256:                            # %cond.end724
.LBB131_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_258:                            # %if.end730
	jmp	.LBB131_328
.LBB131_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB131_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB131_262
.LBB131_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB131_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB131_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB131_265
.LBB131_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB131_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB131_271
.LBB131_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB131_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB131_270
.LBB131_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB131_270:                            # %cond.end753
.LBB131_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB131_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB131_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_276
.LBB131_275:                            # %cond.false765
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_276:                            # %cond.end767
                                        #   in Loop: Header=BB131_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB131_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_282
.LBB131_278:                            # %cond.false772
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB131_281
.LBB131_280:                            # %cond.false777
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB131_281:                            # %cond.end779
                                        #   in Loop: Header=BB131_272 Depth=1
.LBB131_282:                            # %cond.end781
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB131_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_272
.LBB131_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_287
.LBB131_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB131_293
.LBB131_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_292
.LBB131_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_292:                            # %cond.end822
.LBB131_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB131_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB131_296
.LBB131_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB131_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB131_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB131_299
.LBB131_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB131_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB131_305
.LBB131_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB131_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB131_304
.LBB131_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB131_304:                            # %cond.end847
.LBB131_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB131_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB131_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_310
.LBB131_309:                            # %cond.false859
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_310:                            # %cond.end861
                                        #   in Loop: Header=BB131_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB131_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB131_316
.LBB131_312:                            # %cond.false866
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB131_315
.LBB131_314:                            # %cond.false871
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB131_315:                            # %cond.end873
                                        #   in Loop: Header=BB131_306 Depth=1
.LBB131_316:                            # %cond.end875
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB131_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_306
.LBB131_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_321
.LBB131_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB131_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB131_327
.LBB131_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB131_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB131_326
.LBB131_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB131_326:                            # %cond.end916
.LBB131_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_328:                            # %if.end922
	jmp	.LBB131_329
.LBB131_329:                            # %if.end923
	jmp	.LBB131_330
.LBB131_330:                            # %if.end924
	jmp	.LBB131_331
.LBB131_331:                            # %if.end925
	jmp	.LBB131_332
.LBB131_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2002706146, -108(%rbp) # imm = 0x775EDEE2
	jne	.LBB131_334
.LBB131_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_333
.Lfunc_end131:
	.size	Get_Reference_Pixel.121, .Lfunc_end131-Get_Reference_Pixel.121
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.122   # -- Begin function Error_Concealment.122
	.p2align	4, 0x90
	.type	Error_Concealment.122,@function
Error_Concealment.122:                  # @Error_Concealment.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$740089388, -16(%rbp)   # imm = 0x2C1CDE2C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	$0, -4(%rbp)
.LBB132_3:                              # %for.cond2
                                        #   Parent Loop BB132_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB132_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB132_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB132_6:                              # %if.end
                                        #   in Loop: Header=BB132_3 Depth=2
	jmp	.LBB132_7
.LBB132_7:                              # %for.inc
                                        #   in Loop: Header=BB132_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_3
.LBB132_8:                              # %for.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_9
.LBB132_9:                              # %for.inc7
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_1
.LBB132_10:                             # %for.end9
	cmpl	$740089388, -16(%rbp)   # imm = 0x2C1CDE2C
	jne	.LBB132_12
.LBB132_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_11
.Lfunc_end132:
	.size	Error_Concealment.122, .Lfunc_end132-Error_Concealment.122
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.123
.LCPI133_0:
	.quad	4636737291354636288     # double 100
.LCPI133_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.123
	.p2align	4, 0x90
	.type	Build_Status_Map.123,@function
Build_Status_Map.123:                   # @Build_Status_Map.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$516304906, -40(%rbp)   # imm = 0x1EC6300A
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB133_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	$0, -12(%rbp)
.LBB133_3:                              # %for.cond2
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB133_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB133_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB133_13
.LBB133_6:                              # %if.then
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI133_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB133_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB133_8:                              # %if.end
                                        #   in Loop: Header=BB133_3 Depth=2
	callq	rand
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI133_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB133_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB133_10:                             # %if.end20
                                        #   in Loop: Header=BB133_3 Depth=2
	callq	rand
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI133_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB133_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	$1, -4(%rbp)
.LBB133_12:                             # %if.end29
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB133_13:                             # %if.end30
                                        #   in Loop: Header=BB133_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB133_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB133_18
.LBB133_15:                             # %if.else
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB133_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB133_17:                             # %if.end49
                                        #   in Loop: Header=BB133_3 Depth=2
	jmp	.LBB133_18
.LBB133_18:                             # %if.end50
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_3
.LBB133_20:                             # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_21
.LBB133_21:                             # %for.inc53
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_1
.LBB133_22:                             # %for.end55
	cmpl	$516304906, -40(%rbp)   # imm = 0x1EC6300A
	jne	.LBB133_24
.LBB133_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_23
.Lfunc_end133:
	.size	Build_Status_Map.123, .Lfunc_end133-Build_Status_Map.123
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.124 # -- Begin function Get_Reference_Pixel.124
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.124,@function
Get_Reference_Pixel.124:                # @Get_Reference_Pixel.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1346958904, -100(%rbp) # imm = 0x5048F638
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB134_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB134_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB134_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB134_5
.LBB134_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB134_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB134_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB134_11
.LBB134_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB134_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB134_10
.LBB134_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB134_10:                             # %cond.end14
.LBB134_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB134_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB134_14
.LBB134_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB134_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB134_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB134_20
.LBB134_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB134_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB134_19
.LBB134_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB134_19:                             # %cond.end29
.LBB134_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_332
.LBB134_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB134_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB134_25
.LBB134_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB134_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB134_31
.LBB134_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB134_30
.LBB134_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB134_30:                             # %cond.end52
.LBB134_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB134_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB134_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_36
.LBB134_35:                             # %cond.false61
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_36:                             # %cond.end63
                                        #   in Loop: Header=BB134_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB134_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_42
.LBB134_38:                             # %cond.false68
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_41
.LBB134_40:                             # %cond.false73
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_41:                             # %cond.end75
                                        #   in Loop: Header=BB134_32 Depth=1
.LBB134_42:                             # %cond.end77
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB134_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_32
.LBB134_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_47
.LBB134_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB134_53
.LBB134_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_52
.LBB134_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_52:                             # %cond.end113
.LBB134_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB134_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB134_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB134_57
.LBB134_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB134_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB134_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB134_63
.LBB134_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB134_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB134_62
.LBB134_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB134_62:                             # %cond.end136
.LBB134_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB134_76
.LBB134_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB134_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB134_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB134_68
.LBB134_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB134_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB134_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB134_74
.LBB134_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB134_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB134_73
.LBB134_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB134_73:                             # %cond.end169
.LBB134_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_75:                             # %if.end
	jmp	.LBB134_76
.LBB134_76:                             # %if.end178
	jmp	.LBB134_331
.LBB134_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB134_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB134_81
.LBB134_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB134_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB134_87
.LBB134_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB134_86
.LBB134_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB134_86:                             # %cond.end197
.LBB134_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB134_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB134_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_92
.LBB134_91:                             # %cond.false209
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_92:                             # %cond.end211
                                        #   in Loop: Header=BB134_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB134_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_98
.LBB134_94:                             # %cond.false216
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_97
.LBB134_96:                             # %cond.false221
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_97:                             # %cond.end223
                                        #   in Loop: Header=BB134_88 Depth=1
.LBB134_98:                             # %cond.end225
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB134_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB134_88
.LBB134_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_103
.LBB134_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB134_109
.LBB134_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_108
.LBB134_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_108:                            # %cond.end266
.LBB134_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB134_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB134_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB134_113
.LBB134_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB134_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB134_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB134_119
.LBB134_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB134_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB134_118
.LBB134_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB134_118:                            # %cond.end287
.LBB134_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB134_132
.LBB134_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB134_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB134_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB134_124
.LBB134_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB134_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB134_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB134_130
.LBB134_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB134_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB134_129
.LBB134_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB134_129:                            # %cond.end320
.LBB134_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_131:                            # %if.end331
	jmp	.LBB134_132
.LBB134_132:                            # %if.end332
	jmp	.LBB134_330
.LBB134_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB134_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB134_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB134_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_139
.LBB134_138:                            # %cond.false345
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_139:                            # %cond.end347
                                        #   in Loop: Header=BB134_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB134_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_145
.LBB134_141:                            # %cond.false352
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_144
.LBB134_143:                            # %cond.false357
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_144:                            # %cond.end359
                                        #   in Loop: Header=BB134_135 Depth=1
.LBB134_145:                            # %cond.end361
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB134_146:                            # %for.cond363
                                        #   Parent Loop BB134_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB134_150
.LBB134_149:                            # %cond.false371
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_150:                            # %cond.end373
                                        #   in Loop: Header=BB134_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB134_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_156
.LBB134_152:                            # %cond.false378
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB134_155
.LBB134_154:                            # %cond.false383
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_155:                            # %cond.end385
                                        #   in Loop: Header=BB134_146 Depth=2
.LBB134_156:                            # %cond.end387
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB134_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_146
.LBB134_158:                            # %for.end401
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB134_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB134_135
.LBB134_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB134_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB134_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB134_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB134_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB134_161
.LBB134_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_167
.LBB134_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB134_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB134_173
.LBB134_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_172
.LBB134_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB134_172:                            # %cond.end449
.LBB134_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB134_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_177
.LBB134_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB134_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB134_183
.LBB134_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_182
.LBB134_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_182:                            # %cond.end486
.LBB134_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB134_196
.LBB134_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB134_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_188
.LBB134_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB134_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB134_194
.LBB134_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_193
.LBB134_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_193:                            # %cond.end526
.LBB134_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_195:                            # %if.end532
	jmp	.LBB134_196
.LBB134_196:                            # %if.end533
	jmp	.LBB134_329
.LBB134_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB134_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB134_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_203
.LBB134_202:                            # %cond.false546
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_203:                            # %cond.end548
                                        #   in Loop: Header=BB134_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB134_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_209
.LBB134_205:                            # %cond.false553
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_208
.LBB134_207:                            # %cond.false558
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_208:                            # %cond.end560
                                        #   in Loop: Header=BB134_199 Depth=1
.LBB134_209:                            # %cond.end562
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB134_210:                            # %for.cond564
                                        #   Parent Loop BB134_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB134_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB134_214
.LBB134_213:                            # %cond.false572
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_214:                            # %cond.end574
                                        #   in Loop: Header=BB134_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB134_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB134_220
.LBB134_216:                            # %cond.false579
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB134_219
.LBB134_218:                            # %cond.false584
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_219:                            # %cond.end586
                                        #   in Loop: Header=BB134_210 Depth=2
.LBB134_220:                            # %cond.end588
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB134_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB134_210
.LBB134_222:                            # %for.end602
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB134_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_199
.LBB134_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB134_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB134_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB134_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB134_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_225
.LBB134_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_231
.LBB134_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB134_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB134_237
.LBB134_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_236
.LBB134_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB134_236:                            # %cond.end650
.LBB134_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB134_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_241
.LBB134_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB134_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB134_247
.LBB134_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_246
.LBB134_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_246:                            # %cond.end687
.LBB134_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB134_258
.LBB134_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_251
.LBB134_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB134_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB134_257
.LBB134_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB134_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_256
.LBB134_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB134_256:                            # %cond.end724
.LBB134_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_258:                            # %if.end730
	jmp	.LBB134_328
.LBB134_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB134_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB134_262
.LBB134_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB134_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB134_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB134_265
.LBB134_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB134_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB134_271
.LBB134_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB134_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB134_270
.LBB134_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB134_270:                            # %cond.end753
.LBB134_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB134_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB134_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_276
.LBB134_275:                            # %cond.false765
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_276:                            # %cond.end767
                                        #   in Loop: Header=BB134_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB134_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_282
.LBB134_278:                            # %cond.false772
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB134_281
.LBB134_280:                            # %cond.false777
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB134_281:                            # %cond.end779
                                        #   in Loop: Header=BB134_272 Depth=1
.LBB134_282:                            # %cond.end781
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB134_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_272
.LBB134_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_287
.LBB134_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB134_293
.LBB134_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_292
.LBB134_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_292:                            # %cond.end822
.LBB134_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB134_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB134_296
.LBB134_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB134_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB134_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB134_299
.LBB134_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB134_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB134_305
.LBB134_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB134_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB134_304
.LBB134_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB134_304:                            # %cond.end847
.LBB134_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB134_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB134_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_310
.LBB134_309:                            # %cond.false859
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_310:                            # %cond.end861
                                        #   in Loop: Header=BB134_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB134_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB134_316
.LBB134_312:                            # %cond.false866
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB134_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB134_315
.LBB134_314:                            # %cond.false871
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB134_315:                            # %cond.end873
                                        #   in Loop: Header=BB134_306 Depth=1
.LBB134_316:                            # %cond.end875
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB134_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB134_306
.LBB134_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_321
.LBB134_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB134_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB134_327
.LBB134_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB134_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB134_326
.LBB134_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB134_326:                            # %cond.end916
.LBB134_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_328:                            # %if.end922
	jmp	.LBB134_329
.LBB134_329:                            # %if.end923
	jmp	.LBB134_330
.LBB134_330:                            # %if.end924
	jmp	.LBB134_331
.LBB134_331:                            # %if.end925
	jmp	.LBB134_332
.LBB134_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1346958904, -100(%rbp) # imm = 0x5048F638
	jne	.LBB134_334
.LBB134_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_333
.Lfunc_end134:
	.size	Get_Reference_Pixel.124, .Lfunc_end134-Get_Reference_Pixel.124
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.125   # -- Begin function Error_Concealment.125
	.p2align	4, 0x90
	.type	Error_Concealment.125,@function
Error_Concealment.125:                  # @Error_Concealment.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$603229691, -12(%rbp)   # imm = 0x23F48DFB
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB135_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	$0, -8(%rbp)
.LBB135_3:                              # %for.cond2
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB135_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB135_6:                              # %if.end
                                        #   in Loop: Header=BB135_3 Depth=2
	jmp	.LBB135_7
.LBB135_7:                              # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_3
.LBB135_8:                              # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_9
.LBB135_9:                              # %for.inc7
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_1
.LBB135_10:                             # %for.end9
	cmpl	$603229691, -12(%rbp)   # imm = 0x23F48DFB
	jne	.LBB135_12
.LBB135_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_11
.Lfunc_end135:
	.size	Error_Concealment.125, .Lfunc_end135-Error_Concealment.125
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.126   # -- Begin function Error_Concealment.126
	.p2align	4, 0x90
	.type	Error_Concealment.126,@function
Error_Concealment.126:                  # @Error_Concealment.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$520486650, -12(%rbp)   # imm = 0x1F05FEFA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	$0, -4(%rbp)
.LBB136_3:                              # %for.cond2
                                        #   Parent Loop BB136_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB136_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB136_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB136_6:                              # %if.end
                                        #   in Loop: Header=BB136_3 Depth=2
	jmp	.LBB136_7
.LBB136_7:                              # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_3
.LBB136_8:                              # %for.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_9
.LBB136_9:                              # %for.inc7
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_1
.LBB136_10:                             # %for.end9
	cmpl	$520486650, -12(%rbp)   # imm = 0x1F05FEFA
	jne	.LBB136_12
.LBB136_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_11
.Lfunc_end136:
	.size	Error_Concealment.126, .Lfunc_end136-Error_Concealment.126
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.127 # -- Begin function Get_Reference_Pixel.127
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.127,@function
Get_Reference_Pixel.127:                # @Get_Reference_Pixel.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$907739196, -108(%rbp)  # imm = 0x361B003C
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB137_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB137_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB137_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB137_5
.LBB137_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB137_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB137_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB137_11
.LBB137_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB137_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB137_10
.LBB137_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB137_10:                             # %cond.end14
.LBB137_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB137_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB137_14
.LBB137_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB137_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB137_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB137_20
.LBB137_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB137_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB137_19
.LBB137_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB137_19:                             # %cond.end29
.LBB137_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_332
.LBB137_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB137_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB137_25
.LBB137_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB137_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB137_31
.LBB137_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB137_30
.LBB137_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB137_30:                             # %cond.end52
.LBB137_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_36
.LBB137_35:                             # %cond.false61
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_36:                             # %cond.end63
                                        #   in Loop: Header=BB137_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB137_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_42
.LBB137_38:                             # %cond.false68
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_41
.LBB137_40:                             # %cond.false73
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_41:                             # %cond.end75
                                        #   in Loop: Header=BB137_32 Depth=1
.LBB137_42:                             # %cond.end77
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_32
.LBB137_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_47
.LBB137_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB137_53
.LBB137_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_52
.LBB137_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_52:                             # %cond.end113
.LBB137_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB137_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB137_57
.LBB137_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB137_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB137_63
.LBB137_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB137_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB137_62
.LBB137_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB137_62:                             # %cond.end136
.LBB137_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_76
.LBB137_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB137_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB137_68
.LBB137_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB137_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB137_74
.LBB137_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB137_73
.LBB137_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB137_73:                             # %cond.end169
.LBB137_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_75:                             # %if.end
	jmp	.LBB137_76
.LBB137_76:                             # %if.end178
	jmp	.LBB137_331
.LBB137_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB137_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB137_81
.LBB137_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB137_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB137_87
.LBB137_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB137_86
.LBB137_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB137_86:                             # %cond.end197
.LBB137_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_92
.LBB137_91:                             # %cond.false209
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_92:                             # %cond.end211
                                        #   in Loop: Header=BB137_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB137_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_98
.LBB137_94:                             # %cond.false216
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_97
.LBB137_96:                             # %cond.false221
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_97:                             # %cond.end223
                                        #   in Loop: Header=BB137_88 Depth=1
.LBB137_98:                             # %cond.end225
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_88
.LBB137_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_103
.LBB137_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB137_109
.LBB137_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_108
.LBB137_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_108:                            # %cond.end266
.LBB137_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB137_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB137_113
.LBB137_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB137_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB137_119
.LBB137_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB137_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB137_118
.LBB137_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB137_118:                            # %cond.end287
.LBB137_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_132
.LBB137_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB137_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB137_124
.LBB137_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB137_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB137_130
.LBB137_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB137_129
.LBB137_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB137_129:                            # %cond.end320
.LBB137_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_131:                            # %if.end331
	jmp	.LBB137_132
.LBB137_132:                            # %if.end332
	jmp	.LBB137_330
.LBB137_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB137_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB137_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB137_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_139
.LBB137_138:                            # %cond.false345
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_139:                            # %cond.end347
                                        #   in Loop: Header=BB137_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB137_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_145
.LBB137_141:                            # %cond.false352
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_144
.LBB137_143:                            # %cond.false357
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_144:                            # %cond.end359
                                        #   in Loop: Header=BB137_135 Depth=1
.LBB137_145:                            # %cond.end361
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_146:                            # %for.cond363
                                        #   Parent Loop BB137_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB137_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB137_150
.LBB137_149:                            # %cond.false371
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_150:                            # %cond.end373
                                        #   in Loop: Header=BB137_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB137_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_156
.LBB137_152:                            # %cond.false378
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB137_155
.LBB137_154:                            # %cond.false383
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_155:                            # %cond.end385
                                        #   in Loop: Header=BB137_146 Depth=2
.LBB137_156:                            # %cond.end387
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_146
.LBB137_158:                            # %for.end401
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_135
.LBB137_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB137_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB137_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_161
.LBB137_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_167
.LBB137_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB137_173
.LBB137_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_172
.LBB137_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_172:                            # %cond.end449
.LBB137_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_177
.LBB137_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB137_183
.LBB137_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_182
.LBB137_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_182:                            # %cond.end486
.LBB137_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_196
.LBB137_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB137_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_188
.LBB137_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB137_194
.LBB137_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_193
.LBB137_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_193:                            # %cond.end526
.LBB137_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_195:                            # %if.end532
	jmp	.LBB137_196
.LBB137_196:                            # %if.end533
	jmp	.LBB137_329
.LBB137_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB137_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB137_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB137_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_203
.LBB137_202:                            # %cond.false546
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_203:                            # %cond.end548
                                        #   in Loop: Header=BB137_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB137_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_209
.LBB137_205:                            # %cond.false553
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_208
.LBB137_207:                            # %cond.false558
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_208:                            # %cond.end560
                                        #   in Loop: Header=BB137_199 Depth=1
.LBB137_209:                            # %cond.end562
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_210:                            # %for.cond564
                                        #   Parent Loop BB137_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB137_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB137_214
.LBB137_213:                            # %cond.false572
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_214:                            # %cond.end574
                                        #   in Loop: Header=BB137_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB137_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_220
.LBB137_216:                            # %cond.false579
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB137_219
.LBB137_218:                            # %cond.false584
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_219:                            # %cond.end586
                                        #   in Loop: Header=BB137_210 Depth=2
.LBB137_220:                            # %cond.end588
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_210
.LBB137_222:                            # %for.end602
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_199
.LBB137_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB137_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB137_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_225
.LBB137_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_231
.LBB137_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB137_237
.LBB137_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_236
.LBB137_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_236:                            # %cond.end650
.LBB137_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_241
.LBB137_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB137_247
.LBB137_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_246
.LBB137_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_246:                            # %cond.end687
.LBB137_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_258
.LBB137_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_251
.LBB137_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB137_257
.LBB137_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_256
.LBB137_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_256:                            # %cond.end724
.LBB137_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_258:                            # %if.end730
	jmp	.LBB137_328
.LBB137_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB137_262
.LBB137_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB137_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB137_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB137_265
.LBB137_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB137_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB137_271
.LBB137_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB137_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB137_270
.LBB137_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB137_270:                            # %cond.end753
.LBB137_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_276
.LBB137_275:                            # %cond.false765
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_276:                            # %cond.end767
                                        #   in Loop: Header=BB137_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB137_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_282
.LBB137_278:                            # %cond.false772
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_281
.LBB137_280:                            # %cond.false777
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_281:                            # %cond.end779
                                        #   in Loop: Header=BB137_272 Depth=1
.LBB137_282:                            # %cond.end781
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_272
.LBB137_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_287
.LBB137_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB137_293
.LBB137_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_292
.LBB137_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_292:                            # %cond.end822
.LBB137_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB137_296
.LBB137_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB137_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB137_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB137_299
.LBB137_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB137_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB137_305
.LBB137_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB137_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB137_304
.LBB137_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB137_304:                            # %cond.end847
.LBB137_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_310
.LBB137_309:                            # %cond.false859
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_310:                            # %cond.end861
                                        #   in Loop: Header=BB137_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB137_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_316
.LBB137_312:                            # %cond.false866
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_315
.LBB137_314:                            # %cond.false871
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_315:                            # %cond.end873
                                        #   in Loop: Header=BB137_306 Depth=1
.LBB137_316:                            # %cond.end875
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_306
.LBB137_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_321
.LBB137_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB137_327
.LBB137_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_326
.LBB137_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_326:                            # %cond.end916
.LBB137_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_328:                            # %if.end922
	jmp	.LBB137_329
.LBB137_329:                            # %if.end923
	jmp	.LBB137_330
.LBB137_330:                            # %if.end924
	jmp	.LBB137_331
.LBB137_331:                            # %if.end925
	jmp	.LBB137_332
.LBB137_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$907739196, -108(%rbp)  # imm = 0x361B003C
	jne	.LBB137_334
.LBB137_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_333
.Lfunc_end137:
	.size	Get_Reference_Pixel.127, .Lfunc_end137-Get_Reference_Pixel.127
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.128 # -- Begin function Get_Reference_Pixel.128
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.128,@function
Get_Reference_Pixel.128:                # @Get_Reference_Pixel.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2144641687, -104(%rbp) # imm = 0x7FD4A297
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB138_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB138_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB138_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB138_5
.LBB138_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB138_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB138_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB138_11
.LBB138_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB138_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB138_10
.LBB138_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB138_10:                             # %cond.end14
.LBB138_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB138_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB138_14
.LBB138_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB138_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB138_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB138_20
.LBB138_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB138_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB138_19
.LBB138_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB138_19:                             # %cond.end29
.LBB138_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_332
.LBB138_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB138_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB138_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB138_25
.LBB138_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB138_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB138_31
.LBB138_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB138_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB138_30
.LBB138_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB138_30:                             # %cond.end52
.LBB138_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB138_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB138_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_36
.LBB138_35:                             # %cond.false61
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_36:                             # %cond.end63
                                        #   in Loop: Header=BB138_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB138_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_42
.LBB138_38:                             # %cond.false68
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_41
.LBB138_40:                             # %cond.false73
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_41:                             # %cond.end75
                                        #   in Loop: Header=BB138_32 Depth=1
.LBB138_42:                             # %cond.end77
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_32
.LBB138_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_47
.LBB138_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB138_53
.LBB138_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_52
.LBB138_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_52:                             # %cond.end113
.LBB138_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB138_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB138_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB138_57
.LBB138_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB138_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB138_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB138_63
.LBB138_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB138_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB138_62
.LBB138_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB138_62:                             # %cond.end136
.LBB138_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB138_76
.LBB138_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB138_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB138_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB138_68
.LBB138_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB138_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB138_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB138_74
.LBB138_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB138_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB138_73
.LBB138_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB138_73:                             # %cond.end169
.LBB138_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB138_75:                             # %if.end
	jmp	.LBB138_76
.LBB138_76:                             # %if.end178
	jmp	.LBB138_331
.LBB138_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB138_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB138_81
.LBB138_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB138_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB138_87
.LBB138_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB138_86
.LBB138_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB138_86:                             # %cond.end197
.LBB138_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB138_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB138_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_92
.LBB138_91:                             # %cond.false209
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_92:                             # %cond.end211
                                        #   in Loop: Header=BB138_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB138_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_98
.LBB138_94:                             # %cond.false216
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_97
.LBB138_96:                             # %cond.false221
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_97:                             # %cond.end223
                                        #   in Loop: Header=BB138_88 Depth=1
.LBB138_98:                             # %cond.end225
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB138_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_88
.LBB138_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_103
.LBB138_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB138_109
.LBB138_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_108
.LBB138_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_108:                            # %cond.end266
.LBB138_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB138_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB138_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB138_113
.LBB138_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB138_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB138_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB138_119
.LBB138_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB138_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB138_118
.LBB138_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB138_118:                            # %cond.end287
.LBB138_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB138_132
.LBB138_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB138_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB138_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB138_124
.LBB138_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB138_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB138_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB138_130
.LBB138_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB138_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB138_129
.LBB138_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB138_129:                            # %cond.end320
.LBB138_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB138_131:                            # %if.end331
	jmp	.LBB138_132
.LBB138_132:                            # %if.end332
	jmp	.LBB138_330
.LBB138_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB138_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB138_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB138_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_139
.LBB138_138:                            # %cond.false345
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_139:                            # %cond.end347
                                        #   in Loop: Header=BB138_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB138_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_145
.LBB138_141:                            # %cond.false352
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_144
.LBB138_143:                            # %cond.false357
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_144:                            # %cond.end359
                                        #   in Loop: Header=BB138_135 Depth=1
.LBB138_145:                            # %cond.end361
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB138_146:                            # %for.cond363
                                        #   Parent Loop BB138_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB138_150
.LBB138_149:                            # %cond.false371
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_150:                            # %cond.end373
                                        #   in Loop: Header=BB138_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB138_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_156
.LBB138_152:                            # %cond.false378
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB138_155
.LBB138_154:                            # %cond.false383
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_155:                            # %cond.end385
                                        #   in Loop: Header=BB138_146 Depth=2
.LBB138_156:                            # %cond.end387
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB138_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_146
.LBB138_158:                            # %for.end401
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB138_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_135
.LBB138_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB138_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB138_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB138_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB138_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_161
.LBB138_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_167
.LBB138_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB138_173
.LBB138_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_172
.LBB138_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_172:                            # %cond.end449
.LBB138_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB138_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_177
.LBB138_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB138_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB138_183
.LBB138_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_182
.LBB138_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_182:                            # %cond.end486
.LBB138_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB138_196
.LBB138_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB138_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_188
.LBB138_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB138_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB138_194
.LBB138_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_193
.LBB138_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_193:                            # %cond.end526
.LBB138_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB138_195:                            # %if.end532
	jmp	.LBB138_196
.LBB138_196:                            # %if.end533
	jmp	.LBB138_329
.LBB138_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB138_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB138_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_203
.LBB138_202:                            # %cond.false546
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_203:                            # %cond.end548
                                        #   in Loop: Header=BB138_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB138_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_209
.LBB138_205:                            # %cond.false553
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_208
.LBB138_207:                            # %cond.false558
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_208:                            # %cond.end560
                                        #   in Loop: Header=BB138_199 Depth=1
.LBB138_209:                            # %cond.end562
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB138_210:                            # %for.cond564
                                        #   Parent Loop BB138_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB138_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB138_214
.LBB138_213:                            # %cond.false572
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_214:                            # %cond.end574
                                        #   in Loop: Header=BB138_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB138_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_220
.LBB138_216:                            # %cond.false579
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB138_219
.LBB138_218:                            # %cond.false584
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_219:                            # %cond.end586
                                        #   in Loop: Header=BB138_210 Depth=2
.LBB138_220:                            # %cond.end588
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB138_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_210
.LBB138_222:                            # %for.end602
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB138_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_199
.LBB138_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB138_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB138_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB138_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB138_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_225
.LBB138_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_231
.LBB138_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB138_237
.LBB138_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_236
.LBB138_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_236:                            # %cond.end650
.LBB138_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB138_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_241
.LBB138_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB138_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB138_247
.LBB138_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_246
.LBB138_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_246:                            # %cond.end687
.LBB138_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB138_258
.LBB138_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_251
.LBB138_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB138_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB138_257
.LBB138_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB138_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_256
.LBB138_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB138_256:                            # %cond.end724
.LBB138_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB138_258:                            # %if.end730
	jmp	.LBB138_328
.LBB138_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB138_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB138_262
.LBB138_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB138_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB138_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB138_265
.LBB138_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB138_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB138_271
.LBB138_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB138_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB138_270
.LBB138_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB138_270:                            # %cond.end753
.LBB138_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB138_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB138_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_276
.LBB138_275:                            # %cond.false765
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_276:                            # %cond.end767
                                        #   in Loop: Header=BB138_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB138_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_282
.LBB138_278:                            # %cond.false772
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB138_281
.LBB138_280:                            # %cond.false777
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB138_281:                            # %cond.end779
                                        #   in Loop: Header=BB138_272 Depth=1
.LBB138_282:                            # %cond.end781
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB138_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_272
.LBB138_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_287
.LBB138_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB138_293
.LBB138_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_292
.LBB138_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_292:                            # %cond.end822
.LBB138_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB138_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB138_296
.LBB138_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB138_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB138_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB138_299
.LBB138_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB138_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB138_305
.LBB138_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB138_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB138_304
.LBB138_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB138_304:                            # %cond.end847
.LBB138_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB138_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB138_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_310
.LBB138_309:                            # %cond.false859
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_310:                            # %cond.end861
                                        #   in Loop: Header=BB138_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB138_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB138_316
.LBB138_312:                            # %cond.false866
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB138_315
.LBB138_314:                            # %cond.false871
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB138_315:                            # %cond.end873
                                        #   in Loop: Header=BB138_306 Depth=1
.LBB138_316:                            # %cond.end875
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB138_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_306
.LBB138_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_321
.LBB138_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB138_327
.LBB138_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_326
.LBB138_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB138_326:                            # %cond.end916
.LBB138_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB138_328:                            # %if.end922
	jmp	.LBB138_329
.LBB138_329:                            # %if.end923
	jmp	.LBB138_330
.LBB138_330:                            # %if.end924
	jmp	.LBB138_331
.LBB138_331:                            # %if.end925
	jmp	.LBB138_332
.LBB138_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2144641687, -104(%rbp) # imm = 0x7FD4A297
	jne	.LBB138_334
.LBB138_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_333
.Lfunc_end138:
	.size	Get_Reference_Pixel.128, .Lfunc_end138-Get_Reference_Pixel.128
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.129   # -- Begin function Error_Concealment.129
	.p2align	4, 0x90
	.type	Error_Concealment.129,@function
Error_Concealment.129:                  # @Error_Concealment.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2110372157, -16(%rbp)  # imm = 0x7DC9B93D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB139_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	$0, -4(%rbp)
.LBB139_3:                              # %for.cond2
                                        #   Parent Loop BB139_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB139_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB139_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB139_6:                              # %if.end
                                        #   in Loop: Header=BB139_3 Depth=2
	jmp	.LBB139_7
.LBB139_7:                              # %for.inc
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_3
.LBB139_8:                              # %for.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_9
.LBB139_9:                              # %for.inc7
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_1
.LBB139_10:                             # %for.end9
	cmpl	$2110372157, -16(%rbp)  # imm = 0x7DC9B93D
	jne	.LBB139_12
.LBB139_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_11
.Lfunc_end139:
	.size	Error_Concealment.129, .Lfunc_end139-Error_Concealment.129
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.130 # -- Begin function Get_Reference_Pixel.130
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.130,@function
Get_Reference_Pixel.130:                # @Get_Reference_Pixel.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$381991443, -108(%rbp)  # imm = 0x16C4BA13
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB140_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB140_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB140_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB140_5
.LBB140_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB140_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB140_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB140_11
.LBB140_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB140_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB140_10
.LBB140_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB140_10:                             # %cond.end14
.LBB140_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB140_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB140_14
.LBB140_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB140_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB140_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB140_20
.LBB140_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB140_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB140_19
.LBB140_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB140_19:                             # %cond.end29
.LBB140_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_332
.LBB140_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB140_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB140_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB140_25
.LBB140_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB140_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB140_31
.LBB140_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB140_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB140_30
.LBB140_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB140_30:                             # %cond.end52
.LBB140_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB140_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB140_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_36
.LBB140_35:                             # %cond.false61
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_36:                             # %cond.end63
                                        #   in Loop: Header=BB140_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB140_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_42
.LBB140_38:                             # %cond.false68
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_41
.LBB140_40:                             # %cond.false73
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_41:                             # %cond.end75
                                        #   in Loop: Header=BB140_32 Depth=1
.LBB140_42:                             # %cond.end77
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB140_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_32
.LBB140_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_47
.LBB140_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB140_53
.LBB140_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_52
.LBB140_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_52:                             # %cond.end113
.LBB140_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB140_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB140_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB140_57
.LBB140_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB140_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB140_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB140_63
.LBB140_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB140_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB140_62
.LBB140_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB140_62:                             # %cond.end136
.LBB140_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB140_76
.LBB140_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB140_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB140_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB140_68
.LBB140_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB140_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB140_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB140_74
.LBB140_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB140_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB140_73
.LBB140_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB140_73:                             # %cond.end169
.LBB140_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_75:                             # %if.end
	jmp	.LBB140_76
.LBB140_76:                             # %if.end178
	jmp	.LBB140_331
.LBB140_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB140_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB140_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB140_81
.LBB140_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB140_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB140_87
.LBB140_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB140_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB140_86
.LBB140_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB140_86:                             # %cond.end197
.LBB140_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB140_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB140_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_92
.LBB140_91:                             # %cond.false209
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_92:                             # %cond.end211
                                        #   in Loop: Header=BB140_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB140_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_98
.LBB140_94:                             # %cond.false216
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_97
.LBB140_96:                             # %cond.false221
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_97:                             # %cond.end223
                                        #   in Loop: Header=BB140_88 Depth=1
.LBB140_98:                             # %cond.end225
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB140_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_88
.LBB140_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_103
.LBB140_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB140_109
.LBB140_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_108
.LBB140_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_108:                            # %cond.end266
.LBB140_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB140_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB140_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB140_113
.LBB140_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB140_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB140_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB140_119
.LBB140_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB140_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB140_118
.LBB140_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB140_118:                            # %cond.end287
.LBB140_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB140_132
.LBB140_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB140_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB140_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB140_124
.LBB140_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB140_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB140_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB140_130
.LBB140_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB140_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB140_129
.LBB140_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB140_129:                            # %cond.end320
.LBB140_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_131:                            # %if.end331
	jmp	.LBB140_132
.LBB140_132:                            # %if.end332
	jmp	.LBB140_330
.LBB140_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB140_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB140_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB140_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_139
.LBB140_138:                            # %cond.false345
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_139:                            # %cond.end347
                                        #   in Loop: Header=BB140_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB140_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_145
.LBB140_141:                            # %cond.false352
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_144
.LBB140_143:                            # %cond.false357
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_144:                            # %cond.end359
                                        #   in Loop: Header=BB140_135 Depth=1
.LBB140_145:                            # %cond.end361
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB140_146:                            # %for.cond363
                                        #   Parent Loop BB140_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB140_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB140_150
.LBB140_149:                            # %cond.false371
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_150:                            # %cond.end373
                                        #   in Loop: Header=BB140_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB140_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB140_156
.LBB140_152:                            # %cond.false378
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB140_155
.LBB140_154:                            # %cond.false383
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_155:                            # %cond.end385
                                        #   in Loop: Header=BB140_146 Depth=2
.LBB140_156:                            # %cond.end387
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB140_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_146
.LBB140_158:                            # %for.end401
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB140_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_135
.LBB140_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB140_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB140_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB140_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB140_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_161
.LBB140_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_167
.LBB140_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB140_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB140_173
.LBB140_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_172
.LBB140_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB140_172:                            # %cond.end449
.LBB140_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB140_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_177
.LBB140_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB140_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB140_183
.LBB140_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_182
.LBB140_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_182:                            # %cond.end486
.LBB140_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB140_196
.LBB140_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB140_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_188
.LBB140_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB140_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB140_194
.LBB140_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_193
.LBB140_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_193:                            # %cond.end526
.LBB140_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_195:                            # %if.end532
	jmp	.LBB140_196
.LBB140_196:                            # %if.end533
	jmp	.LBB140_329
.LBB140_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB140_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB140_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB140_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_203
.LBB140_202:                            # %cond.false546
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_203:                            # %cond.end548
                                        #   in Loop: Header=BB140_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB140_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_209
.LBB140_205:                            # %cond.false553
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_208
.LBB140_207:                            # %cond.false558
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_208:                            # %cond.end560
                                        #   in Loop: Header=BB140_199 Depth=1
.LBB140_209:                            # %cond.end562
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB140_210:                            # %for.cond564
                                        #   Parent Loop BB140_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB140_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB140_214
.LBB140_213:                            # %cond.false572
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_214:                            # %cond.end574
                                        #   in Loop: Header=BB140_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB140_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB140_220
.LBB140_216:                            # %cond.false579
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB140_219
.LBB140_218:                            # %cond.false584
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_219:                            # %cond.end586
                                        #   in Loop: Header=BB140_210 Depth=2
.LBB140_220:                            # %cond.end588
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB140_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_210
.LBB140_222:                            # %for.end602
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB140_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_199
.LBB140_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB140_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB140_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB140_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB140_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_225
.LBB140_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_231
.LBB140_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB140_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB140_237
.LBB140_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_236
.LBB140_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB140_236:                            # %cond.end650
.LBB140_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB140_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_241
.LBB140_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB140_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB140_247
.LBB140_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_246
.LBB140_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_246:                            # %cond.end687
.LBB140_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB140_258
.LBB140_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_251
.LBB140_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB140_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB140_257
.LBB140_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB140_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_256
.LBB140_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB140_256:                            # %cond.end724
.LBB140_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_258:                            # %if.end730
	jmp	.LBB140_328
.LBB140_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB140_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB140_262
.LBB140_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB140_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB140_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB140_265
.LBB140_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB140_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB140_271
.LBB140_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB140_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB140_270
.LBB140_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB140_270:                            # %cond.end753
.LBB140_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB140_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB140_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_276
.LBB140_275:                            # %cond.false765
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_276:                            # %cond.end767
                                        #   in Loop: Header=BB140_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB140_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_282
.LBB140_278:                            # %cond.false772
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB140_281
.LBB140_280:                            # %cond.false777
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB140_281:                            # %cond.end779
                                        #   in Loop: Header=BB140_272 Depth=1
.LBB140_282:                            # %cond.end781
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB140_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB140_272
.LBB140_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_287
.LBB140_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB140_293
.LBB140_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_292
.LBB140_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_292:                            # %cond.end822
.LBB140_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB140_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB140_296
.LBB140_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB140_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB140_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB140_299
.LBB140_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB140_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB140_305
.LBB140_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB140_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB140_304
.LBB140_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB140_304:                            # %cond.end847
.LBB140_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB140_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB140_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_310
.LBB140_309:                            # %cond.false859
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_310:                            # %cond.end861
                                        #   in Loop: Header=BB140_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB140_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB140_316
.LBB140_312:                            # %cond.false866
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB140_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB140_315
.LBB140_314:                            # %cond.false871
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB140_315:                            # %cond.end873
                                        #   in Loop: Header=BB140_306 Depth=1
.LBB140_316:                            # %cond.end875
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB140_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_306
.LBB140_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_321
.LBB140_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB140_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB140_327
.LBB140_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB140_326
.LBB140_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB140_326:                            # %cond.end916
.LBB140_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_328:                            # %if.end922
	jmp	.LBB140_329
.LBB140_329:                            # %if.end923
	jmp	.LBB140_330
.LBB140_330:                            # %if.end924
	jmp	.LBB140_331
.LBB140_331:                            # %if.end925
	jmp	.LBB140_332
.LBB140_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$381991443, -108(%rbp)  # imm = 0x16C4BA13
	jne	.LBB140_334
.LBB140_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_333
.Lfunc_end140:
	.size	Get_Reference_Pixel.130, .Lfunc_end140-Get_Reference_Pixel.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
